; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30147.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_0DG@EMAIBLPA@HARDWARE?2RESOURCEMAP?2System?5Res@ ; `string'
PUBLIC	??_C@_0M@GMLMCGNC@?4Translated@			; `string'
PUBLIC	??_C@_0BB@OKOALOPC@NtShutdownSystem@		; `string'
PUBLIC	??_C@_09FLKFJBLM@ntdll?4dll@			; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B ; `<lambda_52c86be46df0f1ecdea0a36a120070fd>::operator()'::`2'::crypted
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?pHookFunc@@3P6A_J_K@ZEA			; pHookFunc
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B ; `<lambda_6cfd3e9ca2701072e25ae67c739ed459>::operator()'::`2'::crypted
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B ; `<lambda_07c8de3dc6ef07446993d2c862434f57>::operator()'::`2'::crypted
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B ; `<lambda_e5ada57596ca662cca6407ad0e4058a5>::operator()'::`2'::crypted
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B ; `<lambda_d0c44f387d109c89364b20584f70023c>::operator()'::`2'::crypted
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?rdstate@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_RegCloseKey:PROC
EXTRN	__imp___std_terminate:PROC
EXTRN	__imp_GetCurrentProcessId:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	__imp_RegQueryValueExA:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	atexit:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp___std_exception_copy:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPEBD@Z:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_RegOpenKeyExA:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp__Mbrtowc:PROC
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__imp___std_exception_destroy:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp___CxxFrameHandler4:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
?pHookFunc@@3P6A_J_K@ZEA DQ 01H DUP (?)			; pHookFunc
_BSS	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B DB 07cH ; `<lambda_d0c44f387d109c89364b20584f70023c>::operator()'::`2'::crypted
	DB	04bH
	DB	053H
	DB	04dH
	DB	059H
	DB	04fH
	DB	01eH
	DB	051H
	DB	02fH
	DB	035H
	DB	062H
	DB	02fH
	DB	02bH
	DB	024H
	DB	022H
	DB	022H
	DB	02cH
	DB	067H
	DB	040H
	DB	04bH
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B DB 071H ; `<lambda_e5ada57596ca662cca6407ad0e4058a5>::operator()'::`2'::crypted
	DB	057H
	DB	04cH
	DB	05aH
	DB	050H
	DB	054H
	DB	05aH
	DB	01fH
	DB	030H
	DB	033H
	DB	02dH
	DB	020H
	DB	021H
	DB	036H
	DB	035H
	DB	069H
	DB	042H
	DB	049H
CONST	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B DB 076H ; `<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>::operator()'::`2'::crypted
	DB	04dH
	DB	06fH
	DB	048H
	DB	059H
	DB	04fH
	DB	079H
	DB	05aH
	DB	034H
	DB	06H
	DB	037H
	DB	02aH
	DB	016H
	DB	020H
	DB	035H
	DB	028H
	DB	03dH
	DB	03bH
	DB	029H
	DB	02eH
	DB	03fH
	DB	04dH
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B DB 071H ; `<lambda_07c8de3dc6ef07446993d2c862434f57>::operator()'::`2'::crypted
	DB	057H
	DB	04cH
	DB	05aH
	DB	050H
	DB	054H
	DB	05aH
	DB	01fH
	DB	024H
	DB	020H
	DB	036H
	DB	022H
	DB	06aH
	DB	04fH
	DB	046H
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B DB 06bH ; `<lambda_6cfd3e9ca2701072e25ae67c739ed459>::operator()'::`2'::crypted
	DB	05cH
	DB	059H
	DB	04eH
	DB	04eH
	DB	054H
	DB	04aH
	DB	046H
	DB	060H
	DB	022H
	DB	02aH
	DB	026H
	DB	027H
	DB	02eH
	DB	066H
	DB	021H
	DB	029H
	DB	020H
	DB	026H
	DB	03eH
	DB	03eH
	DB	028H
	DB	060H
	DB	045H
	DB	050H
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B DB 051H ; `<lambda_4ad0c4e7a179063298744f2a64fa5ebb>::operator()'::`2'::crypted
	DB	057H
	DB	053H
	DB	04fH
	DB	01cH
	DB	04dH
	DB	05fH
	DB	04cH
	DB	033H
	DB	024H
	DB	026H
	DB	079H
	DB	064H
	DB	045H
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B DB 04dH ; `<lambda_57bce39a08961ea86b276630ec11ec78>::operator()'::`2'::crypted
	DB	04aH
	DB	05fH
	DB	049H
	DB	0fH
	DB	0fH
	DB	010H
	DB	05bH
	DB	02cH
	DB	02dH
	DB	042H
CONST	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
?raw_driver@vdm@@3QBEB DB 04dH				; vdm::raw_driver
	DB	05aH
	DB	090H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0b8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0d8H
	DB	00H
	DB	00H
	DB	00H
	DB	0eH
	DB	01fH
	DB	0baH
	DB	0eH
	DB	00H
	DB	0b4H
	DB	09H
	DB	0cdH
	DB	021H
	DB	0b8H
	DB	01H
	DB	04cH
	DB	0cdH
	DB	021H
	DB	054H
	DB	068H
	DB	069H
	DB	073H
	DB	020H
	DB	070H
	DB	072H
	DB	06fH
	DB	067H
	DB	072H
	DB	061H
	DB	06dH
	DB	020H
	DB	063H
	DB	061H
	DB	06eH
	DB	06eH
	DB	06fH
	DB	074H
	DB	020H
	DB	062H
	DB	065H
	DB	020H
	DB	072H
	DB	075H
	DB	06eH
	DB	020H
	DB	069H
	DB	06eH
	DB	020H
	DB	044H
	DB	04fH
	DB	053H
	DB	020H
	DB	06dH
	DB	06fH
	DB	064H
	DB	065H
	DB	02eH
	DB	0dH
	DB	0dH
	DB	0aH
	DB	024H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	069H
	DB	0f4H
	DB	0bcH
	DB	0cdH
	DB	02dH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	02dH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	02dH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	02dH
	DB	095H
	DB	0d3H
	DB	09eH
	DB	030H
	DB	095H
	DB	0d2H
	DB	09eH
	DB	05bH
	DB	08H
	DB	0a9H
	DB	09eH
	DB	028H
	DB	095H
	DB	0d2H
	DB	09eH
	DB	05bH
	DB	08H
	DB	0afH
	DB	09eH
	DB	02cH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	0b2H
	DB	09dH
	DB	0afH
	DB	09eH
	DB	02cH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	05bH
	DB	08H
	DB	0bfH
	DB	09eH
	DB	02eH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	0eeH
	DB	09aH
	DB	08cH
	DB	09eH
	DB	02cH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	05bH
	DB	08H
	DB	0aaH
	DB	09eH
	DB	02cH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	052H
	DB	069H
	DB	063H
	DB	068H
	DB	02dH
	DB	095H
	DB	0d2H
	DB	09eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	045H
	DB	00H
	DB	00H
	DB	064H
	DB	086H
	DB	06H
	DB	00H
	DB	0cbH
	DB	0f9H
	DB	0d4H
	DB	051H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	00H
	DB	022H
	DB	00H
	DB	0bH
	DB	02H
	DB	08H
	DB	00H
	DB	00H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	02H
	DB	00H
	DB	05H
	DB	00H
	DB	02H
	DB	00H
	DB	05H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	095H
	DB	0b0H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06cH
	DB	070H
	DB	00H
	DB	00H
	DB	03cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
	DB	0e8H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	00H
	DB	00H
	DB	0dcH
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	04aH
	DB	00H
	DB	00H
	DB	050H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	040H
	DB	00H
	DB	00H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02eH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	DB	00H
	DB	00H
	DB	0c8H
	DB	02dH
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	02eH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	068H
	DB	02eH
	DB	072H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	DB	00H
	DB	010H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	048H
	DB	02eH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	DB	00H
	DB	00H
	DB	058H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	0c8H
	DB	02eH
	DB	070H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	DB	00H
	DB	0dcH
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	048H
	DB	049H
	DB	04eH
	DB	049H
	DB	054H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	012H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	0e2H
	DB	02eH
	DB	072H
	DB	073H
	DB	072H
	DB	063H
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	057H
	DB	050H
	DB	053H
	DB	051H
	DB	052H
	DB	066H
	DB	08bH
	DB	05H
	DB	021H
	DB	041H
	DB	00H
	DB	00H
	DB	066H
	DB	08bH
	DB	01dH
	DB	01cH
	DB	041H
	DB	00H
	DB	00H
	DB	066H
	DB	08bH
	DB	0dH
	DB	09H
	DB	041H
	DB	00H
	DB	00H
	DB	066H
	DB	08bH
	DB	015H
	DB	0feH
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	08bH
	DB	035H
	DB	0f9H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	08bH
	DB	03dH
	DB	0fcH
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	0efH
	DB	0e6H
	DB	0ebH
	DB	0e6H
	DB	0ebH
	DB	066H
	DB	089H
	DB	05H
	DB	0f1H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	01dH
	DB	0ecH
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	0dH
	DB	0d9H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	015H
	DB	0ceH
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	035H
	DB	0c9H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	03dH
	DB	0ccH
	DB	040H
	DB	00H
	DB	00H
	DB	05aH
	DB	059H
	DB	05bH
	DB	058H
	DB	05fH
	DB	05eH
	DB	0c3H
	DB	056H
	DB	057H
	DB	050H
	DB	053H
	DB	051H
	DB	052H
	DB	08bH
	DB	05H
	DB	0c9H
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	01dH
	DB	0bbH
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	0dH
	DB	0c5H
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	015H
	DB	0b3H
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	035H
	DB	09dH
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	03dH
	DB	083H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	0efH
	DB	0e6H
	DB	0ebH
	DB	0e6H
	DB	0ebH
	DB	089H
	DB	05H
	DB	09fH
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	01dH
	DB	091H
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	0dH
	DB	09bH
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	015H
	DB	089H
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	035H
	DB	073H
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	03dH
	DB	059H
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	05H
	DB	04fH
	DB	040H
	DB	00H
	DB	00H
	DB	05aH
	DB	059H
	DB	05bH
	DB	058H
	DB	05fH
	DB	05eH
	DB	0c3H
	DB	050H
	DB	053H
	DB	051H
	DB	052H
	DB	08bH
	DB	0dH
	DB	046H
	DB	040H
	DB	00H
	DB	00H
	DB	0fH
	DB	032H
	DB	089H
	DB	05H
	DB	042H
	DB	040H
	DB	00H
	DB	00H
	DB	089H
	DB	015H
	DB	060H
	DB	040H
	DB	00H
	DB	00H
	DB	05aH
	DB	059H
	DB	05bH
	DB	058H
	DB	0c3H
	DB	050H
	DB	053H
	DB	051H
	DB	052H
	DB	08bH
	DB	0dH
	DB	029H
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	05H
	DB	027H
	DB	040H
	DB	00H
	DB	00H
	DB	08bH
	DB	015H
	DB	045H
	DB	040H
	DB	00H
	DB	00H
	DB	0fH
	DB	030H
	DB	05aH
	DB	059H
	DB	05bH
	DB	058H
	DB	0c3H
	DB	055H
	DB	052H
	DB	050H
	DB	053H
	DB	056H
	DB	057H
	DB	051H
	DB	048H
	DB	08bH
	DB	0f1H
	DB	048H
	DB	0b8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06H
	DB	048H
	DB	083H
	DB	0e0H
	DB	0ffH
	DB	048H
	DB	0bbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05eH
	DB	04H
	DB	048H
	DB	083H
	DB	0e3H
	DB	0ffH
	DB	048H
	DB	0b9H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04eH
	DB	08H
	DB	048H
	DB	083H
	DB	0e1H
	DB	0ffH
	DB	048H
	DB	0baH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	056H
	DB	0cH
	DB	048H
	DB	083H
	DB	0e2H
	DB	0ffH
	DB	048H
	DB	0bfH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	07eH
	DB	014H
	DB	048H
	DB	083H
	DB	0e7H
	DB	0ffH
	DB	048H
	DB	0bdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06eH
	DB	018H
	DB	048H
	DB	083H
	DB	0e5H
	DB	0ffH
	DB	048H
	DB	08bH
	DB	076H
	DB	010H
	DB	048H
	DB	083H
	DB	0e6H
	DB	0ffH
	DB	0eeH
	DB	0e6H
	DB	0ebH
	DB	0e6H
	DB	0ebH
	DB	0e6H
	DB	0ebH
	DB	0e6H
	DB	0ebH
	DB	089H
	DB	035H
	DB	062H
	DB	03fH
	DB	00H
	DB	00H
	DB	05eH
	DB	050H
	DB	09cH
	DB	058H
	DB	048H
	DB	083H
	DB	0e0H
	DB	0ffH
	DB	088H
	DB	046H
	DB	01cH
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	01dH
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	01eH
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	01fH
	DB	058H
	DB	088H
	DB	06H
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	01H
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	02H
	DB	048H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	088H
	DB	046H
	DB	03H
	DB	088H
	DB	05eH
	DB	04H
	DB	048H
	DB	0c1H
	DB	0ebH
	DB	08H
	DB	088H
	DB	05eH
	DB	05H
	DB	048H
	DB	0c1H
	DB	0ebH
	DB	08H
	DB	088H
	DB	05eH
	DB	06H
	DB	048H
	DB	0c1H
	DB	0ebH
	DB	08H
	DB	088H
	DB	05eH
	DB	07H
	DB	088H
	DB	04eH
	DB	08H
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	09H
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	0aH
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	0bH
	DB	088H
	DB	056H
	DB	0cH
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	0dH
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	0eH
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	0fH
	DB	08bH
	DB	015H
	DB	0dcH
	DB	03eH
	DB	00H
	DB	00H
	DB	088H
	DB	056H
	DB	010H
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	011H
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	012H
	DB	048H
	DB	0c1H
	DB	0eaH
	DB	08H
	DB	088H
	DB	056H
	DB	013H
	DB	08bH
	DB	0cfH
	DB	088H
	DB	04eH
	DB	014H
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	015H
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	016H
	DB	048H
	DB	0c1H
	DB	0e9H
	DB	08H
	DB	088H
	DB	04eH
	DB	017H
	DB	05fH
	DB	05eH
	DB	05bH
	DB	058H
	DB	05aH
	DB	05dH
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	048H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	08bH
	DB	059H
	DB	018H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	058H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	060H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	068H
	DB	048H
	DB	08bH
	DB	0e9H
	DB	04cH
	DB	089H
	DB	064H
	DB	024H
	DB	040H
	DB	044H
	DB	08bH
	DB	062H
	DB	010H
	DB	048H
	DB	08dH
	DB	0dH
	DB	021H
	DB	025H
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	038H
	DB	044H
	DB	08bH
	DB	06aH
	DB	08H
	DB	041H
	DB	08bH
	DB	0f8H
	DB	0e8H
	DB	076H
	DB	021H
	DB	00H
	DB	00H
	DB	081H
	DB	0ffH
	DB	04H
	DB	064H
	DB	050H
	DB	0c3H
	DB	074H
	DB	026H
	DB	081H
	DB	0ffH
	DB	08H
	DB	064H
	DB	050H
	DB	0c3H
	DB	074H
	DB	0fH
	DB	0fH
	DB	0b7H
	DB	03H
	DB	0fH
	DB	0b7H
	DB	054H
	DB	024H
	DB	02cH
	DB	0beH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	01cH
	DB	066H
	DB	08bH
	DB	013H
	DB	066H
	DB	08bH
	DB	044H
	DB	024H
	DB	020H
	DB	0beH
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	0dH
	DB	066H
	DB	08bH
	DB	013H
	DB	066H
	DB	08bH
	DB	044H
	DB	024H
	DB	020H
	DB	0beH
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	0fcH
	DB	04H
	DB	04cH
	DB	08bH
	DB	064H
	DB	024H
	DB	040H
	DB	075H
	DB	058H
	DB	044H
	DB	03bH
	DB	0eeH
	DB	072H
	DB	053H
	DB	081H
	DB	0ffH
	DB	00H
	DB	064H
	DB	050H
	DB	0c3H
	DB	074H
	DB	02cH
	DB	081H
	DB	0ffH
	DB	04H
	DB	064H
	DB	050H
	DB	0c3H
	DB	074H
	DB	015H
	DB	081H
	DB	0ffH
	DB	08H
	DB	064H
	DB	050H
	DB	0c3H
	DB	075H
	DB	031H
	DB	0edH
	DB	089H
	DB	03H
	DB	08bH
	DB	0c6H
	DB	048H
	DB	089H
	DB	045H
	DB	038H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	033H
	DB	066H
	DB	0edH
	DB	066H
	DB	089H
	DB	03H
	DB	08bH
	DB	0c6H
	DB	048H
	DB	089H
	DB	045H
	DB	038H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	024H
	DB	0fH
	DB	0b7H
	DB	0d0H
	DB	048H
	DB	08dH
	DB	0dH
	DB	067H
	DB	024H
	DB	00H
	DB	00H
	DB	0ecH
	DB	0fH
	DB	0b6H
	DB	0d0H
	DB	088H
	DB	013H
	DB	0e8H
	DB	0e2H
	DB	020H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c6H
	DB	048H
	DB	089H
	DB	045H
	DB	038H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	05H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	04cH
	DB	08bH
	DB	06cH
	DB	024H
	DB	038H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	068H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	060H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	058H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	083H
	DB	0c4H
	DB	048H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	08bH
	DB	059H
	DB	018H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	050H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	058H
	DB	04cH
	DB	089H
	DB	064H
	DB	024H
	DB	030H
	DB	044H
	DB	08bH
	DB	062H
	DB	010H
	DB	048H
	DB	0c7H
	DB	041H
	DB	038H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	04cH
	DB	024H
	DB	00H
	DB	00H
	DB	041H
	DB	08bH
	DB	0f8H
	DB	0e8H
	DB	06aH
	DB	020H
	DB	00H
	DB	00H
	DB	081H
	DB	0ffH
	DB	044H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	02eH
	DB	081H
	DB	0ffH
	DB	048H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	013H
	DB	0fH
	DB	0b7H
	DB	02bH
	DB	0fH
	DB	0b7H
	DB	074H
	DB	024H
	DB	02cH
	DB	048H
	DB	083H
	DB	0c3H
	DB	04H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	024H
	DB	066H
	DB	08bH
	DB	033H
	DB	066H
	DB	08bH
	DB	06cH
	DB	024H
	DB	020H
	DB	048H
	DB	083H
	DB	0c3H
	DB	04H
	DB	0b8H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	011H
	DB	066H
	DB	08bH
	DB	033H
	DB	066H
	DB	08bH
	DB	06cH
	DB	024H
	DB	020H
	DB	048H
	DB	083H
	DB	0c3H
	DB	04H
	DB	0b8H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c8H
	DB	048H
	DB	083H
	DB	0c1H
	DB	04H
	DB	04cH
	DB	03bH
	DB	0e1H
	DB	04cH
	DB	08bH
	DB	064H
	DB	024H
	DB	030H
	DB	073H
	DB	07H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0ebH
	DB	077H
	DB	081H
	DB	0ffH
	DB	040H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	047H
	DB	081H
	DB	0ffH
	DB	044H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	022H
	DB	081H
	DB	0ffH
	DB	048H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	075H
	DB	051H
	DB	044H
	DB	08bH
	DB	03H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0b4H
	DB	023H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0d6H
	DB	0e8H
	DB	0e2H
	DB	01fH
	DB	00H
	DB	00H
	DB	08bH
	DB	03H
	DB	0fH
	DB	0b7H
	DB	0d6H
	DB	0efH
	DB	0ebH
	DB	037H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	03H
	DB	048H
	DB	08dH
	DB	0dH
	DB	099H
	DB	023H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0d6H
	DB	0e8H
	DB	0c7H
	DB	01fH
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	03H
	DB	0fH
	DB	0b7H
	DB	0d6H
	DB	066H
	DB	0efH
	DB	0ebH
	DB	01aH
	DB	044H
	DB	0fH
	DB	0b6H
	DB	03H
	DB	048H
	DB	08dH
	DB	0dH
	DB	07cH
	DB	023H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0d5H
	DB	0e8H
	DB	0aaH
	DB	01fH
	DB	00H
	DB	00H
	DB	0fH
	DB	0b6H
	DB	03H
	DB	0fH
	DB	0b7H
	DB	0d5H
	DB	0eeH
	DB	048H
	DB	08dH
	DB	0dH
	DB	046H
	DB	023H
	DB	00H
	DB	00H
	DB	0e8H
	DB	097H
	DB	01fH
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	058H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	050H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	048H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	08bH
	DB	041H
	DB	08H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	058H
	DB	048H
	DB	08bH
	DB	078H
	DB	040H
	DB	048H
	DB	08bH
	DB	05fH
	DB	018H
	DB	048H
	DB	085H
	DB	0dbH
	DB	074H
	DB	07H
	DB	048H
	DB	08bH
	DB	03H
	DB	048H
	DB	089H
	DB	047H
	DB	018H
	DB	048H
	DB	085H
	DB	0dbH
	DB	074H
	DB	04aH
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	048H
	DB	08bH
	DB	053H
	DB	08H
	DB	048H
	DB	08bH
	DB	04bH
	DB	018H
	DB	0ffH
	DB	015H
	DB	05aH
	DB	02bH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04bH
	DB	08H
	DB	0ffH
	DB	015H
	DB	048H
	DB	02bH
	DB	00H
	DB	00H
	DB	08bH
	DB	053H
	DB	020H
	DB	048H
	DB	08bH
	DB	04bH
	DB	010H
	DB	0ffH
	DB	015H
	DB	033H
	DB	02bH
	DB	00H
	DB	00H
	DB	033H
	DB	0d2H
	DB	048H
	DB	08bH
	DB	0cbH
	DB	0ffH
	DB	015H
	DB	020H
	DB	02bH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05fH
	DB	018H
	DB	048H
	DB	085H
	DB	0dbH
	DB	074H
	DB	07H
	DB	048H
	DB	08bH
	DB	03H
	DB	048H
	DB	089H
	DB	047H
	DB	018H
	DB	048H
	DB	085H
	DB	0dbH
	DB	075H
	DB	0bbH
	DB	048H
	DB	08dH
	DB	015H
	DB	054H
	DB	022H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	0e1H
	DB	02aH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	0e6H
	DB	02aH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04fH
	DB	010H
	DB	0ffH
	DB	015H
	DB	094H
	DB	02bH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	058H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	048H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	038H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	030H
	DB	041H
	DB	08bH
	DB	070H
	DB	010H
	DB	048H
	DB	08bH
	DB	0eaH
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	07aH
	DB	018H
	DB	045H
	DB	033H
	DB	0c0H
	DB	08bH
	DB	057H
	DB	014H
	DB	048H
	DB	08bH
	DB	04fH
	DB	08H
	DB	0ffH
	DB	015H
	DB	0adH
	DB	02aH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	047H
	DB	014H
	DB	048H
	DB	063H
	DB	04fH
	DB	018H
	DB	048H
	DB	08bH
	DB	0d0H
	DB	048H
	DB	08bH
	DB	0d8H
	DB	0e8H
	DB	08aH
	DB	01eH
	DB	00H
	DB	00H
	DB	08bH
	DB	057H
	DB	014H
	DB	048H
	DB	08bH
	DB	0cbH
	DB	0ffH
	DB	015H
	DB	076H
	DB	02aH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	089H
	DB	075H
	DB	038H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	038H
	DB	033H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	048H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	058H
	DB	048H
	DB	08bH
	DB	059H
	DB	018H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	030H
	DB	0fH
	DB	0b7H
	DB	03H
	DB	08bH
	DB	06aH
	DB	08H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	028H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	020H
	DB	08bH
	DB	07aH
	DB	010H
	DB	066H
	DB	089H
	DB	05H
	DB	022H
	DB	03bH
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	02H
	DB	048H
	DB	08bH
	DB	0f1H
	DB	066H
	DB	089H
	DB	05H
	DB	016H
	DB	03bH
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	04H
	DB	066H
	DB	089H
	DB	05H
	DB	0ffH
	DB	03aH
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	06H
	DB	066H
	DB	089H
	DB	05H
	DB	0f0H
	DB	03aH
	DB	00H
	DB	00H
	DB	0e8H
	DB	0cbH
	DB	0f9H
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	01dH
	DB	0f1H
	DB	03aH
	DB	00H
	DB	00H
	DB	066H
	DB	044H
	DB	089H
	DB	01bH
	DB	0fH
	DB	0b7H
	DB	05H
	DB	0e8H
	DB	03aH
	DB	00H
	DB	00H
	DB	083H
	DB	0ffH
	DB	08H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	020H
	DB	066H
	DB	089H
	DB	043H
	DB	02H
	DB	0fH
	DB	0b7H
	DB	05H
	DB	0c9H
	DB	03aH
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	043H
	DB	04H
	DB	0fH
	DB	0b7H
	DB	05H
	DB	0baH
	DB	03aH
	DB	00H
	DB	00H
	DB	066H
	DB	089H
	DB	043H
	DB	06H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	058H
	DB	075H
	DB	01eH
	DB	083H
	DB	0fdH
	DB	08H
	DB	072H
	DB	019H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	030H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	041H
	DB	08bH
	DB	040H
	DB	08H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	05aH
	DB	018H
	DB	041H
	DB	039H
	DB	040H
	DB	010H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	0faH
	DB	0fH
	DB	085H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	083H
	DB	0f8H
	DB	010H
	DB	0fH
	DB	085H
	DB	087H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c9H
	DB	048H
	DB	089H
	DB	04aH
	DB	038H
	DB	08bH
	DB	043H
	DB	04H
	DB	089H
	DB	0dH
	DB	055H
	DB	03aH
	DB	00H
	DB	00H
	DB	089H
	DB	05H
	DB	027H
	DB	03aH
	DB	00H
	DB	00H
	DB	089H
	DB	0dH
	DB	025H
	DB	03aH
	DB	00H
	DB	00H
	DB	08bH
	DB	03H
	DB	085H
	DB	0c0H
	DB	074H
	DB	036H
	DB	0ffH
	DB	0c8H
	DB	075H
	DB	062H
	DB	0e8H
	DB	0c2H
	DB	0f9H
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	08bH
	DB	01dH
	DB	0fH
	DB	03aH
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	05bH
	DB	08H
	DB	08bH
	DB	05H
	DB	029H
	DB	03aH
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	0cH
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	08bH
	DB	043H
	DB	08H
	DB	089H
	DB	05H
	DB	0e0H
	DB	039H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	0cH
	DB	089H
	DB	05H
	DB	0fbH
	DB	039H
	DB	00H
	DB	00H
	DB	0e8H
	DB	09bH
	DB	0f9H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0dcH
	DB	048H
	DB	081H
	DB	0ecH
	DB	08H
	DB	01H
	DB	00H
	DB	00H
	DB	08bH
	DB	042H
	DB	010H
	DB	049H
	DB	089H
	DB	05bH
	DB	0f8H
	DB	048H
	DB	08bH
	DB	05aH
	DB	08H
	DB	049H
	DB	089H
	DB	06bH
	DB	0f0H
	DB	08bH
	DB	02aH
	DB	049H
	DB	089H
	DB	073H
	DB	0e8H
	DB	04dH
	DB	089H
	DB	063H
	DB	0d8H
	DB	044H
	DB	08bH
	DB	062H
	DB	04H
	DB	089H
	DB	044H
	DB	024H
	DB	070H
	DB	041H
	DB	089H
	DB	043H
	DB	010H
	DB	08bH
	DB	042H
	DB	014H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	04dH
	DB	089H
	DB	06bH
	DB	0d0H
	DB	045H
	DB	033H
	DB	0edH
	DB	048H
	DB	08dH
	DB	015H
	DB	06dH
	DB	020H
	DB	00H
	DB	00H
	DB	049H
	DB	08dH
	DB	04bH
	DB	0b8H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	060H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	04dH
	DB	089H
	DB	06bH
	DB	080H
	DB	0ffH
	DB	015H
	DB	02dH
	DB	028H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	084H
	DB	024H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08dH
	DB	084H
	DB	024H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	050H
	DB	0baH
	DB	01fH
	DB	00H
	DB	0fH
	DB	00H
	DB	048H
	DB	089H
	DB	084H
	DB	024H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	0c7H
	DB	084H
	DB	024H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	0acH
	DB	024H
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	0c7H
	DB	084H
	DB	024H
	DB	0a8H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	0acH
	DB	024H
	DB	0b0H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	0acH
	DB	024H
	DB	0b8H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	015H
	DB	02fH
	DB	028H
	DB	00H
	DB	00H
	DB	085H
	DB	0c0H
	DB	0fH
	DB	088H
	DB	074H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04cH
	DB	024H
	DB	050H
	DB	048H
	DB	08dH
	DB	084H
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	033H
	DB	0c9H
	DB	045H
	DB	033H
	DB	0c0H
	DB	0baH
	DB	01fH
	DB	00H
	DB	0fH
	DB	00H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	028H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	020H
	DB	048H
	DB	089H
	DB	0bcH
	DB	024H
	DB	0e8H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	015H
	DB	0efH
	DB	027H
	DB	00H
	DB	00H
	DB	085H
	DB	0c0H
	DB	08bH
	DB	0f8H
	DB	0fH
	DB	088H
	DB	025H
	DB	01H
	DB	00H
	DB	00H
	DB	08bH
	DB	044H
	DB	024H
	DB	060H
	DB	04cH
	DB	08dH
	DB	08cH
	DB	024H
	DB	018H
	DB	01H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c3H
	DB	048H
	DB	03H
	DB	0c3H
	DB	041H
	DB	08bH
	DB	0d4H
	DB	08bH
	DB	0cdH
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	068H
	DB	048H
	DB	08dH
	DB	044H
	DB	024H
	DB	078H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	051H
	DB	027H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	044H
	DB	024H
	DB	068H
	DB	0fH
	DB	0b6H
	DB	0d8H
	DB	048H
	DB	08dH
	DB	044H
	DB	024H
	DB	068H
	DB	04cH
	DB	08dH
	DB	04cH
	DB	024H
	DB	070H
	DB	041H
	DB	08bH
	DB	0d4H
	DB	08bH
	DB	0cdH
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	02fH
	DB	027H
	DB	00H
	DB	00H
	DB	084H
	DB	0dbH
	DB	0fH
	DB	084H
	DB	0caH
	DB	00H
	DB	00H
	DB	00H
	DB	084H
	DB	0c0H
	DB	0fH
	DB	084H
	DB	0c2H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	044H
	DB	024H
	DB	068H
	DB	048H
	DB	08bH
	DB	04cH
	DB	024H
	DB	078H
	DB	048H
	DB	02bH
	DB	0c1H
	DB	085H
	DB	0c0H
	DB	0fH
	DB	084H
	DB	0adH
	DB	00H
	DB	00H
	DB	00H
	DB	044H
	DB	039H
	DB	0acH
	DB	024H
	DB	018H
	DB	01H
	DB	00H
	DB	00H
	DB	08bH
	DB	0d0H
	DB	048H
	DB	089H
	DB	054H
	DB	024H
	DB	060H
	DB	074H
	DB	0dH
	DB	08bH
	DB	0c1H
	DB	041H
	DB	08bH
	DB	0fdH
	DB	048H
	DB	089H
	DB	06H
	DB	0e9H
	DB	094H
	DB	00H
	DB	00H
	DB	00H
	DB	0c7H
	DB	044H
	DB	024H
	DB	048H
	DB	04H
	DB	02H
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	044H
	DB	024H
	DB	060H
	DB	045H
	DB	033H
	DB	0c9H
	DB	048H
	DB	089H
	DB	08cH
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04cH
	DB	024H
	DB	050H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	030H
	DB	048H
	DB	08dH
	DB	084H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	028H
	DB	048H
	DB	089H
	DB	054H
	DB	024H
	DB	020H
	DB	04cH
	DB	08dH
	DB	044H
	DB	024H
	DB	058H
	DB	049H
	DB	08dH
	DB	051H
	DB	0ffH
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	058H
	DB	0ffH
	DB	015H
	DB	0f7H
	DB	026H
	DB	00H
	DB	00H
	DB	085H
	DB	0c0H
	DB	08bH
	DB	0f8H
	DB	078H
	DB	039H
	DB	048H
	DB	08bH
	DB	054H
	DB	024H
	DB	058H
	DB	08bH
	DB	084H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	08bH
	DB	04cH
	DB	024H
	DB	078H
	DB	048H
	DB	02bH
	DB	0c8H
	DB	048H
	DB	03H
	DB	0d1H
	DB	048H
	DB	08dH
	DB	0dH
	DB	094H
	DB	01eH
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	054H
	DB	024H
	DB	058H
	DB	0e8H
	DB	090H
	DB	01aH
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	05cH
	DB	024H
	DB	058H
	DB	04cH
	DB	089H
	DB	01eH
	DB	041H
	DB	08bH
	DB	0fdH
	DB	0ebH
	DB	05H
	DB	0bfH
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	04cH
	DB	024H
	DB	050H
	DB	0ffH
	DB	015H
	DB	0a5H
	DB	026H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	0e8H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0acH
	DB	024H
	DB	0d8H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0a4H
	DB	024H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0acH
	DB	024H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	09cH
	DB	024H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	081H
	DB	0c4H
	DB	08H
	DB	01H
	DB	00H
	DB	00H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	08bH
	DB	082H
	DB	0b8H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	08bH
	DB	05aH
	DB	018H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	058H
	DB	08bH
	DB	068H
	DB	08H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	028H
	DB	08bH
	DB	078H
	DB	010H
	DB	08bH
	DB	03H
	DB	089H
	DB	05H
	DB	01bH
	DB	037H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	04H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	089H
	DB	05H
	DB	07H
	DB	037H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	08H
	DB	089H
	DB	05H
	DB	0eH
	DB	037H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	0cH
	DB	089H
	DB	05H
	DB	0f9H
	DB	036H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	010H
	DB	089H
	DB	05H
	DB	0e0H
	DB	036H
	DB	00H
	DB	00H
	DB	08bH
	DB	043H
	DB	014H
	DB	089H
	DB	05H
	DB	0c3H
	DB	036H
	DB	00H
	DB	00H
	DB	0e8H
	DB	011H
	DB	0f6H
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	08bH
	DB	01dH
	DB	0dfH
	DB	036H
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	01bH
	DB	08bH
	DB	05H
	DB	0ceH
	DB	036H
	DB	00H
	DB	00H
	DB	083H
	DB	0ffH
	DB	01cH
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	089H
	DB	043H
	DB	04H
	DB	08bH
	DB	05H
	DB	0cdH
	DB	036H
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	08H
	DB	08bH
	DB	05H
	DB	0b8H
	DB	036H
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	0cH
	DB	08bH
	DB	05H
	DB	09fH
	DB	036H
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	010H
	DB	08bH
	DB	05H
	DB	082H
	DB	036H
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	014H
	DB	08bH
	DB	05H
	DB	075H
	DB	036H
	DB	00H
	DB	00H
	DB	089H
	DB	043H
	DB	018H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	050H
	DB	075H
	DB	01eH
	DB	083H
	DB	0fdH
	DB	01cH
	DB	072H
	DB	019H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	058H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	058H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	058H
	DB	08H
	DB	048H
	DB	089H
	DB	068H
	DB	010H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	04cH
	DB	089H
	DB	060H
	DB	0f8H
	DB	04cH
	DB	08bH
	DB	0e1H
	DB	048H
	DB	08dH
	DB	0dH
	DB	05bH
	DB	01dH
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	0f0H
	DB	048H
	DB	08bH
	DB	0eaH
	DB	066H
	DB	0bbH
	DB	01H
	DB	00H
	DB	066H
	DB	033H
	DB	0ffH
	DB	0e8H
	DB	0ffH
	DB	018H
	DB	00H
	DB	00H
	DB	083H
	DB	07eH
	DB	010H
	DB	034H
	DB	0fH
	DB	085H
	DB	0eH
	DB	01H
	DB	00H
	DB	00H
	DB	083H
	DB	07eH
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	04H
	DB	01H
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	04cH
	DB	024H
	DB	040H
	DB	048H
	DB	08bH
	DB	045H
	DB	018H
	DB	045H
	DB	033H
	DB	0e4H
	DB	04cH
	DB	089H
	DB	065H
	DB	038H
	DB	0fH
	DB	0b7H
	DB	030H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	027H
	DB	025H
	DB	00H
	DB	00H
	DB	041H
	DB	08dH
	DB	06cH
	DB	024H
	DB	01H
	DB	066H
	DB	090H
	DB	066H
	DB	083H
	DB	0fbH
	DB	0aH
	DB	077H
	DB	056H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	0c6H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	040H
	DB	0e8H
	DB	073H
	DB	0f5H
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	075H
	DB	0aH
	DB	066H
	DB	083H
	DB	07cH
	DB	024H
	DB	048H
	DB	0bH
	DB	066H
	DB	0fH
	DB	044H
	DB	0fdH
	DB	066H
	DB	0ffH
	DB	0c3H
	DB	066H
	DB	085H
	DB	0ffH
	DB	074H
	DB	0a6H
	DB	0ebH
	DB	05H
	DB	066H
	DB	085H
	DB	0ffH
	DB	074H
	DB	06fH
	DB	0fH
	DB	0b7H
	DB	0fbH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	0fH
	DB	0b7H
	DB	0deH
	DB	083H
	DB	0c7H
	DB	0ffH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	0c7H
	DB	044H
	DB	024H
	DB	040H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	07cH
	DB	024H
	DB	03cH
	DB	0c7H
	DB	044H
	DB	024H
	DB	048H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	05cH
	DB	024H
	DB	044H
	DB	0e8H
	DB	0fH
	DB	0f5H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03fH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	07cH
	DB	024H
	DB	03cH
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	089H
	DB	05cH
	DB	024H
	DB	044H
	DB	0e8H
	DB	0e2H
	DB	0f4H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	09dH
	DB	024H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	05H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	04cH
	DB	08bH
	DB	064H
	DB	024H
	DB	060H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	078H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	070H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	058H
	DB	08H
	DB	048H
	DB	089H
	DB	068H
	DB	010H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	08bH
	DB	0e9H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0ffH
	DB	01bH
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	0f8H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	066H
	DB	033H
	DB	0dbH
	DB	0e8H
	DB	087H
	DB	017H
	DB	00H
	DB	00H
	DB	083H
	DB	07fH
	DB	010H
	DB	034H
	DB	0fH
	DB	085H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
	DB	083H
	DB	07fH
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	0e6H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04dH
	DB	040H
	DB	048H
	DB	08bH
	DB	046H
	DB	018H
	DB	033H
	DB	0edH
	DB	048H
	DB	089H
	DB	06eH
	DB	038H
	DB	0fH
	DB	0b7H
	DB	030H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	0b1H
	DB	023H
	DB	00H
	DB	00H
	DB	090H
	DB	066H
	DB	083H
	DB	0fbH
	DB	0aH
	DB	0fH
	DB	087H
	DB	0b0H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	0c6H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	0e8H
	DB	04H
	DB	0f4H
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	075H
	DB	08H
	DB	066H
	DB	083H
	DB	07cH
	DB	024H
	DB	048H
	DB	0bH
	DB	074H
	DB	05H
	DB	066H
	DB	0ffH
	DB	0c3H
	DB	0ebH
	DB	0acH
	DB	0fH
	DB	0b7H
	DB	0fbH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	0fH
	DB	0b7H
	DB	0deH
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	05cH
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	07cH
	DB	024H
	DB	03cH
	DB	0c7H
	DB	044H
	DB	024H
	DB	040H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0b6H
	DB	0f3H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03fH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	07cH
	DB	024H
	DB	03cH
	DB	0c7H
	DB	044H
	DB	024H
	DB	040H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	05cH
	DB	024H
	DB	044H
	DB	0e8H
	DB	088H
	DB	0f3H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	043H
	DB	023H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	05H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	078H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	070H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	066H
	DB	033H
	DB	0ffH
	DB	041H
	DB	083H
	DB	078H
	DB	010H
	DB	034H
	DB	0fH
	DB	085H
	DB	0a1H
	DB	01H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	078H
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	096H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	049H
	DB	040H
	DB	048H
	DB	089H
	DB	068H
	DB	010H
	DB	048H
	DB	08bH
	DB	06aH
	DB	018H
	DB	04cH
	DB	089H
	DB	060H
	DB	0f8H
	DB	045H
	DB	033H
	DB	0e4H
	DB	04cH
	DB	089H
	DB	062H
	DB	038H
	DB	048H
	DB	08dH
	DB	050H
	DB	0b8H
	DB	0ffH
	DB	015H
	DB	06bH
	DB	022H
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	038H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	03cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	044H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	040H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	048H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0fH
	DB	0b7H
	DB	045H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	03cH
	DB	0e8H
	DB	0b6H
	DB	0f2H
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	074H
	DB	012H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	068H
	DB	022H
	DB	00H
	DB	00H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	0ebH
	DB	029H
	DB	048H
	DB	089H
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b6H
	DB	074H
	DB	024H
	DB	040H
	DB	085H
	DB	0f6H
	DB	075H
	DB	02fH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	045H
	DB	022H
	DB	00H
	DB	00H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	078H
	DB	04cH
	DB	08bH
	DB	064H
	DB	024H
	DB	060H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	070H
	DB	066H
	DB	0bbH
	DB	01H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	03bH
	DB	0c6H
	DB	077H
	DB	05eH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	044H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	048H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	045H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	0fH
	DB	0f2H
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	05cH
	DB	024H
	DB	048H
	DB	066H
	DB	041H
	DB	083H
	DB	0fbH
	DB	09H
	DB	074H
	DB	07H
	DB	066H
	DB	041H
	DB	083H
	DB	0fbH
	DB	0bH
	DB	075H
	DB	04H
	DB	066H
	DB	0bfH
	DB	01H
	DB	00H
	DB	066H
	DB	0ffH
	DB	0c3H
	DB	066H
	DB	085H
	DB	0ffH
	DB	074H
	DB	09dH
	DB	0ebH
	DB	05H
	DB	066H
	DB	085H
	DB	0ffH
	DB	074H
	DB	049H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	044H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	048H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	0ffH
	DB	0c8H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	04cH
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	050H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03fH
	DB	011H
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	064H
	DB	024H
	DB	040H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	045H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0c7H
	DB	044H
	DB	024H
	DB	048H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	09fH
	DB	0f1H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	05aH
	DB	021H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	070H
	DB	033H
	DB	0c0H
	DB	0e9H
	DB	0eH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	058H
	DB	08H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08bH
	DB	0f9H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0e3H
	DB	018H
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	0d8H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	0e8H
	DB	04eH
	DB	014H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	010H
	DB	034H
	DB	0fH
	DB	085H
	DB	0b3H
	DB	01H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	0a9H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04fH
	DB	040H
	DB	048H
	DB	08bH
	DB	07eH
	DB	018H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	078H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	020H
	DB	033H
	DB	0edH
	DB	048H
	DB	089H
	DB	06eH
	DB	038H
	DB	0ffH
	DB	015H
	DB	076H
	DB	020H
	DB	00H
	DB	00H
	DB	089H
	DB	06cH
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	06cH
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	07H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	0d3H
	DB	0f0H
	DB	0ffH
	DB	0ffH
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	074H
	DB	02fH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	084H
	DB	020H
	DB	00H
	DB	00H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	078H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	070H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	08bH
	DB	04cH
	DB	024H
	DB	040H
	DB	08bH
	DB	0c1H
	DB	0dH
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	0c1H
	DB	0e8H
	DB	08H
	DB	074H
	DB	0c1H
	DB	081H
	DB	0c9H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	074H
	DB	0b9H
	DB	03bH
	DB	0c1H
	DB	077H
	DB	0b5H
	DB	089H
	DB	06cH
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	0c7H
	DB	044H
	DB	024H
	DB	03cH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	07H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	045H
	DB	0f0H
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	08bH
	DB	05cH
	DB	024H
	DB	048H
	DB	041H
	DB	083H
	DB	0e3H
	DB	05H
	DB	041H
	DB	083H
	DB	0fbH
	DB	05H
	DB	075H
	DB	06H
	DB	066H
	DB	0bbH
	DB	01H
	DB	00H
	DB	0ebH
	DB	055H
	DB	089H
	DB	06cH
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	0c7H
	DB	044H
	DB	024H
	DB	03cH
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	07H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	0f7H
	DB	0efH
	DB	0ffH
	DB	0ffH
	DB	044H
	DB	08bH
	DB	05cH
	DB	024H
	DB	048H
	DB	041H
	DB	083H
	DB	0e3H
	DB	05H
	DB	041H
	DB	083H
	DB	0fbH
	DB	05H
	DB	044H
	DB	089H
	DB	05cH
	DB	024H
	DB	048H
	DB	0fH
	DB	085H
	DB	016H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	0bbH
	DB	02H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	089H
	DB	06cH
	DB	024H
	DB	044H
	DB	089H
	DB	06cH
	DB	024H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	04cH
	DB	089H
	DB	06cH
	DB	024H
	DB	050H
	DB	089H
	DB	06cH
	DB	024H
	DB	054H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03fH
	DB	011H
	DB	00H
	DB	00H
	DB	089H
	DB	06cH
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	07H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	0c7H
	DB	044H
	DB	024H
	DB	048H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	09bH
	DB	0efH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	066H
	DB	089H
	DB	05fH
	DB	016H
	DB	0ffH
	DB	015H
	DB	052H
	DB	01fH
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	0e9H
	DB	0c4H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0e9H
	DB	0bfH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	041H
	DB	083H
	DB	078H
	DB	010H
	DB	034H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08bH
	DB	0faH
	DB	0fH
	DB	085H
	DB	0e1H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	078H
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	0d6H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	049H
	DB	040H
	DB	048H
	DB	089H
	DB	058H
	DB	010H
	DB	048H
	DB	08bH
	DB	05aH
	DB	018H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	033H
	DB	0f6H
	DB	048H
	DB	089H
	DB	072H
	DB	038H
	DB	048H
	DB	08dH
	DB	050H
	DB	0b8H
	DB	0ffH
	DB	015H
	DB	08cH
	DB	01eH
	DB	00H
	DB	00H
	DB	089H
	DB	074H
	DB	024H
	DB	03cH
	DB	089H
	DB	074H
	DB	024H
	DB	040H
	DB	089H
	DB	074H
	DB	024H
	DB	044H
	DB	089H
	DB	074H
	DB	024H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	04cH
	DB	089H
	DB	074H
	DB	024H
	DB	050H
	DB	089H
	DB	074H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	016H
	DB	0c7H
	DB	044H
	DB	024H
	DB	040H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	03H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	0d9H
	DB	0eeH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	094H
	DB	01eH
	DB	00H
	DB	00H
	DB	066H
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	05cH
	DB	024H
	DB	048H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	027H
	DB	066H
	DB	0c7H
	DB	043H
	DB	0cH
	DB	00H
	DB	00H
	DB	066H
	DB	044H
	DB	089H
	DB	05bH
	DB	014H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	066H
	DB	0c7H
	DB	043H
	DB	0cH
	DB	00H
	DB	01H
	DB	066H
	DB	0c7H
	DB	043H
	DB	014H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	041H
	DB	083H
	DB	078H
	DB	010H
	DB	034H
	DB	048H
	DB	089H
	DB	058H
	DB	010H
	DB	048H
	DB	08bH
	DB	0daH
	DB	0fH
	DB	085H
	DB	0cfH
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	078H
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	0c4H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	049H
	DB	040H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08bH
	DB	07aH
	DB	018H
	DB	033H
	DB	0f6H
	DB	048H
	DB	089H
	DB	072H
	DB	038H
	DB	048H
	DB	08dH
	DB	050H
	DB	0b8H
	DB	0ffH
	DB	015H
	DB	06cH
	DB	01dH
	DB	00H
	DB	00H
	DB	089H
	DB	074H
	DB	024H
	DB	03cH
	DB	089H
	DB	074H
	DB	024H
	DB	040H
	DB	089H
	DB	074H
	DB	024H
	DB	044H
	DB	089H
	DB	074H
	DB	024H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	04cH
	DB	089H
	DB	074H
	DB	024H
	DB	050H
	DB	089H
	DB	074H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03eH
	DB	011H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	047H
	DB	016H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	04fH
	DB	012H
	DB	0fH
	DB	0b7H
	DB	047H
	DB	010H
	DB	03H
	DB	0c8H
	DB	089H
	DB	04cH
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	07H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0e8H
	DB	0b3H
	DB	0edH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	06eH
	DB	01dH
	DB	00H
	DB	00H
	DB	0f7H
	DB	044H
	DB	024H
	DB	038H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	025H
	DB	0fH
	DB	0b7H
	DB	044H
	DB	024H
	DB	048H
	DB	066H
	DB	089H
	DB	047H
	DB	016H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	043H
	DB	038H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	058H
	DB	010H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	08bH
	DB	0f1H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0e3H
	DB	014H
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	0d8H
	DB	048H
	DB	08bH
	DB	0faH
	DB	0e8H
	DB	02eH
	DB	010H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	010H
	DB	034H
	DB	0fH
	DB	085H
	DB	099H
	DB	00H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	08H
	DB	034H
	DB	0fH
	DB	085H
	DB	08fH
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04eH
	DB	040H
	DB	048H
	DB	08bH
	DB	05fH
	DB	018H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	020H
	DB	033H
	DB	0f6H
	DB	048H
	DB	089H
	DB	077H
	DB	038H
	DB	0ffH
	DB	015H
	DB	05bH
	DB	01cH
	DB	00H
	DB	00H
	DB	089H
	DB	074H
	DB	024H
	DB	03cH
	DB	089H
	DB	074H
	DB	024H
	DB	040H
	DB	089H
	DB	074H
	DB	024H
	DB	044H
	DB	089H
	DB	074H
	DB	024H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	04cH
	DB	089H
	DB	074H
	DB	024H
	DB	050H
	DB	089H
	DB	074H
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	038H
	DB	03fH
	DB	011H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	016H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	012H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	010H
	DB	03H
	DB	0c8H
	DB	089H
	DB	04cH
	DB	024H
	DB	040H
	DB	0fH
	DB	0b7H
	DB	03H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	014H
	DB	089H
	DB	044H
	DB	024H
	DB	048H
	DB	0e8H
	DB	09aH
	DB	0ecH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	0ffH
	DB	015H
	DB	055H
	DB	01cH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	05cH
	DB	024H
	DB	038H
	DB	041H
	DB	081H
	DB	0e3H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	041H
	DB	0f7H
	DB	0dbH
	DB	01bH
	DB	0c0H
	DB	025H
	DB	01H
	DB	00H
	DB	00H
	DB	0c0H
	DB	0ebH
	DB	05H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	078H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	068H
	DB	048H
	DB	089H
	DB	058H
	DB	08H
	DB	048H
	DB	089H
	DB	068H
	DB	010H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	08bH
	DB	0e9H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	05fH
	DB	015H
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	0f8H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	0e8H
	DB	03aH
	DB	0fH
	DB	00H
	DB	00H
	DB	08bH
	DB	05fH
	DB	010H
	DB	08bH
	DB	07fH
	DB	08H
	DB	048H
	DB	08dH
	DB	0dH
	DB	037H
	DB	015H
	DB	00H
	DB	00H
	DB	0e8H
	DB	028H
	DB	0fH
	DB	00H
	DB	00H
	DB	083H
	DB	0fbH
	DB	034H
	DB	0fH
	DB	085H
	DB	0cfH
	DB	01H
	DB	00H
	DB	00H
	DB	03bH
	DB	0fbH
	DB	0fH
	DB	085H
	DB	0c7H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0aH
	DB	015H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0bH
	DB	0fH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0eeH
	DB	014H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0ffH
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05dH
	DB	040H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0ceH
	DB	014H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0efH
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	020H
	DB	048H
	DB	08bH
	DB	0cbH
	DB	0ffH
	DB	015H
	DB	03bH
	DB	01bH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0a4H
	DB	014H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0d5H
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05eH
	DB	018H
	DB	033H
	DB	0c0H
	DB	089H
	DB	044H
	DB	024H
	DB	038H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	089H
	DB	044H
	DB	024H
	DB	040H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	089H
	DB	044H
	DB	024H
	DB	048H
	DB	089H
	DB	044H
	DB	024H
	DB	04cH
	DB	089H
	DB	044H
	DB	024H
	DB	050H
	DB	089H
	DB	044H
	DB	024H
	DB	054H
	DB	0fH
	DB	0b7H
	DB	03H
	DB	089H
	DB	044H
	DB	024H
	DB	044H
	DB	0fH
	DB	0b6H
	DB	043H
	DB	02H
	DB	048H
	DB	08dH
	DB	0dH
	DB	047H
	DB	014H
	DB	00H
	DB	00H
	DB	089H
	DB	044H
	DB	024H
	DB	038H
	DB	066H
	DB	081H
	DB	063H
	DB	08H
	DB	00H
	DB	0ffH
	DB	0fH
	DB	0b7H
	DB	043H
	DB	08H
	DB	09H
	DB	044H
	DB	024H
	DB	038H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	0aH
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	066H
	DB	0c7H
	DB	043H
	DB	01cH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	044H
	DB	024H
	DB	03cH
	DB	044H
	DB	0bH
	DB	043H
	DB	01cH
	DB	08bH
	DB	054H
	DB	024H
	DB	038H
	DB	044H
	DB	089H
	DB	044H
	DB	024H
	DB	03cH
	DB	08bH
	DB	043H
	DB	020H
	DB	089H
	DB	044H
	DB	024H
	DB	040H
	DB	08bH
	DB	043H
	DB	028H
	DB	089H
	DB	044H
	DB	024H
	DB	048H
	DB	08bH
	DB	043H
	DB	02cH
	DB	089H
	DB	044H
	DB	024H
	DB	04cH
	DB	08bH
	DB	043H
	DB	030H
	DB	089H
	DB	044H
	DB	024H
	DB	050H
	DB	0e8H
	DB	04aH
	DB	0eH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	044H
	DB	024H
	DB	044H
	DB	08bH
	DB	054H
	DB	024H
	DB	040H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0c4H
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	035H
	DB	0eH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	044H
	DB	024H
	DB	04cH
	DB	08bH
	DB	054H
	DB	024H
	DB	048H
	DB	048H
	DB	08dH
	DB	0dH
	DB	08fH
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	020H
	DB	0eH
	DB	00H
	DB	00H
	DB	08bH
	DB	054H
	DB	024H
	DB	050H
	DB	048H
	DB	08dH
	DB	0dH
	DB	06fH
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	010H
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	053H
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	04H
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	038H
	DB	0e8H
	DB	0e6H
	DB	0eaH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	0dH
	DB	02dH
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0eeH
	DB	0dH
	DB	00H
	DB	00H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	05cH
	DB	024H
	DB	038H
	DB	066H
	DB	044H
	DB	089H
	DB	05bH
	DB	08H
	DB	08bH
	DB	044H
	DB	024H
	DB	038H
	DB	089H
	DB	043H
	DB	018H
	DB	08bH
	DB	044H
	DB	024H
	DB	03cH
	DB	089H
	DB	043H
	DB	01cH
	DB	0fH
	DB	0b7H
	DB	044H
	DB	024H
	DB	03cH
	DB	066H
	DB	089H
	DB	043H
	DB	0aH
	DB	08bH
	DB	044H
	DB	024H
	DB	040H
	DB	089H
	DB	043H
	DB	020H
	DB	0fH
	DB	0b7H
	DB	044H
	DB	024H
	DB	040H
	DB	066H
	DB	089H
	DB	043H
	DB	0cH
	DB	08bH
	DB	044H
	DB	024H
	DB	044H
	DB	089H
	DB	043H
	DB	024H
	DB	08bH
	DB	044H
	DB	024H
	DB	048H
	DB	089H
	DB	043H
	DB	028H
	DB	08bH
	DB	044H
	DB	024H
	DB	04cH
	DB	089H
	DB	043H
	DB	02cH
	DB	0fH
	DB	0b7H
	DB	044H
	DB	024H
	DB	054H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	020H
	DB	066H
	DB	089H
	DB	043H
	DB	014H
	DB	0ffH
	DB	015H
	DB	045H
	DB	01aH
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	043H
	DB	020H
	DB	08bH
	DB	053H
	DB	01cH
	DB	048H
	DB	08dH
	DB	0dH
	DB	09fH
	DB	012H
	DB	00H
	DB	00H
	DB	0e8H
	DB	080H
	DB	0dH
	DB	00H
	DB	00H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	0cH
	DB	0fH
	DB	0b7H
	DB	053H
	DB	08H
	DB	048H
	DB	08dH
	DB	0dH
	DB	06aH
	DB	012H
	DB	00H
	DB	00H
	DB	0e8H
	DB	06bH
	DB	0dH
	DB	00H
	DB	00H
	DB	08bH
	DB	053H
	DB	028H
	DB	048H
	DB	08dH
	DB	0dH
	DB	04bH
	DB	012H
	DB	00H
	DB	00H
	DB	0e8H
	DB	05cH
	DB	0dH
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	0ebH
	DB	011H
	DB	048H
	DB	08dH
	DB	0dH
	DB	013H
	DB	012H
	DB	00H
	DB	00H
	DB	0e8H
	DB	044H
	DB	0dH
	DB	00H
	DB	00H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0b4H
	DB	024H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	078H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	070H
	DB	048H
	DB	083H
	DB	0c4H
	DB	068H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04cH
	DB	089H
	DB	044H
	DB	024H
	DB	018H
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	0c7H
	DB	042H
	DB	038H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	072H
	DB	018H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	020H
	DB	048H
	DB	08bH
	DB	0faH
	DB	08bH
	DB	01eH
	DB	048H
	DB	08dH
	DB	0dH
	DB	0b0H
	DB	013H
	DB	00H
	DB	00H
	DB	08bH
	DB	0d3H
	DB	0e8H
	DB	0dfH
	DB	0cH
	DB	00H
	DB	00H
	DB	045H
	DB	033H
	DB	0dbH
	DB	08dH
	DB	08bH
	DB	0ffH
	DB	0fH
	DB	00H
	DB	00H
	DB	044H
	DB	089H
	DB	05cH
	DB	024H
	DB	054H
	DB	0c7H
	DB	044H
	DB	024H
	DB	050H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	048H
	DB	08bH
	DB	054H
	DB	024H
	DB	050H
	DB	081H
	DB	0e1H
	DB	00H
	DB	0f0H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	015H
	DB	02aH
	DB	019H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	085H
	DB	0c0H
	DB	048H
	DB	089H
	DB	046H
	DB	08H
	DB	074H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0fdH
	DB	012H
	DB	00H
	DB	00H
	DB	041H
	DB	0b8H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0d0H
	DB	048H
	DB	089H
	DB	06H
	DB	0e8H
	DB	092H
	DB	0cH
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	020H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	028H
	DB	033H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	041H
	DB	08bH
	DB	040H
	DB	010H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	030H
	DB	033H
	DB	0dbH
	DB	083H
	DB	0f8H
	DB	04H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	07aH
	DB	018H
	DB	048H
	DB	089H
	DB	05aH
	DB	038H
	DB	073H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	028H
	DB	013H
	DB	00H
	DB	00H
	DB	0e8H
	DB	039H
	DB	0cH
	DB	00H
	DB	00H
	DB	0b8H
	DB	09aH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	03fH
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0ffH
	DB	015H
	DB	083H
	DB	018H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	04cH
	DB	012H
	DB	00H
	DB	00H
	DB	0fH
	DB	0b6H
	DB	0d0H
	DB	0e8H
	DB	0aH
	DB	0cH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0ffH
	DB	015H
	DB	06bH
	DB	018H
	DB	00H
	DB	00H
	DB	084H
	DB	0c0H
	DB	074H
	DB	01aH
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0ffH
	DB	015H
	DB	056H
	DB	018H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c3H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	0bbH
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	08bH
	DB	0c3H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	08bH
	DB	042H
	DB	018H
	DB	048H
	DB	0c7H
	DB	042H
	DB	038H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	085H
	DB	0c0H
	DB	074H
	DB	060H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	018H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	028H
	DB	08bH
	DB	070H
	DB	010H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	020H
	DB	048H
	DB	08bH
	DB	078H
	DB	08H
	DB	048H
	DB	08dH
	DB	0dH
	DB	03bH
	DB	012H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	044H
	DB	08bH
	DB	0ceH
	DB	048H
	DB	08bH
	DB	0d3H
	DB	0e8H
	DB	083H
	DB	0bH
	DB	00H
	DB	00H
	DB	085H
	DB	0f6H
	DB	074H
	DB	018H
	DB	048H
	DB	02bH
	DB	0fbH
	DB	048H
	DB	08bH
	DB	0d6H
	DB	066H
	DB	066H
	DB	090H
	DB	0fH
	DB	0b6H
	DB	0cH
	DB	01fH
	DB	048H
	DB	0ffH
	DB	0c3H
	DB	048H
	DB	0ffH
	DB	0caH
	DB	088H
	DB	04bH
	DB	0ffH
	DB	075H
	DB	0f1H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	020H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	030H
	DB	033H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	048H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	038H
	DB	048H
	DB	08bH
	DB	06aH
	DB	018H
	DB	048H
	DB	0c7H
	DB	042H
	DB	038H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	028H
	DB	048H
	DB	08bH
	DB	07dH
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	04eH
	DB	012H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0d7H
	DB	0e8H
	DB	0fcH
	DB	0aH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0ffH
	DB	015H
	DB	06dH
	DB	017H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	076H
	DB	011H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d0H
	DB	048H
	DB	08bH
	DB	0d8H
	DB	0e8H
	DB	0deH
	DB	0aH
	DB	00H
	DB	00H
	DB	085H
	DB	0dbH
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	028H
	DB	074H
	DB	02fH
	DB	048H
	DB	08dH
	DB	0dH
	DB	0f8H
	DB	011H
	DB	00H
	DB	00H
	DB	08bH
	DB	0d3H
	DB	0e8H
	DB	0c7H
	DB	0aH
	DB	00H
	DB	00H
	DB	089H
	DB	05dH
	DB	00H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	038H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	040H
	DB	048H
	DB	083H
	DB	0c4H
	DB	048H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	038H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	040H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	048H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	018H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	010H
	DB	066H
	DB	08bH
	DB	0daH
	DB	0b0H
	DB	01H
	DB	0fH
	DB	0b7H
	DB	0d1H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	08H
	DB	048H
	DB	089H
	DB	03cH
	DB	024H
	DB	0eeH
	DB	0ecH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0f9H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	04cH
	DB	024H
	DB	040H
	DB	066H
	DB	03H
	DB	0dbH
	DB	0a8H
	DB	01H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0f0H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	0d1H
	DB	045H
	DB	08bH
	DB	0d9H
	DB	074H
	DB	039H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	0c7H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	045H
	DB	085H
	DB	0c0H
	DB	07eH
	DB	017H
	DB	049H
	DB	08bH
	DB	0c8H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0ffH
	DB	0cbH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01H
	DB	0eeH
	DB	0fH
	DB	084H
	DB	099H
	DB	00H
	DB	00H
	DB	00H
	DB	0ecH
	DB	0a8H
	DB	01H
	DB	075H
	DB	0cfH
	DB	08dH
	DB	043H
	DB	01H
	DB	041H
	DB	08dH
	DB	052H
	DB	04H
	DB	045H
	DB	08dH
	DB	05aH
	DB	05H
	DB	0eeH
	DB	041H
	DB	08dH
	DB	052H
	DB	03H
	DB	040H
	DB	0fH
	DB	0b6H
	DB	0c6H
	DB	0eeH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d3H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	0c7H
	DB	045H
	DB	085H
	DB	0c0H
	DB	0eeH
	DB	041H
	DB	08dH
	DB	052H
	DB	02H
	DB	0b0H
	DB	048H
	DB	0eeH
	DB	07eH
	DB	01aH
	DB	049H
	DB	08bH
	DB	0c8H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01H
	DB	0eeH
	DB	0ecH
	DB	0a8H
	DB	01H
	DB	074H
	DB	025H
	DB	045H
	DB	085H
	DB	0c0H
	DB	07eH
	DB	0fH
	DB	049H
	DB	08bH
	DB	0c8H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0ffH
	DB	0c9H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01H
	DB	0eeH
	DB	074H
	DB	01dH
	DB	0ecH
	DB	0a8H
	DB	01H
	DB	075H
	DB	0dbH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d3H
	DB	0ecH
	DB	048H
	DB	08bH
	DB	03cH
	DB	024H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	08H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	010H
	DB	048H
	DB	083H
	DB	0c4H
	DB	018H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	03cH
	DB	024H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	08H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	010H
	DB	032H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	018H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	028H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	020H
	DB	033H
	DB	0c0H
	DB	048H
	DB	089H
	DB	06cH
	DB	024H
	DB	018H
	DB	048H
	DB	089H
	DB	074H
	DB	024H
	DB	010H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	08H
	DB	0fH
	DB	0b7H
	DB	0faH
	DB	0fH
	DB	0b7H
	DB	0d1H
	DB	0fH
	DB	0b7H
	DB	0e9H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d9H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	04cH
	DB	024H
	DB	050H
	DB	0eeH
	DB	0b0H
	DB	01fH
	DB	044H
	DB	08dH
	DB	055H
	DB	01H
	DB	066H
	DB	03H
	DB	0ffH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0f0H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	045H
	DB	08bH
	DB	0d9H
	DB	0eeH
	DB	0ecH
	DB	0a8H
	DB	01fH
	DB	074H
	DB	03eH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	045H
	DB	085H
	DB	0c0H
	DB	07eH
	DB	017H
	DB	049H
	DB	08bH
	DB	0c8H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0ffH
	DB	0cbH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01fH
	DB	0eeH
	DB	0fH
	DB	084H
	DB	095H
	DB	00H
	DB	00H
	DB	00H
	DB	0ecH
	DB	03cH
	DB	010H
	DB	074H
	DB	05H
	DB	0ecH
	DB	0a8H
	DB	01fH
	DB	075H
	DB	0caH
	DB	033H
	DB	0c0H
	DB	0fH
	DB	0b7H
	DB	0d5H
	DB	044H
	DB	08dH
	DB	05dH
	DB	04H
	DB	0eeH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d3H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	08dH
	DB	055H
	DB	02H
	DB	040H
	DB	0fH
	DB	0b6H
	DB	0c7H
	DB	0eeH
	DB	08dH
	DB	055H
	DB	03H
	DB	040H
	DB	0fH
	DB	0b6H
	DB	0c6H
	DB	0eeH
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01fH
	DB	0eeH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	0c3H
	DB	0fH
	DB	0b7H
	DB	0d5H
	DB	045H
	DB	085H
	DB	0c0H
	DB	0b0H
	DB	07H
	DB	0eeH
	DB	07eH
	DB	0fH
	DB	049H
	DB	08bH
	DB	0c8H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01fH
	DB	0eeH
	DB	0ecH
	DB	0a8H
	DB	01fH
	DB	074H
	DB	02aH
	DB	045H
	DB	085H
	DB	0c0H
	DB	07eH
	DB	0fH
	DB	049H
	DB	08bH
	DB	0c8H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	066H
	DB	0baH
	DB	080H
	DB	00H
	DB	0b0H
	DB	0ffH
	DB	0eeH
	DB	075H
	DB	0f4H
	DB	041H
	DB	0ffH
	DB	0c9H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d2H
	DB	0b0H
	DB	01fH
	DB	0eeH
	DB	074H
	DB	019H
	DB	0ecH
	DB	03cH
	DB	010H
	DB	074H
	DB	05H
	DB	0ecH
	DB	0a8H
	DB	01fH
	DB	075H
	DB	0d6H
	DB	0fH
	DB	0b7H
	DB	0d5H
	DB	0ecH
	DB	084H
	DB	0c0H
	DB	075H
	DB	07H
	DB	041H
	DB	0fH
	DB	0b7H
	DB	0d3H
	DB	0ecH
	DB	0ebH
	DB	02H
	DB	032H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	08H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	010H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	018H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	020H
	DB	048H
	DB	083H
	DB	0c4H
	DB	028H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	038H
	DB	048H
	DB	089H
	DB	05cH
	DB	024H
	DB	058H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0f0H
	DB	0fH
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	07cH
	DB	024H
	DB	030H
	DB	049H
	DB	08bH
	DB	0d8H
	DB	048H
	DB	08bH
	DB	0faH
	DB	0e8H
	DB	06H
	DB	08H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	010H
	DB	0cH
	DB	0fH
	DB	085H
	DB	0b6H
	DB	00H
	DB	00H
	DB	00H
	DB	083H
	DB	07bH
	DB	08H
	DB	01H
	DB	0fH
	DB	085H
	DB	0acH
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05fH
	DB	018H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	06H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	08H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	04H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	02H
	DB	0fH
	DB	0b7H
	DB	013H
	DB	089H
	DB	044H
	DB	024H
	DB	028H
	DB	089H
	DB	04cH
	DB	024H
	DB	020H
	DB	048H
	DB	08dH
	DB	0dH
	DB	054H
	DB	0fH
	DB	00H
	DB	00H
	DB	0e8H
	DB	0c5H
	DB	07H
	DB	00H
	DB	00H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	01bH
	DB	066H
	DB	045H
	DB	085H
	DB	0dbH
	DB	075H
	DB	024H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	0aH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	08H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	06H
	DB	0fH
	DB	0b7H
	DB	053H
	DB	04H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	02H
	DB	066H
	DB	089H
	DB	044H
	DB	024H
	DB	020H
	DB	0e8H
	DB	015H
	DB	0fdH
	DB	0ffH
	DB	0ffH
	DB	088H
	DB	03H
	DB	0ebH
	DB	029H
	DB	066H
	DB	041H
	DB	083H
	DB	0fbH
	DB	01H
	DB	075H
	DB	022H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	0aH
	DB	044H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	08H
	DB	044H
	DB	0fH
	DB	0b7H
	DB	043H
	DB	06H
	DB	0fH
	DB	0b7H
	DB	053H
	DB	04H
	DB	0fH
	DB	0b7H
	DB	04bH
	DB	02H
	DB	066H
	DB	089H
	DB	044H
	DB	024H
	DB	020H
	DB	0e8H
	DB	0aH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	088H
	DB	03H
	DB	0fH
	DB	0b6H
	DB	013H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0deH
	DB	0eH
	DB	00H
	DB	00H
	DB	0e8H
	DB	05fH
	DB	07H
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	047H
	DB	038H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	058H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	048H
	DB	08dH
	DB	0dH
	DB	099H
	DB	0eH
	DB	00H
	DB	00H
	DB	0e8H
	DB	03aH
	DB	07H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	030H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	058H
	DB	0b8H
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	048H
	DB	083H
	DB	0c4H
	DB	038H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	08bH
	DB	0c4H
	DB	048H
	DB	083H
	DB	0ecH
	DB	048H
	DB	048H
	DB	089H
	DB	058H
	DB	08H
	DB	048H
	DB	089H
	DB	068H
	DB	010H
	DB	048H
	DB	089H
	DB	070H
	DB	018H
	DB	048H
	DB	089H
	DB	078H
	DB	020H
	DB	048H
	DB	08bH
	DB	0baH
	DB	0b8H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	060H
	DB	0f8H
	DB	048H
	DB	0c7H
	DB	042H
	DB	038H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	061H
	DB	040H
	DB	04cH
	DB	089H
	DB	068H
	DB	0f0H
	DB	04cH
	DB	08bH
	DB	06aH
	DB	018H
	DB	04cH
	DB	089H
	DB	070H
	DB	0e8H
	DB	08aH
	DB	07H
	DB	084H
	DB	0c0H
	DB	044H
	DB	08bH
	DB	077H
	DB	010H
	DB	048H
	DB	08bH
	DB	0e9H
	DB	08bH
	DB	04fH
	DB	08H
	DB	048H
	DB	08bH
	DB	0f2H
	DB	0bbH
	DB	02H
	DB	00H
	DB	00H
	DB	0c0H
	DB	0fH
	DB	084H
	DB	0c7H
	DB	03H
	DB	00H
	DB	00H
	DB	03cH
	DB	02H
	DB	0fH
	DB	084H
	DB	0bfH
	DB	03H
	DB	00H
	DB	00H
	DB	03cH
	DB	0eH
	DB	0fH
	DB	085H
	DB	0b9H
	DB	03H
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	047H
	DB	018H
	DB	041H
	DB	081H
	DB	0f8H
	DB	00H
	DB	028H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	087H
	DB	06dH
	DB	02H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	00H
	DB	028H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	084H
	DB	02fH
	DB	02H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	068H
	DB	0eH
	DB	050H
	DB	0c3H
	DB	0fH
	DB	087H
	DB	0c2H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	068H
	DB	0eH
	DB	050H
	DB	0c3H
	DB	0fH
	DB	084H
	DB	0a3H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0c0H
	DB	0b0H
	DB	0f1H
	DB	0afH
	DB	03cH
	DB	041H
	DB	083H
	DB	0f8H
	DB	014H
	DB	0fH
	DB	087H
	DB	070H
	DB	03H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	015H
	DB	03aH
	DB	0d2H
	DB	0ffH
	DB	0ffH
	DB	042H
	DB	08bH
	DB	08cH
	DB	082H
	DB	0c0H
	DB	032H
	DB	00H
	DB	00H
	DB	048H
	DB	03H
	DB	0caH
	DB	0ffH
	DB	0e1H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	0efH
	DB	0efH
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	047H
	DB	03H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	0baH
	DB	0f1H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	032H
	DB	03H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	0a5H
	DB	0f3H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	01dH
	DB	03H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	0b0H
	DB	0f4H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	08H
	DB	03H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	09bH
	DB	0f5H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0f3H
	DB	02H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	076H
	DB	0f6H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0deH
	DB	02H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	014H
	DB	0eeH
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0ccH
	DB	02H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	04H
	DB	020H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	087H
	DB	0d3H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	04H
	DB	020H
	DB	050H
	DB	0c3H
	DB	074H
	DB	073H
	DB	041H
	DB	081H
	DB	0f8H
	DB	06cH
	DB	0eH
	DB	050H
	DB	0c3H
	DB	074H
	DB	058H
	DB	041H
	DB	081H
	DB	0f8H
	DB	070H
	DB	0eH
	DB	050H
	DB	0c3H
	DB	074H
	DB	022H
	DB	041H
	DB	081H
	DB	0f8H
	DB	00H
	DB	020H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	085H
	DB	097H
	DB	02H
	DB	00H
	DB	00H
	DB	045H
	DB	08bH
	DB	0c8H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	0e8H
	DB	0caH
	DB	0e6H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	082H
	DB	02H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0dcH
	DB	0eH
	DB	00H
	DB	00H
	DB	0e8H
	DB	06dH
	DB	05H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	039H
	DB	0fdH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	0dH
	DB	0a2H
	DB	0eH
	DB	00H
	DB	00H
	DB	08bH
	DB	0d8H
	DB	0e8H
	DB	051H
	DB	05H
	DB	00H
	DB	00H
	DB	0e9H
	DB	055H
	DB	02H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	0bH
	DB	0ecH
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	043H
	DB	02H
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	0c9H
	DB	045H
	DB	08bH
	DB	0c6H
	DB	049H
	DB	08bH
	DB	0d5H
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	093H
	DB	0e8H
	DB	0ffH
	DB	0ffH
	DB	085H
	DB	0c0H
	DB	08bH
	DB	0d8H
	DB	078H
	DB	02aH
	DB	048H
	DB	08dH
	DB	0dH
	DB	046H
	DB	0eH
	DB	00H
	DB	00H
	DB	0baH
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	012H
	DB	05H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	05H
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	0feH
	DB	04H
	DB	00H
	DB	00H
	DB	0e9H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0bcH
	DB	0dH
	DB	00H
	DB	00H
	DB	0bbH
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0e8H
	DB	0e8H
	DB	04H
	DB	00H
	DB	00H
	DB	0e9H
	DB	0ecH
	DB	01H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	08H
	DB	020H
	DB	050H
	DB	0c3H
	DB	074H
	DB	022H
	DB	041H
	DB	081H
	DB	0f8H
	DB	080H
	DB	025H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	085H
	DB	0d6H
	DB	01H
	DB	00H
	DB	00H
	DB	045H
	DB	08bH
	DB	0c8H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	0e8H
	DB	059H
	DB	0e7H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0c1H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	04bH
	DB	0dH
	DB	00H
	DB	00H
	DB	041H
	DB	0b8H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	08bH
	DB	0d6H
	DB	0e8H
	DB	0a3H
	DB	04H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	0feH
	DB	08H
	DB	072H
	DB	024H
	DB	049H
	DB	08bH
	DB	055H
	DB	00H
	DB	048H
	DB	0c7H
	DB	0c1H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	015H
	DB	036H
	DB	011H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0efH
	DB	0cH
	DB	00H
	DB	00H
	DB	08bH
	DB	0d8H
	DB	0e8H
	DB	07eH
	DB	04H
	DB	00H
	DB	00H
	DB	0e9H
	DB	082H
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	0acH
	DB	0cH
	DB	00H
	DB	00H
	DB	0bbH
	DB	09aH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0e8H
	DB	068H
	DB	04H
	DB	00H
	DB	00H
	DB	0e9H
	DB	06cH
	DB	01H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	0dH
	DB	076H
	DB	0cH
	DB	00H
	DB	00H
	DB	0e8H
	DB	057H
	DB	04H
	DB	00H
	DB	00H
	DB	044H
	DB	08bH
	DB	04fH
	DB	018H
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	048H
	DB	08bH
	DB	0d6H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	0e8H
	DB	02fH
	DB	0f7H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08dH
	DB	0dH
	DB	038H
	DB	0cH
	DB	00H
	DB	00H
	DB	08bH
	DB	0d8H
	DB	0e8H
	DB	037H
	DB	04H
	DB	00H
	DB	00H
	DB	0e9H
	DB	03bH
	DB	01H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	04H
	DB	064H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	087H
	DB	03eH
	DB	02H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	04H
	DB	064H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	084H
	DB	085H
	DB	01H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	040H
	DB	028H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	087H
	DB	066H
	DB	01H
	DB	00H
	DB	00H
	DB	041H
	DB	081H
	DB	0f8H
	DB	040H
	DB	028H
	DB	050H
	DB	0c3H
	DB	074H
	DB	05eH
	DB	041H
	DB	081H
	DB	0f8H
	DB	04H
	DB	028H
	DB	050H
	DB	0c3H
	DB	074H
	DB	040H
	DB	041H
	DB	081H
	DB	0f8H
	DB	08H
	DB	028H
	DB	050H
	DB	0c3H
	DB	074H
	DB	022H
	DB	041H
	DB	081H
	DB	0f8H
	DB	0cH
	DB	028H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	085H
	DB	0ecH
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	08bH
	DB	0c8H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	0e8H
	DB	09fH
	DB	0f8H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0d7H
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	08bH
	DB	0c8H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	0e8H
	DB	0faH
	DB	0f7H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0c2H
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	08bH
	DB	0c8H
	DB	049H
	DB	08bH
	DB	0ccH
	DB	04cH
	DB	08bH
	DB	0c7H
	DB	0e8H
	DB	045H
	DB	0f7H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0adH
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	083H
	DB	0feH
	DB	010H
	DB	0fH
	DB	085H
	DB	0eeH
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	03bH
	DB	0ceH
	DB	0fH
	DB	085H
	DB	0e5H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	08bH
	DB	06dH
	DB	08H
	DB	041H
	DB	08bH
	DB	04dH
	DB	00H
	DB	045H
	DB	033H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0d5H
	DB	0ffH
	DB	015H
	DB	0a7H
	DB	0fH
	DB	00H
	DB	00H
	DB	048H
	DB	085H
	DB	0c0H
	DB	048H
	DB	08bH
	DB	0f8H
	DB	0fH
	DB	084H
	DB	0beH
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	033H
	DB	0c9H
	DB	045H
	DB	033H
	DB	0c0H
	DB	08bH
	DB	0d5H
	DB	048H
	DB	08bH
	DB	0c8H
	DB	048H
	DB	0c7H
	DB	044H
	DB	024H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	015H
	DB	0f9H
	DB	0fH
	DB	00H
	DB	00H
	DB	048H
	DB	085H
	DB	0c0H
	DB	04cH
	DB	08bH
	DB	0f0H
	DB	0fH
	DB	084H
	DB	08cH
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0c8H
	DB	0ffH
	DB	015H
	DB	0dcH
	DB	0fH
	DB	00H
	DB	00H
	DB	0b2H
	DB	01H
	DB	049H
	DB	08bH
	DB	0ceH
	DB	0ffH
	DB	015H
	DB	0c9H
	DB	0fH
	DB	00H
	DB	00H
	DB	0baH
	DB	028H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0c9H
	DB	041H
	DB	0b8H
	DB	044H
	DB	064H
	DB	06bH
	DB	020H
	DB	048H
	DB	08bH
	DB	0d8H
	DB	0ffH
	DB	015H
	DB	0abH
	DB	0fH
	DB	00H
	DB	00H
	DB	04cH
	DB	089H
	DB	070H
	DB	08H
	DB	048H
	DB	089H
	DB	078H
	DB	010H
	DB	048H
	DB	089H
	DB	058H
	DB	018H
	DB	089H
	DB	068H
	DB	020H
	DB	049H
	DB	08bH
	DB	04cH
	DB	024H
	DB	018H
	DB	048H
	DB	089H
	DB	08H
	DB	049H
	DB	089H
	DB	044H
	DB	024H
	DB	018H
	DB	049H
	DB	089H
	DB	05dH
	DB	00H
	DB	048H
	DB	0c7H
	DB	046H
	DB	038H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	0dbH
	DB	033H
	DB	0d2H
	DB	048H
	DB	08bH
	DB	0ceH
	DB	089H
	DB	05eH
	DB	030H
	DB	0ffH
	DB	015H
	DB	06bH
	DB	0fH
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	074H
	DB	024H
	DB	030H
	DB	04cH
	DB	08bH
	DB	06cH
	DB	024H
	DB	038H
	DB	04cH
	DB	08bH
	DB	064H
	DB	024H
	DB	040H
	DB	048H
	DB	08bH
	DB	07cH
	DB	024H
	DB	068H
	DB	048H
	DB	08bH
	DB	074H
	DB	024H
	DB	060H
	DB	048H
	DB	08bH
	DB	06cH
	DB	024H
	DB	058H
	DB	08bH
	DB	0c3H
	DB	048H
	DB	08bH
	DB	05cH
	DB	024H
	DB	050H
	DB	048H
	DB	083H
	DB	0c4H
	DB	048H
	DB	0c3H
	DB	048H
	DB	08bH
	DB	0d5H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0ffH
	DB	015H
	DB	0c5H
	DB	0eH
	DB	00H
	DB	00H
	DB	0bbH
	DB	09aH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0ebH
	DB	0b5H
	DB	0bbH
	DB	0dH
	DB	00H
	DB	00H
	DB	0c0H
	DB	0ebH
	DB	0aeH
	DB	041H
	DB	081H
	DB	0f8H
	DB	044H
	DB	028H
	DB	050H
	DB	0c3H
	DB	074H
	DB	018H
	DB	041H
	DB	081H
	DB	0f8H
	DB	00H
	DB	064H
	DB	050H
	DB	0c3H
	DB	075H
	DB	09cH
	DB	048H
	DB	08bH
	DB	0d7H
	DB	048H
	DB	08bH
	DB	0ceH
	DB	0e8H
	DB	0d2H
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0ebH
	DB	08dH
	DB	041H
	DB	083H
	DB	0feH
	DB	010H
	DB	075H
	DB	0d2H
	DB	041H
	DB	0c7H
	DB	045H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	08bH
	DB	07cH
	DB	024H
	DB	018H
	DB	048H
	DB	085H
	DB	0ffH
	DB	048H
	DB	08bH
	DB	0efH
	DB	0fH
	DB	084H
	DB	06eH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	049H
	DB	08bH
	DB	045H
	DB	00H
	DB	048H
	DB	039H
	DB	047H
	DB	018H
	DB	074H
	DB	010H
	DB	048H
	DB	08bH
	DB	0efH
	DB	048H
	DB	08bH
	DB	03fH
	DB	048H
	DB	085H
	DB	0ffH
	DB	075H
	DB	0efH
	DB	0e9H
	DB	054H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	041H
	DB	08bH
	DB	045H
	DB	08H
	DB	039H
	DB	047H
	DB	020H
	DB	075H
	DB	096H
	DB	048H
	DB	08bH
	DB	057H
	DB	08H
	DB	048H
	DB	08bH
	DB	04fH
	DB	018H
	DB	0ffH
	DB	015H
	DB	056H
	DB	0eH
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	04fH
	DB	08H
	DB	0ffH
	DB	015H
	DB	044H
	DB	0eH
	DB	00H
	DB	00H
	DB	08bH
	DB	057H
	DB	020H
	DB	048H
	DB	08bH
	DB	04fH
	DB	010H
	DB	0ffH
	DB	015H
	DB	02fH
	DB	0eH
	DB	00H
	DB	00H
	DB	049H
	DB	03bH
	DB	07cH
	DB	024H
	DB	018H
	DB	075H
	DB	018H
	DB	048H
	DB	08bH
	DB	07H
	DB	033H
	DB	0d2H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	049H
	DB	089H
	DB	044H
	DB	024H
	DB	018H
	DB	0ffH
	DB	015H
	DB	0dH
	DB	0eH
	DB	00H
	DB	00H
	DB	0e9H
	DB	05H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08bH
	DB	07H
	DB	033H
	DB	0d2H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	048H
	DB	089H
	DB	045H
	DB	00H
	DB	0ffH
	DB	015H
	DB	0f6H
	DB	0dH
	DB	00H
	DB	00H
	DB	0e9H
	DB	0eeH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	041H
	DB	081H
	DB	0f8H
	DB	048H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	077H
	DB	03eH
	DB	041H
	DB	081H
	DB	0f8H
	DB	048H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	023H
	DB	041H
	DB	081H
	DB	0f8H
	DB	08H
	DB	064H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	084H
	DB	035H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	041H
	DB	081H
	DB	0f8H
	DB	040H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	0dH
	DB	041H
	DB	081H
	DB	0f8H
	DB	044H
	DB	0a4H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	085H
	DB	0bbH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08bH
	DB	0d7H
	DB	048H
	DB	08bH
	DB	0ceH
	DB	0e8H
	DB	01H
	DB	0e1H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	0a9H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	041H
	DB	081H
	DB	0f8H
	DB	04cH
	DB	0e4H
	DB	050H
	DB	0c3H
	DB	074H
	DB	01cH
	DB	041H
	DB	081H
	DB	0f8H
	DB	054H
	DB	0e4H
	DB	050H
	DB	0c3H
	DB	0fH
	DB	085H
	DB	093H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08bH
	DB	0cdH
	DB	0e8H
	DB	05cH
	DB	0e7H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	084H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08bH
	DB	0d7H
	DB	048H
	DB	08bH
	DB	0ceH
	DB	0e8H
	DB	03aH
	DB	0e3H
	DB	0ffH
	DB	0ffH
	DB	08bH
	DB	0d8H
	DB	0e9H
	DB	072H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	066H
	DB	090H
	DB	03cH
	DB	02eH
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	0d3H
	DB	02dH
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	0e8H
	DB	02dH
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	0fdH
	DB	02dH
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	012H
	DB	02eH
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	02fH
	DB	031H
	DB	00H
	DB	00H
	DB	027H
	DB	02eH
	DB	00H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	048H
	DB	083H
	DB	0ecH
	DB	078H
	DB	048H
	DB	089H
	DB	0bcH
	DB	024H
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0f9H
	DB	048H
	DB	08dH
	DB	015H
	DB	07aH
	DB	0aH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	048H
	DB	0ffH
	DB	015H
	DB	0d7H
	DB	0cH
	DB	00H
	DB	00H
	DB	04cH
	DB	08dH
	DB	05cH
	DB	024H
	DB	040H
	DB	04cH
	DB	08dH
	DB	044H
	DB	024H
	DB	048H
	DB	04cH
	DB	089H
	DB	05cH
	DB	024H
	DB	030H
	DB	041H
	DB	0b9H
	DB	050H
	DB	0c3H
	DB	00H
	DB	00H
	DB	0baH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0cfH
	DB	0c6H
	DB	044H
	DB	024H
	DB	028H
	DB	00H
	DB	0c7H
	DB	044H
	DB	024H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	015H
	DB	09fH
	DB	0cH
	DB	00H
	DB	00H
	DB	085H
	DB	0c0H
	DB	0fH
	DB	088H
	DB	09aH
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	044H
	DB	024H
	DB	040H
	DB	033H
	DB	0d2H
	DB	048H
	DB	089H
	DB	09cH
	DB	024H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	048H
	DB	040H
	DB	048H
	DB	089H
	DB	011H
	DB	048H
	DB	089H
	DB	051H
	DB	08H
	DB	048H
	DB	089H
	DB	051H
	DB	010H
	DB	048H
	DB	089H
	DB	051H
	DB	018H
	DB	048H
	DB	08dH
	DB	015H
	DB	0deH
	DB	03H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	058H
	DB	0ffH
	DB	015H
	DB	06bH
	DB	0cH
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	054H
	DB	024H
	DB	048H
	DB	048H
	DB	08dH
	DB	04cH
	DB	024H
	DB	058H
	DB	0ffH
	DB	015H
	DB	0bbH
	DB	0cH
	DB	00H
	DB	00H
	DB	085H
	DB	0c0H
	DB	08bH
	DB	0d8H
	DB	079H
	DB	0dH
	DB	048H
	DB	08bH
	DB	04cH
	DB	024H
	DB	040H
	DB	0ffH
	DB	015H
	DB	012H
	DB	0dH
	DB	00H
	DB	00H
	DB	0ebH
	DB	039H
	DB	048H
	DB	08bH
	DB	044H
	DB	024H
	DB	040H
	DB	048H
	DB	08bH
	DB	048H
	DB	040H
	DB	048H
	DB	089H
	DB	041H
	DB	010H
	DB	048H
	DB	08dH
	DB	05H
	DB	02cH
	DB	0f9H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	0c7H
	DB	041H
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	047H
	DB	070H
	DB	048H
	DB	089H
	DB	087H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	089H
	DB	087H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08dH
	DB	05H
	DB	0abH
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	089H
	DB	047H
	DB	068H
	DB	08bH
	DB	0c3H
	DB	048H
	DB	08bH
	DB	09cH
	DB	024H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	0bcH
	DB	024H
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	083H
	DB	0c4H
	DB	078H
	DB	0c3H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ffH
	DB	025H
	DB	0f4H
	DB	0bH
	DB	00H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	090H
	DB	04cH
	DB	08bH
	DB	0d9H
	DB	048H
	DB	02bH
	DB	0d1H
	DB	0fH
	DB	086H
	DB	09cH
	DB	01H
	DB	00H
	DB	00H
	DB	049H
	DB	083H
	DB	0f8H
	DB	08H
	DB	072H
	DB	062H
	DB	0f6H
	DB	0c1H
	DB	07H
	DB	074H
	DB	037H
	DB	0f6H
	DB	0c1H
	DB	01H
	DB	074H
	DB	0cH
	DB	08aH
	DB	04H
	DB	0aH
	DB	049H
	DB	0ffH
	DB	0c8H
	DB	088H
	DB	01H
	DB	048H
	DB	083H
	DB	0c1H
	DB	01H
	DB	0f6H
	DB	0c1H
	DB	02H
	DB	074H
	DB	0fH
	DB	066H
	DB	08bH
	DB	04H
	DB	0aH
	DB	049H
	DB	083H
	DB	0e8H
	DB	02H
	DB	066H
	DB	089H
	DB	01H
	DB	048H
	DB	083H
	DB	0c1H
	DB	02H
	DB	0f6H
	DB	0c1H
	DB	04H
	DB	074H
	DB	0dH
	DB	08bH
	DB	04H
	DB	0aH
	DB	049H
	DB	083H
	DB	0e8H
	DB	04H
	DB	089H
	DB	01H
	DB	048H
	DB	083H
	DB	0c1H
	DB	04H
	DB	04dH
	DB	08bH
	DB	0c8H
	DB	049H
	DB	0c1H
	DB	0e9H
	DB	05H
	DB	075H
	DB	050H
	DB	04dH
	DB	08bH
	DB	0c8H
	DB	049H
	DB	0c1H
	DB	0e9H
	DB	03H
	DB	074H
	DB	014H
	DB	048H
	DB	08bH
	DB	04H
	DB	0aH
	DB	048H
	DB	089H
	DB	01H
	DB	048H
	DB	083H
	DB	0c1H
	DB	08H
	DB	049H
	DB	0ffH
	DB	0c9H
	DB	075H
	DB	0f0H
	DB	049H
	DB	083H
	DB	0e0H
	DB	07H
	DB	04dH
	DB	085H
	DB	0c0H
	DB	075H
	DB	07H
	DB	049H
	DB	08bH
	DB	0c3H
	DB	0c3H
	DB	066H
	DB	066H
	DB	090H
	DB	08aH
	DB	04H
	DB	0aH
	DB	088H
	DB	01H
	DB	048H
	DB	0ffH
	DB	0c1H
	DB	049H
	DB	0ffH
	DB	0c8H
	DB	075H
	DB	0f3H
	DB	049H
	DB	08bH
	DB	0c3H
	DB	0c3H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	049H
	DB	081H
	DB	0f9H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	073H
	DB	042H
	DB	048H
	DB	08bH
	DB	04H
	DB	0aH
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	08H
	DB	048H
	DB	083H
	DB	0c1H
	DB	020H
	DB	048H
	DB	089H
	DB	041H
	DB	0e0H
	DB	04cH
	DB	089H
	DB	051H
	DB	0e8H
	DB	048H
	DB	08bH
	DB	044H
	DB	0aH
	DB	0f0H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0f8H
	DB	049H
	DB	0ffH
	DB	0c9H
	DB	048H
	DB	089H
	DB	041H
	DB	0f0H
	DB	04cH
	DB	089H
	DB	051H
	DB	0f8H
	DB	075H
	DB	0d4H
	DB	049H
	DB	083H
	DB	0e0H
	DB	01fH
	DB	0e9H
	DB	072H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	090H
	DB	048H
	DB	081H
	DB	0faH
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	072H
	DB	0b5H
	DB	0b8H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	018H
	DB	04H
	DB	0aH
	DB	0fH
	DB	018H
	DB	044H
	DB	0aH
	DB	040H
	DB	048H
	DB	081H
	DB	0c1H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0c8H
	DB	075H
	DB	0ecH
	DB	048H
	DB	081H
	DB	0e9H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	0cH
	DB	0aH
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	08H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	09H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	08H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	010H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	018H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	010H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	018H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	020H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	028H
	DB	048H
	DB	083H
	DB	0c1H
	DB	040H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	0e0H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	0e8H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	0f0H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0f8H
	DB	0ffH
	DB	0c8H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	0f0H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	0f8H
	DB	075H
	DB	0aaH
	DB	049H
	DB	081H
	DB	0e8H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	049H
	DB	081H
	DB	0f8H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	0fH
	DB	083H
	DB	071H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0f0H
	DB	080H
	DB	0cH
	DB	024H
	DB	00H
	DB	0e9H
	DB	0baH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	074H
	DB	06fH
	DB	049H
	DB	03H
	DB	0c8H
	DB	049H
	DB	083H
	DB	0f8H
	DB	08H
	DB	072H
	DB	061H
	DB	0f6H
	DB	0c1H
	DB	07H
	DB	074H
	DB	036H
	DB	0f6H
	DB	0c1H
	DB	01H
	DB	074H
	DB	0bH
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	08aH
	DB	04H
	DB	0aH
	DB	049H
	DB	0ffH
	DB	0c8H
	DB	088H
	DB	01H
	DB	0f6H
	DB	0c1H
	DB	02H
	DB	074H
	DB	0fH
	DB	048H
	DB	083H
	DB	0e9H
	DB	02H
	DB	066H
	DB	08bH
	DB	04H
	DB	0aH
	DB	049H
	DB	083H
	DB	0e8H
	DB	02H
	DB	066H
	DB	089H
	DB	01H
	DB	0f6H
	DB	0c1H
	DB	04H
	DB	074H
	DB	0dH
	DB	048H
	DB	083H
	DB	0e9H
	DB	04H
	DB	08bH
	DB	04H
	DB	0aH
	DB	049H
	DB	083H
	DB	0e8H
	DB	04H
	DB	089H
	DB	01H
	DB	04dH
	DB	08bH
	DB	0c8H
	DB	049H
	DB	0c1H
	DB	0e9H
	DB	05H
	DB	075H
	DB	050H
	DB	04dH
	DB	08bH
	DB	0c8H
	DB	049H
	DB	0c1H
	DB	0e9H
	DB	03H
	DB	074H
	DB	014H
	DB	048H
	DB	083H
	DB	0e9H
	DB	08H
	DB	048H
	DB	08bH
	DB	04H
	DB	0aH
	DB	049H
	DB	0ffH
	DB	0c9H
	DB	048H
	DB	089H
	DB	01H
	DB	075H
	DB	0f0H
	DB	049H
	DB	083H
	DB	0e0H
	DB	07H
	DB	04dH
	DB	085H
	DB	0c0H
	DB	075H
	DB	07H
	DB	049H
	DB	08bH
	DB	0c3H
	DB	0c3H
	DB	066H
	DB	066H
	DB	090H
	DB	048H
	DB	0ffH
	DB	0c9H
	DB	08aH
	DB	04H
	DB	0aH
	DB	049H
	DB	0ffH
	DB	0c8H
	DB	088H
	DB	01H
	DB	075H
	DB	0f3H
	DB	049H
	DB	08bH
	DB	0c3H
	DB	0c3H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	090H
	DB	049H
	DB	081H
	DB	0f9H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	073H
	DB	042H
	DB	048H
	DB	08bH
	DB	044H
	DB	0aH
	DB	0f8H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0f0H
	DB	048H
	DB	083H
	DB	0e9H
	DB	020H
	DB	048H
	DB	089H
	DB	041H
	DB	018H
	DB	04cH
	DB	089H
	DB	051H
	DB	010H
	DB	048H
	DB	08bH
	DB	044H
	DB	0aH
	DB	08H
	DB	04cH
	DB	08bH
	DB	014H
	DB	0aH
	DB	049H
	DB	0ffH
	DB	0c9H
	DB	048H
	DB	089H
	DB	041H
	DB	08H
	DB	04cH
	DB	089H
	DB	011H
	DB	075H
	DB	0d5H
	DB	049H
	DB	083H
	DB	0e0H
	DB	01fH
	DB	0e9H
	DB	073H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	066H
	DB	066H
	DB	090H
	DB	066H
	DB	090H
	DB	048H
	DB	081H
	DB	0faH
	DB	00H
	DB	0f0H
	DB	0ffH
	DB	0ffH
	DB	077H
	DB	0b5H
	DB	0b8H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	081H
	DB	0e9H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	018H
	DB	04H
	DB	0aH
	DB	0fH
	DB	018H
	DB	044H
	DB	0aH
	DB	040H
	DB	0ffH
	DB	0c8H
	DB	075H
	DB	0ecH
	DB	048H
	DB	081H
	DB	0c1H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	0f8H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0f0H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	0f8H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	0f0H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	0e8H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0e0H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	0e8H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	0e0H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	0d8H
	DB	04cH
	DB	08bH
	DB	054H
	DB	0aH
	DB	0d0H
	DB	048H
	DB	083H
	DB	0e9H
	DB	040H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	018H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	051H
	DB	010H
	DB	04cH
	DB	08bH
	DB	04cH
	DB	0aH
	DB	08H
	DB	04cH
	DB	08bH
	DB	014H
	DB	0aH
	DB	0ffH
	DB	0c8H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	049H
	DB	08H
	DB	04cH
	DB	0fH
	DB	0c3H
	DB	011H
	DB	075H
	DB	0aaH
	DB	049H
	DB	081H
	DB	0e8H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	049H
	DB	081H
	DB	0f8H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	0fH
	DB	083H
	DB	071H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0f0H
	DB	080H
	DB	0cH
	DB	024H
	DB	00H
	DB	0e9H
	DB	0baH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	05cH
	DB	00H
	DB	044H
	DB	00H
	DB	06fH
	DB	00H
	DB	073H
	DB	00H
	DB	044H
	DB	00H
	DB	065H
	DB	00H
	DB	076H
	DB	00H
	DB	069H
	DB	00H
	DB	063H
	DB	00H
	DB	065H
	DB	00H
	DB	073H
	DB	00H
	DB	05cH
	DB	00H
	DB	047H
	DB	00H
	DB	049H
	DB	00H
	DB	04fH
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	078H
	DB	069H
	DB	074H
	DB	020H
	DB	049H
	DB	04fH
	DB	020H
	DB	052H
	DB	065H
	DB	061H
	DB	064H
	DB	020H
	DB	025H
	DB	064H
	DB	020H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	049H
	DB	06eH
	DB	020H
	DB	049H
	DB	04fH
	DB	020H
	DB	052H
	DB	065H
	DB	061H
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	078H
	DB	069H
	DB	074H
	DB	020H
	DB	049H
	DB	04fH
	DB	020H
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	020H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	077H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	020H
	DB	025H
	DB	064H
	DB	020H
	DB	074H
	DB	06fH
	DB	020H
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	049H
	DB	06eH
	DB	020H
	DB	049H
	DB	04fH
	DB	020H
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	020H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	056H
	DB	069H
	DB	072H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	05cH
	DB	00H
	DB	044H
	DB	00H
	DB	065H
	DB	00H
	DB	076H
	DB	00H
	DB	069H
	DB	00H
	DB	063H
	DB	00H
	DB	065H
	DB	00H
	DB	05cH
	DB	00H
	DB	050H
	DB	00H
	DB	068H
	DB	00H
	DB	079H
	DB	00H
	DB	073H
	DB	00H
	DB	069H
	DB	00H
	DB	063H
	DB	00H
	DB	061H
	DB	00H
	DB	06cH
	DB	00H
	DB	04dH
	DB	00H
	DB	065H
	DB	00H
	DB	06dH
	DB	00H
	DB	06fH
	DB	00H
	DB	072H
	DB	00H
	DB	079H
	DB	00H
	DB	00H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	020H
	DB	053H
	DB	06dH
	DB	061H
	DB	072H
	DB	074H
	DB	046H
	DB	061H
	DB	06eH
	DB	04fH
	DB	04eH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	020H
	DB	053H
	DB	06dH
	DB	061H
	DB	072H
	DB	074H
	DB	046H
	DB	061H
	DB	06eH
	DB	04fH
	DB	046H
	DB	046H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	020H
	DB	043H
	DB	068H
	DB	06bH
	DB	043H
	DB	050H
	DB	055H
	DB	053H
	DB	06dH
	DB	061H
	DB	072H
	DB	074H
	DB	046H
	DB	061H
	DB	06eH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	020H
	DB	043H
	DB	050H
	DB	055H
	DB	054H
	DB	065H
	DB	06dH
	DB	070H
	DB	050H
	DB	077H
	DB	06dH
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	020H
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	020H
	DB	06eH
	DB	06fH
	DB	074H
	DB	020H
	DB	06dH
	DB	061H
	DB	074H
	DB	063H
	DB	068H
	DB	020H
	DB	021H
	DB	021H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	06fH
	DB	072H
	DB	067H
	DB	05fH
	DB	061H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	02cH
	DB	06fH
	DB	072H
	DB	067H
	DB	05fH
	DB	063H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	062H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	02cH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	063H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	035H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	034H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	062H
	DB	070H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	02cH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	064H
	DB	069H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	063H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	02cH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	064H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	061H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	02cH
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	062H
	DB	078H
	DB	03dH
	DB	020H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	033H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	032H
	DB	02eH
	DB	035H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	032H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	031H
	DB	02eH
	DB	039H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	064H
	DB	062H
	DB	067H
	DB	031H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	020H
	DB	049H
	DB	06fH
	DB	063H
	DB	074H
	DB	06cH
	DB	053H
	DB	04dH
	DB	049H
	DB	043H
	DB	06dH
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	056H
	DB	061H
	DB	06cH
	DB	069H
	DB	064H
	DB	028H
	DB	064H
	DB	077H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	029H
	DB	03dH
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	070H
	DB	074H
	DB	050H
	DB	061H
	DB	067H
	DB	065H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	02dH
	DB	03eH
	DB	064H
	DB	077H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	020H
	DB	056H
	DB	041H
	DB	03dH
	DB	025H
	DB	078H
	DB	02cH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	06fH
	DB	066H
	DB	028H
	DB	064H
	DB	077H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	029H
	DB	03dH
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	050H
	DB	068H
	DB	079H
	DB	073H
	DB	069H
	DB	063H
	DB	061H
	DB	06cH
	DB	020H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	03dH
	DB	025H
	DB	078H
	DB	02cH
	DB	064H
	DB	077H
	DB	04cH
	DB	069H
	DB	06eH
	DB	073H
	DB	03dH
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	03dH
	DB	025H
	DB	078H
	DB	02cH
	DB	053H
	DB	072H
	DB	063H
	DB	03dH
	DB	025H
	DB	078H
	DB	02cH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	03dH
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	065H
	DB	020H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	03dH
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	028H
	DB	046H
	DB	052H
	DB	045H
	DB	045H
	DB	05fH
	DB	050H
	DB	048H
	DB	059H
	DB	053H
	DB	05fH
	DB	04dH
	DB	045H
	DB	04dH
	DB	029H
	DB	020H
	DB	049H
	DB	06eH
	DB	073H
	DB	075H
	DB	066H
	DB	066H
	DB	069H
	DB	063H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	020H
	DB	069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	020H
	DB	06fH
	DB	072H
	DB	020H
	DB	06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	020H
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	0aH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	050H
	DB	068H
	DB	079H
	DB	073H
	DB	069H
	DB	063H
	DB	061H
	DB	06cH
	DB	020H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	03dH
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	044H
	DB	065H
	DB	066H
	DB	061H
	DB	075H
	DB	06cH
	DB	074H
	DB	020H
	DB	056H
	DB	041H
	DB	03dH
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	020H
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	021H
	DB	021H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	052H
	DB	065H
	DB	074H
	DB	020H
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	030H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	02cH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	031H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	02cH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	032H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	02cH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	033H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	02cH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	034H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	02cH
	DB	070H
	DB	074H
	DB	072H
	DB	05bH
	DB	035H
	DB	05dH
	DB	03dH
	DB	030H
	DB	078H
	DB	025H
	DB	078H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	020H
	DB	049H
	DB	06fH
	DB	063H
	DB	074H
	DB	06cH
	DB	053H
	DB	04dH
	DB	042H
	DB	055H
	DB	053H
	DB	043H
	DB	06dH
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	078H
	DB	069H
	DB	074H
	DB	020H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	020H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	021H
	DB	021H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	049H
	DB	06eH
	DB	020H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	020H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	021H
	DB	021H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04dH
	DB	041H
	DB	050H
	DB	04dH
	DB	045H
	DB	04dH
	DB	02eH
	DB	053H
	DB	059H
	DB	053H
	DB	03aH
	DB	020H
	DB	05aH
	DB	077H
	DB	055H
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	04fH
	DB	066H
	DB	053H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	020H
	DB	066H
	DB	061H
	DB	069H
	DB	06cH
	DB	065H
	DB	064H
	DB	0aH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04dH
	DB	041H
	DB	050H
	DB	04dH
	DB	045H
	DB	04dH
	DB	02eH
	DB	053H
	DB	059H
	DB	053H
	DB	03aH
	DB	020H
	DB	06dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	020H
	DB	073H
	DB	075H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	066H
	DB	075H
	DB	06cH
	DB	06cH
	DB	079H
	DB	020H
	DB	075H
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	070H
	DB	065H
	DB	064H
	DB	0aH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	049H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	04cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	03dH
	DB	025H
	DB	064H
	DB	02cH
	DB	073H
	DB	07aH
	DB	069H
	DB	065H
	DB	06fH
	DB	066H
	DB	028H
	DB	050H
	DB	056H
	DB	04fH
	DB	049H
	DB	044H
	DB	029H
	DB	03dH
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04dH
	DB	041H
	DB	050H
	DB	04dH
	DB	045H
	DB	04dH
	DB	02eH
	DB	053H
	DB	059H
	DB	053H
	DB	03aH
	DB	020H
	DB	06dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	020H
	DB	06dH
	DB	061H
	DB	070H
	DB	020H
	DB	066H
	DB	061H
	DB	069H
	DB	06cH
	DB	065H
	DB	064H
	DB	020H
	DB	03aH
	DB	028H
	DB	0aH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	04dH
	DB	041H
	DB	050H
	DB	04dH
	DB	045H
	DB	04dH
	DB	02eH
	DB	053H
	DB	059H
	DB	053H
	DB	03aH
	DB	020H
	DB	06dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	020H
	DB	073H
	DB	075H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	066H
	DB	075H
	DB	06cH
	DB	06cH
	DB	079H
	DB	020H
	DB	06dH
	DB	061H
	DB	070H
	DB	070H
	DB	065H
	DB	064H
	DB	0aH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	06fH
	DB	066H
	DB	028H
	DB	050H
	DB	056H
	DB	04fH
	DB	049H
	DB	044H
	DB	029H
	DB	03dH
	DB	025H
	DB	064H
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	045H
	DB	078H
	DB	069H
	DB	074H
	DB	020H
	DB	053H
	DB	04dH
	DB	042H
	DB	055H
	DB	053H
	DB	020H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	072H
	DB	06fH
	DB	06cH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	049H
	DB	06eH
	DB	020H
	DB	053H
	DB	04dH
	DB	042H
	DB	055H
	DB	053H
	DB	020H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	072H
	DB	06fH
	DB	06cH
	DB	00H
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	05cH
	DB	00H
	DB	044H
	DB	00H
	DB	065H
	DB	00H
	DB	076H
	DB	00H
	DB	069H
	DB	00H
	DB	063H
	DB	00H
	DB	065H
	DB	00H
	DB	05cH
	DB	00H
	DB	047H
	DB	00H
	DB	049H
	DB	00H
	DB	04fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0c2H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0d4H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ecH
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f8H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	024H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	058H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	068H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	088H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0a4H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aaH
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0d6H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f8H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	012H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	026H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	044H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08aH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09eH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0baH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0caH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0b4H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	098H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0cbH
	DB	0f9H
	DB	0d4H
	DB	051H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	00H
	DB	00H
	DB	00H
	DB	0cH
	DB	041H
	DB	00H
	DB	00H
	DB	0cH
	DB	033H
	DB	00H
	DB	00H
	DB	052H
	DB	053H
	DB	044H
	DB	053H
	DB	023H
	DB	0bfH
	DB	029H
	DB	04dH
	DB	041H
	DB	0b3H
	DB	0e0H
	DB	04eH
	DB	0a9H
	DB	064H
	DB	0dcH
	DB	0ffH
	DB	050H
	DB	04bH
	DB	0b4H
	DB	096H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	03aH
	DB	05cH
	DB	079H
	DB	063H
	DB	063H
	DB	05cH
	DB	067H
	DB	064H
	DB	072H
	DB	076H
	DB	036H
	DB	034H
	DB	05cH
	DB	06fH
	DB	062H
	DB	06aH
	DB	066H
	DB	072H
	DB	065H
	DB	05fH
	DB	077H
	DB	06eH
	DB	065H
	DB	074H
	DB	05fH
	DB	041H
	DB	04dH
	DB	044H
	DB	036H
	DB	034H
	DB	05cH
	DB	061H
	DB	06dH
	DB	064H
	DB	036H
	DB	034H
	DB	05cH
	DB	067H
	DB	064H
	DB	072H
	DB	076H
	DB	036H
	DB	034H
	DB	02eH
	DB	070H
	DB	064H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	0d4H
	DB	07H
	DB	00H
	DB	070H
	DB	012H
	DB	00H
	DB	00H
	DB	08fH
	DB	012H
	DB	00H
	DB	00H
	DB	084H
	DB	041H
	DB	00H
	DB	00H
	DB	021H
	DB	015H
	DB	04H
	DB	00H
	DB	015H
	DB	0d4H
	DB	07H
	DB	00H
	DB	05H
	DB	0c4H
	DB	08H
	DB	00H
	DB	070H
	DB	012H
	DB	00H
	DB	00H
	DB	08fH
	DB	012H
	DB	00H
	DB	00H
	DB	084H
	DB	041H
	DB	00H
	DB	00H
	DB	01H
	DB	01cH
	DB	09H
	DB	00H
	DB	01cH
	DB	074H
	DB	0dH
	DB	00H
	DB	017H
	DB	064H
	DB	0cH
	DB	00H
	DB	012H
	DB	054H
	DB	0bH
	DB	00H
	DB	09H
	DB	034H
	DB	0aH
	DB	00H
	DB	04H
	DB	082H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	080H
	DB	013H
	DB	00H
	DB	00H
	DB	09cH
	DB	013H
	DB	00H
	DB	00H
	DB	0c0H
	DB	041H
	DB	00H
	DB	00H
	DB	021H
	DB	05H
	DB	02H
	DB	00H
	DB	05H
	DB	0c4H
	DB	06H
	DB	00H
	DB	080H
	DB	013H
	DB	00H
	DB	00H
	DB	09cH
	DB	013H
	DB	00H
	DB	00H
	DB	0c0H
	DB	041H
	DB	00H
	DB	00H
	DB	01H
	DB	01cH
	DB	09H
	DB	00H
	DB	01cH
	DB	074H
	DB	0bH
	DB	00H
	DB	017H
	DB	064H
	DB	0aH
	DB	00H
	DB	012H
	DB	054H
	DB	09H
	DB	00H
	DB	09H
	DB	034H
	DB	08H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	012H
	DB	05H
	DB	00H
	DB	012H
	DB	074H
	DB	0bH
	DB	00H
	DB	0dH
	DB	034H
	DB	0aH
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	01fH
	DB	09H
	DB	00H
	DB	01fH
	DB	074H
	DB	05H
	DB	00H
	DB	013H
	DB	064H
	DB	06H
	DB	00H
	DB	0eH
	DB	054H
	DB	07H
	DB	00H
	DB	09H
	DB	034H
	DB	08H
	DB	00H
	DB	04H
	DB	082H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	064H
	DB	05H
	DB	00H
	DB	00H
	DB	054H
	DB	06H
	DB	00H
	DB	0f0H
	DB	015H
	DB	00H
	DB	00H
	DB	0f4H
	DB	015H
	DB	00H
	DB	00H
	DB	038H
	DB	042H
	DB	00H
	DB	00H
	DB	021H
	DB	01eH
	DB	08H
	DB	00H
	DB	01eH
	DB	074H
	DB	04H
	DB	00H
	DB	019H
	DB	064H
	DB	05H
	DB	00H
	DB	0eH
	DB	054H
	DB	06H
	DB	00H
	DB	05H
	DB	034H
	DB	0bH
	DB	00H
	DB	0f0H
	DB	015H
	DB	00H
	DB	00H
	DB	0f4H
	DB	015H
	DB	00H
	DB	00H
	DB	038H
	DB	042H
	DB	00H
	DB	00H
	DB	01H
	DB	04H
	DB	01H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	01aH
	DB	05H
	DB	00H
	DB	01aH
	DB	074H
	DB	05H
	DB	00H
	DB	0dH
	DB	034H
	DB	06H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	090H
	DB	017H
	DB	00H
	DB	00H
	DB	06bH
	DB	018H
	DB	00H
	DB	00H
	DB	074H
	DB	042H
	DB	00H
	DB	00H
	DB	021H
	DB	08H
	DB	02H
	DB	00H
	DB	08H
	DB	074H
	DB	01dH
	DB	00H
	DB	090H
	DB	017H
	DB	00H
	DB	00H
	DB	06bH
	DB	018H
	DB	00H
	DB	00H
	DB	074H
	DB	042H
	DB	00H
	DB	00H
	DB	01H
	DB	039H
	DB	0cH
	DB	00H
	DB	039H
	DB	0d4H
	DB	01bH
	DB	00H
	DB	023H
	DB	0c4H
	DB	01cH
	DB	00H
	DB	01fH
	DB	064H
	DB	01eH
	DB	00H
	DB	019H
	DB	054H
	DB	01fH
	DB	00H
	DB	011H
	DB	034H
	DB	020H
	DB	00H
	DB	0aH
	DB	01H
	DB	021H
	DB	00H
	DB	021H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	064H
	DB	06H
	DB	00H
	DB	00H
	DB	054H
	DB	0bH
	DB	00H
	DB	00H
	DB	01aH
	DB	00H
	DB	00H
	DB	0bH
	DB	01aH
	DB	00H
	DB	00H
	DB	0c8H
	DB	042H
	DB	00H
	DB	00H
	DB	021H
	DB	01bH
	DB	08H
	DB	00H
	DB	01bH
	DB	074H
	DB	05H
	DB	00H
	DB	016H
	DB	064H
	DB	06H
	DB	00H
	DB	0eH
	DB	054H
	DB	0bH
	DB	00H
	DB	05H
	DB	034H
	DB	0aH
	DB	00H
	DB	00H
	DB	01aH
	DB	00H
	DB	00H
	DB	0bH
	DB	01aH
	DB	00H
	DB	00H
	DB	0c8H
	DB	042H
	DB	00H
	DB	00H
	DB	01H
	DB	04H
	DB	01H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	01bH
	DB	0bH
	DB	00H
	DB	01bH
	DB	0c4H
	DB	0cH
	DB	00H
	DB	017H
	DB	074H
	DB	011H
	DB	00H
	DB	013H
	DB	064H
	DB	010H
	DB	00H
	DB	0fH
	DB	054H
	DB	0fH
	DB	00H
	DB	0bH
	DB	034H
	DB	0eH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	01H
	DB	01aH
	DB	09H
	DB	00H
	DB	01aH
	DB	074H
	DB	011H
	DB	00H
	DB	013H
	DB	064H
	DB	010H
	DB	00H
	DB	0fH
	DB	054H
	DB	0fH
	DB	00H
	DB	0bH
	DB	034H
	DB	0eH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0d0H
	DB	01dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	070H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	05H
	DB	08H
	DB	00H
	DB	05H
	DB	034H
	DB	0eH
	DB	00H
	DB	00H
	DB	0c4H
	DB	0cH
	DB	00H
	DB	00H
	DB	064H
	DB	010H
	DB	00H
	DB	00H
	DB	054H
	DB	0fH
	DB	00H
	DB	0d0H
	DB	01dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	070H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	077H
	DB	01eH
	DB	00H
	DB	00H
	DB	058H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	08H
	DB	02H
	DB	00H
	DB	08H
	DB	064H
	DB	010H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	077H
	DB	01eH
	DB	00H
	DB	00H
	DB	058H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	0cH
	DB	04H
	DB	00H
	DB	0cH
	DB	0c4H
	DB	0cH
	DB	00H
	DB	04H
	DB	054H
	DB	0fH
	DB	00H
	DB	0d0H
	DB	01dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	070H
	DB	043H
	DB	00H
	DB	00H
	DB	01H
	DB	0bH
	DB	03H
	DB	00H
	DB	0bH
	DB	074H
	DB	011H
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0b0H
	DB	01fH
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	0c4H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	054H
	DB	0fH
	DB	00H
	DB	0b0H
	DB	01fH
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	0c4H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0b0H
	DB	01fH
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	0c4H
	DB	043H
	DB	00H
	DB	00H
	DB	021H
	DB	05H
	DB	02H
	DB	00H
	DB	05H
	DB	054H
	DB	0fH
	DB	00H
	DB	0b0H
	DB	01fH
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	0c4H
	DB	043H
	DB	00H
	DB	00H
	DB	01H
	DB	013H
	DB	07H
	DB	00H
	DB	013H
	DB	074H
	DB	011H
	DB	00H
	DB	0fH
	DB	064H
	DB	010H
	DB	00H
	DB	0bH
	DB	034H
	DB	0eH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0b0H
	DB	021H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	034H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	034H
	DB	0fH
	DB	00H
	DB	0b0H
	DB	021H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	034H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	0e0H
	DB	021H
	DB	00H
	DB	00H
	DB	020H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	04H
	DB	02H
	DB	00H
	DB	04H
	DB	064H
	DB	010H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	0e0H
	DB	021H
	DB	00H
	DB	00H
	DB	020H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	04H
	DB	02H
	DB	00H
	DB	04H
	DB	034H
	DB	0fH
	DB	00H
	DB	0b0H
	DB	021H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	034H
	DB	044H
	DB	00H
	DB	00H
	DB	01H
	DB	010H
	DB	03H
	DB	00H
	DB	010H
	DB	074H
	DB	011H
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0d0H
	DB	022H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	090H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	074H
	DB	011H
	DB	00H
	DB	0d0H
	DB	022H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	090H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	074H
	DB	011H
	DB	00H
	DB	0d0H
	DB	022H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	090H
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	08H
	DB	04H
	DB	00H
	DB	08H
	DB	074H
	DB	011H
	DB	00H
	DB	04H
	DB	064H
	DB	010H
	DB	00H
	DB	0d0H
	DB	022H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	090H
	DB	044H
	DB	00H
	DB	00H
	DB	01H
	DB	010H
	DB	03H
	DB	00H
	DB	010H
	DB	034H
	DB	0fH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	01H
	DB	016H
	DB	07H
	DB	00H
	DB	016H
	DB	074H
	DB	011H
	DB	00H
	DB	0fH
	DB	064H
	DB	010H
	DB	00H
	DB	0bH
	DB	034H
	DB	0fH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	01H
	DB	01aH
	DB	09H
	DB	00H
	DB	01aH
	DB	074H
	DB	011H
	DB	00H
	DB	013H
	DB	064H
	DB	010H
	DB	00H
	DB	0fH
	DB	054H
	DB	0fH
	DB	00H
	DB	0bH
	DB	034H
	DB	0eH
	DB	00H
	DB	07H
	DB	0c2H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	074H
	DB	04H
	DB	00H
	DB	00H
	DB	064H
	DB	05H
	DB	00H
	DB	010H
	DB	027H
	DB	00H
	DB	00H
	DB	019H
	DB	027H
	DB	00H
	DB	00H
	DB	0fcH
	DB	044H
	DB	00H
	DB	00H
	DB	021H
	DB	01bH
	DB	06H
	DB	00H
	DB	01bH
	DB	074H
	DB	04H
	DB	00H
	DB	012H
	DB	064H
	DB	05H
	DB	00H
	DB	05H
	DB	034H
	DB	06H
	DB	00H
	DB	010H
	DB	027H
	DB	00H
	DB	00H
	DB	019H
	DB	027H
	DB	00H
	DB	00H
	DB	0fcH
	DB	044H
	DB	00H
	DB	00H
	DB	01H
	DB	09H
	DB	01H
	DB	00H
	DB	09H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	017H
	DB	05H
	DB	00H
	DB	017H
	DB	074H
	DB	05H
	DB	00H
	DB	0dH
	DB	034H
	DB	06H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	028H
	DB	00H
	DB	00H
	DB	075H
	DB	028H
	DB	00H
	DB	00H
	DB	040H
	DB	045H
	DB	00H
	DB	00H
	DB	021H
	DB	015H
	DB	06H
	DB	00H
	DB	015H
	DB	074H
	DB	04H
	DB	00H
	DB	0dH
	DB	064H
	DB	05H
	DB	00H
	DB	05H
	DB	034H
	DB	06H
	DB	00H
	DB	060H
	DB	028H
	DB	00H
	DB	00H
	DB	075H
	DB	028H
	DB	00H
	DB	00H
	DB	040H
	DB	045H
	DB	00H
	DB	00H
	DB	01H
	DB	04H
	DB	01H
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	028H
	DB	00H
	DB	00H
	DB	012H
	DB	029H
	DB	00H
	DB	00H
	DB	06cH
	DB	045H
	DB	00H
	DB	00H
	DB	021H
	DB	05H
	DB	02H
	DB	00H
	DB	05H
	DB	074H
	DB	05H
	DB	00H
	DB	0f0H
	DB	028H
	DB	00H
	DB	00H
	DB	012H
	DB	029H
	DB	00H
	DB	00H
	DB	06cH
	DB	045H
	DB	00H
	DB	00H
	DB	01H
	DB	01fH
	DB	07H
	DB	00H
	DB	01fH
	DB	064H
	DB	06H
	DB	00H
	DB	0eH
	DB	054H
	DB	07H
	DB	00H
	DB	09H
	DB	034H
	DB	08H
	DB	00H
	DB	04H
	DB	082H
	DB	00H
	DB	00H
	DB	01H
	DB	01aH
	DB	07H
	DB	00H
	DB	01aH
	DB	074H
	DB	00H
	DB	00H
	DB	016H
	DB	064H
	DB	01H
	DB	00H
	DB	09H
	DB	034H
	DB	02H
	DB	00H
	DB	04H
	DB	022H
	DB	00H
	DB	00H
	DB	01H
	DB	01aH
	DB	09H
	DB	00H
	DB	01aH
	DB	074H
	DB	01H
	DB	00H
	DB	015H
	DB	064H
	DB	02H
	DB	00H
	DB	010H
	DB	054H
	DB	03H
	DB	00H
	DB	09H
	DB	034H
	DB	04H
	DB	00H
	DB	04H
	DB	042H
	DB	00H
	DB	00H
	DB	01H
	DB	015H
	DB	05H
	DB	00H
	DB	015H
	DB	074H
	DB	06H
	DB	00H
	DB	09H
	DB	034H
	DB	0bH
	DB	00H
	DB	04H
	DB	062H
	DB	00H
	DB	00H
	DB	01H
	DB	03aH
	DB	0fH
	DB	00H
	DB	03aH
	DB	0e4H
	DB	06H
	DB	00H
	DB	032H
	DB	0d4H
	DB	07H
	DB	00H
	DB	022H
	DB	0c4H
	DB	08H
	DB	00H
	DB	017H
	DB	074H
	DB	0dH
	DB	00H
	DB	013H
	DB	064H
	DB	0cH
	DB	00H
	DB	0fH
	DB	054H
	DB	0bH
	DB	00H
	DB	0bH
	DB	034H
	DB	0aH
	DB	00H
	DB	07H
	DB	082H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	033H
	DB	00H
	DB	00H
	DB	080H
	DB	033H
	DB	00H
	DB	00H
	DB	04H
	DB	046H
	DB	00H
	DB	00H
	DB	021H
	DB	08H
	DB	02H
	DB	00H
	DB	08H
	DB	034H
	DB	012H
	DB	00H
	DB	020H
	DB	033H
	DB	00H
	DB	00H
	DB	080H
	DB	033H
	DB	00H
	DB	00H
	DB	04H
	DB	046H
	DB	00H
	DB	00H
	DB	01H
	DB	0cH
	DB	03H
	DB	00H
	DB	0cH
	DB	074H
	DB	013H
	DB	00H
	DB	04H
	DB	0e2H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0cdH
	DB	05dH
	DB	020H
	DB	0d2H
	DB	066H
	DB	0d4H
	DB	0ffH
	DB	0ffH
	DB	032H
	DB	0a2H
	DB	0dfH
	DB	02dH
	DB	099H
	DB	02bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	070H
	DB	012H
	DB	00H
	DB	00H
	DB	08fH
	DB	012H
	DB	00H
	DB	00H
	DB	084H
	DB	041H
	DB	00H
	DB	00H
	DB	08fH
	DB	012H
	DB	00H
	DB	00H
	DB	0f6H
	DB	012H
	DB	00H
	DB	00H
	DB	06cH
	DB	041H
	DB	00H
	DB	00H
	DB	0f6H
	DB	012H
	DB	00H
	DB	00H
	DB	071H
	DB	013H
	DB	00H
	DB	00H
	DB	058H
	DB	041H
	DB	00H
	DB	00H
	DB	080H
	DB	013H
	DB	00H
	DB	00H
	DB	09cH
	DB	013H
	DB	00H
	DB	00H
	DB	0c0H
	DB	041H
	DB	00H
	DB	00H
	DB	09cH
	DB	013H
	DB	00H
	DB	00H
	DB	013H
	DB	014H
	DB	00H
	DB	00H
	DB	0acH
	DB	041H
	DB	00H
	DB	00H
	DB	013H
	DB	014H
	DB	00H
	DB	00H
	DB	0aaH
	DB	014H
	DB	00H
	DB	00H
	DB	09cH
	DB	041H
	DB	00H
	DB	00H
	DB	0b0H
	DB	014H
	DB	00H
	DB	00H
	DB	05bH
	DB	015H
	DB	00H
	DB	00H
	DB	0d8H
	DB	041H
	DB	00H
	DB	00H
	DB	070H
	DB	015H
	DB	00H
	DB	00H
	DB	0e1H
	DB	015H
	DB	00H
	DB	00H
	DB	0e8H
	DB	041H
	DB	00H
	DB	00H
	DB	0f0H
	DB	015H
	DB	00H
	DB	00H
	DB	0f4H
	DB	015H
	DB	00H
	DB	00H
	DB	038H
	DB	042H
	DB	00H
	DB	00H
	DB	0f4H
	DB	015H
	DB	00H
	DB	00H
	DB	081H
	DB	016H
	DB	00H
	DB	00H
	DB	018H
	DB	042H
	DB	00H
	DB	00H
	DB	081H
	DB	016H
	DB	00H
	DB	00H
	DB	0b3H
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	00H
	DB	00H
	DB	0c0H
	DB	016H
	DB	00H
	DB	00H
	DB	087H
	DB	017H
	DB	00H
	DB	00H
	DB	040H
	DB	042H
	DB	00H
	DB	00H
	DB	090H
	DB	017H
	DB	00H
	DB	00H
	DB	06bH
	DB	018H
	DB	00H
	DB	00H
	DB	074H
	DB	042H
	DB	00H
	DB	00H
	DB	06bH
	DB	018H
	DB	00H
	DB	00H
	DB	0bdH
	DB	019H
	DB	00H
	DB	00H
	DB	060H
	DB	042H
	DB	00H
	DB	00H
	DB	0bdH
	DB	019H
	DB	00H
	DB	00H
	DB	0edH
	DB	019H
	DB	00H
	DB	00H
	DB	050H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	01aH
	DB	00H
	DB	00H
	DB	0bH
	DB	01aH
	DB	00H
	DB	00H
	DB	0c8H
	DB	042H
	DB	00H
	DB	00H
	DB	0bH
	DB	01aH
	DB	00H
	DB	00H
	DB	0b5H
	DB	01aH
	DB	00H
	DB	00H
	DB	0a8H
	DB	042H
	DB	00H
	DB	00H
	DB	0b5H
	DB	01aH
	DB	00H
	DB	00H
	DB	0e7H
	DB	01aH
	DB	00H
	DB	00H
	DB	090H
	DB	042H
	DB	00H
	DB	00H
	DB	0f0H
	DB	01aH
	DB	00H
	DB	00H
	DB	068H
	DB	01cH
	DB	00H
	DB	00H
	DB	0d0H
	DB	042H
	DB	00H
	DB	00H
	DB	070H
	DB	01cH
	DB	00H
	DB	00H
	DB	0bdH
	DB	01dH
	DB	00H
	DB	00H
	DB	0ecH
	DB	042H
	DB	00H
	DB	00H
	DB	0d0H
	DB	01dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	070H
	DB	043H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01dH
	DB	00H
	DB	00H
	DB	077H
	DB	01eH
	DB	00H
	DB	00H
	DB	058H
	DB	043H
	DB	00H
	DB	00H
	DB	077H
	DB	01eH
	DB	00H
	DB	00H
	DB	0a0H
	DB	01eH
	DB	00H
	DB	00H
	DB	044H
	DB	043H
	DB	00H
	DB	00H
	DB	0a0H
	DB	01eH
	DB	00H
	DB	00H
	DB	0b7H
	DB	01eH
	DB	00H
	DB	00H
	DB	034H
	DB	043H
	DB	00H
	DB	00H
	DB	0b7H
	DB	01eH
	DB	00H
	DB	00H
	DB	08aH
	DB	01fH
	DB	00H
	DB	00H
	DB	014H
	DB	043H
	DB	00H
	DB	00H
	DB	08aH
	DB	01fH
	DB	00H
	DB	00H
	DB	09cH
	DB	01fH
	DB	00H
	DB	00H
	DB	04H
	DB	043H
	DB	00H
	DB	00H
	DB	0b0H
	DB	01fH
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	0c4H
	DB	043H
	DB	00H
	DB	00H
	DB	0f4H
	DB	01fH
	DB	00H
	DB	00H
	DB	05eH
	DB	020H
	DB	00H
	DB	00H
	DB	0b0H
	DB	043H
	DB	00H
	DB	00H
	DB	05eH
	DB	020H
	DB	00H
	DB	00H
	DB	078H
	DB	020H
	DB	00H
	DB	00H
	DB	0a0H
	DB	043H
	DB	00H
	DB	00H
	DB	078H
	DB	020H
	DB	00H
	DB	00H
	DB	095H
	DB	021H
	DB	00H
	DB	00H
	DB	08cH
	DB	043H
	DB	00H
	DB	00H
	DB	095H
	DB	021H
	DB	00H
	DB	00H
	DB	09fH
	DB	021H
	DB	00H
	DB	00H
	DB	07cH
	DB	043H
	DB	00H
	DB	00H
	DB	0b0H
	DB	021H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	034H
	DB	044H
	DB	00H
	DB	00H
	DB	0d8H
	DB	021H
	DB	00H
	DB	00H
	DB	0e0H
	DB	021H
	DB	00H
	DB	00H
	DB	020H
	DB	044H
	DB	00H
	DB	00H
	DB	0e0H
	DB	021H
	DB	00H
	DB	00H
	DB	05bH
	DB	022H
	DB	00H
	DB	00H
	DB	0cH
	DB	044H
	DB	00H
	DB	00H
	DB	05bH
	DB	022H
	DB	00H
	DB	00H
	DB	082H
	DB	022H
	DB	00H
	DB	00H
	DB	0fcH
	DB	043H
	DB	00H
	DB	00H
	DB	082H
	DB	022H
	DB	00H
	DB	00H
	DB	0aaH
	DB	022H
	DB	00H
	DB	00H
	DB	0e8H
	DB	043H
	DB	00H
	DB	00H
	DB	0aaH
	DB	022H
	DB	00H
	DB	00H
	DB	0bcH
	DB	022H
	DB	00H
	DB	00H
	DB	0d8H
	DB	043H
	DB	00H
	DB	00H
	DB	0d0H
	DB	022H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	090H
	DB	044H
	DB	00H
	DB	00H
	DB	0f8H
	DB	022H
	DB	00H
	DB	00H
	DB	07cH
	DB	023H
	DB	00H
	DB	00H
	DB	078H
	DB	044H
	DB	00H
	DB	00H
	DB	07cH
	DB	023H
	DB	00H
	DB	00H
	DB	0a1H
	DB	023H
	DB	00H
	DB	00H
	DB	064H
	DB	044H
	DB	00H
	DB	00H
	DB	0a1H
	DB	023H
	DB	00H
	DB	00H
	DB	0b8H
	DB	023H
	DB	00H
	DB	00H
	DB	050H
	DB	044H
	DB	00H
	DB	00H
	DB	0b8H
	DB	023H
	DB	00H
	DB	00H
	DB	0c7H
	DB	023H
	DB	00H
	DB	00H
	DB	040H
	DB	044H
	DB	00H
	DB	00H
	DB	0d0H
	DB	023H
	DB	00H
	DB	00H
	DB	0baH
	DB	024H
	DB	00H
	DB	00H
	DB	09cH
	DB	044H
	DB	00H
	DB	00H
	DB	0c0H
	DB	024H
	DB	00H
	DB	00H
	DB	06H
	DB	027H
	DB	00H
	DB	00H
	DB	0b0H
	DB	044H
	DB	00H
	DB	00H
	DB	010H
	DB	027H
	DB	00H
	DB	00H
	DB	019H
	DB	027H
	DB	00H
	DB	00H
	DB	0fcH
	DB	044H
	DB	00H
	DB	00H
	DB	019H
	DB	027H
	DB	00H
	DB	00H
	DB	07cH
	DB	027H
	DB	00H
	DB	00H
	DB	0e0H
	DB	044H
	DB	00H
	DB	00H
	DB	07cH
	DB	027H
	DB	00H
	DB	00H
	DB	0adH
	DB	027H
	DB	00H
	DB	00H
	DB	0c8H
	DB	044H
	DB	00H
	DB	00H
	DB	0c0H
	DB	027H
	DB	00H
	DB	00H
	DB	059H
	DB	028H
	DB	00H
	DB	00H
	DB	04H
	DB	045H
	DB	00H
	DB	00H
	DB	060H
	DB	028H
	DB	00H
	DB	00H
	DB	075H
	DB	028H
	DB	00H
	DB	00H
	DB	040H
	DB	045H
	DB	00H
	DB	00H
	DB	075H
	DB	028H
	DB	00H
	DB	00H
	DB	0d5H
	DB	028H
	DB	00H
	DB	00H
	DB	024H
	DB	045H
	DB	00H
	DB	00H
	DB	0d5H
	DB	028H
	DB	00H
	DB	00H
	DB	0dfH
	DB	028H
	DB	00H
	DB	00H
	DB	014H
	DB	045H
	DB	00H
	DB	00H
	DB	0f0H
	DB	028H
	DB	00H
	DB	00H
	DB	012H
	DB	029H
	DB	00H
	DB	00H
	DB	06cH
	DB	045H
	DB	00H
	DB	00H
	DB	012H
	DB	029H
	DB	00H
	DB	00H
	DB	051H
	DB	029H
	DB	00H
	DB	00H
	DB	058H
	DB	045H
	DB	00H
	DB	00H
	DB	051H
	DB	029H
	DB	00H
	DB	00H
	DB	099H
	DB	029H
	DB	00H
	DB	00H
	DB	048H
	DB	045H
	DB	00H
	DB	00H
	DB	0a0H
	DB	029H
	DB	00H
	DB	00H
	DB	0baH
	DB	02aH
	DB	00H
	DB	00H
	DB	080H
	DB	045H
	DB	00H
	DB	00H
	DB	0c0H
	DB	02aH
	DB	00H
	DB	00H
	DB	0ecH
	DB	02bH
	DB	00H
	DB	00H
	DB	094H
	DB	045H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	00H
	DB	00H
	DB	0acH
	DB	045H
	DB	00H
	DB	00H
	DB	010H
	DB	02dH
	DB	00H
	DB	00H
	DB	014H
	DB	033H
	DB	00H
	DB	00H
	DB	0bcH
	DB	045H
	DB	00H
	DB	00H
	DB	020H
	DB	033H
	DB	00H
	DB	00H
	DB	080H
	DB	033H
	DB	00H
	DB	00H
	DB	04H
	DB	046H
	DB	00H
	DB	00H
	DB	080H
	DB	033H
	DB	00H
	DB	00H
	DB	013H
	DB	034H
	DB	00H
	DB	00H
	DB	0f0H
	DB	045H
	DB	00H
	DB	00H
	DB	013H
	DB	034H
	DB	00H
	DB	00H
	DB	020H
	DB	034H
	DB	00H
	DB	00H
	DB	0e0H
	DB	045H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	08bH
	DB	05H
	DB	0f9H
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	049H
	DB	0b9H
	DB	032H
	DB	0a2H
	DB	0dfH
	DB	02dH
	DB	099H
	DB	02bH
	DB	00H
	DB	00H
	DB	048H
	DB	085H
	DB	0c0H
	DB	074H
	DB	05H
	DB	049H
	DB	03bH
	DB	0c1H
	DB	075H
	DB	02fH
	DB	04cH
	DB	08dH
	DB	05H
	DB	0deH
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	0b8H
	DB	020H
	DB	03H
	DB	00H
	DB	00H
	DB	080H
	DB	0f7H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	08bH
	DB	00H
	DB	049H
	DB	033H
	DB	0c0H
	DB	049H
	DB	0b8H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	049H
	DB	023H
	DB	0c0H
	DB	049H
	DB	0fH
	DB	044H
	DB	0c1H
	DB	048H
	DB	089H
	DB	05H
	DB	0b6H
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	048H
	DB	0f7H
	DB	0d0H
	DB	048H
	DB	089H
	DB	05H
	DB	0a4H
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	0e9H
	DB	0b7H
	DB	0c2H
	DB	0ffH
	DB	0ffH
	DB	0ccH
	DB	0ccH
	DB	0ccH
	DB	0b8H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0e2H
	DB	073H
	DB	00H
	DB	00H
	DB	010H
	DB	040H
	DB	00H
	DB	00H
	DB	0a8H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	074H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0c2H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0d4H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ecH
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f8H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	024H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	058H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	068H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	088H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0a4H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aaH
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0d6H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0f8H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	012H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	026H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	044H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08aH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09eH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0baH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0caH
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0b4H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	098H
	DB	071H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	01H
	DB	049H
	DB	06fH
	DB	044H
	DB	065H
	DB	06cH
	DB	065H
	DB	074H
	DB	065H
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	00H
	DB	00H
	DB	055H
	DB	01H
	DB	049H
	DB	06fH
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	065H
	DB	053H
	DB	079H
	DB	06dH
	DB	062H
	DB	06fH
	DB	06cH
	DB	069H
	DB	063H
	DB	04cH
	DB	069H
	DB	06eH
	DB	06bH
	DB	00H
	DB	00H
	DB	04cH
	DB	01H
	DB	049H
	DB	06fH
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	065H
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	00H
	DB	00H
	DB	03eH
	DB	04H
	DB	052H
	DB	074H
	DB	06cH
	DB	049H
	DB	06eH
	DB	069H
	DB	074H
	DB	055H
	DB	06eH
	DB	069H
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	053H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	DB	00H
	DB	031H
	DB	00H
	DB	044H
	DB	062H
	DB	067H
	DB	050H
	DB	072H
	DB	069H
	DB	06eH
	DB	074H
	DB	00H
	DB	00H
	DB	061H
	DB	01H
	DB	049H
	DB	06fH
	DB	044H
	DB	065H
	DB	06cH
	DB	065H
	DB	074H
	DB	065H
	DB	053H
	DB	079H
	DB	06dH
	DB	062H
	DB	06fH
	DB	06cH
	DB	069H
	DB	063H
	DB	04cH
	DB	069H
	DB	06eH
	DB	06bH
	DB	00H
	DB	00H
	DB	058H
	DB	00H
	DB	045H
	DB	078H
	DB	046H
	DB	072H
	DB	065H
	DB	065H
	DB	050H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	057H
	DB	069H
	DB	074H
	DB	068H
	DB	054H
	DB	061H
	DB	067H
	DB	00H
	DB	0eeH
	DB	02H
	DB	04dH
	DB	06dH
	DB	055H
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	049H
	DB	06fH
	DB	053H
	DB	070H
	DB	061H
	DB	063H
	DB	065H
	DB	00H
	DB	00H
	DB	072H
	DB	01H
	DB	049H
	DB	06fH
	DB	046H
	DB	072H
	DB	065H
	DB	065H
	DB	04dH
	DB	064H
	DB	06cH
	DB	00H
	DB	0efH
	DB	02H
	DB	04dH
	DB	06dH
	DB	055H
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	050H
	DB	061H
	DB	067H
	DB	065H
	DB	073H
	DB	00H
	DB	00H
	DB	0d0H
	DB	02H
	DB	04dH
	DB	06dH
	DB	04dH
	DB	061H
	DB	070H
	DB	049H
	DB	06fH
	DB	053H
	DB	070H
	DB	061H
	DB	063H
	DB	065H
	DB	00H
	DB	00H
	DB	025H
	DB	05H
	DB	05aH
	DB	077H
	DB	043H
	DB	06cH
	DB	06fH
	DB	073H
	DB	065H
	DB	00H
	DB	047H
	DB	05H
	DB	05aH
	DB	077H
	DB	04dH
	DB	061H
	DB	070H
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	04fH
	DB	066H
	DB	053H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	DB	00H
	DB	04aH
	DB	03H
	DB	04fH
	DB	062H
	DB	052H
	DB	065H
	DB	066H
	DB	065H
	DB	072H
	DB	065H
	DB	06eH
	DB	063H
	DB	065H
	DB	04fH
	DB	062H
	DB	06aH
	DB	065H
	DB	063H
	DB	074H
	DB	042H
	DB	079H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	00H
	DB	053H
	DB	05H
	DB	05aH
	DB	077H
	DB	04fH
	DB	070H
	DB	065H
	DB	06eH
	DB	053H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	DB	05dH
	DB	02H
	DB	04bH
	DB	065H
	DB	052H
	DB	065H
	DB	06cH
	DB	065H
	DB	061H
	DB	073H
	DB	065H
	DB	049H
	DB	06eH
	DB	053H
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	051H
	DB	075H
	DB	065H
	DB	075H
	DB	065H
	DB	064H
	DB	053H
	DB	070H
	DB	069H
	DB	06eH
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	04bH
	DB	065H
	DB	041H
	DB	063H
	DB	071H
	DB	075H
	DB	069H
	DB	072H
	DB	065H
	DB	049H
	DB	06eH
	DB	053H
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	051H
	DB	075H
	DB	065H
	DB	075H
	DB	065H
	DB	064H
	DB	053H
	DB	070H
	DB	069H
	DB	06eH
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	DB	00H
	DB	0bbH
	DB	02H
	DB	04dH
	DB	06dH
	DB	046H
	DB	072H
	DB	065H
	DB	065H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	069H
	DB	067H
	DB	075H
	DB	06fH
	DB	075H
	DB	073H
	DB	04dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	DB	00H
	DB	0c6H
	DB	02H
	DB	04dH
	DB	06dH
	DB	049H
	DB	073H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	056H
	DB	061H
	DB	06cH
	DB	069H
	DB	064H
	DB	00H
	DB	00H
	DB	0acH
	DB	02H
	DB	04dH
	DB	06dH
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	065H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	069H
	DB	067H
	DB	075H
	DB	06fH
	DB	075H
	DB	073H
	DB	04dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	DB	00H
	DB	0c0H
	DB	02H
	DB	04dH
	DB	06dH
	DB	047H
	DB	065H
	DB	074H
	DB	050H
	DB	068H
	DB	079H
	DB	073H
	DB	069H
	DB	063H
	DB	061H
	DB	06cH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	DB	00H
	DB	0f6H
	DB	01H
	DB	049H
	DB	06fH
	DB	066H
	DB	043H
	DB	06fH
	DB	06dH
	DB	070H
	DB	06cH
	DB	065H
	DB	074H
	DB	065H
	DB	052H
	DB	065H
	DB	071H
	DB	075H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	DB	00H
	DB	046H
	DB	00H
	DB	045H
	DB	078H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	065H
	DB	050H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	057H
	DB	069H
	DB	074H
	DB	068H
	DB	054H
	DB	061H
	DB	067H
	DB	00H
	DB	0d1H
	DB	02H
	DB	04dH
	DB	06dH
	DB	04dH
	DB	061H
	DB	070H
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	050H
	DB	061H
	DB	067H
	DB	065H
	DB	073H
	DB	00H
	DB	00H
	DB	0b2H
	DB	02H
	DB	04dH
	DB	06dH
	DB	042H
	DB	075H
	DB	069H
	DB	06cH
	DB	064H
	DB	04dH
	DB	064H
	DB	06cH
	DB	046H
	DB	06fH
	DB	072H
	DB	04eH
	DB	06fH
	DB	06eH
	DB	050H
	DB	061H
	DB	067H
	DB	065H
	DB	064H
	DB	050H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	00H
	DB	033H
	DB	01H
	DB	049H
	DB	06fH
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	065H
	DB	04dH
	DB	064H
	DB	06cH
	DB	00H
	DB	091H
	DB	05H
	DB	05aH
	DB	077H
	DB	055H
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	04fH
	DB	066H
	DB	053H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	DB	00H
	DB	06eH
	DB	074H
	DB	06fH
	DB	073H
	DB	06bH
	DB	072H
	DB	06eH
	DB	06cH
	DB	02eH
	DB	065H
	DB	078H
	DB	065H
	DB	00H
	DB	00H
	DB	02fH
	DB	00H
	DB	048H
	DB	061H
	DB	06cH
	DB	054H
	DB	072H
	DB	061H
	DB	06eH
	DB	073H
	DB	06cH
	DB	061H
	DB	074H
	DB	065H
	DB	042H
	DB	075H
	DB	073H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	DB	00H
	DB	048H
	DB	041H
	DB	04cH
	DB	02eH
	DB	064H
	DB	06cH
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	018H
	DB	00H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	04H
	DB	00H
	DB	00H
	DB	048H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	080H
	DB	00H
	DB	00H
	DB	088H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	088H
	DB	03H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	00H
	DB	053H
	DB	00H
	DB	05fH
	DB	00H
	DB	056H
	DB	00H
	DB	045H
	DB	00H
	DB	052H
	DB	00H
	DB	053H
	DB	00H
	DB	049H
	DB	00H
	DB	04fH
	DB	00H
	DB	04eH
	DB	00H
	DB	05fH
	DB	00H
	DB	049H
	DB	00H
	DB	04eH
	DB	00H
	DB	046H
	DB	00H
	DB	04fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0bdH
	DB	04H
	DB	0efH
	DB	0feH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	05H
	DB	00H
	DB	026H
	DB	07H
	DB	0ceH
	DB	0eH
	DB	02H
	DB	00H
	DB	05H
	DB	00H
	DB	026H
	DB	07H
	DB	0ceH
	DB	0eH
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	04H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0e8H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	053H
	DB	00H
	DB	074H
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	067H
	DB	00H
	DB	046H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	049H
	DB	00H
	DB	06eH
	DB	00H
	DB	066H
	DB	00H
	DB	06fH
	DB	00H
	DB	00H
	DB	00H
	DB	0c4H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	030H
	DB	00H
	DB	034H
	DB	00H
	DB	030H
	DB	00H
	DB	039H
	DB	00H
	DB	030H
	DB	00H
	DB	034H
	DB	00H
	DB	042H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	00H
	DB	025H
	DB	00H
	DB	01H
	DB	00H
	DB	043H
	DB	00H
	DB	06fH
	DB	00H
	DB	06dH
	DB	00H
	DB	070H
	DB	00H
	DB	061H
	DB	00H
	DB	06eH
	DB	00H
	DB	079H
	DB	00H
	DB	04eH
	DB	00H
	DB	061H
	DB	00H
	DB	06dH
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	057H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	064H
	DB	00H
	DB	06fH
	DB	00H
	DB	077H
	DB	00H
	DB	073H
	DB	00H
	DB	020H
	DB	00H
	DB	028H
	DB	00H
	DB	052H
	DB	00H
	DB	029H
	DB	00H
	DB	020H
	DB	00H
	DB	053H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	076H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	020H
	DB	00H
	DB	032H
	DB	00H
	DB	030H
	DB	00H
	DB	030H
	DB	00H
	DB	033H
	DB	00H
	DB	020H
	DB	00H
	DB	044H
	DB	00H
	DB	044H
	DB	00H
	DB	04bH
	DB	00H
	DB	020H
	DB	00H
	DB	070H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	076H
	DB	00H
	DB	069H
	DB	00H
	DB	064H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	00H
	DB	0fH
	DB	00H
	DB	01H
	DB	00H
	DB	046H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	044H
	DB	00H
	DB	065H
	DB	00H
	DB	073H
	DB	00H
	DB	063H
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	070H
	DB	00H
	DB	074H
	DB	00H
	DB	069H
	DB	00H
	DB	06fH
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	047H
	DB	00H
	DB	049H
	DB	00H
	DB	047H
	DB	00H
	DB	041H
	DB	00H
	DB	042H
	DB	00H
	DB	059H
	DB	00H
	DB	054H
	DB	00H
	DB	045H
	DB	00H
	DB	020H
	DB	00H
	DB	054H
	DB	00H
	DB	06fH
	DB	00H
	DB	06fH
	DB	00H
	DB	06cH
	DB	00H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05eH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	046H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	056H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	073H
	DB	00H
	DB	069H
	DB	00H
	DB	06fH
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	035H
	DB	00H
	DB	02eH
	DB	00H
	DB	032H
	DB	00H
	DB	02eH
	DB	00H
	DB	033H
	DB	00H
	DB	037H
	DB	00H
	DB	039H
	DB	00H
	DB	030H
	DB	00H
	DB	02eH
	DB	00H
	DB	031H
	DB	00H
	DB	038H
	DB	00H
	DB	033H
	DB	00H
	DB	030H
	DB	00H
	DB	020H
	DB	00H
	DB	062H
	DB	00H
	DB	075H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	074H
	DB	00H
	DB	020H
	DB	00H
	DB	062H
	DB	00H
	DB	079H
	DB	00H
	DB	03aH
	DB	00H
	DB	020H
	DB	00H
	DB	057H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	044H
	DB	00H
	DB	044H
	DB	00H
	DB	04bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	09H
	DB	00H
	DB	01H
	DB	00H
	DB	049H
	DB	00H
	DB	06eH
	DB	00H
	DB	074H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	06eH
	DB	00H
	DB	061H
	DB	00H
	DB	06cH
	DB	00H
	DB	04eH
	DB	00H
	DB	061H
	DB	00H
	DB	06dH
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	00H
	DB	064H
	DB	00H
	DB	072H
	DB	00H
	DB	076H
	DB	00H
	DB	02eH
	DB	00H
	DB	073H
	DB	00H
	DB	079H
	DB	00H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	080H
	DB	00H
	DB	02eH
	DB	00H
	DB	01H
	DB	00H
	DB	04cH
	DB	00H
	DB	065H
	DB	00H
	DB	067H
	DB	00H
	DB	061H
	DB	00H
	DB	06cH
	DB	00H
	DB	043H
	DB	00H
	DB	06fH
	DB	00H
	DB	070H
	DB	00H
	DB	079H
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	067H
	DB	00H
	DB	068H
	DB	00H
	DB	074H
	DB	00H
	DB	00H
	DB	00H
	DB	0a9H
	DB	00H
	DB	020H
	DB	00H
	DB	04dH
	DB	00H
	DB	069H
	DB	00H
	DB	063H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	073H
	DB	00H
	DB	06fH
	DB	00H
	DB	066H
	DB	00H
	DB	074H
	DB	00H
	DB	020H
	DB	00H
	DB	043H
	DB	00H
	DB	06fH
	DB	00H
	DB	072H
	DB	00H
	DB	070H
	DB	00H
	DB	06fH
	DB	00H
	DB	072H
	DB	00H
	DB	061H
	DB	00H
	DB	074H
	DB	00H
	DB	069H
	DB	00H
	DB	06fH
	DB	00H
	DB	06eH
	DB	00H
	DB	02eH
	DB	00H
	DB	020H
	DB	00H
	DB	041H
	DB	00H
	DB	06cH
	DB	00H
	DB	06cH
	DB	00H
	DB	020H
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	067H
	DB	00H
	DB	068H
	DB	00H
	DB	074H
	DB	00H
	DB	073H
	DB	00H
	DB	020H
	DB	00H
	DB	072H
	DB	00H
	DB	065H
	DB	00H
	DB	073H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	076H
	DB	00H
	DB	065H
	DB	00H
	DB	064H
	DB	00H
	DB	02eH
	DB	00H
	DB	00H
	DB	00H
	DB	03aH
	DB	00H
	DB	09H
	DB	00H
	DB	01H
	DB	00H
	DB	04fH
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	067H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	061H
	DB	00H
	DB	06cH
	DB	00H
	DB	046H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	06eH
	DB	00H
	DB	061H
	DB	00H
	DB	06dH
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	00H
	DB	064H
	DB	00H
	DB	072H
	DB	00H
	DB	076H
	DB	00H
	DB	02eH
	DB	00H
	DB	073H
	DB	00H
	DB	079H
	DB	00H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	00H
	DB	023H
	DB	00H
	DB	01H
	DB	00H
	DB	050H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	064H
	DB	00H
	DB	075H
	DB	00H
	DB	063H
	DB	00H
	DB	074H
	DB	00H
	DB	04eH
	DB	00H
	DB	061H
	DB	00H
	DB	06dH
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	057H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	064H
	DB	00H
	DB	06fH
	DB	00H
	DB	077H
	DB	00H
	DB	073H
	DB	00H
	DB	020H
	DB	00H
	DB	028H
	DB	00H
	DB	052H
	DB	00H
	DB	029H
	DB	00H
	DB	020H
	DB	00H
	DB	053H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	076H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	020H
	DB	00H
	DB	032H
	DB	00H
	DB	030H
	DB	00H
	DB	030H
	DB	00H
	DB	033H
	DB	00H
	DB	020H
	DB	00H
	DB	044H
	DB	00H
	DB	044H
	DB	00H
	DB	04bH
	DB	00H
	DB	020H
	DB	00H
	DB	064H
	DB	00H
	DB	072H
	DB	00H
	DB	069H
	DB	00H
	DB	076H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	050H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	064H
	DB	00H
	DB	075H
	DB	00H
	DB	063H
	DB	00H
	DB	074H
	DB	00H
	DB	056H
	DB	00H
	DB	065H
	DB	00H
	DB	072H
	DB	00H
	DB	073H
	DB	00H
	DB	069H
	DB	00H
	DB	06fH
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	00H
	DB	035H
	DB	00H
	DB	02eH
	DB	00H
	DB	032H
	DB	00H
	DB	02eH
	DB	00H
	DB	033H
	DB	00H
	DB	037H
	DB	00H
	DB	039H
	DB	00H
	DB	030H
	DB	00H
	DB	02eH
	DB	00H
	DB	031H
	DB	00H
	DB	038H
	DB	00H
	DB	033H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
	DB	00H
	DB	044H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	056H
	DB	00H
	DB	061H
	DB	00H
	DB	072H
	DB	00H
	DB	046H
	DB	00H
	DB	069H
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	049H
	DB	00H
	DB	06eH
	DB	00H
	DB	066H
	DB	00H
	DB	06fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	024H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	054H
	DB	00H
	DB	072H
	DB	00H
	DB	061H
	DB	00H
	DB	06eH
	DB	00H
	DB	073H
	DB	00H
	DB	06cH
	DB	00H
	DB	061H
	DB	00H
	DB	074H
	DB	00H
	DB	069H
	DB	00H
	DB	06fH
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09H
	DB	04H
	DB	0b0H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	030H
	DB	082H
	DB	01cH
	DB	03fH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	07H
	DB	02H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	030H
	DB	030H
	DB	082H
	DB	01cH
	DB	02cH
	DB	02H
	DB	01H
	DB	01H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	05H
	DB	00H
	DB	030H
	DB	068H
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	04H
	DB	0a0H
	DB	05aH
	DB	030H
	DB	058H
	DB	030H
	DB	033H
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	0fH
	DB	030H
	DB	025H
	DB	03H
	DB	01H
	DB	00H
	DB	0a0H
	DB	020H
	DB	0a2H
	DB	01eH
	DB	080H
	DB	01cH
	DB	00H
	DB	03cH
	DB	00H
	DB	03cH
	DB	00H
	DB	03cH
	DB	00H
	DB	04fH
	DB	00H
	DB	062H
	DB	00H
	DB	073H
	DB	00H
	DB	06fH
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	074H
	DB	00H
	DB	065H
	DB	00H
	DB	03eH
	DB	00H
	DB	03eH
	DB	00H
	DB	03eH
	DB	030H
	DB	021H
	DB	030H
	DB	09H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	05H
	DB	00H
	DB	04H
	DB	014H
	DB	0fH
	DB	050H
	DB	034H
	DB	0fcH
	DB	0f5H
	DB	0b3H
	DB	04bH
	DB	0e2H
	DB	02aH
	DB	072H
	DB	0d2H
	DB	0ecH
	DB	0c2H
	DB	09eH
	DB	034H
	DB	08eH
	DB	093H
	DB	0b6H
	DB	0f0H
	DB	0fH
	DB	0a0H
	DB	082H
	DB	017H
	DB	0b7H
	DB	030H
	DB	082H
	DB	03H
	DB	0eeH
	DB	030H
	DB	082H
	DB	03H
	DB	057H
	DB	0a0H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	010H
	DB	07eH
	DB	093H
	DB	0ebH
	DB	0fbH
	DB	07cH
	DB	0c6H
	DB	04eH
	DB	059H
	DB	0eaH
	DB	04bH
	DB	09aH
	DB	077H
	DB	0d4H
	DB	06H
	DB	0fcH
	DB	03bH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	030H
	DB	081H
	DB	08bH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	05aH
	DB	041H
	DB	031H
	DB	015H
	DB	030H
	DB	013H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	08H
	DB	013H
	DB	0cH
	DB	057H
	DB	065H
	DB	073H
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	020H
	DB	043H
	DB	061H
	DB	070H
	DB	065H
	DB	031H
	DB	014H
	DB	030H
	DB	012H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	07H
	DB	013H
	DB	0bH
	DB	044H
	DB	075H
	DB	072H
	DB	062H
	DB	061H
	DB	06eH
	DB	076H
	DB	069H
	DB	06cH
	DB	06cH
	DB	065H
	DB	031H
	DB	0fH
	DB	030H
	DB	0dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	06H
	DB	054H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	014H
	DB	054H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	020H
	DB	043H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	066H
	DB	069H
	DB	063H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	01fH
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	016H
	DB	054H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	020H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	073H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	043H
	DB	041H
	DB	030H
	DB	01eH
	DB	017H
	DB	0dH
	DB	031H
	DB	032H
	DB	031H
	DB	032H
	DB	032H
	DB	031H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	05aH
	DB	017H
	DB	0dH
	DB	032H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	030H
	DB	032H
	DB	033H
	DB	035H
	DB	039H
	DB	035H
	DB	039H
	DB	05aH
	DB	030H
	DB	05eH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	014H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	043H
	DB	06fH
	DB	072H
	DB	070H
	DB	06fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	053H
	DB	065H
	DB	072H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	020H
	DB	043H
	DB	041H
	DB	020H
	DB	02dH
	DB	020H
	DB	047H
	DB	032H
	DB	030H
	DB	082H
	DB	01H
	DB	022H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	01H
	DB	0fH
	DB	00H
	DB	030H
	DB	082H
	DB	01H
	DB	0aH
	DB	02H
	DB	082H
	DB	01H
	DB	01H
	DB	00H
	DB	0b1H
	DB	0acH
	DB	0b3H
	DB	049H
	DB	054H
	DB	04bH
	DB	097H
	DB	01cH
	DB	012H
	DB	0aH
	DB	0d8H
	DB	025H
	DB	079H
	DB	091H
	DB	022H
	DB	057H
	DB	02aH
	DB	06fH
	DB	0dcH
	DB	0b8H
	DB	026H
	DB	0c4H
	DB	043H
	DB	073H
	DB	06bH
	DB	0c2H
	DB	0bfH
	DB	02eH
	DB	050H
	DB	05aH
	DB	0fbH
	DB	014H
	DB	0c2H
	DB	076H
	DB	08eH
	DB	043H
	DB	01H
	DB	025H
	DB	043H
	DB	0b4H
	DB	0a1H
	DB	0e2H
	DB	045H
	DB	0f4H
	DB	0e8H
	DB	0b7H
	DB	07bH
	DB	0c3H
	DB	074H
	DB	0ccH
	DB	022H
	DB	0d7H
	DB	0b4H
	DB	094H
	DB	00H
	DB	02H
	DB	0f7H
	DB	04dH
	DB	0edH
	DB	0bfH
	DB	0b4H
	DB	0b7H
	DB	044H
	DB	024H
	DB	06bH
	DB	0cdH
	DB	05fH
	DB	045H
	DB	03bH
	DB	0d1H
	DB	044H
	DB	0ceH
	DB	043H
	DB	012H
	DB	073H
	DB	017H
	DB	082H
	DB	08bH
	DB	069H
	DB	0b4H
	DB	02bH
	DB	0cbH
	DB	099H
	DB	01eH
	DB	0acH
	DB	072H
	DB	01bH
	DB	026H
	DB	04dH
	DB	071H
	DB	01fH
	DB	0b1H
	DB	031H
	DB	0ddH
	DB	0fbH
	DB	051H
	DB	061H
	DB	02H
	DB	053H
	DB	0a6H
	DB	0aaH
	DB	0f5H
	DB	049H
	DB	02cH
	DB	05H
	DB	078H
	DB	045H
	DB	0a5H
	DB	02fH
	DB	089H
	DB	0ceH
	DB	0e7H
	DB	099H
	DB	0e7H
	DB	0feH
	DB	08cH
	DB	0e2H
	DB	057H
	DB	03fH
	DB	03dH
	DB	0c6H
	DB	092H
	DB	0dcH
	DB	04aH
	DB	0f8H
	DB	07bH
	DB	033H
	DB	0e4H
	DB	079H
	DB	0aH
	DB	0fbH
	DB	0f0H
	DB	075H
	DB	088H
	DB	041H
	DB	09cH
	DB	0ffH
	DB	0c5H
	DB	03H
	DB	051H
	DB	099H
	DB	0aaH
	DB	0d7H
	DB	06cH
	DB	09fH
	DB	093H
	DB	069H
	DB	087H
	DB	065H
	DB	029H
	DB	083H
	DB	085H
	DB	0c2H
	DB	060H
	DB	014H
	DB	0c4H
	DB	0c8H
	DB	0c9H
	DB	03bH
	DB	014H
	DB	0daH
	DB	0c0H
	DB	081H
	DB	0f0H
	DB	01fH
	DB	0dH
	DB	074H
	DB	0deH
	DB	092H
	DB	022H
	DB	0abH
	DB	0caH
	DB	0f7H
	DB	0fbH
	DB	074H
	DB	07cH
	DB	027H
	DB	0e6H
	DB	0f7H
	DB	04aH
	DB	01bH
	DB	07fH
	DB	0a7H
	DB	0c3H
	DB	09eH
	DB	02dH
	DB	0aeH
	DB	08aH
	DB	0eaH
	DB	0a6H
	DB	0e6H
	DB	0aaH
	DB	027H
	DB	016H
	DB	07dH
	DB	061H
	DB	0f7H
	DB	098H
	DB	071H
	DB	011H
	DB	0bcH
	DB	0e2H
	DB	050H
	DB	0a1H
	DB	04bH
	DB	0e5H
	DB	05dH
	DB	0faH
	DB	0e5H
	DB	0eH
	DB	0a7H
	DB	02cH
	DB	09fH
	DB	0aaH
	DB	065H
	DB	020H
	DB	0d3H
	DB	0d8H
	DB	096H
	DB	0e8H
	DB	0c8H
	DB	07cH
	DB	0a5H
	DB	04eH
	DB	048H
	DB	044H
	DB	0ffH
	DB	019H
	DB	0e2H
	DB	044H
	DB	07H
	DB	092H
	DB	0bH
	DB	0d7H
	DB	068H
	DB	084H
	DB	080H
	DB	05dH
	DB	06aH
	DB	078H
	DB	064H
	DB	045H
	DB	0cdH
	DB	060H
	DB	046H
	DB	07eH
	DB	054H
	DB	0c1H
	DB	013H
	DB	07cH
	DB	0c5H
	DB	079H
	DB	0f1H
	DB	0c9H
	DB	0c1H
	DB	071H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	0a3H
	DB	081H
	DB	0faH
	DB	030H
	DB	081H
	DB	0f7H
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0eH
	DB	04H
	DB	016H
	DB	04H
	DB	014H
	DB	05fH
	DB	09aH
	DB	0f5H
	DB	06eH
	DB	05cH
	DB	0ccH
	DB	0ccH
	DB	074H
	DB	09aH
	DB	0d4H
	DB	0ddH
	DB	07dH
	DB	0efH
	DB	03fH
	DB	0dbH
	DB	0ecH
	DB	04cH
	DB	080H
	DB	02eH
	DB	0ddH
	DB	030H
	DB	032H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	01H
	DB	01H
	DB	04H
	DB	026H
	DB	030H
	DB	024H
	DB	030H
	DB	022H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	01H
	DB	086H
	DB	016H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	06fH
	DB	063H
	DB	073H
	DB	070H
	DB	02eH
	DB	074H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	030H
	DB	012H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	013H
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	08H
	DB	030H
	DB	06H
	DB	01H
	DB	01H
	DB	0ffH
	DB	02H
	DB	01H
	DB	00H
	DB	030H
	DB	03fH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	01fH
	DB	04H
	DB	038H
	DB	030H
	DB	036H
	DB	030H
	DB	034H
	DB	0a0H
	DB	032H
	DB	0a0H
	DB	030H
	DB	086H
	DB	02eH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	063H
	DB	072H
	DB	06cH
	DB	02eH
	DB	074H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	054H
	DB	068H
	DB	061H
	DB	077H
	DB	074H
	DB	065H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	073H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	043H
	DB	041H
	DB	02eH
	DB	063H
	DB	072H
	DB	06cH
	DB	030H
	DB	013H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	025H
	DB	04H
	DB	0cH
	DB	030H
	DB	0aH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	03H
	DB	08H
	DB	030H
	DB	0eH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0fH
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
	DB	06H
	DB	030H
	DB	028H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	011H
	DB	04H
	DB	021H
	DB	030H
	DB	01fH
	DB	0a4H
	DB	01dH
	DB	030H
	DB	01bH
	DB	031H
	DB	019H
	DB	030H
	DB	017H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	010H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	02dH
	DB	032H
	DB	030H
	DB	034H
	DB	038H
	DB	02dH
	DB	031H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	081H
	DB	081H
	DB	00H
	DB	03H
	DB	09H
	DB	09bH
	DB	08fH
	DB	079H
	DB	0efH
	DB	07fH
	DB	059H
	DB	030H
	DB	0aaH
	DB	0efH
	DB	068H
	DB	0b5H
	DB	0faH
	DB	0e3H
	DB	09H
	DB	01dH
	DB	0bbH
	DB	04fH
	DB	082H
	DB	06H
	DB	05dH
	DB	037H
	DB	05fH
	DB	0a6H
	DB	052H
	DB	09fH
	DB	016H
	DB	08dH
	DB	0eaH
	DB	01cH
	DB	092H
	DB	09H
	DB	044H
	DB	06eH
	DB	0f5H
	DB	06dH
	DB	0ebH
	DB	058H
	DB	07cH
	DB	030H
	DB	0e8H
	DB	0f9H
	DB	069H
	DB	08dH
	DB	023H
	DB	073H
	DB	0bH
	DB	012H
	DB	06fH
	DB	047H
	DB	0a9H
	DB	0aeH
	DB	039H
	DB	011H
	DB	0f8H
	DB	02aH
	DB	0b1H
	DB	09bH
	DB	0b0H
	DB	01aH
	DB	0c3H
	DB	08eH
	DB	0ebH
	DB	059H
	DB	096H
	DB	00H
	DB	0adH
	DB	0ceH
	DB	0cH
	DB	04dH
	DB	0b2H
	DB	0d0H
	DB	031H
	DB	0a6H
	DB	08H
	DB	05cH
	DB	02aH
	DB	07aH
	DB	0fcH
	DB	0e2H
	DB	07aH
	DB	01dH
	DB	057H
	DB	04cH
	DB	0a8H
	DB	065H
	DB	018H
	DB	0e9H
	DB	079H
	DB	040H
	DB	062H
	DB	025H
	DB	096H
	DB	06eH
	DB	0c7H
	DB	0c7H
	DB	037H
	DB	06aH
	DB	083H
	DB	021H
	DB	08H
	DB	08eH
	DB	041H
	DB	0eaH
	DB	0ddH
	DB	0d9H
	DB	057H
	DB	03fH
	DB	01dH
	DB	077H
	DB	049H
	DB	087H
	DB	02aH
	DB	016H
	DB	06H
	DB	05eH
	DB	0a6H
	DB	038H
	DB	06aH
	DB	022H
	DB	012H
	DB	0a3H
	DB	051H
	DB	019H
	DB	083H
	DB	07eH
	DB	0b6H
	DB	030H
	DB	082H
	DB	04H
	DB	0a3H
	DB	030H
	DB	082H
	DB	03H
	DB	08bH
	DB	0a0H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	010H
	DB	0eH
	DB	0cfH
	DB	0f4H
	DB	038H
	DB	0c8H
	DB	0feH
	DB	0bfH
	DB	035H
	DB	06eH
	DB	04H
	DB	0d8H
	DB	06aH
	DB	098H
	DB	01bH
	DB	01aH
	DB	050H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	030H
	DB	05eH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	014H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	043H
	DB	06fH
	DB	072H
	DB	070H
	DB	06fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	053H
	DB	065H
	DB	072H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	020H
	DB	043H
	DB	041H
	DB	020H
	DB	02dH
	DB	020H
	DB	047H
	DB	032H
	DB	030H
	DB	01eH
	DB	017H
	DB	0dH
	DB	031H
	DB	032H
	DB	031H
	DB	030H
	DB	031H
	DB	038H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	05aH
	DB	017H
	DB	0dH
	DB	032H
	DB	030H
	DB	031H
	DB	032H
	DB	032H
	DB	039H
	DB	032H
	DB	033H
	DB	035H
	DB	039H
	DB	035H
	DB	039H
	DB	05aH
	DB	030H
	DB	062H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	014H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	043H
	DB	06fH
	DB	072H
	DB	070H
	DB	06fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	034H
	DB	030H
	DB	032H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	02bH
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	053H
	DB	065H
	DB	072H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	020H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	065H
	DB	072H
	DB	020H
	DB	02dH
	DB	020H
	DB	047H
	DB	034H
	DB	030H
	DB	082H
	DB	01H
	DB	022H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	01H
	DB	0fH
	DB	00H
	DB	030H
	DB	082H
	DB	01H
	DB	0aH
	DB	02H
	DB	082H
	DB	01H
	DB	01H
	DB	00H
	DB	0a2H
	DB	063H
	DB	0bH
	DB	039H
	DB	044H
	DB	0b8H
	DB	0bbH
	DB	023H
	DB	0a7H
	DB	044H
	DB	049H
	DB	0bbH
	DB	0eH
	DB	0ffH
	DB	0a1H
	DB	0f0H
	DB	061H
	DB	0aH
	DB	053H
	DB	093H
	DB	0b0H
	DB	098H
	DB	0dbH
	DB	0adH
	DB	02cH
	DB	0fH
	DB	04aH
	DB	0c5H
	DB	06eH
	DB	0ffH
	DB	086H
	DB	03cH
	DB	053H
	DB	055H
	DB	0fH
	DB	015H
	DB	0ceH
	DB	04H
	DB	03fH
	DB	02bH
	DB	0fdH
	DB	0a9H
	DB	096H
	DB	096H
	DB	0d9H
	DB	0beH
	DB	061H
	DB	079H
	DB	0bH
	DB	05bH
	DB	0c9H
	DB	04cH
	DB	086H
	DB	076H
	DB	0e5H
	DB	0e0H
	DB	043H
	DB	04bH
	DB	022H
	DB	095H
	DB	0eeH
	DB	0c2H
	DB	02bH
	DB	043H
	DB	0c1H
	DB	09fH
	DB	0d8H
	DB	068H
	DB	0b4H
	DB	08eH
	DB	040H
	DB	04fH
	DB	0eeH
	DB	085H
	DB	038H
	DB	0b9H
	DB	011H
	DB	0c5H
	DB	023H
	DB	0f2H
	DB	064H
	DB	058H
	DB	0f0H
	DB	015H
	DB	032H
	DB	06fH
	DB	04eH
	DB	057H
	DB	0a1H
	DB	0aeH
	DB	088H
	DB	0a4H
	DB	02H
	DB	0d7H
	DB	02aH
	DB	01eH
	DB	0cdH
	DB	04bH
	DB	0e1H
	DB	0ddH
	DB	063H
	DB	0d5H
	DB	017H
	DB	089H
	DB	032H
	DB	05bH
	DB	0b0H
	DB	05eH
	DB	099H
	DB	05aH
	DB	0a8H
	DB	09dH
	DB	028H
	DB	050H
	DB	0eH
	DB	017H
	DB	0eeH
	DB	096H
	DB	0dbH
	DB	061H
	DB	03bH
	DB	045H
	DB	051H
	DB	01dH
	DB	0cfH
	DB	012H
	DB	056H
	DB	0bH
	DB	092H
	DB	047H
	DB	0fcH
	DB	0abH
	DB	0aeH
	DB	0f6H
	DB	066H
	DB	03dH
	DB	047H
	DB	0acH
	DB	070H
	DB	072H
	DB	0e7H
	DB	092H
	DB	0e7H
	DB	05fH
	DB	0cdH
	DB	010H
	DB	0b9H
	DB	0c4H
	DB	083H
	DB	064H
	DB	094H
	DB	019H
	DB	0bdH
	DB	025H
	DB	080H
	DB	0e1H
	DB	0e8H
	DB	0d2H
	DB	022H
	DB	0a5H
	DB	0d0H
	DB	0baH
	DB	02H
	DB	07aH
	DB	0a1H
	DB	077H
	DB	093H
	DB	05bH
	DB	065H
	DB	0c3H
	DB	0eeH
	DB	017H
	DB	074H
	DB	0bcH
	DB	041H
	DB	086H
	DB	02aH
	DB	0dcH
	DB	08H
	DB	04cH
	DB	08cH
	DB	092H
	DB	08cH
	DB	091H
	DB	02dH
	DB	09eH
	DB	077H
	DB	044H
	DB	01fH
	DB	068H
	DB	0d6H
	DB	0a8H
	DB	074H
	DB	077H
	DB	0dbH
	DB	0eH
	DB	05bH
	DB	032H
	DB	08bH
	DB	056H
	DB	08bH
	DB	033H
	DB	0bdH
	DB	0d9H
	DB	063H
	DB	0c8H
	DB	049H
	DB	09dH
	DB	03aH
	DB	0c5H
	DB	0c5H
	DB	0eaH
	DB	033H
	DB	0bH
	DB	0d2H
	DB	0f1H
	DB	0a3H
	DB	01bH
	DB	0f4H
	DB	08bH
	DB	0beH
	DB	0d9H
	DB	0b3H
	DB	057H
	DB	08bH
	DB	03bH
	DB	0deH
	DB	04H
	DB	0a7H
	DB	07aH
	DB	022H
	DB	0b2H
	DB	024H
	DB	0aeH
	DB	02eH
	DB	0c7H
	DB	070H
	DB	0c5H
	DB	0beH
	DB	04eH
	DB	083H
	DB	026H
	DB	08H
	DB	0fbH
	DB	0bH
	DB	0bdH
	DB	0a9H
	DB	04fH
	DB	099H
	DB	08H
	DB	0e1H
	DB	010H
	DB	028H
	DB	072H
	DB	0aaH
	DB	0cdH
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	0a3H
	DB	082H
	DB	01H
	DB	057H
	DB	030H
	DB	082H
	DB	01H
	DB	053H
	DB	030H
	DB	0cH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	013H
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	02H
	DB	030H
	DB	00H
	DB	030H
	DB	016H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	025H
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	0cH
	DB	030H
	DB	0aH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	03H
	DB	08H
	DB	030H
	DB	0eH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0fH
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	07H
	DB	080H
	DB	030H
	DB	073H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	01H
	DB	01H
	DB	04H
	DB	067H
	DB	030H
	DB	065H
	DB	030H
	DB	02aH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	01H
	DB	086H
	DB	01eH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	074H
	DB	073H
	DB	02dH
	DB	06fH
	DB	063H
	DB	073H
	DB	070H
	DB	02eH
	DB	077H
	DB	073H
	DB	02eH
	DB	073H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	030H
	DB	037H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	02H
	DB	086H
	DB	02bH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	074H
	DB	073H
	DB	02dH
	DB	061H
	DB	069H
	DB	061H
	DB	02eH
	DB	077H
	DB	073H
	DB	02eH
	DB	073H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	074H
	DB	073H
	DB	073H
	DB	02dH
	DB	063H
	DB	061H
	DB	02dH
	DB	067H
	DB	032H
	DB	02eH
	DB	063H
	DB	065H
	DB	072H
	DB	030H
	DB	03cH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	01fH
	DB	04H
	DB	035H
	DB	030H
	DB	033H
	DB	030H
	DB	031H
	DB	0a0H
	DB	02fH
	DB	0a0H
	DB	02dH
	DB	086H
	DB	02bH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	074H
	DB	073H
	DB	02dH
	DB	063H
	DB	072H
	DB	06cH
	DB	02eH
	DB	077H
	DB	073H
	DB	02eH
	DB	073H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	074H
	DB	073H
	DB	073H
	DB	02dH
	DB	063H
	DB	061H
	DB	02dH
	DB	067H
	DB	032H
	DB	02eH
	DB	063H
	DB	072H
	DB	06cH
	DB	030H
	DB	028H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	011H
	DB	04H
	DB	021H
	DB	030H
	DB	01fH
	DB	0a4H
	DB	01dH
	DB	030H
	DB	01bH
	DB	031H
	DB	019H
	DB	030H
	DB	017H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	010H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	02dH
	DB	032H
	DB	030H
	DB	034H
	DB	038H
	DB	02dH
	DB	032H
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0eH
	DB	04H
	DB	016H
	DB	04H
	DB	014H
	DB	046H
	DB	0c6H
	DB	069H
	DB	0a3H
	DB	0eH
	DB	04aH
	DB	014H
	DB	01eH
	DB	0d5H
	DB	04cH
	DB	0daH
	DB	052H
	DB	063H
	DB	017H
	DB	03fH
	DB	05eH
	DB	036H
	DB	0bcH
	DB	0dH
	DB	0e6H
	DB	030H
	DB	01fH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	023H
	DB	04H
	DB	018H
	DB	030H
	DB	016H
	DB	080H
	DB	014H
	DB	05fH
	DB	09aH
	DB	0f5H
	DB	06eH
	DB	05cH
	DB	0ccH
	DB	0ccH
	DB	074H
	DB	09aH
	DB	0d4H
	DB	0ddH
	DB	07dH
	DB	0efH
	DB	03fH
	DB	0dbH
	DB	0ecH
	DB	04cH
	DB	080H
	DB	02eH
	DB	0ddH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	01H
	DB	01H
	DB	00H
	DB	078H
	DB	03bH
	DB	0b4H
	DB	091H
	DB	02aH
	DB	00H
	DB	04cH
	DB	0f0H
	DB	08fH
	DB	062H
	DB	030H
	DB	037H
	DB	078H
	DB	0a3H
	DB	084H
	DB	027H
	DB	07H
	DB	06fH
	DB	018H
	DB	0b2H
	DB	0deH
	DB	025H
	DB	0dcH
	DB	0a0H
	DB	0d4H
	DB	094H
	DB	03H
	DB	0aaH
	DB	086H
	DB	04eH
	DB	025H
	DB	09fH
	DB	09aH
	DB	040H
	DB	03H
	DB	01cH
	DB	0ddH
	DB	0ceH
	DB	0e3H
	DB	079H
	DB	0cbH
	DB	021H
	DB	068H
	DB	06H
	DB	0daH
	DB	0b6H
	DB	032H
	DB	0b4H
	DB	06dH
	DB	0bfH
	DB	0f4H
	DB	02cH
	DB	026H
	DB	063H
	DB	033H
	DB	0e4H
	DB	049H
	DB	064H
	DB	06dH
	DB	0dH
	DB	0e6H
	DB	0c3H
	DB	067H
	DB	0eH
	DB	0f7H
	DB	05H
	DB	0a4H
	DB	035H
	DB	06cH
	DB	07cH
	DB	089H
	DB	016H
	DB	0c6H
	DB	0e9H
	DB	0b2H
	DB	0dfH
	DB	0b2H
	DB	0e9H
	DB	0ddH
	DB	020H
	DB	0c6H
	DB	071H
	DB	0fH
	DB	0cdH
	DB	095H
	DB	074H
	DB	0dcH
	DB	0b6H
	DB	05cH
	DB	0deH
	DB	0bdH
	DB	037H
	DB	01fH
	DB	043H
	DB	078H
	DB	0e6H
	DB	078H
	DB	0b5H
	DB	0cdH
	DB	028H
	DB	04H
	DB	020H
	DB	0a3H
	DB	0aaH
	DB	0f1H
	DB	04bH
	DB	0c4H
	DB	088H
	DB	029H
	DB	091H
	DB	0eH
	DB	080H
	DB	0d1H
	DB	011H
	DB	0fcH
	DB	0ddH
	DB	05cH
	DB	076H
	DB	06eH
	DB	04fH
	DB	05eH
	DB	0eH
	DB	045H
	DB	046H
	DB	041H
	DB	06eH
	DB	0dH
	DB	0b0H
	DB	0eaH
	DB	038H
	DB	09aH
	DB	0b1H
	DB	03aH
	DB	0daH
	DB	09H
	DB	071H
	DB	010H
	DB	0fcH
	DB	01cH
	DB	079H
	DB	0b4H
	DB	080H
	DB	07bH
	DB	0acH
	DB	069H
	DB	0f4H
	DB	0fdH
	DB	09cH
	DB	0b6H
	DB	0cH
	DB	016H
	DB	02bH
	DB	0f1H
	DB	07fH
	DB	05bH
	DB	09H
	DB	03dH
	DB	09bH
	DB	05bH
	DB	0e2H
	DB	016H
	DB	0caH
	DB	013H
	DB	081H
	DB	06dH
	DB	00H
	DB	02eH
	DB	038H
	DB	0dH
	DB	0a8H
	DB	029H
	DB	08fH
	DB	02cH
	DB	0e1H
	DB	0b2H
	DB	0f4H
	DB	05aH
	DB	0a9H
	DB	01H
	DB	0afH
	DB	015H
	DB	09cH
	DB	02cH
	DB	02fH
	DB	049H
	DB	01bH
	DB	0dbH
	DB	022H
	DB	0bbH
	DB	0c3H
	DB	0feH
	DB	078H
	DB	094H
	DB	051H
	DB	0c3H
	DB	086H
	DB	0b1H
	DB	082H
	DB	088H
	DB	05dH
	DB	0f0H
	DB	03dH
	DB	0b4H
	DB	051H
	DB	0a1H
	DB	079H
	DB	033H
	DB	02bH
	DB	02eH
	DB	07bH
	DB	0b9H
	DB	0dcH
	DB	020H
	DB	09H
	DB	013H
	DB	071H
	DB	0ebH
	DB	06aH
	DB	019H
	DB	05bH
	DB	0cfH
	DB	0e8H
	DB	0a5H
	DB	030H
	DB	057H
	DB	02cH
	DB	089H
	DB	049H
	DB	03fH
	DB	0b9H
	DB	0cfH
	DB	07fH
	DB	0c9H
	DB	0bfH
	DB	03eH
	DB	022H
	DB	068H
	DB	063H
	DB	053H
	DB	09aH
	DB	0bdH
	DB	069H
	DB	074H
	DB	0acH
	DB	0c5H
	DB	01dH
	DB	03cH
	DB	07fH
	DB	092H
	DB	0e0H
	DB	0c3H
	DB	0bcH
	DB	01cH
	DB	0d8H
	DB	04H
	DB	075H
	DB	030H
	DB	082H
	DB	04H
	DB	0fcH
	DB	030H
	DB	082H
	DB	04H
	DB	065H
	DB	0a0H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	010H
	DB	065H
	DB	052H
	DB	026H
	DB	0e1H
	DB	0b2H
	DB	02eH
	DB	018H
	DB	0e1H
	DB	059H
	DB	0fH
	DB	029H
	DB	085H
	DB	0acH
	DB	022H
	DB	0e7H
	DB	05cH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	030H
	DB	05fH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	017H
	DB	030H
	DB	015H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	0eH
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	02cH
	DB	020H
	DB	049H
	DB	06eH
	DB	063H
	DB	02eH
	DB	031H
	DB	037H
	DB	030H
	DB	035H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	02eH
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	050H
	DB	075H
	DB	062H
	DB	06cH
	DB	069H
	DB	063H
	DB	020H
	DB	050H
	DB	072H
	DB	069H
	DB	06dH
	DB	061H
	DB	072H
	DB	079H
	DB	020H
	DB	043H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	066H
	DB	069H
	DB	063H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	020H
	DB	041H
	DB	075H
	DB	074H
	DB	068H
	DB	06fH
	DB	072H
	DB	069H
	DB	074H
	DB	079H
	DB	030H
	DB	01eH
	DB	017H
	DB	0dH
	DB	030H
	DB	039H
	DB	030H
	DB	035H
	DB	032H
	DB	031H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	05aH
	DB	017H
	DB	0dH
	DB	031H
	DB	039H
	DB	030H
	DB	035H
	DB	032H
	DB	030H
	DB	032H
	DB	033H
	DB	035H
	DB	039H
	DB	035H
	DB	039H
	DB	05aH
	DB	030H
	DB	081H
	DB	0b6H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	017H
	DB	030H
	DB	015H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	0eH
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	02cH
	DB	020H
	DB	049H
	DB	06eH
	DB	063H
	DB	02eH
	DB	031H
	DB	01fH
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	016H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	054H
	DB	072H
	DB	075H
	DB	073H
	DB	074H
	DB	020H
	DB	04eH
	DB	065H
	DB	074H
	DB	077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	031H
	DB	03bH
	DB	030H
	DB	039H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	032H
	DB	054H
	DB	065H
	DB	072H
	DB	06dH
	DB	073H
	DB	020H
	DB	06fH
	DB	066H
	DB	020H
	DB	075H
	DB	073H
	DB	065H
	DB	020H
	DB	061H
	DB	074H
	DB	020H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	072H
	DB	070H
	DB	061H
	DB	020H
	DB	028H
	DB	063H
	DB	029H
	DB	030H
	DB	039H
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	043H
	DB	06fH
	DB	064H
	DB	065H
	DB	020H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	020H
	DB	043H
	DB	041H
	DB	030H
	DB	082H
	DB	01H
	DB	022H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	01H
	DB	0fH
	DB	00H
	DB	030H
	DB	082H
	DB	01H
	DB	0aH
	DB	02H
	DB	082H
	DB	01H
	DB	01H
	DB	00H
	DB	0beH
	DB	067H
	DB	01dH
	DB	0b4H
	DB	060H
	DB	0aaH
	DB	010H
	DB	049H
	DB	06fH
	DB	056H
	DB	017H
	DB	07cH
	DB	066H
	DB	0c9H
	DB	05eH
	DB	086H
	DB	0dH
	DB	0d5H
	DB	0f1H
	DB	0acH
	DB	0a7H
	DB	071H
	DB	083H
	DB	08eH
	DB	08bH
	DB	089H
	DB	0f8H
	DB	088H
	DB	04H
	DB	089H
	DB	015H
	DB	06H
	DB	0baH
	DB	02dH
	DB	084H
	DB	021H
	DB	095H
	DB	0e4H
	DB	0d1H
	DB	09cH
	DB	050H
	DB	04cH
	DB	0fbH
	DB	0d2H
	DB	022H
	DB	0bdH
	DB	0daH
	DB	0f2H
	DB	0b2H
	DB	035H
	DB	03bH
	DB	01eH
	DB	08fH
	DB	0c3H
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	013H
	DB	02eH
	DB	05aH
	DB	0bfH
	DB	089H
	DB	07cH
	DB	03dH
	DB	03bH
	DB	025H
	DB	01eH
	DB	0f6H
	DB	0f3H
	DB	058H
	DB	07bH
	DB	09cH
	DB	0f4H
	DB	01H
	DB	0b5H
	DB	0c6H
	DB	0aH
	DB	0b8H
	DB	080H
	DB	0ceH
	DB	0beH
	DB	027H
	DB	074H
	DB	061H
	DB	067H
	DB	027H
	DB	04dH
	DB	06aH
	DB	0e5H
	DB	0ecH
	DB	081H
	DB	061H
	DB	058H
	DB	079H
	DB	0a3H
	DB	0e0H
	DB	017H
	DB	010H
	DB	012H
	DB	015H
	DB	027H
	DB	0b0H
	DB	0e1H
	DB	04dH
	DB	034H
	DB	07fH
	DB	02bH
	DB	047H
	DB	020H
	DB	044H
	DB	0b9H
	DB	0deH
	DB	066H
	DB	024H
	DB	066H
	DB	08aH
	DB	0cdH
	DB	04fH
	DB	0baH
	DB	01fH
	DB	0c5H
	DB	038H
	DB	0c8H
	DB	054H
	DB	090H
	DB	0e1H
	DB	072H
	DB	0f6H
	DB	019H
	DB	066H
	DB	075H
	DB	06aH
	DB	0b9H
	DB	049H
	DB	068H
	DB	0cfH
	DB	038H
	DB	079H
	DB	0dH
	DB	0aaH
	DB	030H
	DB	0a8H
	DB	0dbH
	DB	02cH
	DB	060H
	DB	048H
	DB	09eH
	DB	0d7H
	DB	0aaH
	DB	014H
	DB	01H
	DB	0a9H
	DB	083H
	DB	0d7H
	DB	038H
	DB	091H
	DB	030H
	DB	039H
	DB	013H
	DB	096H
	DB	03H
	DB	03aH
	DB	07cH
	DB	040H
	DB	054H
	DB	0b6H
	DB	0adH
	DB	0e0H
	DB	02fH
	DB	01bH
	DB	083H
	DB	0dcH
	DB	0a8H
	DB	011H
	DB	052H
	DB	03eH
	DB	02H
	DB	0b3H
	DB	0d7H
	DB	02bH
	DB	0fdH
	DB	021H
	DB	0b6H
	DB	0a7H
	DB	05cH
	DB	0a3H
	DB	0fH
	DB	0bH
	DB	0a9H
	DB	0a6H
	DB	010H
	DB	050H
	DB	0eH
	DB	034H
	DB	02eH
	DB	04dH
	DB	0a7H
	DB	0ceH
	DB	0c9H
	DB	05eH
	DB	025H
	DB	0d4H
	DB	08cH
	DB	0bcH
	DB	0f3H
	DB	06eH
	DB	07cH
	DB	029H
	DB	0bcH
	DB	01H
	DB	05dH
	DB	0fcH
	DB	031H
	DB	087H
	DB	05aH
	DB	0d5H
	DB	08cH
	DB	085H
	DB	067H
	DB	058H
	DB	088H
	DB	019H
	DB	0a0H
	DB	0bfH
	DB	035H
	DB	0f0H
	DB	0eaH
	DB	02bH
	DB	0a3H
	DB	021H
	DB	0e7H
	DB	090H
	DB	0f6H
	DB	083H
	DB	0e5H
	DB	0a8H
	DB	0edH
	DB	060H
	DB	078H
	DB	05eH
	DB	07bH
	DB	060H
	DB	083H
	DB	0fdH
	DB	057H
	DB	0bH
	DB	05dH
	DB	041H
	DB	0dH
	DB	063H
	DB	054H
	DB	060H
	DB	0d6H
	DB	043H
	DB	021H
	DB	0efH
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	0a3H
	DB	082H
	DB	01H
	DB	0dbH
	DB	030H
	DB	082H
	DB	01H
	DB	0d7H
	DB	030H
	DB	012H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	013H
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	08H
	DB	030H
	DB	06H
	DB	01H
	DB	01H
	DB	0ffH
	DB	02H
	DB	01H
	DB	00H
	DB	030H
	DB	070H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	020H
	DB	04H
	DB	069H
	DB	030H
	DB	067H
	DB	030H
	DB	065H
	DB	06H
	DB	0bH
	DB	060H
	DB	086H
	DB	048H
	DB	01H
	DB	086H
	DB	0f8H
	DB	045H
	DB	01H
	DB	07H
	DB	017H
	DB	03H
	DB	030H
	DB	056H
	DB	030H
	DB	028H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	02H
	DB	01H
	DB	016H
	DB	01cH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	063H
	DB	070H
	DB	073H
	DB	030H
	DB	02aH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	02H
	DB	02H
	DB	030H
	DB	01eH
	DB	01aH
	DB	01cH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	072H
	DB	070H
	DB	061H
	DB	030H
	DB	0eH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0fH
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
	DB	06H
	DB	030H
	DB	06dH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	01H
	DB	0cH
	DB	04H
	DB	061H
	DB	030H
	DB	05fH
	DB	0a1H
	DB	05dH
	DB	0a0H
	DB	05bH
	DB	030H
	DB	059H
	DB	030H
	DB	057H
	DB	030H
	DB	055H
	DB	016H
	DB	09H
	DB	069H
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	02fH
	DB	067H
	DB	069H
	DB	066H
	DB	030H
	DB	021H
	DB	030H
	DB	01fH
	DB	030H
	DB	07H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	04H
	DB	014H
	DB	08fH
	DB	0e5H
	DB	0d3H
	DB	01aH
	DB	086H
	DB	0acH
	DB	08dH
	DB	08eH
	DB	06bH
	DB	0c3H
	DB	0cfH
	DB	080H
	DB	06aH
	DB	0d4H
	DB	048H
	DB	018H
	DB	02cH
	DB	07bH
	DB	019H
	DB	02eH
	DB	030H
	DB	025H
	DB	016H
	DB	023H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	06cH
	DB	06fH
	DB	067H
	DB	06fH
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	076H
	DB	073H
	DB	06cH
	DB	06fH
	DB	067H
	DB	06fH
	DB	02eH
	DB	067H
	DB	069H
	DB	066H
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	025H
	DB	04H
	DB	016H
	DB	030H
	DB	014H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	03H
	DB	02H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	03H
	DB	03H
	DB	030H
	DB	034H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	01H
	DB	01H
	DB	04H
	DB	028H
	DB	030H
	DB	026H
	DB	030H
	DB	024H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	01H
	DB	086H
	DB	018H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	06fH
	DB	063H
	DB	073H
	DB	070H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	030H
	DB	031H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	01fH
	DB	04H
	DB	02aH
	DB	030H
	DB	028H
	DB	030H
	DB	026H
	DB	0a0H
	DB	024H
	DB	0a0H
	DB	022H
	DB	086H
	DB	020H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	063H
	DB	072H
	DB	06cH
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	070H
	DB	063H
	DB	061H
	DB	033H
	DB	02eH
	DB	063H
	DB	072H
	DB	06cH
	DB	030H
	DB	029H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	011H
	DB	04H
	DB	022H
	DB	030H
	DB	020H
	DB	0a4H
	DB	01eH
	DB	030H
	DB	01cH
	DB	031H
	DB	01aH
	DB	030H
	DB	018H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	011H
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	033H
	DB	043H
	DB	041H
	DB	032H
	DB	030H
	DB	034H
	DB	038H
	DB	02dH
	DB	031H
	DB	02dH
	DB	035H
	DB	035H
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0eH
	DB	04H
	DB	016H
	DB	04H
	DB	014H
	DB	097H
	DB	0d0H
	DB	06bH
	DB	0a8H
	DB	026H
	DB	070H
	DB	0c8H
	DB	0a1H
	DB	03fH
	DB	094H
	DB	01fH
	DB	08H
	DB	02dH
	DB	0c4H
	DB	035H
	DB	09bH
	DB	0a4H
	DB	0a1H
	DB	01eH
	DB	0f2H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	081H
	DB	081H
	DB	00H
	DB	08bH
	DB	03H
	DB	0c0H
	DB	0ddH
	DB	094H
	DB	0d8H
	DB	041H
	DB	0a2H
	DB	061H
	DB	069H
	DB	0b0H
	DB	015H
	DB	0a8H
	DB	078H
	DB	0c7H
	DB	030H
	DB	0c6H
	DB	090H
	DB	03cH
	DB	07eH
	DB	042H
	DB	0f7H
	DB	024H
	DB	0b6H
	DB	0e4H
	DB	083H
	DB	073H
	DB	017H
	DB	04H
	DB	07fH
	DB	04H
	DB	010H
	DB	09cH
	DB	0a1H
	DB	0e2H
	DB	0faH
	DB	081H
	DB	02fH
	DB	0ebH
	DB	0c0H
	DB	0caH
	DB	044H
	DB	0e7H
	DB	072H
	DB	0e0H
	DB	050H
	DB	0b6H
	DB	055H
	DB	010H
	DB	020H
	DB	083H
	DB	06eH
	DB	096H
	DB	092H
	DB	0e4H
	DB	09aH
	DB	051H
	DB	06aH
	DB	0b4H
	DB	037H
	DB	031H
	DB	0dcH
	DB	0a5H
	DB	02dH
	DB	0ebH
	DB	08cH
	DB	00H
	DB	0c7H
	DB	01dH
	DB	04fH
	DB	0e7H
	DB	04dH
	DB	032H
	DB	0baH
	DB	085H
	DB	0f8H
	DB	04eH
	DB	0beH
	DB	0faH
	DB	067H
	DB	055H
	DB	065H
	DB	0f0H
	DB	06aH
	DB	0beH
	DB	07aH
	DB	0caH
	DB	064H
	DB	038H
	DB	01aH
	DB	010H
	DB	010H
	DB	078H
	DB	045H
	DB	076H
	DB	031H
	DB	0f3H
	DB	086H
	DB	07aH
	DB	03H
	DB	0fH
	DB	060H
	DB	0c2H
	DB	0b3H
	DB	05dH
	DB	09dH
	DB	0f6H
	DB	08bH
	DB	066H
	DB	076H
	DB	082H
	DB	01bH
	DB	059H
	DB	0e1H
	DB	083H
	DB	0e5H
	DB	0bdH
	DB	049H
	DB	0a5H
	DB	038H
	DB	056H
	DB	0e5H
	DB	0deH
	DB	041H
	DB	077H
	DB	0eH
	DB	058H
	DB	0fH
	DB	030H
	DB	082H
	DB	05H
	DB	03H
	DB	030H
	DB	082H
	DB	02H
	DB	0ebH
	DB	0a0H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	0aH
	DB	061H
	DB	0cH
	DB	012H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01bH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	030H
	DB	07fH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	013H
	DB	030H
	DB	011H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	08H
	DB	013H
	DB	0aH
	DB	057H
	DB	061H
	DB	073H
	DB	068H
	DB	069H
	DB	06eH
	DB	067H
	DB	074H
	DB	06fH
	DB	06eH
	DB	031H
	DB	010H
	DB	030H
	DB	0eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	07H
	DB	013H
	DB	07H
	DB	052H
	DB	065H
	DB	064H
	DB	06dH
	DB	06fH
	DB	06eH
	DB	064H
	DB	031H
	DB	01eH
	DB	030H
	DB	01cH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	015H
	DB	04dH
	DB	069H
	DB	063H
	DB	072H
	DB	06fH
	DB	073H
	DB	06fH
	DB	066H
	DB	074H
	DB	020H
	DB	043H
	DB	06fH
	DB	072H
	DB	070H
	DB	06fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	029H
	DB	030H
	DB	027H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	020H
	DB	04dH
	DB	069H
	DB	063H
	DB	072H
	DB	06fH
	DB	073H
	DB	06fH
	DB	066H
	DB	074H
	DB	020H
	DB	043H
	DB	06fH
	DB	064H
	DB	065H
	DB	020H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	066H
	DB	069H
	DB	063H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	020H
	DB	052H
	DB	06fH
	DB	06fH
	DB	074H
	DB	030H
	DB	01eH
	DB	017H
	DB	0dH
	DB	030H
	DB	036H
	DB	030H
	DB	035H
	DB	032H
	DB	033H
	DB	031H
	DB	037H
	DB	030H
	DB	031H
	DB	032H
	DB	039H
	DB	05aH
	DB	017H
	DB	0dH
	DB	031H
	DB	036H
	DB	030H
	DB	035H
	DB	032H
	DB	033H
	DB	031H
	DB	037H
	DB	031H
	DB	031H
	DB	032H
	DB	039H
	DB	05aH
	DB	030H
	DB	05fH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	017H
	DB	030H
	DB	015H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	0eH
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	02cH
	DB	020H
	DB	049H
	DB	06eH
	DB	063H
	DB	02eH
	DB	031H
	DB	037H
	DB	030H
	DB	035H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	02eH
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	050H
	DB	075H
	DB	062H
	DB	06cH
	DB	069H
	DB	063H
	DB	020H
	DB	050H
	DB	072H
	DB	069H
	DB	06dH
	DB	061H
	DB	072H
	DB	079H
	DB	020H
	DB	043H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	066H
	DB	069H
	DB	063H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	020H
	DB	041H
	DB	075H
	DB	074H
	DB	068H
	DB	06fH
	DB	072H
	DB	069H
	DB	074H
	DB	079H
	DB	030H
	DB	081H
	DB	09fH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	03H
	DB	081H
	DB	08dH
	DB	00H
	DB	030H
	DB	081H
	DB	089H
	DB	02H
	DB	081H
	DB	081H
	DB	00H
	DB	0c9H
	DB	05cH
	DB	059H
	DB	09eH
	DB	0f2H
	DB	01bH
	DB	08aH
	DB	01H
	DB	014H
	DB	0b4H
	DB	010H
	DB	0dfH
	DB	04H
	DB	040H
	DB	0dbH
	DB	0e3H
	DB	057H
	DB	0afH
	DB	06aH
	DB	045H
	DB	040H
	DB	08fH
	DB	084H
	DB	0cH
	DB	0bH
	DB	0d1H
	DB	033H
	DB	0d9H
	DB	0d9H
	DB	011H
	DB	0cfH
	DB	0eeH
	DB	02H
	DB	058H
	DB	01fH
	DB	025H
	DB	0f7H
	DB	02aH
	DB	0a8H
	DB	044H
	DB	05H
	DB	0aaH
	DB	0ecH
	DB	03H
	DB	01fH
	DB	078H
	DB	07fH
	DB	09eH
	DB	093H
	DB	0b9H
	DB	09aH
	DB	00H
	DB	0aaH
	DB	023H
	DB	07dH
	DB	0d6H
	DB	0acH
	DB	085H
	DB	0a2H
	DB	063H
	DB	045H
	DB	0c7H
	DB	072H
	DB	027H
	DB	0ccH
	DB	0f4H
	DB	04cH
	DB	0c6H
	DB	075H
	DB	071H
	DB	0d2H
	DB	039H
	DB	0efH
	DB	04fH
	DB	042H
	DB	0f0H
	DB	075H
	DB	0dfH
	DB	0aH
	DB	090H
	DB	0c6H
	DB	08eH
	DB	020H
	DB	06fH
	DB	098H
	DB	0fH
	DB	0f8H
	DB	0acH
	DB	023H
	DB	05fH
	DB	070H
	DB	029H
	DB	036H
	DB	0a4H
	DB	0c9H
	DB	086H
	DB	0e7H
	DB	0b1H
	DB	09aH
	DB	020H
	DB	0cbH
	DB	053H
	DB	0a5H
	DB	085H
	DB	0e7H
	DB	03dH
	DB	0beH
	DB	07dH
	DB	09aH
	DB	0feH
	DB	024H
	DB	045H
	DB	033H
	DB	0dcH
	DB	076H
	DB	015H
	DB	0edH
	DB	0fH
	DB	0a2H
	DB	071H
	DB	064H
	DB	04cH
	DB	065H
	DB	02eH
	DB	081H
	DB	068H
	DB	045H
	DB	0a7H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	0a3H
	DB	082H
	DB	01H
	DB	023H
	DB	030H
	DB	082H
	DB	01H
	DB	01fH
	DB	030H
	DB	011H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	020H
	DB	04H
	DB	0aH
	DB	030H
	DB	08H
	DB	030H
	DB	06H
	DB	06H
	DB	04H
	DB	055H
	DB	01dH
	DB	020H
	DB	00H
	DB	030H
	DB	036H
	DB	06H
	DB	09H
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	015H
	DB	07H
	DB	04H
	DB	029H
	DB	030H
	DB	027H
	DB	06H
	DB	01fH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	015H
	DB	08H
	DB	08dH
	DB	0e0H
	DB	0d1H
	DB	089H
	DB	04eH
	DB	084H
	DB	0d7H
	DB	09cH
	DB	0c3H
	DB	07H
	DB	086H
	DB	0a6H
	DB	086H
	DB	0fbH
	DB	01cH
	DB	08fH
	DB	0d3H
	DB	0bfH
	DB	0a6H
	DB	015H
	DB	01H
	DB	019H
	DB	02H
	DB	01H
	DB	06eH
	DB	02H
	DB	01H
	DB	00H
	DB	030H
	DB	0bH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0fH
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
	DB	086H
	DB	030H
	DB	0fH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	013H
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	05H
	DB	030H
	DB	03H
	DB	01H
	DB	01H
	DB	0ffH
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0eH
	DB	04H
	DB	016H
	DB	04H
	DB	014H
	DB	0e2H
	DB	07fH
	DB	07bH
	DB	0d8H
	DB	077H
	DB	0d5H
	DB	0dfH
	DB	09eH
	DB	0aH
	DB	03fH
	DB	09eH
	DB	0b4H
	DB	0cbH
	DB	0eH
	DB	02eH
	DB	0a9H
	DB	0efH
	DB	0dbH
	DB	069H
	DB	077H
	DB	030H
	DB	01dH
	DB	06H
	DB	09H
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	014H
	DB	02H
	DB	04H
	DB	010H
	DB	01eH
	DB	0eH
	DB	00H
	DB	043H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	073H
	DB	00H
	DB	073H
	DB	00H
	DB	043H
	DB	00H
	DB	041H
	DB	030H
	DB	01fH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	023H
	DB	04H
	DB	018H
	DB	030H
	DB	016H
	DB	080H
	DB	014H
	DB	062H
	DB	0fbH
	DB	0aH
	DB	021H
	DB	05bH
	DB	07fH
	DB	043H
	DB	06eH
	DB	011H
	DB	0daH
	DB	09H
	DB	054H
	DB	050H
	DB	06bH
	DB	0f5H
	DB	0d2H
	DB	096H
	DB	071H
	DB	0f1H
	DB	09eH
	DB	030H
	DB	055H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	01fH
	DB	04H
	DB	04eH
	DB	030H
	DB	04cH
	DB	030H
	DB	04aH
	DB	0a0H
	DB	048H
	DB	0a0H
	DB	046H
	DB	086H
	DB	044H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	063H
	DB	072H
	DB	06cH
	DB	02eH
	DB	06dH
	DB	069H
	DB	063H
	DB	072H
	DB	06fH
	DB	073H
	DB	06fH
	DB	066H
	DB	074H
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	070H
	DB	06bH
	DB	069H
	DB	02fH
	DB	063H
	DB	072H
	DB	06cH
	DB	02fH
	DB	070H
	DB	072H
	DB	06fH
	DB	064H
	DB	075H
	DB	063H
	DB	074H
	DB	073H
	DB	02fH
	DB	04dH
	DB	069H
	DB	063H
	DB	072H
	DB	06fH
	DB	073H
	DB	06fH
	DB	066H
	DB	074H
	DB	043H
	DB	06fH
	DB	064H
	DB	065H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	066H
	DB	052H
	DB	06fH
	DB	06fH
	DB	074H
	DB	02eH
	DB	063H
	DB	072H
	DB	06cH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	02H
	DB	01H
	DB	00H
	DB	01H
	DB	0e4H
	DB	046H
	DB	0b3H
	DB	03bH
	DB	045H
	DB	07fH
	DB	075H
	DB	013H
	DB	087H
	DB	07eH
	DB	05fH
	DB	043H
	DB	0deH
	DB	046H
	DB	08eH
	DB	0cbH
	DB	08aH
	DB	0bdH
	DB	0b6H
	DB	047H
	DB	041H
	DB	0bcH
	DB	0ccH
	DB	0ccH
	DB	074H
	DB	091H
	DB	0d8H
	DB	0ceH
	DB	039H
	DB	051H
	DB	095H
	DB	0a4H
	DB	0a6H
	DB	0b5H
	DB	047H
	DB	0c0H
	DB	0efH
	DB	0d2H
	DB	0daH
	DB	07bH
	DB	08fH
	DB	057H
	DB	011H
	DB	0f4H
	DB	032H
	DB	08cH
	DB	07cH
	DB	0cdH
	DB	03fH
	DB	0eeH
	DB	042H
	DB	0daH
	DB	04H
	DB	021H
	DB	04aH
	DB	0f7H
	DB	0c8H
	DB	043H
	DB	088H
	DB	04aH
	DB	06fH
	DB	05cH
	DB	0caH
	DB	014H
	DB	0fcH
	DB	04bH
	DB	0d1H
	DB	09fH
	DB	04cH
	DB	0bdH
	DB	0d4H
	DB	055H
	DB	06eH
	DB	0ccH
	DB	02H
	DB	0beH
	DB	0dH
	DB	0a6H
	DB	088H
	DB	08fH
	DB	086H
	DB	09H
	DB	0baH
	DB	0a4H
	DB	025H
	DB	0bdH
	DB	0e8H
	DB	0b0H
	DB	0f0H
	DB	0faH
	DB	08bH
	DB	071H
	DB	04eH
	DB	067H
	DB	0b0H
	DB	0cbH
	DB	082H
	DB	0a8H
	DB	0d7H
	DB	08eH
	DB	055H
	DB	0f7H
	DB	037H
	DB	0ebH
	DB	0f0H
	DB	03eH
	DB	088H
	DB	0efH
	DB	0e4H
	DB	0e0H
	DB	08aH
	DB	0fdH
	DB	01cH
	DB	06eH
	DB	02eH
	DB	061H
	DB	041H
	DB	048H
	DB	075H
	DB	0b4H
	DB	0b0H
	DB	02cH
	DB	01dH
	DB	028H
	DB	0d8H
	DB	049H
	DB	0fH
	DB	0d7H
	DB	015H
	DB	0f0H
	DB	024H
	DB	073H
	DB	025H
	DB	03cH
	DB	0ccH
	DB	088H
	DB	0cH
	DB	0deH
	DB	028H
	DB	04cH
	DB	065H
	DB	054H
	DB	0feH
	DB	05eH
	DB	0aeH
	DB	08cH
	DB	0eaH
	DB	019H
	DB	0adH
	DB	02cH
	DB	051H
	DB	0b2H
	DB	09bH
	DB	03aH
	DB	047H
	DB	0f5H
	DB	03cH
	DB	080H
	DB	035H
	DB	01H
	DB	017H
	DB	0e2H
	DB	049H
	DB	087H
	DB	0d6H
	DB	054H
	DB	04aH
	DB	0fbH
	DB	04bH
	DB	0abH
	DB	07H
	DB	0bcH
	DB	0bfH
	DB	07dH
	DB	079H
	DB	0cfH
	DB	0bfH
	DB	035H
	DB	00H
	DB	05cH
	DB	0bbH
	DB	09eH
	DB	0cfH
	DB	0fcH
	DB	082H
	DB	089H
	DB	01bH
	DB	039H
	DB	0a0H
	DB	051H
	DB	097H
	DB	0b6H
	DB	0deH
	DB	0c0H
	DB	0b3H
	DB	07H
	DB	0ffH
	DB	044H
	DB	096H
	DB	044H
	DB	0c0H
	DB	034H
	DB	02aH
	DB	019H
	DB	05cH
	DB	0abH
	DB	0eeH
	DB	0f0H
	DB	03bH
	DB	0ecH
	DB	029H
	DB	04eH
	DB	0b5H
	DB	013H
	DB	0c5H
	DB	037H
	DB	085H
	DB	07eH
	DB	075H
	DB	0d5H
	DB	0b4H
	DB	0d6H
	DB	0dH
	DB	06H
	DB	06eH
	DB	0b5H
	DB	0d2H
	DB	06cH
	DB	023H
	DB	071H
	DB	067H
	DB	0eaH
	DB	0f1H
	DB	071H
	DB	08eH
	DB	0afH
	DB	04eH
	DB	074H
	DB	0aaH
	DB	0cH
	DB	0f9H
	DB	0ecH
	DB	0bfH
	DB	04cH
	DB	058H
	DB	0faH
	DB	05eH
	DB	090H
	DB	09bH
	DB	06dH
	DB	039H
	DB	0cbH
	DB	086H
	DB	088H
	DB	03fH
	DB	08bH
	DB	01cH
	DB	0a8H
	DB	016H
	DB	032H
	DB	0d5H
	DB	0feH
	DB	06dH
	DB	0b9H
	DB	0f1H
	DB	0f8H
	DB	0b3H
	DB	0eaH
	DB	0d7H
	DB	091H
	DB	0f6H
	DB	036H
	DB	047H
	DB	078H
	DB	0c0H
	DB	027H
	DB	02aH
	DB	015H
	DB	0c7H
	DB	068H
	DB	0d6H
	DB	0f4H
	DB	0c5H
	DB	0fcH
	DB	04fH
	DB	04eH
	DB	0c8H
	DB	067H
	DB	03fH
	DB	010H
	DB	02dH
	DB	040H
	DB	09fH
	DB	0f1H
	DB	01eH
	DB	0c9H
	DB	061H
	DB	048H
	DB	0e7H
	DB	0a7H
	DB	03H
	DB	0fcH
	DB	031H
	DB	073H
	DB	0cH
	DB	0f0H
	DB	046H
	DB	088H
	DB	0feH
	DB	056H
	DB	0daH
	DB	049H
	DB	029H
	DB	095H
	DB	0efH
	DB	09H
	DB	0daH
	DB	0a3H
	DB	0e5H
	DB	0beH
	DB	0efH
	DB	060H
	DB	0ecH
	DB	0d9H
	DB	054H
	DB	0a0H
	DB	059H
	DB	09cH
	DB	028H
	DB	0bdH
	DB	054H
	DB	0efH
	DB	066H
	DB	015H
	DB	07fH
	DB	087H
	DB	04cH
	DB	084H
	DB	0dbH
	DB	0a6H
	DB	0eH
	DB	095H
	DB	067H
	DB	02eH
	DB	051H
	DB	07bH
	DB	034H
	DB	039H
	DB	0b6H
	DB	041H
	DB	0c2H
	DB	08cH
	DB	084H
	DB	068H
	DB	026H
	DB	0dcH
	DB	024H
	DB	02H
	DB	09H
	DB	0e7H
	DB	081H
	DB	08eH
	DB	0aH
	DB	097H
	DB	02dH
	DB	0efH
	DB	0eeH
	DB	0a7H
	DB	0b9H
	DB	098H
	DB	0a6H
	DB	0fH
	DB	081H
	DB	08dH
	DB	0c7H
	DB	010H
	DB	0b5H
	DB	0e1H
	DB	0edH
	DB	098H
	DB	02fH
	DB	048H
	DB	06fH
	DB	053H
	DB	085H
	DB	049H
	DB	064H
	DB	078H
	DB	09bH
	DB	0ecH
	DB	05dH
	DB	0acH
	DB	097H
	DB	0bH
	DB	055H
	DB	026H
	DB	0c3H
	DB	0efH
	DB	0baH
	DB	08dH
	DB	0c8H
	DB	0d1H
	DB	0a5H
	DB	02fH
	DB	05aH
	DB	07fH
	DB	093H
	DB	06bH
	DB	061H
	DB	01aH
	DB	033H
	DB	09bH
	DB	018H
	DB	0b8H
	DB	0a2H
	DB	062H
	DB	010H
	DB	0deH
	DB	024H
	DB	0eaH
	DB	076H
	DB	0e1H
	DB	02fH
	DB	043H
	DB	0ebH
	DB	0ecH
	DB	0ddH
	DB	07cH
	DB	012H
	DB	034H
	DB	024H
	DB	089H
	DB	0daH
	DB	028H
	DB	055H
	DB	0aeH
	DB	0e5H
	DB	075H
	DB	04eH
	DB	031H
	DB	02bH
	DB	067H
	DB	063H
	DB	0b6H
	DB	0a8H
	DB	0d7H
	DB	0abH
	DB	073H
	DB	0aH
	DB	03H
	DB	0ceH
	DB	0c5H
	DB	0eaH
	DB	059H
	DB	03fH
	DB	0c7H
	DB	0ebH
	DB	02aH
	DB	045H
	DB	0aeH
	DB	0a8H
	DB	062H
	DB	05bH
	DB	02fH
	DB	00H
	DB	099H
	DB	039H
	DB	0abH
	DB	0b4H
	DB	05fH
	DB	073H
	DB	0c3H
	DB	08H
	DB	0ecH
	DB	080H
	DB	011H
	DB	08fH
	DB	047H
	DB	0eH
	DB	08fH
	DB	02aH
	DB	013H
	DB	043H
	DB	0e1H
	DB	091H
	DB	06H
	DB	062H
	DB	055H
	DB	0bbH
	DB	0ffH
	DB	0baH
	DB	03dH
	DB	0a9H
	DB	0a9H
	DB	03dH
	DB	026H
	DB	0fH
	DB	0aeH
	DB	0caH
	DB	07dH
	DB	062H
	DB	08bH
	DB	015H
	DB	055H
	DB	089H
	DB	0d6H
	DB	094H
	DB	034H
	DB	04dH
	DB	0d6H
	DB	065H
	DB	030H
	DB	082H
	DB	05H
	DB	013H
	DB	030H
	DB	082H
	DB	03H
	DB	0fbH
	DB	0a0H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	010H
	DB	024H
	DB	084H
	DB	072H
	DB	054H
	DB	02cH
	DB	024H
	DB	0abH
	DB	08eH
	DB	042H
	DB	092H
	DB	029H
	DB	0acH
	DB	0f1H
	DB	021H
	DB	0caH
	DB	026H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	030H
	DB	081H
	DB	0b6H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	017H
	DB	030H
	DB	015H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	0eH
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	02cH
	DB	020H
	DB	049H
	DB	06eH
	DB	063H
	DB	02eH
	DB	031H
	DB	01fH
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	016H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	054H
	DB	072H
	DB	075H
	DB	073H
	DB	074H
	DB	020H
	DB	04eH
	DB	065H
	DB	074H
	DB	077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	031H
	DB	03bH
	DB	030H
	DB	039H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	032H
	DB	054H
	DB	065H
	DB	072H
	DB	06dH
	DB	073H
	DB	020H
	DB	06fH
	DB	066H
	DB	020H
	DB	075H
	DB	073H
	DB	065H
	DB	020H
	DB	061H
	DB	074H
	DB	020H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	072H
	DB	070H
	DB	061H
	DB	020H
	DB	028H
	DB	063H
	DB	029H
	DB	030H
	DB	039H
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	043H
	DB	06fH
	DB	064H
	DB	065H
	DB	020H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	020H
	DB	043H
	DB	041H
	DB	030H
	DB	01eH
	DB	017H
	DB	0dH
	DB	031H
	DB	030H
	DB	030H
	DB	038H
	DB	032H
	DB	033H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	05aH
	DB	017H
	DB	0dH
	DB	031H
	DB	033H
	DB	031H
	DB	030H
	DB	031H
	DB	037H
	DB	032H
	DB	033H
	DB	035H
	DB	039H
	DB	035H
	DB	039H
	DB	05aH
	DB	030H
	DB	081H
	DB	0d0H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	054H
	DB	057H
	DB	031H
	DB	0fH
	DB	030H
	DB	0dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	08H
	DB	013H
	DB	06H
	DB	054H
	DB	061H
	DB	069H
	DB	077H
	DB	061H
	DB	06eH
	DB	031H
	DB	015H
	DB	030H
	DB	013H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	07H
	DB	013H
	DB	0cH
	DB	054H
	DB	061H
	DB	069H
	DB	070H
	DB	065H
	DB	069H
	DB	020H
	DB	048H
	DB	073H
	DB	069H
	DB	065H
	DB	06eH
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	014H
	DB	014H
	DB	047H
	DB	069H
	DB	067H
	DB	061H
	DB	02dH
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	020H
	DB	054H
	DB	065H
	DB	063H
	DB	068H
	DB	06eH
	DB	06fH
	DB	06cH
	DB	06fH
	DB	067H
	DB	079H
	DB	031H
	DB	03eH
	DB	030H
	DB	03cH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	035H
	DB	044H
	DB	069H
	DB	067H
	DB	069H
	DB	074H
	DB	061H
	DB	06cH
	DB	020H
	DB	049H
	DB	044H
	DB	020H
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	02dH
	DB	020H
	DB	04dH
	DB	069H
	DB	063H
	DB	072H
	DB	06fH
	DB	073H
	DB	06fH
	DB	066H
	DB	074H
	DB	020H
	DB	053H
	DB	06fH
	DB	066H
	DB	074H
	DB	077H
	DB	061H
	DB	072H
	DB	065H
	DB	020H
	DB	056H
	DB	061H
	DB	06cH
	DB	069H
	DB	064H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	020H
	DB	076H
	DB	032H
	DB	031H
	DB	01bH
	DB	030H
	DB	019H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	014H
	DB	012H
	DB	054H
	DB	065H
	DB	073H
	DB	074H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	044H
	DB	065H
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	06dH
	DB	065H
	DB	06eH
	DB	074H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	014H
	DB	014H
	DB	047H
	DB	069H
	DB	067H
	DB	061H
	DB	02dH
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	020H
	DB	054H
	DB	065H
	DB	063H
	DB	068H
	DB	06eH
	DB	06fH
	DB	06cH
	DB	06fH
	DB	067H
	DB	079H
	DB	030H
	DB	081H
	DB	09fH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	03H
	DB	081H
	DB	08dH
	DB	00H
	DB	030H
	DB	081H
	DB	089H
	DB	02H
	DB	081H
	DB	081H
	DB	00H
	DB	0c1H
	DB	02eH
	DB	09H
	DB	06bH
	DB	051H
	DB	02dH
	DB	0d7H
	DB	0cH
	DB	055H
	DB	079H
	DB	0cbH
	DB	067H
	DB	03H
	DB	0b7H
	DB	0d8H
	DB	02bH
	DB	0beH
	DB	0acH
	DB	010H
	DB	05H
	DB	064H
	DB	09dH
	DB	07aH
	DB	01fH
	DB	0a7H
	DB	0a8H
	DB	0aH
	DB	07aH
	DB	058H
	DB	0f7H
	DB	08aH
	DB	00H
	DB	0c7H
	DB	0eeH
	DB	018H
	DB	0ffH
	DB	0c3H
	DB	0f7H
	DB	05bH
	DB	0cfH
	DB	036H
	DB	0cbH
	DB	076H
	DB	08eH
	DB	07dH
	DB	029H
	DB	069H
	DB	08cH
	DB	042H
	DB	0dcH
	DB	03fH
	DB	01H
	DB	0a8H
	DB	084H
	DB	0bbH
	DB	0a7H
	DB	083H
	DB	043H
	DB	0cdH
	DB	027H
	DB	091H
	DB	037H
	DB	07bH
	DB	0aeH
	DB	01fH
	DB	023H
	DB	04dH
	DB	02H
	DB	0a8H
	DB	053H
	DB	0bfH
	DB	09cH
	DB	0ddH
	DB	0d8H
	DB	05aH
	DB	030H
	DB	0fdH
	DB	04H
	DB	084H
	DB	0b4H
	DB	024H
	DB	0ceH
	DB	091H
	DB	037H
	DB	07cH
	DB	011H
	DB	060H
	DB	050H
	DB	094H
	DB	023H
	DB	06cH
	DB	071H
	DB	048H
	DB	080H
	DB	0e5H
	DB	0deH
	DB	0ffH
	DB	0c8H
	DB	0f9H
	DB	091H
	DB	041H
	DB	055H
	DB	02bH
	DB	0caH
	DB	031H
	DB	0acH
	DB	0beH
	DB	0d4H
	DB	048H
	DB	045H
	DB	046H
	DB	032H
	DB	0adH
	DB	0baH
	DB	04bH
	DB	0ccH
	DB	0b5H
	DB	0c1H
	DB	0c6H
	DB	0ccH
	DB	04bH
	DB	04aH
	DB	0d4H
	DB	0c5H
	DB	049H
	DB	061H
	DB	0d2H
	DB	0fdH
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	0a3H
	DB	082H
	DB	01H
	DB	083H
	DB	030H
	DB	082H
	DB	01H
	DB	07fH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	013H
	DB	04H
	DB	02H
	DB	030H
	DB	00H
	DB	030H
	DB	0eH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	0fH
	DB	01H
	DB	01H
	DB	0ffH
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	07H
	DB	080H
	DB	030H
	DB	044H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	01fH
	DB	04H
	DB	03dH
	DB	030H
	DB	03bH
	DB	030H
	DB	039H
	DB	0a0H
	DB	037H
	DB	0a0H
	DB	035H
	DB	086H
	DB	033H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	063H
	DB	073H
	DB	063H
	DB	033H
	DB	02dH
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	02dH
	DB	063H
	DB	072H
	DB	06cH
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	043H
	DB	053H
	DB	043H
	DB	033H
	DB	02dH
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	02eH
	DB	063H
	DB	072H
	DB	06cH
	DB	030H
	DB	044H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	020H
	DB	04H
	DB	03dH
	DB	030H
	DB	03bH
	DB	030H
	DB	039H
	DB	06H
	DB	0bH
	DB	060H
	DB	086H
	DB	048H
	DB	01H
	DB	086H
	DB	0f8H
	DB	045H
	DB	01H
	DB	07H
	DB	017H
	DB	03H
	DB	030H
	DB	02aH
	DB	030H
	DB	028H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	02H
	DB	01H
	DB	016H
	DB	01cH
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	072H
	DB	070H
	DB	061H
	DB	030H
	DB	013H
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	025H
	DB	04H
	DB	0cH
	DB	030H
	DB	0aH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	03H
	DB	03H
	DB	030H
	DB	075H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	01H
	DB	01H
	DB	04H
	DB	069H
	DB	030H
	DB	067H
	DB	030H
	DB	024H
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	01H
	DB	086H
	DB	018H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	06fH
	DB	063H
	DB	073H
	DB	070H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	030H
	DB	03fH
	DB	06H
	DB	08H
	DB	02bH
	DB	06H
	DB	01H
	DB	05H
	DB	05H
	DB	07H
	DB	030H
	DB	02H
	DB	086H
	DB	033H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	063H
	DB	073H
	DB	063H
	DB	033H
	DB	02dH
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	02dH
	DB	061H
	DB	069H
	DB	061H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	043H
	DB	053H
	DB	043H
	DB	033H
	DB	02dH
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	02eH
	DB	063H
	DB	065H
	DB	072H
	DB	030H
	DB	01fH
	DB	06H
	DB	03H
	DB	055H
	DB	01dH
	DB	023H
	DB	04H
	DB	018H
	DB	030H
	DB	016H
	DB	080H
	DB	014H
	DB	097H
	DB	0d0H
	DB	06bH
	DB	0a8H
	DB	026H
	DB	070H
	DB	0c8H
	DB	0a1H
	DB	03fH
	DB	094H
	DB	01fH
	DB	08H
	DB	02dH
	DB	0c4H
	DB	035H
	DB	09bH
	DB	0a4H
	DB	0a1H
	DB	01eH
	DB	0f2H
	DB	030H
	DB	011H
	DB	06H
	DB	09H
	DB	060H
	DB	086H
	DB	048H
	DB	01H
	DB	086H
	DB	0f8H
	DB	042H
	DB	01H
	DB	01H
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	04H
	DB	010H
	DB	030H
	DB	016H
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	01bH
	DB	04H
	DB	08H
	DB	030H
	DB	06H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	0ffH
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	082H
	DB	01H
	DB	01H
	DB	00H
	DB	0a9H
	DB	01cH
	DB	0bbH
	DB	057H
	DB	09fH
	DB	0bbH
	DB	02bH
	DB	0c2H
	DB	0edH
	DB	02fH
	DB	0e0H
	DB	0faH
	DB	00H
	DB	055H
	DB	0ccH
	DB	088H
	DB	01cH
	DB	0e2H
	DB	01eH
	DB	017H
	DB	052H
	DB	062H
	DB	0d2H
	DB	08eH
	DB	0feH
	DB	0a8H
	DB	0bdH
	DB	012H
	DB	0efH
	DB	0f1H
	DB	09H
	DB	05eH
	DB	0b7H
	DB	050H
	DB	0b2H
	DB	0fcH
	DB	07bH
	DB	084H
	DB	02cH
	DB	04cH
	DB	073H
	DB	09cH
	DB	02eH
	DB	04eH
	DB	0f4H
	DB	01dH
	DB	010H
	DB	065H
	DB	0dfH
	DB	03H
	DB	09dH
	DB	01dH
	DB	062H
	DB	0e0H
	DB	0c5H
	DB	0dbH
	DB	062H
	DB	034H
	DB	0fH
	DB	0d1H
	DB	098H
	DB	09eH
	DB	0fcH
	DB	0c1H
	DB	06eH
	DB	097H
	DB	0b2H
	DB	03cH
	DB	0aaH
	DB	0a7H
	DB	01eH
	DB	040H
	DB	0dcH
	DB	0abH
	DB	0afH
	DB	04aH
	DB	0a3H
	DB	04dH
	DB	0d7H
	DB	0d5H
	DB	03aH
	DB	03eH
	DB	0f5H
	DB	0c0H
	DB	0f2H
	DB	0feH
	DB	0c1H
	DB	0b9H
	DB	064H
	DB	079H
	DB	08dH
	DB	02aH
	DB	01cH
	DB	08bH
	DB	011H
	DB	0d6H
	DB	08eH
	DB	0a3H
	DB	026H
	DB	049H
	DB	05fH
	DB	0beH
	DB	0deH
	DB	016H
	DB	026H
	DB	052H
	DB	0faH
	DB	0a5H
	DB	023H
	DB	0ceH
	DB	052H
	DB	0edH
	DB	060H
	DB	0caH
	DB	052H
	DB	027H
	DB	0ddH
	DB	0deH
	DB	0abH
	DB	021H
	DB	01bH
	DB	090H
	DB	096H
	DB	05bH
	DB	086H
	DB	064H
	DB	025H
	DB	0adH
	DB	0c8H
	DB	044H
	DB	065H
	DB	011H
	DB	07fH
	DB	03eH
	DB	0c0H
	DB	040H
	DB	0cbH
	DB	00H
	DB	05aH
	DB	0a5H
	DB	090H
	DB	0efH
	DB	069H
	DB	0a7H
	DB	0dH
	DB	0b0H
	DB	0deH
	DB	017H
	DB	0afH
	DB	066H
	DB	0f3H
	DB	0e5H
	DB	02dH
	DB	0a6H
	DB	0b8H
	DB	0c9H
	DB	032H
	DB	037H
	DB	0fcH
	DB	019H
	DB	075H
	DB	0e2H
	DB	089H
	DB	01cH
	DB	089H
	DB	071H
	DB	029H
	DB	071H
	DB	026H
	DB	06cH
	DB	080H
	DB	095H
	DB	06aH
	DB	021H
	DB	054H
	DB	02cH
	DB	071H
	DB	0e1H
	DB	096H
	DB	02bH
	DB	016H
	DB	065H
	DB	053H
	DB	073H
	DB	091H
	DB	01cH
	DB	03eH
	DB	0a0H
	DB	09bH
	DB	0d0H
	DB	0b2H
	DB	06cH
	DB	086H
	DB	06eH
	DB	0b1H
	DB	0a9H
	DB	0feH
	DB	04fH
	DB	01dH
	DB	0fH
	DB	07bH
	DB	0e3H
	DB	08H
	DB	088H
	DB	0c5H
	DB	029H
	DB	0b1H
	DB	048H
	DB	099H
	DB	0bH
	DB	04fH
	DB	022H
	DB	068H
	DB	097H
	DB	0e2H
	DB	0a4H
	DB	0a6H
	DB	051H
	DB	0c8H
	DB	0cH
	DB	0c7H
	DB	091H
	DB	096H
	DB	0f2H
	DB	073H
	DB	019H
	DB	049H
	DB	0d1H
	DB	090H
	DB	0c6H
	DB	07bH
	DB	0e0H
	DB	01bH
	DB	082H
	DB	036H
	DB	029H
	DB	056H
	DB	031H
	DB	07bH
	DB	0c3H
	DB	048H
	DB	07fH
	DB	049H
	DB	0bH
	DB	046H
	DB	09H
	DB	024H
	DB	0adH
	DB	013H
	DB	05dH
	DB	097H
	DB	0c6H
	DB	0f9H
	DB	052H
	DB	062H
	DB	092H
	DB	031H
	DB	082H
	DB	03H
	DB	0f3H
	DB	030H
	DB	082H
	DB	03H
	DB	0efH
	DB	02H
	DB	01H
	DB	01H
	DB	030H
	DB	081H
	DB	0cbH
	DB	030H
	DB	081H
	DB	0b6H
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	017H
	DB	030H
	DB	015H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	0eH
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	02cH
	DB	020H
	DB	049H
	DB	06eH
	DB	063H
	DB	02eH
	DB	031H
	DB	01fH
	DB	030H
	DB	01dH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	016H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	054H
	DB	072H
	DB	075H
	DB	073H
	DB	074H
	DB	020H
	DB	04eH
	DB	065H
	DB	074H
	DB	077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	031H
	DB	03bH
	DB	030H
	DB	039H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0bH
	DB	013H
	DB	032H
	DB	054H
	DB	065H
	DB	072H
	DB	06dH
	DB	073H
	DB	020H
	DB	06fH
	DB	066H
	DB	020H
	DB	075H
	DB	073H
	DB	065H
	DB	020H
	DB	061H
	DB	074H
	DB	020H
	DB	068H
	DB	074H
	DB	074H
	DB	070H
	DB	073H
	DB	03aH
	DB	02fH
	DB	02fH
	DB	077H
	DB	077H
	DB	077H
	DB	02eH
	DB	076H
	DB	065H
	DB	072H
	DB	069H
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	02eH
	DB	063H
	DB	06fH
	DB	06dH
	DB	02fH
	DB	072H
	DB	070H
	DB	061H
	DB	020H
	DB	028H
	DB	063H
	DB	029H
	DB	030H
	DB	039H
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	056H
	DB	065H
	DB	072H
	DB	069H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	020H
	DB	043H
	DB	06cH
	DB	061H
	DB	073H
	DB	073H
	DB	020H
	DB	033H
	DB	020H
	DB	043H
	DB	06fH
	DB	064H
	DB	065H
	DB	020H
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	032H
	DB	030H
	DB	030H
	DB	039H
	DB	02dH
	DB	032H
	DB	020H
	DB	043H
	DB	041H
	DB	02H
	DB	010H
	DB	024H
	DB	084H
	DB	072H
	DB	054H
	DB	02cH
	DB	024H
	DB	0abH
	DB	08eH
	DB	042H
	DB	092H
	DB	029H
	DB	0acH
	DB	0f1H
	DB	021H
	DB	0caH
	DB	026H
	DB	030H
	DB	09H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	05H
	DB	00H
	DB	0a0H
	DB	070H
	DB	030H
	DB	010H
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	0cH
	DB	031H
	DB	02H
	DB	030H
	DB	00H
	DB	030H
	DB	019H
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	03H
	DB	031H
	DB	0cH
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	04H
	DB	030H
	DB	01cH
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	0bH
	DB	031H
	DB	0eH
	DB	030H
	DB	0cH
	DB	06H
	DB	0aH
	DB	02bH
	DB	06H
	DB	01H
	DB	04H
	DB	01H
	DB	082H
	DB	037H
	DB	02H
	DB	01H
	DB	015H
	DB	030H
	DB	023H
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	04H
	DB	031H
	DB	016H
	DB	04H
	DB	014H
	DB	074H
	DB	067H
	DB	0a5H
	DB	09dH
	DB	08aH
	DB	0aaH
	DB	0b1H
	DB	01H
	DB	02dH
	DB	02fH
	DB	0bH
	DB	0e4H
	DB	02eH
	DB	03eH
	DB	06dH
	DB	025H
	DB	06aH
	DB	089H
	DB	09aH
	DB	0b2H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	04H
	DB	081H
	DB	080H
	DB	02aH
	DB	0fcH
	DB	085H
	DB	08aH
	DB	0dfH
	DB	0e6H
	DB	092H
	DB	022H
	DB	015H
	DB	09eH
	DB	049H
	DB	08H
	DB	0a2H
	DB	0c8H
	DB	018H
	DB	01aH
	DB	055H
	DB	08fH
	DB	08eH
	DB	07dH
	DB	0ddH
	DB	0bH
	DB	0e4H
	DB	00H
	DB	09dH
	DB	0c6H
	DB	0b2H
	DB	089H
	DB	028H
	DB	05eH
	DB	0a4H
	DB	092H
	DB	086H
	DB	0abH
	DB	0dbH
	DB	063H
	DB	0a6H
	DB	024H
	DB	075H
	DB	0a9H
	DB	0f2H
	DB	01eH
	DB	093H
	DB	0aaH
	DB	094H
	DB	0b9H
	DB	093H
	DB	091H
	DB	02eH
	DB	0c0H
	DB	055H
	DB	0b8H
	DB	061H
	DB	048H
	DB	038H
	DB	07dH
	DB	08H
	DB	0cH
	DB	07fH
	DB	096H
	DB	0c0H
	DB	0b1H
	DB	061H
	DB	0a7H
	DB	0eaH
	DB	0c3H
	DB	089H
	DB	029H
	DB	030H
	DB	02cH
	DB	071H
	DB	095H
	DB	01cH
	DB	037H
	DB	0bdH
	DB	097H
	DB	08eH
	DB	087H
	DB	044H
	DB	03dH
	DB	05H
	DB	080H
	DB	0abH
	DB	0e4H
	DB	06aH
	DB	03cH
	DB	0deH
	DB	053H
	DB	0afH
	DB	03fH
	DB	0a7H
	DB	035H
	DB	051H
	DB	0d3H
	DB	0fH
	DB	076H
	DB	02bH
	DB	0deH
	DB	05fH
	DB	03dH
	DB	02H
	DB	04bH
	DB	0f6H
	DB	0ddH
	DB	0c9H
	DB	05fH
	DB	0adH
	DB	028H
	DB	037H
	DB	099H
	DB	02H
	DB	0e1H
	DB	064H
	DB	06bH
	DB	0a7H
	DB	067H
	DB	02dH
	DB	038H
	DB	083H
	DB	0c2H
	DB	0abH
	DB	08cH
	DB	0fH
	DB	05dH
	DB	032H
	DB	012H
	DB	02aH
	DB	091H
	DB	0a1H
	DB	082H
	DB	02H
	DB	0bH
	DB	030H
	DB	082H
	DB	02H
	DB	07H
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	06H
	DB	031H
	DB	082H
	DB	01H
	DB	0f8H
	DB	030H
	DB	082H
	DB	01H
	DB	0f4H
	DB	02H
	DB	01H
	DB	01H
	DB	030H
	DB	072H
	DB	030H
	DB	05eH
	DB	031H
	DB	0bH
	DB	030H
	DB	09H
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	06H
	DB	013H
	DB	02H
	DB	055H
	DB	053H
	DB	031H
	DB	01dH
	DB	030H
	DB	01bH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	0aH
	DB	013H
	DB	014H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	043H
	DB	06fH
	DB	072H
	DB	070H
	DB	06fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	031H
	DB	030H
	DB	030H
	DB	02eH
	DB	06H
	DB	03H
	DB	055H
	DB	04H
	DB	03H
	DB	013H
	DB	027H
	DB	053H
	DB	079H
	DB	06dH
	DB	061H
	DB	06eH
	DB	074H
	DB	065H
	DB	063H
	DB	020H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	053H
	DB	074H
	DB	061H
	DB	06dH
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	020H
	DB	053H
	DB	065H
	DB	072H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	020H
	DB	043H
	DB	041H
	DB	020H
	DB	02dH
	DB	020H
	DB	047H
	DB	032H
	DB	02H
	DB	010H
	DB	0eH
	DB	0cfH
	DB	0f4H
	DB	038H
	DB	0c8H
	DB	0feH
	DB	0bfH
	DB	035H
	DB	06eH
	DB	04H
	DB	0d8H
	DB	06aH
	DB	098H
	DB	01bH
	DB	01aH
	DB	050H
	DB	030H
	DB	09H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	05H
	DB	00H
	DB	0a0H
	DB	05dH
	DB	030H
	DB	018H
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	03H
	DB	031H
	DB	0bH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	07H
	DB	01H
	DB	030H
	DB	01cH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	05H
	DB	031H
	DB	0fH
	DB	017H
	DB	0dH
	DB	031H
	DB	033H
	DB	030H
	DB	037H
	DB	030H
	DB	034H
	DB	030H
	DB	033H
	DB	033H
	DB	032H
	DB	031H
	DB	031H
	DB	05aH
	DB	030H
	DB	023H
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	09H
	DB	04H
	DB	031H
	DB	016H
	DB	04H
	DB	014H
	DB	053H
	DB	068H
	DB	0a1H
	DB	052H
	DB	06bH
	DB	0eaH
	DB	056H
	DB	0e2H
	DB	09H
	DB	03aH
	DB	043H
	DB	067H
	DB	0f9H
	DB	0b9H
	DB	08H
	DB	076H
	DB	02eH
	DB	013H
	DB	0f5H
	DB	04H
	DB	030H
	DB	0dH
	DB	06H
	DB	09H
	DB	02aH
	DB	086H
	DB	048H
	DB	086H
	DB	0f7H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	00H
	DB	04H
	DB	082H
	DB	01H
	DB	00H
	DB	015H
	DB	07H
	DB	025H
	DB	010H
	DB	0eeH
	DB	0a9H
	DB	0c2H
	DB	01eH
	DB	0f7H
	DB	0abH
	DB	021H
	DB	027H
	DB	0e1H
	DB	048H
	DB	062H
	DB	080H
	DB	071H
	DB	06eH
	DB	073H
	DB	05H
	DB	08cH
	DB	0e5H
	DB	06H
	DB	08cH
	DB	042H
	DB	05bH
	DB	03dH
	DB	0ddH
	DB	05aH
	DB	099H
	DB	092H
	DB	0ccH
	DB	011H
	DB	051H
	DB	0fdH
	DB	0bfH
	DB	03bH
	DB	0a3H
	DB	04fH
	DB	07H
	DB	090H
	DB	03eH
	DB	056H
	DB	0aaH
	DB	0d9H
	DB	05aH
	DB	05H
	DB	031H
	DB	044H
	DB	0d5H
	DB	064H
	DB	081H
	DB	089H
	DB	0acH
	DB	041H
	DB	01dH
	DB	01cH
	DB	05fH
	DB	0d3H
	DB	0bbH
	DB	0d3H
	DB	0c4H
	DB	026H
	DB	05bH
	DB	0e2H
	DB	0aH
	DB	0e4H
	DB	063H
	DB	039H
	DB	036H
	DB	085H
	DB	0beH
	DB	02eH
	DB	04fH
	DB	0ebH
	DB	064H
	DB	047H
	DB	023H
	DB	0ddH
	DB	025H
	DB	085H
	DB	0f1H
	DB	028H
	DB	093H
	DB	0cfH
	DB	072H
	DB	0fbH
	DB	0c9H
	DB	0aeH
	DB	09dH
	DB	04aH
	DB	055H
	DB	091H
	DB	071H
	DB	017H
	DB	0e0H
	DB	0d2H
	DB	015H
	DB	072H
	DB	051H
	DB	0f1H
	DB	038H
	DB	018H
	DB	00H
	DB	0ffH
	DB	0a3H
	DB	0bfH
	DB	0f2H
	DB	04fH
	DB	061H
	DB	0e4H
	DB	077H
	DB	011H
	DB	02H
	DB	0b1H
	DB	038H
	DB	0d7H
	DB	034H
	DB	04fH
	DB	040H
	DB	01dH
	DB	070H
	DB	0c0H
	DB	0b8H
	DB	088H
	DB	078H
	DB	0e5H
	DB	028H
	DB	066H
	DB	0dbH
	DB	050H
	DB	01bH
	DB	053H
	DB	03cH
	DB	0dcH
	DB	02fH
	DB	0eH
	DB	0a2H
	DB	04eH
	DB	0c4H
	DB	03H
	DB	028H
	DB	0a8H
	DB	0baH
	DB	06bH
	DB	0d8H
	DB	032H
	DB	0b6H
	DB	0feH
	DB	042H
	DB	05aH
	DB	0c2H
	DB	04fH
	DB	08H
	DB	0a5H
	DB	0fH
	DB	0edH
	DB	05aH
	DB	069H
	DB	0d5H
	DB	0d9H
	DB	0b0H
	DB	06eH
	DB	0efH
	DB	08cH
	DB	048H
	DB	027H
	DB	0f5H
	DB	0cdH
	DB	0faH
	DB	098H
	DB	0b4H
	DB	017H
	DB	098H
	DB	00H
	DB	0a8H
	DB	0c0H
	DB	04dH
	DB	036H
	DB	0dcH
	DB	0e4H
	DB	02H
	DB	08H
	DB	055H
	DB	06fH
	DB	02dH
	DB	0e2H
	DB	04aH
	DB	075H
	DB	0f4H
	DB	06dH
	DB	0d8H
	DB	00H
	DB	037H
	DB	010H
	DB	0b8H
	DB	0d7H
	DB	0efH
	DB	075H
	DB	0cdH
	DB	032H
	DB	095H
	DB	012H
	DB	0d2H
	DB	0a1H
	DB	0eaH
	DB	07cH
	DB	09H
	DB	026H
	DB	073H
	DB	0acH
	DB	082H
	DB	069H
	DB	07cH
	DB	0edH
	DB	0b6H
	DB	0dH
	DB	0e0H
	DB	062H
	DB	03dH
	DB	09dH
	DB	08H
	DB	0abH
	DB	09aH
	DB	0c1H
	DB	072H
	DB	0b1H
	DB	069H
	DB	0c3H
	DB	072H
	DB	0dfH
	DB	0e3H
	DB	0cH
	DB	041H
	DB	0b2H
	DB	03aH
	DB	094H
	DB	08bH
	DB	0e2H
	DB	020H
	DB	06fH
	DB	036H
	DB	041H
	DB	087H
	DB	0c5H
	DB	089H
	DB	0cfH
	DB	018H
	DB	0bH
	DB	0efH
	DB	0adH
	DB	05H
	DB	017H
	DB	075H
	DB	07bH
	DB	047H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B DB 071H ; `<lambda_52c86be46df0f1ecdea0a36a120070fd>::operator()'::`2'::crypted
	DB	057H
	DB	04cH
	DB	05aH
	DB	050H
	DB	054H
	DB	05aH
	DB	01fH
	DB	026H
	DB	034H
	DB	02cH
	DB	020H
	DB	02dH
	DB	031H
	DB	029H
	DB	029H
	DB	068H
	DB	026H
	DB	03aH
	DB	02eH
	DB	03eH
	DB	02cH
	DB	03aH
	DB	026H
	DB	03fH
	DB	03fH
	DB	072H
	DB	020H
	DB	031H
	DB	03bH
	DB	022H
	DB	077H
	DB	02cH
	DB	036H
	DB	07aH
	DB	03fH
	DB	02eH
	DB	034H
	DB	028H
	DB	03aH
	DB	012H
	DB	04fH
	DB	068H
	DB	063H
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B DB 04fH ; `<lambda_b2c4f788f3fb21db083d3b397ab63711>::operator()'::`2'::crypted
	DB	050H
	DB	054H
	DB	08H
	DB	0eH
	DB	048H
	DB	010H
	DB	05bH
	DB	02cH
	DB	02dH
	DB	042H
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
CONST	SEGMENT
?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B DB 04fH ; `<lambda_6d32484823a26278e33b8e250507ac0c>::operator()'::`2'::crypted
	DB	050H
	DB	054H
	DB	08H
	DB	0eH
	DB	048H
	DB	010H
	DB	05bH
	DB	02cH
	DB	02dH
	DB	042H
CONST	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLKFJBLM@ntdll?4dll@
CONST	SEGMENT
??_C@_09FLKFJBLM@ntdll?4dll@ DB 'ntdll.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKOALOPC@NtShutdownSystem@
CONST	SEGMENT
??_C@_0BB@OKOALOPC@NtShutdownSystem@ DB 'NtShutdownSystem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMLMCGNC@?4Translated@
CONST	SEGMENT
??_C@_0M@GMLMCGNC@?4Translated@ DB '.Translated', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@EMAIBLPA@HARDWARE?2RESOURCEMAP?2System?5Res@
CONST	SEGMENT
??_C@_0DG@EMAIBLPA@HARDWARE?2RESOURCEMAP?2System?5Res@ DB 'HARDWARE\RESOU'
	DB	'RCEMAP\System Resources\Physical Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
PUBLIC	??$construct@EAEBE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEBE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char const &>
PUBLIC	??$forward@AEBE@std@@YAAEBEAEBE@Z		; std::forward<unsigned char const &>
PUBLIC	??$?0AEA_KAEA_K$0A@@?$pair@$$CB_K_K@std@@QEAA@AEA_K0@Z ; std::pair<unsigned __int64 const ,unsigned __int64>::pair<unsigned __int64 const ,unsigned __int64><unsigned __int64 &,unsigned __int64 &,0>
PUBLIC	??$_Voidify_iter@PEAU?$pair@$$CB_K_K@std@@@std@@YAPEAXPEAU?$pair@$$CB_K_K@0@@Z ; std::_Voidify_iter<std::pair<unsigned __int64 const ,unsigned __int64> *>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEBV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > const >
PUBLIC	??$_Emplace_back@AEBE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEBE@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char const &>
PUBLIC	??$_To_address@PEBE@std@@YA?A_PAEBQEBE@Z	; std::_To_address<unsigned char const *>
PUBLIC	??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z ; std::_Copy_memmove<unsigned char const *,unsigned char *>
PUBLIC	??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z		; std::_Voidify_iter<unsigned char *>
PUBLIC	??$forward@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YA$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
PUBLIC	??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CB_K_K@std@@AEA_KAEA_K@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@AEA_K2@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::construct<std::pair<unsigned __int64 const ,unsigned __int64>,unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
PUBLIC	??$_Kfn@$$CB_K_K@?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@SAAEB_KAEBU?$pair@$$CB_K_K@1@@Z ; std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0>::_Kfn<unsigned __int64 const ,unsigned __int64>
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@_K@2@XZ ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Get_first
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Allocate
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBU?$less@_K@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getcomp
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary
PUBLIC	??R?$less@_K@std@@QEBA_NAEB_K0@Z		; std::less<unsigned __int64>::operator()
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::nullptr_t>
PUBLIC	??$destroy@U?$pair@$$CB_K_K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::destroy<std::pair<unsigned __int64 const ,unsigned __int64> >
PUBLIC	??$addressof@U?$pair@$$CB_K_K@std@@@std@@YAPEAU?$pair@$$CB_K_K@0@AEAU10@@Z ; std::addressof<std::pair<unsigned __int64 const ,unsigned __int64> >
PUBLIC	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z	; std::_To_address<unsigned char *>
PUBLIC	??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>
PUBLIC	??$_Voidify_iter@PEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAXPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * *>
PUBLIC	??$addressof@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
PUBLIC	??$_Get_unwrapped@AEBQEBE@std@@YA?A_TAEBQEBE@Z	; std::_Get_unwrapped<unsigned char const * const &>
PUBLIC	??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z ; std::_Uninitialized_copy<unsigned char const *,std::allocator<unsigned char> >
PUBLIC	??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
PUBLIC	??$_Unfancy@E@std@@YAPEAEPEAE@Z			; std::_Unfancy<unsigned char>
PUBLIC	??$forward@AEB_N@std@@YAAEB_NAEB_N@Z		; std::forward<bool const &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@0@AEAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > > >
PUBLIC	??$?0PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool,0>
PUBLIC	??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$?0AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &,bool,0>
PUBLIC	??$_Lower_bound_duplicate@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEB_K@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Lower_bound_duplicate<unsigned __int64>
PUBLIC	??$_Find_lower_bound@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@AEB_K@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Find_lower_bound<unsigned __int64>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::max_size
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEBA_KXZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::max_size
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Rrotate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::deallocate
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Check_grow_by_1
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAA@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
PUBLIC	?_Extract@?$_In_place_key_extract_map@_K_K_K@std@@SAAEB_KAEB_K0@Z ; std::_In_place_key_extract_map<unsigned __int64,unsigned __int64,unsigned __int64>::_Extract
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Release
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z		; std::_Get_size_of_n<48>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$forward@AEBU?$less@_K@std@@@std@@YAAEBU?$less@_K@0@AEBU10@@Z ; std::forward<std::less<unsigned __int64> const &>
PUBLIC	??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char const *>
PUBLIC	??$distance@PEBE@std@@YA_JPEBE0@Z		; std::distance<unsigned char const *>
PUBLIC	??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z ; std::forward<std::allocator<unsigned char> const &>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@1@AEB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool const &,0>
PUBLIC	??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>
PUBLIC	??$forward@AEA_K@std@@YAAEA_KAEA_K@Z		; std::forward<unsigned __int64 &>
PUBLIC	??$forward@_N@std@@YA$$QEA_NAEA_N@Z		; std::forward<bool>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1><>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	?allocate@?$allocator@E@std@@QEAAPEAE_K@Z	; std::allocator<unsigned char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
PUBLIC	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
PUBLIC	?isEncrypted@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<20,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<25,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<15,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<18,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<44,56,50,char>::isEncrypted
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
PUBLIC	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
PUBLIC	?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<20,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<25,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<15,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<18,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<44,56,50,char>::decrypt
PUBLIC	?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero
PUBLIC	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocate
PUBLIC	??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<20,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<25,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<15,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<18,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<44,56,50,char>::operator char *
PUBLIC	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$?0AEBU?$less@_K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@_K@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1><std::less<unsigned __int64> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Range_construct_or_tidy<unsigned char const *>
PUBLIC	??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
PUBLIC	??R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ ; <lambda_52c86be46df0f1ecdea0a36a120070fd>::operator()
PUBLIC	??R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ ; <lambda_e5ada57596ca662cca6407ad0e4058a5>::operator()
PUBLIC	??R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ ; <lambda_07c8de3dc6ef07446993d2c862434f57>::operator()
PUBLIC	??R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ ; <lambda_6cfd3e9ca2701072e25ae67c739ed459>::operator()
PUBLIC	??R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ ; <lambda_d0c44f387d109c89364b20584f70023c>::operator()
PUBLIC	??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z ; invoke_driver<1>
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first
PUBLIC	?isEncrypted@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<11,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<22,56,50,char>::isEncrypted
PUBLIC	?isEncrypted@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAA_NXZ ; skc::skCrypter<14,56,50,char>::isEncrypted
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>
PUBLIC	?begin@?$initializer_list@E@std@@QEBAPEBEXZ	; std::initializer_list<unsigned char>::begin
PUBLIC	?end@?$initializer_list@E@std@@QEBAPEBEXZ	; std::initializer_list<unsigned char>::end
PUBLIC	?decrypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<11,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<22,56,50,char>::decrypt
PUBLIC	?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ ; skc::skCrypter<14,56,50,char>::decrypt
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0?$allocator@E@std@@QEAA@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::~_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >
PUBLIC	??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??0?$initializer_list@E@std@@QEAA@PEBE0@Z	; std::initializer_list<unsigned char>::initializer_list<unsigned char>
PUBLIC	??B?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<11,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<22,56,50,char>::operator char *
PUBLIC	??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ	; skc::skCrypter<14,56,50,char>::operator char *
PUBLIC	?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z ; kernel::driver::write_buffer
PUBLIC	?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z ; kernel::driver::read_buffer
PUBLIC	?get_process_base@driver@kernel@@QEAA_KI@Z	; kernel::driver::get_process_base
PUBLIC	?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<14,56,50,char>::crypt
PUBLIC	?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<22,56,50,char>::crypt
PUBLIC	?init@driver@kernel@@QEAA_NXZ			; kernel::driver::init
PUBLIC	?crypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<11,56,50,char>::crypt
PUBLIC	?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ		; ensure_dll_load
PUBLIC	?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<44,56,50,char>::crypt
PUBLIC	?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<18,56,50,char>::crypt
PUBLIC	?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<15,56,50,char>::crypt
PUBLIC	?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<25,56,50,char>::crypt
PUBLIC	?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ; skc::skCrypter<20,56,50,char>::crypt
PUBLIC	??1driver@kernel@@QEAA@XZ			; kernel::driver::~driver
PUBLIC	??0driver@kernel@@QEAA@XZ			; kernel::driver::driver
PUBLIC	??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::~map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z	; std::_Iterator_base0::_Adopt
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
PUBLIC	?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A	; Drv
PUBLIC	?Km@@3Vdriver@kernel@@A				; Km
PUBLIC	?init_ranges@util@@3_NB				; util::init_ranges
PUBLIC	__isa_available_default
PUBLIC	__real@000002ca
PUBLIC	__real@358637bd
PUBLIC	__real@3727c5ac
PUBLIC	__real@37800000
PUBLIC	__real@38800000
PUBLIC	__real@3b808081
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d860a92
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f266666
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f333333
PUBLIC	__real@3f350481
PUBLIC	__real@3f3851ec
PUBLIC	__real@3f400000
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f5db22d
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f7fff58
PUBLIC	__real@3f7fffef
PUBLIC	__real@3f800000
PUBLIC	__real@3f8147ae
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f99999a
PUBLIC	__real@3fa00000
PUBLIC	__real@3faccccd
PUBLIC	__real@3fc00000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40200000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4059000000000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40afede0
PUBLIC	__real@40b84e89
PUBLIC	__real@40c00000
PUBLIC	__real@40c70d23
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41500000
PUBLIC	__real@41800000
PUBLIC	__real@41a00000
PUBLIC	__real@41c00000
PUBLIC	__real@41f00000
PUBLIC	__real@421e7ae1
PUBLIC	__real@42200000
PUBLIC	__real@42400000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@42c80000
PUBLIC	__real@42f60000
PUBLIC	__real@43610000
PUBLIC	__real@437f0000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@43fa0000
PUBLIC	__real@44160000
PUBLIC	__real@44333333
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@44b33333
PUBLIC	__real@45333333
PUBLIC	__real@46c2ac00
PUBLIC	__real@5f000000
PUBLIC	__real@7effffff
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fdfffffffffffff
PUBLIC	__real@be800000
PUBLIC	__real@bf400000
PUBLIC	__real@bf5db22d
PUBLIC	__real@bf800000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c059000000000000
PUBLIC	__real@c2c80000
PUBLIC	__real@c6c2ae00
PUBLIC	__real@c87a0000
PUBLIC	__real@feffffff
PUBLIC	__real@ff7fffff
PUBLIC	__real@ffdfffffffffffff
PUBLIC	__xmm@000000000000000000000000ffffffff
PUBLIC	__xmm@00000000000000020000000300000001
PUBLIC	__xmm@00000000000000070000000000000000
PUBLIC	__xmm@00000000000000080000000100000000
PUBLIC	__xmm@000000000000000f0000000000000000
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@00000001000000010000000100000015
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000006000000020000000100000006
PUBLIC	__xmm@00000007000000060000000500000004
PUBLIC	__xmm@00000033000000330000003300000033
PUBLIC	__xmm@00d1dfd1c3d9ccdcc4cdc3d9dac7d5c5
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@32323232323232323232323232323232
PUBLIC	__xmm@38383838383838383838383838383838
PUBLIC	__xmm@3b8080813df8f8fa3f62e2e43d888889
PUBLIC	__xmm@3b8080813f7afafc3f80000000000000
PUBLIC	__xmm@3d75c28f3f8000003f8000003f800000
PUBLIC	__xmm@3e4ccccd3f4ccccd3f4ccccd3f4ccccd
PUBLIC	__xmm@3e4ccccd3f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3e9eb8523f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3eb333333f4ccccd3f4ccccd3f4ccccd
PUBLIC	__xmm@3eb333333f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3ec8c8ca000000000000000000000000
PUBLIC	__xmm@3ecccccd3f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3f0000003f0000003edc28f63edc28f6
PUBLIC	__xmm@3f028f5c000000000000000000000000
PUBLIC	__xmm@3f07ae143ca3d70a3ca3d70a3ca3d70a
PUBLIC	__xmm@3f0a3d713ef5c28f3e947ae13e23d70a
PUBLIC	__xmm@3f2b851f3f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3f3333333f8000003f8000003f800000
PUBLIC	__xmm@3f47ae143f4000003ecccccd3dcccccd
PUBLIC	__xmm@3f4ccccd3f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3f666666000000003f8000003f800000
PUBLIC	__xmm@3f70a3d73d75c28f3d75c28f3d75c28f
PUBLIC	__xmm@3f70a3d73da3d70a3da3d70a3da3d70a
PUBLIC	__xmm@3f7333333f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3f80000000000000000000003ec8c8ca
PUBLIC	__xmm@3f80000000000000000000003f800000
PUBLIC	__xmm@3f800000000000003f19999a3f800000
PUBLIC	__xmm@3f800000000000003f3333333f666666
PUBLIC	__xmm@3f8000003c40c0c23c0080813f26a6a7
PUBLIC	__xmm@3f8000003d23d70a3d23d70a3d23d70a
PUBLIC	__xmm@3f8000003e0f5c293e0f5c293e0f5c29
PUBLIC	__xmm@3f8000003e4ccccd3e428f5c3e428f5c
PUBLIC	__xmm@3f8000003e8000003e6b851f3e6b851f
PUBLIC	__xmm@3f8000003e8c8c8d3e74f4f63e50d0d2
PUBLIC	__xmm@3f8000003e9eb8523e9eb8523e9eb852
PUBLIC	__xmm@3f8000003eb333333e9eb8523e9eb852
PUBLIC	__xmm@3f8000003eb333333edc28f63f800000
PUBLIC	__xmm@3f8000003ec8c8ca000000003e008081
PUBLIC	__xmm@3f8000003ed1eb853ed1eb853ed1eb85
PUBLIC	__xmm@3f8000003ef5c28f3e947ae13e23d70a
PUBLIC	__xmm@3f8000003f0000003f0000003f000000
PUBLIC	__xmm@3f8000003f028f5c3f028f5c3f028f5c
PUBLIC	__xmm@3f8000003f1c28f63f1c28f63f1c28f6
PUBLIC	__xmm@3f8000003f3fbfc03f1f9fa03e68e8ea
PUBLIC	__xmm@3f8000003f4000003ecccccd3dcccccd
PUBLIC	__xmm@3f8000003f6147ae3f051eb83e75c28f
PUBLIC	__xmm@3f8000003f7ae1483f07ae143d75c28f
PUBLIC	__xmm@3f8000003f7ae1483f170a3d3e851eb8
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@95c6dcc0c3f58ff3dfc9ddc3dbecfc86
PUBLIC	__xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
PUBLIC	__xmm@a6abb1b2e1b8dacedc9cc9d5df98d0d8
PUBLIC	__xmm@b1abade2b2b3daccd9d8da9adccbd6f4
PUBLIC	__xmm@b7e4b0a6afa5d8dbf19cc3dfc9f997d2
PUBLIC	__xmm@d0d7dcc0e190f2cbc9c3c6d8ccdbf2fd
PUBLIC	__xmm@dbc1dcf491edcacac2c1d9cfdafdfc86
PUBLIC	__xmm@dcdfdcddfd90f2cbc9c3c6d8ccdbf2fd
PUBLIC	__xmm@ff7fffffff7fffff7f7fffff7f7fffff
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__GSHandlerCheck_SEH:PROC
EXTRN	__chkstk:PROC
EXTRN	__std_terminate:PROC
EXTRN	acosf:PROC
EXTRN	ceilf:PROC
EXTRN	cosf:PROC
EXTRN	fmodf:PROC
EXTRN	log:PROC
EXTRN	logf:PROC
EXTRN	memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	pow:PROC
EXTRN	powf:PROC
EXTRN	sinf:PROC
EXTRN	sqrt:PROC
EXTRN	sqrtf:PROC
EXTRN	strcmp:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__isa_available:DWORD
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
_BSS	SEGMENT
?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A DB 010H DUP (?) ; util::pmem_ranges
_BSS	ENDS
;	COMDAT ?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A
_BSS	SEGMENT
?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A DB 018H DUP (?) ; Drv
_BSS	ENDS
;	COMDAT ?Km@@3Vdriver@kernel@@A
_BSS	SEGMENT
?Km@@3Vdriver@kernel@@A DB 010H DUP (?)			; Km
_BSS	ENDS
;	COMDAT ?init_ranges@util@@3_NB
_BSS	SEGMENT
?init_ranges@util@@3_NB DB 01H DUP (?)			; util::init_ranges
_BSS	ENDS
;	COMDAT __isa_available_default
_BSS	SEGMENT
__isa_available_default DD 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ DD imagerel $LN28
	DD	imagerel $LN28+37
	DD	imagerel $unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD imagerel $LN35
	DD	imagerel $LN35+47
	DD	imagerel $unwind$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z DD imagerel $LN16
	DD	imagerel $LN16+48
	DD	imagerel $unwind$??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z DD imagerel $LN49
	DD	imagerel $LN49+131
	DD	imagerel $unwind$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+34
	DD	imagerel $unwind$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z DD imagerel $LN57
	DD	imagerel $LN57+637
	DD	imagerel $unwind$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN17
	DD	imagerel $LN17+59
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z DD imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z DD imagerel $LN37
	DD	imagerel $LN37+85
	DD	imagerel $unwind$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z DD imagerel $LN112
	DD	imagerel $LN112+293
	DD	imagerel $unwind$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z DD imagerel $LN27
	DD	imagerel $LN27+89
	DD	imagerel $unwind$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN30
	DD	imagerel $LN30+116
	DD	imagerel $unwind$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+62
	DD	imagerel $LN24+401
	DD	imagerel $chain$2$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+401
	DD	imagerel $LN24+476
	DD	imagerel $chain$3$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+62
	DD	imagerel $LN24+401
	DD	imagerel $chain$2$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+401
	DD	imagerel $LN24+476
	DD	imagerel $chain$3$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23+103
	DD	imagerel $LN23+311
	DD	imagerel $chain$0$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23+311
	DD	imagerel $LN23+380
	DD	imagerel $chain$1$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+62
	DD	imagerel $LN24+401
	DD	imagerel $chain$2$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+401
	DD	imagerel $LN24+476
	DD	imagerel $chain$3$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+62
	DD	imagerel $LN24+401
	DD	imagerel $chain$2$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+401
	DD	imagerel $LN24+476
	DD	imagerel $chain$3$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN35
	DD	imagerel $LN35+137
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+62
	DD	imagerel $LN26+401
	DD	imagerel $chain$2$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+401
	DD	imagerel $LN26+476
	DD	imagerel $chain$3$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+62
	DD	imagerel $LN26+401
	DD	imagerel $chain$2$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+401
	DD	imagerel $LN26+476
	DD	imagerel $chain$3$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25+103
	DD	imagerel $LN25+311
	DD	imagerel $chain$0$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25+311
	DD	imagerel $LN25+380
	DD	imagerel $chain$1$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+62
	DD	imagerel $LN26+401
	DD	imagerel $chain$2$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+401
	DD	imagerel $LN26+476
	DD	imagerel $chain$3$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+62
	DD	imagerel $LN26+401
	DD	imagerel $chain$2$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+401
	DD	imagerel $LN26+476
	DD	imagerel $chain$3$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ DD imagerel $LN29
	DD	imagerel $LN29+93
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN24
	DD	imagerel $LN24+89
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD imagerel $LN28
	DD	imagerel $LN28+36
	DD	imagerel $unwind$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD imagerel $LN84
	DD	imagerel $LN84+48
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD imagerel $LN84+48
	DD	imagerel $LN84+155
	DD	imagerel $chain$0$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD imagerel $LN84+155
	DD	imagerel $LN84+171
	DD	imagerel $chain$1$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD imagerel $LN84+171
	DD	imagerel $LN84+177
	DD	imagerel $chain$2$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD imagerel $LN84+177
	DD	imagerel $LN84+183
	DD	imagerel $chain$3$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD imagerel $LN60
	DD	imagerel $LN60+113
	DD	imagerel $unwind$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z DD imagerel $LN139
	DD	imagerel $LN139+2486
	DD	imagerel $unwind$??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN99
	DD	imagerel $LN99+458
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+59
	DD	imagerel $unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z DD imagerel $LN122
	DD	imagerel $LN122+277
	DD	imagerel $unwind$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z DD imagerel $LN21
	DD	imagerel $LN21+62
	DD	imagerel $unwind$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ DD imagerel $LN31
	DD	imagerel $LN31+43
	DD	imagerel $unwind$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN8
	DD	imagerel $LN8+44
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+36
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DD imagerel $LN25
	DD	imagerel $LN25+88
	DD	imagerel $unwind$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z DD imagerel $LN41
	DD	imagerel $LN41+61
	DD	imagerel $unwind$??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+62
	DD	imagerel $LN24+401
	DD	imagerel $chain$2$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN24+401
	DD	imagerel $LN24+476
	DD	imagerel $chain$3$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23+103
	DD	imagerel $LN23+311
	DD	imagerel $chain$0$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN23+311
	DD	imagerel $LN23+380
	DD	imagerel $chain$1$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN24
	DD	imagerel $LN24+122
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+62
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z DD imagerel $LN9
	DD	imagerel $LN9+43
	DD	imagerel $unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ DD imagerel $LN28
	DD	imagerel $LN28+88
	DD	imagerel $unwind$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ DD imagerel $LN63
	DD	imagerel $LN63+92
	DD	imagerel $unwind$??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ DD imagerel $LN45
	DD	imagerel $LN45+70
	DD	imagerel $unwind$??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+62
	DD	imagerel $LN26+401
	DD	imagerel $chain$2$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN26+401
	DD	imagerel $LN26+476
	DD	imagerel $chain$3$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25+103
	DD	imagerel $LN25+311
	DD	imagerel $chain$0$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD imagerel $LN25+311
	DD	imagerel $LN25+380
	DD	imagerel $chain$1$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z
$pdata$?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z
$pdata$?get_process_base@driver@kernel@@QEAA_KI@Z DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$?get_process_base@driver@kernel@@QEAA_KI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+45
	DD	imagerel $LN18+325
	DD	imagerel $chain$0$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+325
	DD	imagerel $LN18+398
	DD	imagerel $chain$1$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+53
	DD	imagerel $LN18+441
	DD	imagerel $chain$2$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+441
	DD	imagerel $LN18+526
	DD	imagerel $chain$3$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?init@driver@kernel@@QEAA_NXZ DD imagerel $LN144
	DD	imagerel $LN144+466
	DD	imagerel $unwind$?init@driver@kernel@@QEAA_NXZ
$pdata$0$?init@driver@kernel@@QEAA_NXZ DD imagerel $LN144+466
	DD	imagerel $LN144+778
	DD	imagerel $chain$0$?init@driver@kernel@@QEAA_NXZ
$pdata$1$?init@driver@kernel@@QEAA_NXZ DD imagerel $LN144+778
	DD	imagerel $LN144+1380
	DD	imagerel $chain$1$?init@driver@kernel@@QEAA_NXZ
$pdata$?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ DD imagerel $LN60
	DD	imagerel $LN60+213
	DD	imagerel $unwind$?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+53
	DD	imagerel $LN18+441
	DD	imagerel $chain$2$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+441
	DD	imagerel $LN18+526
	DD	imagerel $chain$3$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+53
	DD	imagerel $LN18+441
	DD	imagerel $chain$2$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+441
	DD	imagerel $LN18+526
	DD	imagerel $chain$3$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+45
	DD	imagerel $LN18+325
	DD	imagerel $chain$0$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+325
	DD	imagerel $LN18+398
	DD	imagerel $chain$1$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+53
	DD	imagerel $LN18+441
	DD	imagerel $chain$2$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+441
	DD	imagerel $LN18+526
	DD	imagerel $chain$3$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+53
	DD	imagerel $LN18+441
	DD	imagerel $chain$2$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD imagerel $LN18+441
	DD	imagerel $LN18+526
	DD	imagerel $chain$3$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FDrv@@YAXXZ DD imagerel ??__FDrv@@YAXXZ
	DD	imagerel ??__FDrv@@YAXXZ+98
	DD	imagerel $unwind$??__FDrv@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EDrv@@YAXXZ DD imagerel ??__EDrv@@YAXXZ
	DD	imagerel ??__EDrv@@YAXXZ+82000
	DD	imagerel $unwind$??__EDrv@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Einit_ranges@util@@YAXXZ DD imagerel ??__Einit_ranges@util@@YAXXZ
	DD	imagerel ??__Einit_ranges@util@@YAXXZ+490
	DD	imagerel $unwind$??__Einit_ranges@util@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ DD imagerel ??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ
	DD	imagerel ??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ+485
	DD	imagerel $unwind$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ DD imagerel $LN66
	DD	imagerel $LN66+92
	DD	imagerel $unwind$??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fpmem_ranges@util@@YAXXZ DD imagerel ??__Fpmem_ranges@util@@YAXXZ
	DD	imagerel ??__Fpmem_ranges@util@@YAXXZ+99
	DD	imagerel $unwind$??__Fpmem_ranges@util@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Epmem_ranges@util@@YAXXZ DD imagerel ??__Epmem_ranges@util@@YAXXZ
	DD	imagerel ??__Epmem_ranges@util@@YAXXZ+54
	DD	imagerel $unwind$??__Epmem_ranges@util@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_tree_length_error@std@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Throw_tree_length_error@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN13
	DD	imagerel $LN13+43
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN7
	DD	imagerel $LN7+61
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN10
	DD	imagerel $LN10+61
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+67
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+67
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+67
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?pmem_ranges$initializer$@util@@3P6AXXZEA DQ FLAT:??__Epmem_ranges@util@@YAXXZ ; util::pmem_ranges$initializer$
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@ff7fffffff7fffff7f7fffff7f7fffff
CONST	SEGMENT
__xmm@ff7fffffff7fffff7f7fffff7f7fffff DB 0ffH, 0ffH, 07fH, 07fH, 0ffH, 0ffH
	DB	07fH, 07fH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
CONST	ENDS
;	COMDAT __xmm@dcdfdcddfd90f2cbc9c3c6d8ccdbf2fd
CONST	SEGMENT
__xmm@dcdfdcddfd90f2cbc9c3c6d8ccdbf2fd DB 0fdH, 0f2H, 0dbH, 0ccH, 0d8H, 0c6H
	DB	0c3H, 0c9H, 0cbH, 0f2H, 090H, 0fdH, 0ddH, 0dcH, 0dfH, 0dcH
CONST	ENDS
;	COMDAT __xmm@dbc1dcf491edcacac2c1d9cfdafdfc86
CONST	SEGMENT
__xmm@dbc1dcf491edcacac2c1d9cfdafdfc86 DB 086H, 0fcH, 0fdH, 0daH, 0cfH, 0d9H
	DB	0c1H, 0c2H, 0caH, 0caH, 0edH, 091H, 0f4H, 0dcH, 0c1H, 0dbH
CONST	ENDS
;	COMDAT __xmm@d0d7dcc0e190f2cbc9c3c6d8ccdbf2fd
CONST	SEGMENT
__xmm@d0d7dcc0e190f2cbc9c3c6d8ccdbf2fd DB 0fdH, 0f2H, 0dbH, 0ccH, 0d8H, 0c6H
	DB	0c3H, 0c9H, 0cbH, 0f2H, 090H, 0e1H, 0c0H, 0dcH, 0d7H, 0d0H
CONST	ENDS
;	COMDAT __xmm@b7e4b0a6afa5d8dbf19cc3dfc9f997d2
CONST	SEGMENT
__xmm@b7e4b0a6afa5d8dbf19cc3dfc9f997d2 DB 0d2H, 097H, 0f9H, 0c9H, 0dfH, 0c3H
	DB	09cH, 0f1H, 0dbH, 0d8H, 0a5H, 0afH, 0a6H, 0b0H, 0e4H, 0b7H
CONST	ENDS
;	COMDAT __xmm@b1abade2b2b3daccd9d8da9adccbd6f4
CONST	SEGMENT
__xmm@b1abade2b2b3daccd9d8da9adccbd6f4 DB 0f4H, 0d6H, 0cbH, 0dcH, 09aH, 0daH
	DB	0d8H, 0d9H, 0ccH, 0daH, 0b3H, 0b2H, 0e2H, 0adH, 0abH, 0b1H
CONST	ENDS
;	COMDAT __xmm@a6abb1b2e1b8dacedc9cc9d5df98d0d8
CONST	SEGMENT
__xmm@a6abb1b2e1b8dacedc9cc9d5df98d0d8 DB 0d8H, 0d0H, 098H, 0dfH, 0d5H, 0c9H
	DB	09cH, 0dcH, 0ceH, 0daH, 0b8H, 0e1H, 0b2H, 0b1H, 0abH, 0a6H
CONST	ENDS
;	COMDAT __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
CONST	SEGMENT
__xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1 DB 0a1H, 0a0H, 0a0H, 0a0H, 0a1H, 0a0H
	DB	0a0H, 0a0H, 0a1H, 0a0H, 0a0H, 0a0H, 0a1H, 0a0H, 0a0H, 0a0H
CONST	ENDS
;	COMDAT __xmm@95c6dcc0c3f58ff3dfc9ddc3dbecfc86
CONST	SEGMENT
__xmm@95c6dcc0c3f58ff3dfc9ddc3dbecfc86 DB 086H, 0fcH, 0ecH, 0dbH, 0c3H, 0ddH
	DB	0c9H, 0dfH, 0f3H, 08fH, 0f5H, 0c3H, 0c0H, 0dcH, 0c6H, 095H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3f8000003f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f7ae1483f07ae143d75c28f
CONST	SEGMENT
__xmm@3f8000003f7ae1483f07ae143d75c28f DB 08fH, 0c2H, 'u=', 014H, 0aeH, 07H
	DB	'?H', 0e1H, 'z?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f6147ae3f051eb83e75c28f
CONST	SEGMENT
__xmm@3f8000003f6147ae3f051eb83e75c28f DB 08fH, 0c2H, 'u>', 0b8H, 01eH, 05H
	DB	'?', 0aeH, 'Ga?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f4000003ecccccd3dcccccd
CONST	SEGMENT
__xmm@3f8000003f4000003ecccccd3dcccccd DB 0cdH, 0ccH, 0ccH, '=', 0cdH, 0ccH
	DB	0ccH, '>', 00H, 00H, '@?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f3fbfc03f1f9fa03e68e8ea
CONST	SEGMENT
__xmm@3f8000003f3fbfc03f1f9fa03e68e8ea DB 0eaH, 0e8H, 'h>', 0a0H, 09fH, 01fH
	DB	'?', 0c0H, 0bfH, '??', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f1c28f63f1c28f63f1c28f6
CONST	SEGMENT
__xmm@3f8000003f1c28f63f1c28f63f1c28f6 DB 0f6H, '(', 01cH, '?', 0f6H, '(', 01cH
	DB	'?', 0f6H, '(', 01cH, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f028f5c3f028f5c3f028f5c
CONST	SEGMENT
__xmm@3f8000003f028f5c3f028f5c3f028f5c DB '\', 08fH, 02H, '?\', 08fH, 02H
	DB	'?\', 08fH, 02H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f0000003f0000003f000000
CONST	SEGMENT
__xmm@3f8000003f0000003f0000003f000000 DB 00H, 00H, 00H, '?', 00H, 00H, 00H
	DB	'?', 00H, 00H, 00H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003ef5c28f3e947ae13e23d70a
CONST	SEGMENT
__xmm@3f8000003ef5c28f3e947ae13e23d70a DB 0aH, 0d7H, '#>', 0e1H, 'z', 094H
	DB	'>', 08fH, 0c2H, 0f5H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003ed1eb853ed1eb853ed1eb85
CONST	SEGMENT
__xmm@3f8000003ed1eb853ed1eb853ed1eb85 DB 085H, 0ebH, 0d1H, '>', 085H, 0ebH
	DB	0d1H, '>', 085H, 0ebH, 0d1H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003ec8c8ca000000003e008081
CONST	SEGMENT
__xmm@3f8000003ec8c8ca000000003e008081 DB 081H, 080H, 00H, '>', 00H, 00H, 00H
	DB	00H, 0caH, 0c8H, 0c8H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003eb333333edc28f63f800000
CONST	SEGMENT
__xmm@3f8000003eb333333edc28f63f800000 DB 00H, 00H, 080H, '?', 0f6H, '(', 0dcH
	DB	'>33', 0b3H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003eb333333e9eb8523e9eb852
CONST	SEGMENT
__xmm@3f8000003eb333333e9eb8523e9eb852 DB 'R', 0b8H, 09eH, '>R', 0b8H, 09eH
	DB	'>33', 0b3H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e9eb8523e9eb8523e9eb852
CONST	SEGMENT
__xmm@3f8000003e9eb8523e9eb8523e9eb852 DB 'R', 0b8H, 09eH, '>R', 0b8H, 09eH
	DB	'>R', 0b8H, 09eH, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e8c8c8d3e74f4f63e50d0d2
CONST	SEGMENT
__xmm@3f8000003e8c8c8d3e74f4f63e50d0d2 DB 0d2H, 0d0H, 'P>', 0f6H, 0f4H, 't'
	DB	'>', 08dH, 08cH, 08cH, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e8000003e6b851f3e6b851f
CONST	SEGMENT
__xmm@3f8000003e8000003e6b851f3e6b851f DB 01fH, 085H, 'k>', 01fH, 085H, 'k'
	DB	'>', 00H, 00H, 080H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e4ccccd3e428f5c3e428f5c
CONST	SEGMENT
__xmm@3f8000003e4ccccd3e428f5c3e428f5c DB '\', 08fH, 'B>\', 08fH, 'B>', 0cdH
	DB	0ccH, 'L>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e0f5c293e0f5c293e0f5c29
CONST	SEGMENT
__xmm@3f8000003e0f5c293e0f5c293e0f5c29 DB ')\', 0fH, '>)\', 0fH, '>)\', 0fH
	DB	'>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003d23d70a3d23d70a3d23d70a
CONST	SEGMENT
__xmm@3f8000003d23d70a3d23d70a3d23d70a DB 0aH, 0d7H, '#=', 0aH, 0d7H, '#='
	DB	0aH, 0d7H, '#=', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003c40c0c23c0080813f26a6a7
CONST	SEGMENT
__xmm@3f8000003c40c0c23c0080813f26a6a7 DB 0a7H, 0a6H, '&?', 081H, 080H, 00H
	DB	'<', 0c2H, 0c0H, '@<', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000003f3333333f666666
CONST	SEGMENT
__xmm@3f800000000000003f3333333f666666 DB 'fff?333?', 00H, 00H, 00H, 00H, 00H
	DB	00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000003f19999a3f800000
CONST	SEGMENT
__xmm@3f800000000000003f19999a3f800000 DB 00H, 00H, 080H, '?', 09aH, 099H
	DB	019H, '?', 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f80000000000000000000003f800000
CONST	SEGMENT
__xmm@3f80000000000000000000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f80000000000000000000003ec8c8ca
CONST	SEGMENT
__xmm@3f80000000000000000000003ec8c8ca DB 0caH, 0c8H, 0c8H, '>', 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f7333333f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3f7333333f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?33s?'
CONST	ENDS
;	COMDAT __xmm@3f70a3d73da3d70a3da3d70a3da3d70a
CONST	SEGMENT
__xmm@3f70a3d73da3d70a3da3d70a3da3d70a DB 0aH, 0d7H, 0a3H, '=', 0aH, 0d7H
	DB	0a3H, '=', 0aH, 0d7H, 0a3H, '=', 0d7H, 0a3H, 'p?'
CONST	ENDS
;	COMDAT __xmm@3f70a3d73d75c28f3d75c28f3d75c28f
CONST	SEGMENT
__xmm@3f70a3d73d75c28f3d75c28f3d75c28f DB 08fH, 0c2H, 'u=', 08fH, 0c2H, 'u'
	DB	'=', 08fH, 0c2H, 'u=', 0d7H, 0a3H, 'p?'
CONST	ENDS
;	COMDAT __xmm@3f666666000000003f8000003f800000
CONST	SEGMENT
__xmm@3f666666000000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 'fff?'
CONST	ENDS
;	COMDAT __xmm@3f4ccccd3f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3f4ccccd3f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?', 0cdH, 0ccH, 'L?'
CONST	ENDS
;	COMDAT __xmm@3f47ae143f4000003ecccccd3dcccccd
CONST	SEGMENT
__xmm@3f47ae143f4000003ecccccd3dcccccd DB 0cdH, 0ccH, 0ccH, '=', 0cdH, 0ccH
	DB	0ccH, '>', 00H, 00H, '@?', 014H, 0aeH, 'G?'
CONST	ENDS
;	COMDAT __xmm@3f3333333f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f3333333f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?333?'
CONST	ENDS
;	COMDAT __xmm@3f2b851f3f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3f2b851f3f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?', 01fH, 085H, '+?'
CONST	ENDS
;	COMDAT __xmm@3f0a3d713ef5c28f3e947ae13e23d70a
CONST	SEGMENT
__xmm@3f0a3d713ef5c28f3e947ae13e23d70a DB 0aH, 0d7H, '#>', 0e1H, 'z', 094H
	DB	'>', 08fH, 0c2H, 0f5H, '>q=', 0aH, '?'
CONST	ENDS
;	COMDAT __xmm@3f07ae143ca3d70a3ca3d70a3ca3d70a
CONST	SEGMENT
__xmm@3f07ae143ca3d70a3ca3d70a3ca3d70a DB 0aH, 0d7H, 0a3H, '<', 0aH, 0d7H
	DB	0a3H, '<', 0aH, 0d7H, 0a3H, '<', 014H, 0aeH, 07H, '?'
CONST	ENDS
;	COMDAT __xmm@3f028f5c000000000000000000000000
CONST	SEGMENT
__xmm@3f028f5c000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, '\', 08fH, 02H, '?'
CONST	ENDS
;	COMDAT __xmm@3f0000003f0000003edc28f63edc28f6
CONST	SEGMENT
__xmm@3f0000003f0000003edc28f63edc28f6 DB 0f6H, '(', 0dcH, '>', 0f6H, '(', 0dcH
	DB	'>', 00H, 00H, 00H, '?', 00H, 00H, 00H, '?'
CONST	ENDS
;	COMDAT __xmm@3ecccccd3f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3ecccccd3f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?', 0cdH, 0ccH, 0ccH, '>'
CONST	ENDS
;	COMDAT __xmm@3ec8c8ca000000000000000000000000
CONST	SEGMENT
__xmm@3ec8c8ca000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 0caH, 0c8H, 0c8H, '>'
CONST	ENDS
;	COMDAT __xmm@3eb333333f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3eb333333f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?33', 0b3H, '>'
CONST	ENDS
;	COMDAT __xmm@3eb333333f4ccccd3f4ccccd3f4ccccd
CONST	SEGMENT
__xmm@3eb333333f4ccccd3f4ccccd3f4ccccd DB 0cdH, 0ccH, 'L?', 0cdH, 0ccH, 'L'
	DB	'?', 0cdH, 0ccH, 'L?33', 0b3H, '>'
CONST	ENDS
;	COMDAT __xmm@3e9eb8523f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3e9eb8523f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?R', 0b8H, 09eH, '>'
CONST	ENDS
;	COMDAT __xmm@3e4ccccd3f7ae1483f170a3d3e851eb8
CONST	SEGMENT
__xmm@3e4ccccd3f7ae1483f170a3d3e851eb8 DB 0b8H, 01eH, 085H, '>=', 0aH, 017H
	DB	'?H', 0e1H, 'z?', 0cdH, 0ccH, 'L>'
CONST	ENDS
;	COMDAT __xmm@3e4ccccd3f4ccccd3f4ccccd3f4ccccd
CONST	SEGMENT
__xmm@3e4ccccd3f4ccccd3f4ccccd3f4ccccd DB 0cdH, 0ccH, 'L?', 0cdH, 0ccH, 'L'
	DB	'?', 0cdH, 0ccH, 'L?', 0cdH, 0ccH, 'L>'
CONST	ENDS
;	COMDAT __xmm@3d75c28f3f8000003f8000003f800000
CONST	SEGMENT
__xmm@3d75c28f3f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 08fH, 0c2H, 'u='
CONST	ENDS
;	COMDAT __xmm@3b8080813f7afafc3f80000000000000
CONST	SEGMENT
__xmm@3b8080813f7afafc3f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 0fcH, 0faH, 'z?', 081H, 080H, 080H, ';'
CONST	ENDS
;	COMDAT __xmm@3b8080813df8f8fa3f62e2e43d888889
CONST	SEGMENT
__xmm@3b8080813df8f8fa3f62e2e43d888889 DB 089H, 088H, 088H, '=', 0e4H, 0e2H
	DB	'b?', 0faH, 0f8H, 0f8H, '=', 081H, 080H, 080H, ';'
CONST	ENDS
;	COMDAT __xmm@38383838383838383838383838383838
CONST	SEGMENT
__xmm@38383838383838383838383838383838 DB '8888888888888888'
CONST	ENDS
;	COMDAT __xmm@32323232323232323232323232323232
CONST	SEGMENT
__xmm@32323232323232323232323232323232 DB '2222222222222222'
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00d1dfd1c3d9ccdcc4cdc3d9dac7d5c5
CONST	SEGMENT
__xmm@00d1dfd1c3d9ccdcc4cdc3d9dac7d5c5 DB 0c5H, 0d5H, 0c7H, 0daH, 0d9H, 0c3H
	DB	0cdH, 0c4H, 0dcH, 0ccH, 0d9H, 0c3H, 0d1H, 0dfH, 0d1H, 00H
CONST	ENDS
;	COMDAT __xmm@00000033000000330000003300000033
CONST	SEGMENT
__xmm@00000033000000330000003300000033 DB '3', 00H, 00H, 00H, '3', 00H, 00H
	DB	00H, '3', 00H, 00H, 00H, '3', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000007000000060000000500000004
CONST	SEGMENT
__xmm@00000007000000060000000500000004 DB 04H, 00H, 00H, 00H, 05H, 00H, 00H
	DB	00H, 06H, 00H, 00H, 00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000006000000020000000100000006
CONST	SEGMENT
__xmm@00000006000000020000000100000006 DB 06H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 06H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000015
CONST	SEGMENT
__xmm@00000001000000010000000100000015 DB 015H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000000000000f0000000000000000
CONST	SEGMENT
__xmm@000000000000000f0000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 0fH, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000080000000100000000
CONST	SEGMENT
__xmm@00000000000000080000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000070000000000000000
CONST	SEGMENT
__xmm@00000000000000070000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000020000000300000001
CONST	SEGMENT
__xmm@00000000000000020000000300000001 DB 01H, 00H, 00H, 00H, 03H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000000000000000000000ffffffff
CONST	SEGMENT
__xmm@000000000000000000000000ffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@ffdfffffffffffff
CONST	SEGMENT
__real@ffdfffffffffffff DQ 0ffdfffffffffffffr	; -8.98847e+307
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@feffffff
CONST	SEGMENT
__real@feffffff DD 0feffffffr			; -1.70141e+38
CONST	ENDS
;	COMDAT __real@c87a0000
CONST	SEGMENT
__real@c87a0000 DD 0c87a0000r			; -256000
CONST	ENDS
;	COMDAT __real@c6c2ae00
CONST	SEGMENT
__real@c6c2ae00 DD 0c6c2ae00r			; -24919
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf5db22d
CONST	SEGMENT
__real@bf5db22d DD 0bf5db22dr			; -0.866
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@7fdfffffffffffff
CONST	SEGMENT
__real@7fdfffffffffffff DQ 07fdfffffffffffffr	; 8.98847e+307
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@7effffff
CONST	SEGMENT
__real@7effffff DD 07effffffr			; 1.70141e+38
CONST	ENDS
;	COMDAT __real@5f000000
CONST	SEGMENT
__real@5f000000 DD 05f000000r			; 9.22337e+18
CONST	ENDS
;	COMDAT __real@46c2ac00
CONST	SEGMENT
__real@46c2ac00 DD 046c2ac00r			; 24918
CONST	ENDS
;	COMDAT __real@45333333
CONST	SEGMENT
__real@45333333 DD 045333333r			; 2867.2
CONST	ENDS
;	COMDAT __real@44b33333
CONST	SEGMENT
__real@44b33333 DD 044b33333r			; 1433.6
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@44333333
CONST	SEGMENT
__real@44333333 DD 044333333r			; 716.8
CONST	ENDS
;	COMDAT __real@44160000
CONST	SEGMENT
__real@44160000 DD 044160000r			; 600
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@42f60000
CONST	SEGMENT
__real@42f60000 DD 042f60000r			; 123
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@421e7ae1
CONST	SEGMENT
__real@421e7ae1 DD 0421e7ae1r			; 39.62
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c70d23
CONST	SEGMENT
__real@40c70d23 DD 040c70d23r			; 6.22035
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40b84e89
CONST	SEGMENT
__real@40b84e89 DD 040b84e89r			; 5.75959
CONST	ENDS
;	COMDAT __real@40afede0
CONST	SEGMENT
__real@40afede0 DD 040afede0r			; 5.49779
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3faccccd
CONST	SEGMENT
__real@3faccccd DD 03faccccdr			; 1.35
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fffef
CONST	SEGMENT
__real@3f7fffef DD 03f7fffefr			; 0.999999
CONST	ENDS
;	COMDAT __real@3f7fff58
CONST	SEGMENT
__real@3f7fff58 DD 03f7fff58r			; 0.99999
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f5db22d
CONST	SEGMENT
__real@3f5db22d DD 03f5db22dr			; 0.866
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3851ec
CONST	SEGMENT
__real@3f3851ec DD 03f3851ecr			; 0.72
CONST	ENDS
;	COMDAT __real@3f350481
CONST	SEGMENT
__real@3f350481 DD 03f350481r			; 0.7071
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d860a92
CONST	SEGMENT
__real@3d860a92 DD 03d860a92r			; 0.0654498
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@38800000
CONST	SEGMENT
__real@38800000 DD 038800000r			; 6.10352e-05
CONST	ENDS
;	COMDAT __real@37800000
CONST	SEGMENT
__real@37800000 DD 037800000r			; 1.52588e-05
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT __real@000002ca
CONST	SEGMENT
__real@000002ca DD 0000002car			; 1.00053e-42
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 031a01H
	DD	07016621aH
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_tree_length_error@std@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Epmem_ranges@util@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fpmem_ranges@util@@YAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??__Einit_ranges@util@@YAXXZ DB 06H
	DB	0f4H
	DB	00H
	DB	'm', 03H
	DB	02H
	DB	'=', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??__Einit_ranges@util@@YAXXZ DB 02H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??__Einit_ranges@util@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$??__Einit_ranges@util@@YAXXZ
	DD	imagerel $ip2state$??__Einit_ranges@util@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Einit_ranges@util@@YAXXZ DD 0a1411H
	DD	0173414H
	DD	0f010b214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??__Einit_ranges@util@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EDrv@@YAXXZ DD 042219H
	DD	05110110H
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	02870H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FDrv@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 061021H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 061021H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 020421H
	DD	06804H
	DD	imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 061021H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 061021H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 061021H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 020421H
	DD	06804H
	DD	imagerel $LN18
	DD	imagerel $LN18+45
	DD	imagerel $unwind$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z DD 010401H
	DD	02204H
xdata	ENDS
xdata	SEGMENT
$unwind$?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z DD 061e19H
	DD	033010cH
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z DD 061e19H
	DD	033010cH
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$?get_process_base@driver@kernel@@QEAA_KI@Z DD 051f19H
	DD	036340dH
	DD	032010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$?init@driver@kernel@@QEAA_NXZ DD 0f3519H
	DD	097827H
	DD	0a6823H
	DD	01d741fH
	DD	01c641fH
	DD	01b341fH
	DD	016011fH
	DD	0e012f014H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	078H
$chain$0$?init@driver@kernel@@QEAA_NXZ DD 020921H
	DD	088809H
	DD	imagerel $LN144
	DD	imagerel $LN144+466
	DD	imagerel $unwind$?init@driver@kernel@@QEAA_NXZ
$chain$1$?init@driver@kernel@@QEAA_NXZ DD 021H
	DD	imagerel $LN144
	DD	imagerel $LN144+466
	DD	imagerel $unwind$?init@driver@kernel@@QEAA_NXZ
$unwind$?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ DD 021719H
	DD	050027209H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ DD 0a1a11H
	DD	017341aH
	DD	0f016b21aH
	DD	0d012e014H
	DD	0700ec010H
	DD	0500c600dH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ
$cppxdata$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ DB 028H
	DD	imagerel $stateUnwindMap$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ
	DD	imagerel $ip2state$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ
$stateUnwindMap$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ DB 02H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	060H
$ip2state$??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ DB 06H
	DB	0f6H
	DB	00H
	DB	'i', 03H
	DB	02H
	DB	')', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 020421H
	DD	06804H
	DD	imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 04H
	DB	','
	DB	00H
	DB	'<'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 04H
	DB	'X'
	DB	00H
	DB	'H'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0cH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 020421H
	DD	06804H
	DD	imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	'6'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010419H
	DD	04204H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z DB 04H
	DB	09dH, 02H
	DB	02H
	DB	0d0H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z DB 028H
	DD	imagerel $stateUnwindMap$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z
	DD	imagerel $ip2state$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z DD 0a1a11H
	DD	0f741aH
	DD	0e641aH
	DD	0d541aH
	DD	0c341aH
	DD	0e016921aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0eH
	DB	0e2H
	DB	00H
	DB	'T'
	DB	02H
	DB	0b6H
	DB	06H
	DB	0d8H
	DB	04H
	DB	'L'
	DB	0aH
	DB	'('
	DB	0cH
	DB	'2'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	011H
	DB	080H
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	091H, 05H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	04H
	DB	04H
	DB	06H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0cH
	DB	0aH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	03aH
	DD	imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	030H
	DB	038H
	DB	07eH
	DD	imagerel __imp___std_terminate
	DB	02eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 081619H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z DD 0b2e19H
	DD	078820H
	DD	08781bH
	DD	096817H
	DD	0173413H
	DD	0140113H
	DD	05008H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD 021H
	DD	imagerel $LN84
	DD	imagerel $LN84+48
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD 020021H
	DD	067400H
	DD	imagerel $LN84
	DD	imagerel $LN84+48
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD 021H
	DD	imagerel $LN84
	DD	imagerel $LN84+48
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD 020521H
	DD	067405H
	DD	imagerel $LN84
	DD	imagerel $LN84+48
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 020421H
	DD	06804H
	DD	imagerel $LN25
	DD	imagerel $LN25+103
	DD	imagerel $unwind$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN26
	DD	imagerel $LN26+62
	DD	imagerel $unwind$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 020421H
	DD	06804H
	DD	imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 062921H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN24
	DD	imagerel $LN24+62
	DD	imagerel $unwind$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z DB 04H
	DB	0edH, 02H
	DB	02H
	DB	0c8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z
	DD	imagerel $ip2state$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z DD 0a1a11H
	DD	0f741aH
	DD	0e641aH
	DD	0d541aH
	DD	0c341aH
	DD	0e016921aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z DB 02H
	DB	'Z'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z DB 02H
	DB	0cH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z DB 028H
	DD	imagerel $stateUnwindMap$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z
	DD	imagerel $ip2state$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z DD 061411H
	DD	086414H
	DD	073414H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DB 02H
	DB	':'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DB 02H
	DB	0cH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z DD 020a11H
	DD	03006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?init_ranges$initializer$@util@@3P6AXXZEA DQ FLAT:??__Einit_ranges@util@@YAXXZ ; util::init_ranges$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?Drv$initializer$@@3P6AXXZEA DQ FLAT:??__EDrv@@YAXXZ	; Drv$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?Km$initializer$@@3P6AXXZEA DQ FLAT:??__EKm@@YAXXZ	; Km$initializer$
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b d9	 mov	 rbx, r9
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00025	4c 8b c7	 mov	 r8, rdi
  00028	48 8b d6	 mov	 rdx, rsi
  0002b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  00034	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00039	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT

; 956  :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	57		 push	 rdi
  00016	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);
; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0001a	b9 01 00 00 00	 mov	 ecx, 1
  0001f	48 8d 7c 24 58	 lea	 rdi, QWORD PTR _Format$[rsp+8]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002a	48 8b d8	 mov	 rbx, rax

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Format$[rsp]
  00037	45 33 c9	 xor	 r9d, r9d
  0003a	48 8b d3	 mov	 rdx, rbx
  0003d	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 961  :         __crt_va_end(_ArgList);
; 962  :         return _Result;
; 963  :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	5f		 pop	 rdi
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$dead$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :         (void)_Size;
; 169  :         return _Where;

  00000	48 8b c2	 mov	 rax, rdx

; 170  :     }

  00003	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 630  :         return LLONG_MAX;

  00000	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 631  :     }

  0000a	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 8
_Message$ = 16
__formal$ = 24
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 67   :         _Data._What = _Message;
; 68   :     }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0
  00015	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  00019	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]
  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_copy

; 74   :     }

  0002a	48 8b c3	 mov	 rax, rbx
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp___std_exception_destroy
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0000b	48 85 d2	 test	 rdx, rdx
  0000e	48 0f 45 c2	 cmovne	 rax, rdx

; 96   :     }

  00012	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_destroy
  00023	f6 c3 01	 test	 bl, 1
  00026	74 0d		 je	 SHORT $LN6@scalar
  00028	ba 18 00 00 00	 mov	 edx, 24
  0002d	48 8b cf	 mov	 rcx, rdi
  00030	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN6@scalar:
  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 8b c7	 mov	 rax, rdi
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 8
_Message$ = 16
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_alloc@std@@6B@

; 65   :         : _Data()

  00007	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0

; 130  :     {

  0000f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 131  :     }

  00012	48 8b c1	 mov	 rax, rcx

; 67   :         _Data._What = _Message;

  00015	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx

; 131  :     }

  00019	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN12:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_destroy
  00023	f6 c3 01	 test	 bl, 1
  00026	74 0d		 je	 SHORT $LN9@scalar
  00028	ba 18 00 00 00	 mov	 edx, 24
  0002d	48 8b cf	 mov	 rcx, rdi
  00030	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN9@scalar:
  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 8b c7	 mov	 rax, rdi
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp___std_exception_destroy
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 67   :         _Data._What = _Message;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00007	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0
  0000f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 141  :     {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0001a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 142  :     }

  0001d	48 8b c1	 mov	 rax, rcx
  00020	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_destroy
  00023	f6 c3 01	 test	 bl, 1
  00026	74 0d		 je	 SHORT $LN12@scalar
  00028	ba 18 00 00 00	 mov	 edx, 24
  0002d	48 8b cf	 mov	 rcx, rdi
  00030	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN12@scalar:
  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 8b c7	 mov	 rax, rdi
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp___std_exception_destroy
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 316  :     _THROW(bad_array_new_length{});

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 _CxxThrowException
  0001f	cc		 int	 3
$LN3@Throw_bad_:
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 72   :     {

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]

; 72   :     {

  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_copy
  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00031	48 89 03	 mov	 QWORD PTR [rbx], rax
  00034	48 8b c3	 mov	 rax, rbx
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 72   :     {

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]

; 72   :     {

  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___std_exception_copy
  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00031	48 89 03	 mov	 QWORD PTR [rbx], rax
  00034	48 8b c3	 mov	 rax, rbx
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 8
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 79   :         return ::operator new(_Bytes);

  00000	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN13:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

  00004	48 83 02 27	 add	 QWORD PTR [rdx], 39	; 00000027H

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00008	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0000b	48 8b 50 f8	 mov	 rdx, QWORD PTR [rax-8]

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0000f	48 2b c2	 sub	 rax, rdx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00012	48 83 c0 f8	 add	 rax, -8
  00016	48 83 f8 1f	 cmp	 rax, 31
  0001a	77 08		 ja	 SHORT $LN7@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0001c	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 166  : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
$LN7@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  0002a	cc		 int	 3
$LN11@Adjust_man:
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 982  :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept {}

  00000	c2 00 00	 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT

; 989  :     _CONSTEXPR20_CONTAINER void _Adopt(const void*) noexcept {}

  00000	c2 00 00	 ret	 0
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT

; 1250 :     _CONSTEXPR20_CONTAINER _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ PROC	; std::_Fake_proxy_ptr_impl::_Release, COMDAT

; 1253 :     _CONSTEXPR20_CONTAINER void _Release() noexcept {}

  00000	c2 00 00	 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ENDP	; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  : [[noreturn]] inline void _Throw_tree_length_error() {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 416  :     _Xlength_error("map/set too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
  00011	cc		 int	 3
$LN3@Throw_tree:
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
;	COMDAT ??__Epmem_ranges@util@@YAXXZ
text$di	SEGMENT
??__Epmem_ranges@util@@YAXXZ PROC			; util::`dynamic initializer for 'pmem_ranges'', COMDAT

; 231  : 	inline std::map<std::uintptr_t, std::size_t> pmem_ranges;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00004	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00009	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp

; 231  : 	inline std::map<std::uintptr_t, std::size_t> pmem_ranges;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fpmem_ranges@util@@YAXXZ ; util::`dynamic atexit destructor for 'pmem_ranges''
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00015	48 89 00	 mov	 QWORD PTR [rax], rax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00018	48 89 40 08	 mov	 QWORD PTR [rax+8], rax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0001c	48 89 40 10	 mov	 QWORD PTR [rax+16], rax

; 348  :         _Pnode->_Color = _Black;

  00020	66 c7 40 18 01
	01		 mov	 WORD PTR [rax+24], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00026	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, rax
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp

; 231  : 	inline std::map<std::uintptr_t, std::size_t> pmem_ranges;

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	e9 00 00 00 00	 jmp	 atexit
??__Epmem_ranges@util@@YAXXZ ENDP			; util::`dynamic initializer for 'pmem_ranges''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??__Fpmem_ranges@util@@YAXXZ
text$yd	SEGMENT
??__Fpmem_ranges@util@@YAXXZ PROC			; util::`dynamic atexit destructor for 'pmem_ranges'', COMDAT
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00006	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
  0000d	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00011	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00015	75 3d		 jne	 SHORT $LN12@dynamic
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL11@dynamic:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00020	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  00032	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00037	48 8b cb	 mov	 rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0003f	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00042	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00047	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  0004b	74 d3		 je	 SHORT $LL11@dynamic
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
$LN12@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00054	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??__Fpmem_ranges@util@@YAXXZ ENDP			; util::`dynamic atexit destructor for 'pmem_ranges''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ PROC ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::~map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >, COMDAT
$LN66:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00010	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00014	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00018	75 2e		 jne	 SHORT $LN9@map
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@map:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00020	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b cf	 mov	 rcx, rdi
  0002a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002f	48 8b cb	 mov	 rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00037	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00043	74 db		 je	 SHORT $LL8@map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00045	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
$LN9@map:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00048	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??1?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ ENDP ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::~map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
this$dead$ = 160
size$ = 160
type$ = 168
h_key$ = 176
??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ PROC ; <lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()

; 243  : 	{

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  00007	49 89 4b 08	 mov	 QWORD PTR [r11+8], rcx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	41 54		 push	 r12
  00010	41 55		 push	 r13
  00012	41 56		 push	 r14
  00014	41 57		 push	 r15
  00016	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 244  : 			HKEY h_key;
; 245  : 			DWORD type, size;
; 246  : 			LPBYTE data;
; 247  : 			RegOpenKeyEx(HKEY_LOCAL_MACHINE, "HARDWARE\\RESOURCEMAP\\System Resources\\Physical Memory", 0, KEY_READ, &h_key);

  0001a	49 8d 43 18	 lea	 rax, QWORD PTR [r11+24]
  0001e	49 89 43 88	 mov	 QWORD PTR [r11-120], rax
  00022	41 b9 19 00 02
	00		 mov	 r9d, 131097		; 00020019H
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@EMAIBLPA@HARDWARE?2RESOURCEMAP?2System?5Res@
  00032	48 c7 c1 02 00
	00 80		 mov	 rcx, -2147483646	; ffffffff80000002H
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegOpenKeyExA

; 248  : 			RegQueryValueEx(h_key, ".Translated", NULL, &type, NULL, &size); //get size

  0003f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR size$[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004c	45 33 ff	 xor	 r15d, r15d
  0004f	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00054	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR type$[rsp]
  0005c	45 33 c0	 xor	 r8d, r8d
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GMLMCGNC@?4Translated@
  00066	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$[rsp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExA

; 249  : 			data = new BYTE[size];

  00074	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR size$[rsp]
  0007b	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  00080	4c 8b f0	 mov	 r14, rax

; 250  : 			RegQueryValueEx(h_key, ".Translated", NULL, &type, data, &size);

  00083	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR size$[rsp]
  0008b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00090	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00095	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR type$[rsp]
  0009d	45 33 c0	 xor	 r8d, r8d
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GMLMCGNC@?4Translated@
  000a7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$[rsp]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExA

; 251  : 			DWORD count = *(DWORD*)(data + 16);

  000b5	41 8b 6e 10	 mov	 ebp, DWORD PTR [r14+16]

; 252  : 			auto pmi = data + 24;

  000b9	49 8d 5e 18	 lea	 rbx, QWORD PTR [r14+24]

; 253  : 			for (int dwIndex = 0; dwIndex < count; dwIndex++)

  000bd	41 8b ff	 mov	 edi, r15d
  000c0	85 ed		 test	 ebp, ebp
  000c2	0f 84 e7 00 00
	00		 je	 $LN3@operator
  000c8	49 bc 55 55 55
	55 55 55 55 05	 mov	 r12, 384307168202282325	; 0555555555555555H
  000d2	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  000d9	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
$LL4@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  000e0	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  000e4	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  000e9	44 89 7c 24 48	 mov	 DWORD PTR $T3[rsp+8], r15d
  000ee	48 8b ce	 mov	 rcx, rsi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  000f1	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  000f5	75 33		 jne	 SHORT $LN14@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  000f7	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL13@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00100	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00105	48 39 50 20	 cmp	 QWORD PTR [rax+32], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00109	73 0b		 jae	 SHORT $LN15@operator

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;

  0010b	44 89 7c 24 48	 mov	 DWORD PTR $T3[rsp+8], r15d

; 1603 :                 _Trynode                 = _Trynode->_Right;

  00110	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1604 :             } else {

  00114	eb 0e		 jmp	 SHORT $LN16@operator
$LN15@operator:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;

  00116	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR $T3[rsp+8], 1

; 1606 :                 _Result._Bound           = _Trynode;

  0011e	48 8b c8	 mov	 rcx, rax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN16@operator:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00124	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00128	74 d6		 je	 SHORT $LL13@operator
$LN14@operator:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0012a	80 79 19 00	 cmp	 BYTE PTR [rcx+25], 0
  0012e	75 09		 jne	 SHORT $LN127@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00130	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00134	48 39 03	 cmp	 QWORD PTR [rbx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00137	73 68		 jae	 SHORT $LN107@operator
$LN127@operator:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	4c 39 25 08 00
	00 00		 cmp	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, r12
  00140	0f 84 99 00 00
	00		 je	 $LN120@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00146	4c 89 6c 24 30	 mov	 QWORD PTR $T1[rsp], r13

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0014b	4c 89 7c 24 38	 mov	 QWORD PTR $T1[rsp+8], r15

; 79   :         return ::operator new(_Bytes);

  00150	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00155	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0015a	4c 8b c0	 mov	 r8, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0015d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00160	49 89 40 20	 mov	 QWORD PTR [r8+32], rax
  00164	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00168	49 89 40 28	 mov	 QWORD PTR [r8+40], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0016c	49 89 30	 mov	 QWORD PTR [r8], rsi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0016f	49 89 70 08	 mov	 QWORD PTR [r8+8], rsi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00173	49 89 70 10	 mov	 QWORD PTR [r8+16], rsi

; 809  :         this->_Ptr->_Color = _Red;

  00177	66 41 c7 40 18
	00 00		 mov	 WORD PTR [r8+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0017e	4c 89 7c 24 38	 mov	 QWORD PTR $T1[rsp+8], r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00183	0f 10 44 24 40	 movups	 xmm0, XMMWORD PTR $T3[rsp]
  00188	0f 29 44 24 40	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  0018d	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  00192	49 8b cd	 mov	 rcx, r13
  00195	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
  0019a	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
$LN107@operator:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp

; 256  : 				pmi += 20;

  001a1	48 83 c3 14	 add	 rbx, 20

; 253  : 			for (int dwIndex = 0; dwIndex < count; dwIndex++)

  001a5	ff c7		 inc	 edi
  001a7	3b fd		 cmp	 edi, ebp
  001a9	0f 82 31 ff ff
	ff		 jb	 $LL4@operator
$LN3@operator:

; 257  : 			}
; 258  : 			delete[] data;

  001af	49 8b ce	 mov	 rcx, r14
  001b2	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]

; 259  : 			RegCloseKey(h_key);

  001b7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$[rsp]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey

; 260  : 			return true;

  001c5	b0 01		 mov	 al, 1

; 261  : 	})();

  001c7	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]
  001cf	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001d3	41 5f		 pop	 r15
  001d5	41 5e		 pop	 r14
  001d7	41 5d		 pop	 r13
  001d9	41 5c		 pop	 r12
  001db	5f		 pop	 rdi
  001dc	5e		 pop	 rsi
  001dd	5d		 pop	 rbp
  001de	c3		 ret	 0
$LN120@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  001df	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
  001e4	cc		 int	 3
$LN128@operator:
??R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ ENDP ; <lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()
_TEXT	ENDS
text$x	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
this$dead$ = 160
size$ = 160
type$ = 168
h_key$ = 176
?dtor$2@?0???R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ@4HA PROC ; `<lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()'::`1'::dtor$2
  00000	48 8d 8a 30 00
	00 00		 lea	 rcx, QWORD PTR $T1[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ@4HA ENDP ; `<lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
this$dead$ = 160
size$ = 160
type$ = 168
h_key$ = 176
?dtor$2@?0???R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ@4HA PROC ; `<lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()'::`1'::dtor$2
  00000	48 8d 8a 30 00
	00 00		 lea	 rcx, QWORD PTR $T1[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???R<lambda_65b63519d2dda5f15d76a0fd050bce61>@@QEBA_NXZ@4HA ENDP ; `<lambda_65b63519d2dda5f15d76a0fd050bce61>::operator()'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp
;	COMDAT ??__Einit_ranges@util@@YAXXZ
text$di	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
size$4 = 160
type$5 = 168
h_key$6 = 176
??__Einit_ranges@util@@YAXXZ PROC			; util::`dynamic initializer for 'init_ranges'', COMDAT

; 261  : 	})();

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 247  : 			RegOpenKeyEx(HKEY_LOCAL_MACHINE, "HARDWARE\\RESOURCEMAP\\System Resources\\Physical Memory", 0, KEY_READ, &h_key);

  00014	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR h_key$6[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 19 00 02
	00		 mov	 r9d, 131097		; 00020019H
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@EMAIBLPA@HARDWARE?2RESOURCEMAP?2System?5Res@
  00031	48 c7 c1 02 00
	00 80		 mov	 rcx, -2147483646	; ffffffff80000002H
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegOpenKeyExA

; 248  : 			RegQueryValueEx(h_key, ".Translated", NULL, &type, NULL, &size); //get size

  0003e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR size$4[rsp]
  00046	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004b	45 33 ff	 xor	 r15d, r15d
  0004e	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00053	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR type$5[rsp]
  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GMLMCGNC@?4Translated@
  00065	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$6[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExA

; 249  : 			data = new BYTE[size];

  00073	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR size$4[rsp]
  0007a	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  0007f	4c 8b f0	 mov	 r14, rax

; 250  : 			RegQueryValueEx(h_key, ".Translated", NULL, &type, data, &size);

  00082	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR size$4[rsp]
  0008a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00094	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR type$5[rsp]
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GMLMCGNC@?4Translated@
  000a6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$6[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExA

; 251  : 			DWORD count = *(DWORD*)(data + 16);

  000b4	41 8b 6e 10	 mov	 ebp, DWORD PTR [r14+16]

; 252  : 			auto pmi = data + 24;

  000b8	49 8d 5e 18	 lea	 rbx, QWORD PTR [r14+24]

; 253  : 			for (int dwIndex = 0; dwIndex < count; dwIndex++)

  000bc	41 8b ff	 mov	 edi, r15d
  000bf	85 ed		 test	 ebp, ebp
  000c1	0f 84 e8 00 00
	00		 je	 $LN5@dynamic
  000c7	49 bc 55 55 55
	55 55 55 55 05	 mov	 r12, 384307168202282325	; 0555555555555555H
  000d1	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  000d8	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
  000df	90		 npad	 1
$LL6@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  000e0	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  000e4	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  000e9	44 89 7c 24 48	 mov	 DWORD PTR $T3[rsp+8], r15d
  000ee	48 8b ce	 mov	 rcx, rsi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  000f1	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  000f5	75 33		 jne	 SHORT $LN16@dynamic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  000f7	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL15@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00100	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00105	48 39 50 20	 cmp	 QWORD PTR [rax+32], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00109	73 0b		 jae	 SHORT $LN17@dynamic

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;

  0010b	44 89 7c 24 48	 mov	 DWORD PTR $T3[rsp+8], r15d

; 1603 :                 _Trynode                 = _Trynode->_Right;

  00110	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1604 :             } else {

  00114	eb 0e		 jmp	 SHORT $LN18@dynamic
$LN17@dynamic:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;

  00116	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR $T3[rsp+8], 1

; 1606 :                 _Result._Bound           = _Trynode;

  0011e	48 8b c8	 mov	 rcx, rax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN18@dynamic:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00124	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00128	74 d6		 je	 SHORT $LL15@dynamic
$LN16@dynamic:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0012a	80 79 19 00	 cmp	 BYTE PTR [rcx+25], 0
  0012e	75 09		 jne	 SHORT $LN130@dynamic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00130	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00134	48 39 03	 cmp	 QWORD PTR [rbx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00137	73 68		 jae	 SHORT $LN109@dynamic
$LN130@dynamic:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	4c 39 25 08 00
	00 00		 cmp	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, r12
  00140	0f 84 9e 00 00
	00		 je	 $LN123@dynamic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00146	4c 89 6c 24 30	 mov	 QWORD PTR $T1[rsp], r13

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0014b	4c 89 7c 24 38	 mov	 QWORD PTR $T1[rsp+8], r15

; 79   :         return ::operator new(_Bytes);

  00150	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00155	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0015a	4c 8b c0	 mov	 r8, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0015d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00160	49 89 40 20	 mov	 QWORD PTR [r8+32], rax
  00164	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00168	49 89 40 28	 mov	 QWORD PTR [r8+40], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0016c	49 89 30	 mov	 QWORD PTR [r8], rsi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0016f	49 89 70 08	 mov	 QWORD PTR [r8+8], rsi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00173	49 89 70 10	 mov	 QWORD PTR [r8+16], rsi

; 809  :         this->_Ptr->_Color = _Red;

  00177	66 41 c7 40 18
	00 00		 mov	 WORD PTR [r8+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0017e	4c 89 7c 24 38	 mov	 QWORD PTR $T1[rsp+8], r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00183	0f 10 44 24 40	 movups	 xmm0, XMMWORD PTR $T3[rsp]
  00188	0f 29 44 24 40	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  0018d	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  00192	49 8b cd	 mov	 rcx, r13
  00195	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
  0019a	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
$LN109@dynamic:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\sinmapper\util.hpp

; 256  : 				pmi += 20;

  001a1	48 83 c3 14	 add	 rbx, 20

; 253  : 			for (int dwIndex = 0; dwIndex < count; dwIndex++)

  001a5	ff c7		 inc	 edi
  001a7	3b fd		 cmp	 edi, ebp
  001a9	0f 82 31 ff ff
	ff		 jb	 $LL6@dynamic
$LN5@dynamic:

; 257  : 			}
; 258  : 			delete[] data;

  001af	49 8b ce	 mov	 rcx, r14
  001b2	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]

; 259  : 			RegCloseKey(h_key);

  001b7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR h_key$6[rsp]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey

; 242  : 	inline const auto init_ranges = ([&]() -> bool

  001c5	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?init_ranges@util@@3_NB, 1 ; util::init_ranges
  001cc	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]
  001d4	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001d8	41 5f		 pop	 r15
  001da	41 5e		 pop	 r14
  001dc	41 5d		 pop	 r13
  001de	41 5c		 pop	 r12
  001e0	5f		 pop	 rdi
  001e1	5e		 pop	 rsi
  001e2	5d		 pop	 rbp
  001e3	c3		 ret	 0
$LN123@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  001e4	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
  001e9	cc		 int	 3
$LN131@dynamic:
??__Einit_ranges@util@@YAXXZ ENDP			; util::`dynamic initializer for 'init_ranges''
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
size$4 = 160
type$5 = 168
h_key$6 = 176
?dtor$2@?0???__Einit_ranges@util@@YAXXZ@4HA PROC	; `util::`dynamic initializer for 'init_ranges'''::`1'::dtor$2
  00000	48 8d 8a 30 00
	00 00		 lea	 rcx, QWORD PTR $T1[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???__Einit_ranges@util@@YAXXZ@4HA ENDP	; `util::`dynamic initializer for 'init_ranges'''::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 64
size$4 = 160
type$5 = 168
h_key$6 = 176
?dtor$2@?0???__Einit_ranges@util@@YAXXZ@4HA PROC	; `util::`dynamic initializer for 'init_ranges'''::`1'::dtor$2
  00000	48 8d 8a 30 00
	00 00		 lea	 rcx, QWORD PTR $T1[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???__Einit_ranges@util@@YAXXZ@4HA ENDP	; `util::`dynamic initializer for 'init_ranges'''::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\driver.h
;	COMDAT ??__EDrv@@YAXXZ
text$di	SEGMENT
$T1 = 32
tv77 = 40
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
__$ArrayPad$ = 10352
??__EDrv@@YAXXZ PROC					; `dynamic initializer for 'Drv'', COMDAT

; 861  : };

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	b8 88 28 00 00	 mov	 eax, 10376		; 00002888H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	48 2b e0	 sub	 rsp, rax
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 70
	28 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5    : inline std::vector <std::uint8_t> Drv = {

  00022	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00027	e8 00 00 00 00	 call	 ??0?$allocator@E@std@@QEAA@XZ ; std::allocator<unsigned char>::allocator<unsigned char>
  0002c	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00031	c6 44 24 60 4d	 mov	 BYTE PTR $T5[rsp], 77	; 0000004dH
  00036	c6 44 24 61 5a	 mov	 BYTE PTR $T5[rsp+1], 90	; 0000005aH
  0003b	c6 44 24 62 90	 mov	 BYTE PTR $T5[rsp+2], 144 ; 00000090H
  00040	c6 44 24 63 00	 mov	 BYTE PTR $T5[rsp+3], 0
  00045	c6 44 24 64 03	 mov	 BYTE PTR $T5[rsp+4], 3
  0004a	c6 44 24 65 00	 mov	 BYTE PTR $T5[rsp+5], 0
  0004f	c6 44 24 66 00	 mov	 BYTE PTR $T5[rsp+6], 0
  00054	c6 44 24 67 00	 mov	 BYTE PTR $T5[rsp+7], 0
  00059	c6 44 24 68 04	 mov	 BYTE PTR $T5[rsp+8], 4
  0005e	c6 44 24 69 00	 mov	 BYTE PTR $T5[rsp+9], 0
  00063	c6 44 24 6a 00	 mov	 BYTE PTR $T5[rsp+10], 0
  00068	c6 44 24 6b 00	 mov	 BYTE PTR $T5[rsp+11], 0
  0006d	c6 44 24 6c ff	 mov	 BYTE PTR $T5[rsp+12], 255 ; 000000ffH
  00072	c6 44 24 6d ff	 mov	 BYTE PTR $T5[rsp+13], 255 ; 000000ffH
  00077	c6 44 24 6e 00	 mov	 BYTE PTR $T5[rsp+14], 0
  0007c	c6 44 24 6f 00	 mov	 BYTE PTR $T5[rsp+15], 0
  00081	c6 44 24 70 b8	 mov	 BYTE PTR $T5[rsp+16], 184 ; 000000b8H
  00086	c6 44 24 71 00	 mov	 BYTE PTR $T5[rsp+17], 0
  0008b	c6 44 24 72 00	 mov	 BYTE PTR $T5[rsp+18], 0
  00090	c6 44 24 73 00	 mov	 BYTE PTR $T5[rsp+19], 0
  00095	c6 44 24 74 00	 mov	 BYTE PTR $T5[rsp+20], 0
  0009a	c6 44 24 75 00	 mov	 BYTE PTR $T5[rsp+21], 0
  0009f	c6 44 24 76 00	 mov	 BYTE PTR $T5[rsp+22], 0
  000a4	c6 44 24 77 00	 mov	 BYTE PTR $T5[rsp+23], 0
  000a9	c6 44 24 78 40	 mov	 BYTE PTR $T5[rsp+24], 64 ; 00000040H
  000ae	c6 44 24 79 00	 mov	 BYTE PTR $T5[rsp+25], 0
  000b3	c6 44 24 7a 00	 mov	 BYTE PTR $T5[rsp+26], 0
  000b8	c6 44 24 7b 00	 mov	 BYTE PTR $T5[rsp+27], 0
  000bd	c6 44 24 7c 00	 mov	 BYTE PTR $T5[rsp+28], 0
  000c2	c6 44 24 7d 00	 mov	 BYTE PTR $T5[rsp+29], 0
  000c7	c6 44 24 7e 00	 mov	 BYTE PTR $T5[rsp+30], 0
  000cc	c6 44 24 7f 00	 mov	 BYTE PTR $T5[rsp+31], 0
  000d1	c6 84 24 80 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+32], 0
  000d9	c6 84 24 81 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+33], 0
  000e1	c6 84 24 82 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+34], 0
  000e9	c6 84 24 83 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+35], 0
  000f1	c6 84 24 84 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+36], 0
  000f9	c6 84 24 85 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+37], 0
  00101	c6 84 24 86 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+38], 0
  00109	c6 84 24 87 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+39], 0
  00111	c6 84 24 88 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+40], 0
  00119	c6 84 24 89 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+41], 0
  00121	c6 84 24 8a 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+42], 0
  00129	c6 84 24 8b 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+43], 0
  00131	c6 84 24 8c 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+44], 0
  00139	c6 84 24 8d 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+45], 0
  00141	c6 84 24 8e 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+46], 0
  00149	c6 84 24 8f 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+47], 0
  00151	c6 84 24 90 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+48], 0
  00159	c6 84 24 91 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+49], 0
  00161	c6 84 24 92 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+50], 0
  00169	c6 84 24 93 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+51], 0
  00171	c6 84 24 94 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+52], 0
  00179	c6 84 24 95 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+53], 0
  00181	c6 84 24 96 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+54], 0
  00189	c6 84 24 97 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+55], 0
  00191	c6 84 24 98 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+56], 0
  00199	c6 84 24 99 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+57], 0
  001a1	c6 84 24 9a 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+58], 0
  001a9	c6 84 24 9b 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+59], 0
  001b1	c6 84 24 9c 00
	00 00 d8	 mov	 BYTE PTR $T5[rsp+60], 216 ; 000000d8H
  001b9	c6 84 24 9d 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+61], 0
  001c1	c6 84 24 9e 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+62], 0
  001c9	c6 84 24 9f 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+63], 0
  001d1	c6 84 24 a0 00
	00 00 0e	 mov	 BYTE PTR $T5[rsp+64], 14
  001d9	c6 84 24 a1 00
	00 00 1f	 mov	 BYTE PTR $T5[rsp+65], 31
  001e1	c6 84 24 a2 00
	00 00 ba	 mov	 BYTE PTR $T5[rsp+66], 186 ; 000000baH
  001e9	c6 84 24 a3 00
	00 00 0e	 mov	 BYTE PTR $T5[rsp+67], 14
  001f1	c6 84 24 a4 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+68], 0
  001f9	c6 84 24 a5 00
	00 00 b4	 mov	 BYTE PTR $T5[rsp+69], 180 ; 000000b4H
  00201	c6 84 24 a6 00
	00 00 09	 mov	 BYTE PTR $T5[rsp+70], 9
  00209	c6 84 24 a7 00
	00 00 cd	 mov	 BYTE PTR $T5[rsp+71], 205 ; 000000cdH
  00211	c6 84 24 a8 00
	00 00 21	 mov	 BYTE PTR $T5[rsp+72], 33 ; 00000021H
  00219	c6 84 24 a9 00
	00 00 b8	 mov	 BYTE PTR $T5[rsp+73], 184 ; 000000b8H
  00221	c6 84 24 aa 00
	00 00 01	 mov	 BYTE PTR $T5[rsp+74], 1
  00229	c6 84 24 ab 00
	00 00 4c	 mov	 BYTE PTR $T5[rsp+75], 76 ; 0000004cH
  00231	c6 84 24 ac 00
	00 00 cd	 mov	 BYTE PTR $T5[rsp+76], 205 ; 000000cdH
  00239	c6 84 24 ad 00
	00 00 21	 mov	 BYTE PTR $T5[rsp+77], 33 ; 00000021H
  00241	c6 84 24 ae 00
	00 00 54	 mov	 BYTE PTR $T5[rsp+78], 84 ; 00000054H
  00249	c6 84 24 af 00
	00 00 68	 mov	 BYTE PTR $T5[rsp+79], 104 ; 00000068H
  00251	c6 84 24 b0 00
	00 00 69	 mov	 BYTE PTR $T5[rsp+80], 105 ; 00000069H
  00259	c6 84 24 b1 00
	00 00 73	 mov	 BYTE PTR $T5[rsp+81], 115 ; 00000073H
  00261	c6 84 24 b2 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+82], 32 ; 00000020H
  00269	c6 84 24 b3 00
	00 00 70	 mov	 BYTE PTR $T5[rsp+83], 112 ; 00000070H
  00271	c6 84 24 b4 00
	00 00 72	 mov	 BYTE PTR $T5[rsp+84], 114 ; 00000072H
  00279	c6 84 24 b5 00
	00 00 6f	 mov	 BYTE PTR $T5[rsp+85], 111 ; 0000006fH
  00281	c6 84 24 b6 00
	00 00 67	 mov	 BYTE PTR $T5[rsp+86], 103 ; 00000067H
  00289	c6 84 24 b7 00
	00 00 72	 mov	 BYTE PTR $T5[rsp+87], 114 ; 00000072H
  00291	c6 84 24 b8 00
	00 00 61	 mov	 BYTE PTR $T5[rsp+88], 97 ; 00000061H
  00299	c6 84 24 b9 00
	00 00 6d	 mov	 BYTE PTR $T5[rsp+89], 109 ; 0000006dH
  002a1	c6 84 24 ba 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+90], 32 ; 00000020H
  002a9	c6 84 24 bb 00
	00 00 63	 mov	 BYTE PTR $T5[rsp+91], 99 ; 00000063H
  002b1	c6 84 24 bc 00
	00 00 61	 mov	 BYTE PTR $T5[rsp+92], 97 ; 00000061H
  002b9	c6 84 24 bd 00
	00 00 6e	 mov	 BYTE PTR $T5[rsp+93], 110 ; 0000006eH
  002c1	c6 84 24 be 00
	00 00 6e	 mov	 BYTE PTR $T5[rsp+94], 110 ; 0000006eH
  002c9	c6 84 24 bf 00
	00 00 6f	 mov	 BYTE PTR $T5[rsp+95], 111 ; 0000006fH
  002d1	c6 84 24 c0 00
	00 00 74	 mov	 BYTE PTR $T5[rsp+96], 116 ; 00000074H
  002d9	c6 84 24 c1 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+97], 32 ; 00000020H
  002e1	c6 84 24 c2 00
	00 00 62	 mov	 BYTE PTR $T5[rsp+98], 98 ; 00000062H
  002e9	c6 84 24 c3 00
	00 00 65	 mov	 BYTE PTR $T5[rsp+99], 101 ; 00000065H
  002f1	c6 84 24 c4 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+100], 32 ; 00000020H
  002f9	c6 84 24 c5 00
	00 00 72	 mov	 BYTE PTR $T5[rsp+101], 114 ; 00000072H
  00301	c6 84 24 c6 00
	00 00 75	 mov	 BYTE PTR $T5[rsp+102], 117 ; 00000075H
  00309	c6 84 24 c7 00
	00 00 6e	 mov	 BYTE PTR $T5[rsp+103], 110 ; 0000006eH
  00311	c6 84 24 c8 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+104], 32 ; 00000020H
  00319	c6 84 24 c9 00
	00 00 69	 mov	 BYTE PTR $T5[rsp+105], 105 ; 00000069H
  00321	c6 84 24 ca 00
	00 00 6e	 mov	 BYTE PTR $T5[rsp+106], 110 ; 0000006eH
  00329	c6 84 24 cb 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+107], 32 ; 00000020H
  00331	c6 84 24 cc 00
	00 00 44	 mov	 BYTE PTR $T5[rsp+108], 68 ; 00000044H
  00339	c6 84 24 cd 00
	00 00 4f	 mov	 BYTE PTR $T5[rsp+109], 79 ; 0000004fH
  00341	c6 84 24 ce 00
	00 00 53	 mov	 BYTE PTR $T5[rsp+110], 83 ; 00000053H
  00349	c6 84 24 cf 00
	00 00 20	 mov	 BYTE PTR $T5[rsp+111], 32 ; 00000020H
  00351	c6 84 24 d0 00
	00 00 6d	 mov	 BYTE PTR $T5[rsp+112], 109 ; 0000006dH
  00359	c6 84 24 d1 00
	00 00 6f	 mov	 BYTE PTR $T5[rsp+113], 111 ; 0000006fH
  00361	c6 84 24 d2 00
	00 00 64	 mov	 BYTE PTR $T5[rsp+114], 100 ; 00000064H
  00369	c6 84 24 d3 00
	00 00 65	 mov	 BYTE PTR $T5[rsp+115], 101 ; 00000065H
  00371	c6 84 24 d4 00
	00 00 2e	 mov	 BYTE PTR $T5[rsp+116], 46 ; 0000002eH
  00379	c6 84 24 d5 00
	00 00 0d	 mov	 BYTE PTR $T5[rsp+117], 13
  00381	c6 84 24 d6 00
	00 00 0d	 mov	 BYTE PTR $T5[rsp+118], 13
  00389	c6 84 24 d7 00
	00 00 0a	 mov	 BYTE PTR $T5[rsp+119], 10
  00391	c6 84 24 d8 00
	00 00 24	 mov	 BYTE PTR $T5[rsp+120], 36 ; 00000024H
  00399	c6 84 24 d9 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+121], 0
  003a1	c6 84 24 da 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+122], 0
  003a9	c6 84 24 db 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+123], 0
  003b1	c6 84 24 dc 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+124], 0
  003b9	c6 84 24 dd 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+125], 0
  003c1	c6 84 24 de 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+126], 0
  003c9	c6 84 24 df 00
	00 00 00	 mov	 BYTE PTR $T5[rsp+127], 0
  003d1	c6 84 24 e0 00
	00 00 31	 mov	 BYTE PTR $T5[rsp+128], 49 ; 00000031H
  003d9	c6 84 24 e1 00
	00 00 57	 mov	 BYTE PTR $T5[rsp+129], 87 ; 00000057H
  003e1	c6 84 24 e2 00
	00 00 51	 mov	 BYTE PTR $T5[rsp+130], 81 ; 00000051H
  003e9	c6 84 24 e3 00
	00 00 ec	 mov	 BYTE PTR $T5[rsp+131], 236 ; 000000ecH
  003f1	c6 84 24 e4 00
	00 00 75	 mov	 BYTE PTR $T5[rsp+132], 117 ; 00000075H
  003f9	c6 84 24 e5 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+133], 54 ; 00000036H
  00401	c6 84 24 e6 00
	00 00 3f	 mov	 BYTE PTR $T5[rsp+134], 63 ; 0000003fH
  00409	c6 84 24 e7 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+135], 191 ; 000000bfH
  00411	c6 84 24 e8 00
	00 00 75	 mov	 BYTE PTR $T5[rsp+136], 117 ; 00000075H
  00419	c6 84 24 e9 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+137], 54 ; 00000036H
  00421	c6 84 24 ea 00
	00 00 3f	 mov	 BYTE PTR $T5[rsp+138], 63 ; 0000003fH
  00429	c6 84 24 eb 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+139], 191 ; 000000bfH
  00431	c6 84 24 ec 00
	00 00 75	 mov	 BYTE PTR $T5[rsp+140], 117 ; 00000075H
  00439	c6 84 24 ed 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+141], 54 ; 00000036H
  00441	c6 84 24 ee 00
	00 00 3f	 mov	 BYTE PTR $T5[rsp+142], 63 ; 0000003fH
  00449	c6 84 24 ef 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+143], 191 ; 000000bfH
  00451	c6 84 24 f0 00
	00 00 61	 mov	 BYTE PTR $T5[rsp+144], 97 ; 00000061H
  00459	c6 84 24 f1 00
	00 00 5d	 mov	 BYTE PTR $T5[rsp+145], 93 ; 0000005dH
  00461	c6 84 24 f2 00
	00 00 3e	 mov	 BYTE PTR $T5[rsp+146], 62 ; 0000003eH
  00469	c6 84 24 f3 00
	00 00 be	 mov	 BYTE PTR $T5[rsp+147], 190 ; 000000beH
  00471	c6 84 24 f4 00
	00 00 76	 mov	 BYTE PTR $T5[rsp+148], 118 ; 00000076H
  00479	c6 84 24 f5 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+149], 54 ; 00000036H
  00481	c6 84 24 f6 00
	00 00 3f	 mov	 BYTE PTR $T5[rsp+150], 63 ; 0000003fH
  00489	c6 84 24 f7 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+151], 191 ; 000000bfH
  00491	c6 84 24 f8 00
	00 00 75	 mov	 BYTE PTR $T5[rsp+152], 117 ; 00000075H
  00499	c6 84 24 f9 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+153], 54 ; 00000036H
  004a1	c6 84 24 fa 00
	00 00 3e	 mov	 BYTE PTR $T5[rsp+154], 62 ; 0000003eH
  004a9	c6 84 24 fb 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+155], 191 ; 000000bfH
  004b1	c6 84 24 fc 00
	00 00 6d	 mov	 BYTE PTR $T5[rsp+156], 109 ; 0000006dH
  004b9	c6 84 24 fd 00
	00 00 36	 mov	 BYTE PTR $T5[rsp+157], 54 ; 00000036H
  004c1	c6 84 24 fe 00
	00 00 3f	 mov	 BYTE PTR $T5[rsp+158], 63 ; 0000003fH
  004c9	c6 84 24 ff 00
	00 00 bf	 mov	 BYTE PTR $T5[rsp+159], 191 ; 000000bfH
  004d1	c6 84 24 00 01
	00 00 61	 mov	 BYTE PTR $T5[rsp+160], 97 ; 00000061H
  004d9	c6 84 24 01 01
	00 00 5d	 mov	 BYTE PTR $T5[rsp+161], 93 ; 0000005dH
  004e1	c6 84 24 02 01
	00 00 3c	 mov	 BYTE PTR $T5[rsp+162], 60 ; 0000003cH
  004e9	c6 84 24 03 01
	00 00 be	 mov	 BYTE PTR $T5[rsp+163], 190 ; 000000beH
  004f1	c6 84 24 04 01
	00 00 77	 mov	 BYTE PTR $T5[rsp+164], 119 ; 00000077H
  004f9	c6 84 24 05 01
	00 00 36	 mov	 BYTE PTR $T5[rsp+165], 54 ; 00000036H
  00501	c6 84 24 06 01
	00 00 3f	 mov	 BYTE PTR $T5[rsp+166], 63 ; 0000003fH
  00509	c6 84 24 07 01
	00 00 bf	 mov	 BYTE PTR $T5[rsp+167], 191 ; 000000bfH
  00511	c6 84 24 08 01
	00 00 61	 mov	 BYTE PTR $T5[rsp+168], 97 ; 00000061H
  00519	c6 84 24 09 01
	00 00 5d	 mov	 BYTE PTR $T5[rsp+169], 93 ; 0000005dH
  00521	c6 84 24 0a 01
	00 00 3b	 mov	 BYTE PTR $T5[rsp+170], 59 ; 0000003bH
  00529	c6 84 24 0b 01
	00 00 be	 mov	 BYTE PTR $T5[rsp+171], 190 ; 000000beH
  00531	c6 84 24 0c 01
	00 00 76	 mov	 BYTE PTR $T5[rsp+172], 118 ; 00000076H
  00539	c6 84 24 0d 01
	00 00 36	 mov	 BYTE PTR $T5[rsp+173], 54 ; 00000036H
  00541	c6 84 24 0e 01
	00 00 3f	 mov	 BYTE PTR $T5[rsp+174], 63 ; 0000003fH
  00549	c6 84 24 0f 01
	00 00 bf	 mov	 BYTE PTR $T5[rsp+175], 191 ; 000000bfH
  00551	c6 84 24 10 01
	00 00 b7	 mov	 BYTE PTR $T5[rsp+176], 183 ; 000000b7H
  00559	c6 84 24 11 01
	00 00 43	 mov	 BYTE PTR $T5[rsp+177], 67 ; 00000043H
  00561	c6 84 24 12 01
	00 00 3a	 mov	 BYTE PTR $T5[rsp+178], 58 ; 0000003aH
  00569	c6 84 24 13 01
	00 00 be	 mov	 BYTE PTR $T5[rsp+179], 190 ; 000000beH
  00571	c6 84 24 14 01
	00 00 70	 mov	 BYTE PTR $T5[rsp+180], 112 ; 00000070H
  00579	c6 84 24 15 01
	00 00 36	 mov	 BYTE PTR $T5[rsp+181], 54 ; 00000036H
  00581	c6 84 24 16 01
	00 00 3f	 mov	 BYTE PTR $T5[rsp+182], 63 ; 0000003fH
  00589	c6 84 24 17 01
	00 00 bf	 mov	 BYTE PTR $T5[rsp+183], 191 ; 000000bfH
  00591	c6 84 24 18 01
	00 00 b7	 mov	 BYTE PTR $T5[rsp+184], 183 ; 000000b7H
  00599	c6 84 24 19 01
	00 00 43	 mov	 BYTE PTR $T5[rsp+185], 67 ; 00000043H
  005a1	c6 84 24 1a 01
	00 00 3d	 mov	 BYTE PTR $T5[rsp+186], 61 ; 0000003dH
  005a9	c6 84 24 1b 01
	00 00 be	 mov	 BYTE PTR $T5[rsp+187], 190 ; 000000beH
  005b1	c6 84 24 1c 01
	00 00 74	 mov	 BYTE PTR $T5[rsp+188], 116 ; 00000074H
  005b9	c6 84 24 1d 01
	00 00 36	 mov	 BYTE PTR $T5[rsp+189], 54 ; 00000036H
  005c1	c6 84 24 1e 01
	00 00 3f	 mov	 BYTE PTR $T5[rsp+190], 63 ; 0000003fH
  005c9	c6 84 24 1f 01
	00 00 bf	 mov	 BYTE PTR $T5[rsp+191], 191 ; 000000bfH
  005d1	c6 84 24 20 01
	00 00 52	 mov	 BYTE PTR $T5[rsp+192], 82 ; 00000052H
  005d9	c6 84 24 21 01
	00 00 69	 mov	 BYTE PTR $T5[rsp+193], 105 ; 00000069H
  005e1	c6 84 24 22 01
	00 00 63	 mov	 BYTE PTR $T5[rsp+194], 99 ; 00000063H
  005e9	c6 84 24 23 01
	00 00 68	 mov	 BYTE PTR $T5[rsp+195], 104 ; 00000068H
  005f1	c6 84 24 24 01
	00 00 75	 mov	 BYTE PTR $T5[rsp+196], 117 ; 00000075H
  005f9	c6 84 24 25 01
	00 00 36	 mov	 BYTE PTR $T5[rsp+197], 54 ; 00000036H
  00601	c6 84 24 26 01
	00 00 3f	 mov	 BYTE PTR $T5[rsp+198], 63 ; 0000003fH
  00609	c6 84 24 27 01
	00 00 bf	 mov	 BYTE PTR $T5[rsp+199], 191 ; 000000bfH
  00611	c6 84 24 28 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+200], 0
  00619	c6 84 24 29 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+201], 0
  00621	c6 84 24 2a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+202], 0
  00629	c6 84 24 2b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+203], 0
  00631	c6 84 24 2c 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+204], 0
  00639	c6 84 24 2d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+205], 0
  00641	c6 84 24 2e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+206], 0
  00649	c6 84 24 2f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+207], 0
  00651	c6 84 24 30 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+208], 0
  00659	c6 84 24 31 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+209], 0
  00661	c6 84 24 32 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+210], 0
  00669	c6 84 24 33 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+211], 0
  00671	c6 84 24 34 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+212], 0
  00679	c6 84 24 35 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+213], 0
  00681	c6 84 24 36 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+214], 0
  00689	c6 84 24 37 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+215], 0
  00691	c6 84 24 38 01
	00 00 50	 mov	 BYTE PTR $T5[rsp+216], 80 ; 00000050H
  00699	c6 84 24 39 01
	00 00 45	 mov	 BYTE PTR $T5[rsp+217], 69 ; 00000045H
  006a1	c6 84 24 3a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+218], 0
  006a9	c6 84 24 3b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+219], 0
  006b1	c6 84 24 3c 01
	00 00 64	 mov	 BYTE PTR $T5[rsp+220], 100 ; 00000064H
  006b9	c6 84 24 3d 01
	00 00 86	 mov	 BYTE PTR $T5[rsp+221], 134 ; 00000086H
  006c1	c6 84 24 3e 01
	00 00 06	 mov	 BYTE PTR $T5[rsp+222], 6
  006c9	c6 84 24 3f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+223], 0
  006d1	c6 84 24 40 01
	00 00 4f	 mov	 BYTE PTR $T5[rsp+224], 79 ; 0000004fH
  006d9	c6 84 24 41 01
	00 00 75	 mov	 BYTE PTR $T5[rsp+225], 117 ; 00000075H
  006e1	c6 84 24 42 01
	00 00 cc	 mov	 BYTE PTR $T5[rsp+226], 204 ; 000000ccH
  006e9	c6 84 24 43 01
	00 00 63	 mov	 BYTE PTR $T5[rsp+227], 99 ; 00000063H
  006f1	c6 84 24 44 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+228], 0
  006f9	c6 84 24 45 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+229], 0
  00701	c6 84 24 46 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+230], 0
  00709	c6 84 24 47 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+231], 0
  00711	c6 84 24 48 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+232], 0
  00719	c6 84 24 49 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+233], 0
  00721	c6 84 24 4a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+234], 0
  00729	c6 84 24 4b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+235], 0
  00731	c6 84 24 4c 01
	00 00 f0	 mov	 BYTE PTR $T5[rsp+236], 240 ; 000000f0H
  00739	c6 84 24 4d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+237], 0
  00741	c6 84 24 4e 01
	00 00 22	 mov	 BYTE PTR $T5[rsp+238], 34 ; 00000022H
  00749	c6 84 24 4f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+239], 0
  00751	c6 84 24 50 01
	00 00 0b	 mov	 BYTE PTR $T5[rsp+240], 11
  00759	c6 84 24 51 01
	00 00 02	 mov	 BYTE PTR $T5[rsp+241], 2
  00761	c6 84 24 52 01
	00 00 0e	 mov	 BYTE PTR $T5[rsp+242], 14
  00769	c6 84 24 53 01
	00 00 1d	 mov	 BYTE PTR $T5[rsp+243], 29
  00771	c6 84 24 54 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+244], 0
  00779	c6 84 24 55 01
	00 00 16	 mov	 BYTE PTR $T5[rsp+245], 22
  00781	c6 84 24 56 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+246], 0
  00789	c6 84 24 57 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+247], 0
  00791	c6 84 24 58 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+248], 0
  00799	c6 84 24 59 01
	00 00 0e	 mov	 BYTE PTR $T5[rsp+249], 14
  007a1	c6 84 24 5a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+250], 0
  007a9	c6 84 24 5b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+251], 0
  007b1	c6 84 24 5c 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+252], 0
  007b9	c6 84 24 5d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+253], 0
  007c1	c6 84 24 5e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+254], 0
  007c9	c6 84 24 5f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+255], 0
  007d1	c6 84 24 60 01
	00 00 50	 mov	 BYTE PTR $T5[rsp+256], 80 ; 00000050H
  007d9	c6 84 24 61 01
	00 00 13	 mov	 BYTE PTR $T5[rsp+257], 19
  007e1	c6 84 24 62 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+258], 0
  007e9	c6 84 24 63 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+259], 0
  007f1	c6 84 24 64 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+260], 0
  007f9	c6 84 24 65 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+261], 16
  00801	c6 84 24 66 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+262], 0
  00809	c6 84 24 67 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+263], 0
  00811	c6 84 24 68 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+264], 0
  00819	c6 84 24 69 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+265], 0
  00821	c6 84 24 6a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+266], 0
  00829	c6 84 24 6b 01
	00 00 40	 mov	 BYTE PTR $T5[rsp+267], 64 ; 00000040H
  00831	c6 84 24 6c 01
	00 00 01	 mov	 BYTE PTR $T5[rsp+268], 1
  00839	c6 84 24 6d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+269], 0
  00841	c6 84 24 6e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+270], 0
  00849	c6 84 24 6f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+271], 0
  00851	c6 84 24 70 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+272], 0
  00859	c6 84 24 71 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+273], 16
  00861	c6 84 24 72 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+274], 0
  00869	c6 84 24 73 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+275], 0
  00871	c6 84 24 74 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+276], 0
  00879	c6 84 24 75 01
	00 00 02	 mov	 BYTE PTR $T5[rsp+277], 2
  00881	c6 84 24 76 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+278], 0
  00889	c6 84 24 77 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+279], 0
  00891	c6 84 24 78 01
	00 00 0a	 mov	 BYTE PTR $T5[rsp+280], 10
  00899	c6 84 24 79 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+281], 0
  008a1	c6 84 24 7a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+282], 0
  008a9	c6 84 24 7b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+283], 0
  008b1	c6 84 24 7c 01
	00 00 0a	 mov	 BYTE PTR $T5[rsp+284], 10
  008b9	c6 84 24 7d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+285], 0
  008c1	c6 84 24 7e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+286], 0
  008c9	c6 84 24 7f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+287], 0
  008d1	c6 84 24 80 01
	00 00 0a	 mov	 BYTE PTR $T5[rsp+288], 10
  008d9	c6 84 24 81 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+289], 0
  008e1	c6 84 24 82 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+290], 0
  008e9	c6 84 24 83 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+291], 0
  008f1	c6 84 24 84 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+292], 0
  008f9	c6 84 24 85 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+293], 0
  00901	c6 84 24 86 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+294], 0
  00909	c6 84 24 87 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+295], 0
  00911	c6 84 24 88 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+296], 0
  00919	c6 84 24 89 01
	00 00 80	 mov	 BYTE PTR $T5[rsp+297], 128 ; 00000080H
  00921	c6 84 24 8a 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+298], 0
  00929	c6 84 24 8b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+299], 0
  00931	c6 84 24 8c 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+300], 0
  00939	c6 84 24 8d 01
	00 00 04	 mov	 BYTE PTR $T5[rsp+301], 4
  00941	c6 84 24 8e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+302], 0
  00949	c6 84 24 8f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+303], 0
  00951	c6 84 24 90 01
	00 00 77	 mov	 BYTE PTR $T5[rsp+304], 119 ; 00000077H
  00959	c6 84 24 91 01
	00 00 90	 mov	 BYTE PTR $T5[rsp+305], 144 ; 00000090H
  00961	c6 84 24 92 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+306], 0
  00969	c6 84 24 93 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+307], 0
  00971	c6 84 24 94 01
	00 00 01	 mov	 BYTE PTR $T5[rsp+308], 1
  00979	c6 84 24 95 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+309], 0
  00981	c6 84 24 96 01
	00 00 60	 mov	 BYTE PTR $T5[rsp+310], 96 ; 00000060H
  00989	c6 84 24 97 01
	00 00 41	 mov	 BYTE PTR $T5[rsp+311], 65 ; 00000041H
  00991	c6 84 24 98 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+312], 0
  00999	c6 84 24 99 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+313], 0
  009a1	c6 84 24 9a 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+314], 16
  009a9	c6 84 24 9b 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+315], 0
  009b1	c6 84 24 9c 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+316], 0
  009b9	c6 84 24 9d 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+317], 0
  009c1	c6 84 24 9e 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+318], 0
  009c9	c6 84 24 9f 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+319], 0
  009d1	c6 84 24 a0 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+320], 0
  009d9	c6 84 24 a1 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+321], 16
  009e1	c6 84 24 a2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+322], 0
  009e9	c6 84 24 a3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+323], 0
  009f1	c6 84 24 a4 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+324], 0
  009f9	c6 84 24 a5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+325], 0
  00a01	c6 84 24 a6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+326], 0
  00a09	c6 84 24 a7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+327], 0
  00a11	c6 84 24 a8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+328], 0
  00a19	c6 84 24 a9 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+329], 0
  00a21	c6 84 24 aa 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+330], 16
  00a29	c6 84 24 ab 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+331], 0
  00a31	c6 84 24 ac 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+332], 0
  00a39	c6 84 24 ad 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+333], 0
  00a41	c6 84 24 ae 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+334], 0
  00a49	c6 84 24 af 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+335], 0
  00a51	c6 84 24 b0 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+336], 0
  00a59	c6 84 24 b1 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+337], 16
  00a61	c6 84 24 b2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+338], 0
  00a69	c6 84 24 b3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+339], 0
  00a71	c6 84 24 b4 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+340], 0
  00a79	c6 84 24 b5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+341], 0
  00a81	c6 84 24 b6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+342], 0
  00a89	c6 84 24 b7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+343], 0
  00a91	c6 84 24 b8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+344], 0
  00a99	c6 84 24 b9 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+345], 0
  00aa1	c6 84 24 ba 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+346], 0
  00aa9	c6 84 24 bb 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+347], 0
  00ab1	c6 84 24 bc 01
	00 00 10	 mov	 BYTE PTR $T5[rsp+348], 16
  00ab9	c6 84 24 bd 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+349], 0
  00ac1	c6 84 24 be 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+350], 0
  00ac9	c6 84 24 bf 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+351], 0
  00ad1	c6 84 24 c0 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+352], 0
  00ad9	c6 84 24 c1 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+353], 0
  00ae1	c6 84 24 c2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+354], 0
  00ae9	c6 84 24 c3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+355], 0
  00af1	c6 84 24 c4 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+356], 0
  00af9	c6 84 24 c5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+357], 0
  00b01	c6 84 24 c6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+358], 0
  00b09	c6 84 24 c7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+359], 0
  00b11	c6 84 24 c8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+360], 0
  00b19	c6 84 24 c9 01
	00 00 60	 mov	 BYTE PTR $T5[rsp+361], 96 ; 00000060H
  00b21	c6 84 24 ca 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+362], 0
  00b29	c6 84 24 cb 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+363], 0
  00b31	c6 84 24 cc 01
	00 00 28	 mov	 BYTE PTR $T5[rsp+364], 40 ; 00000028H
  00b39	c6 84 24 cd 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+365], 0
  00b41	c6 84 24 ce 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+366], 0
  00b49	c6 84 24 cf 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+367], 0
  00b51	c6 84 24 d0 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+368], 0
  00b59	c6 84 24 d1 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+369], 0
  00b61	c6 84 24 d2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+370], 0
  00b69	c6 84 24 d3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+371], 0
  00b71	c6 84 24 d4 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+372], 0
  00b79	c6 84 24 d5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+373], 0
  00b81	c6 84 24 d6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+374], 0
  00b89	c6 84 24 d7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+375], 0
  00b91	c6 84 24 d8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+376], 0
  00b99	c6 84 24 d9 01
	00 00 50	 mov	 BYTE PTR $T5[rsp+377], 80 ; 00000050H
  00ba1	c6 84 24 da 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+378], 0
  00ba9	c6 84 24 db 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+379], 0
  00bb1	c6 84 24 dc 01
	00 00 50	 mov	 BYTE PTR $T5[rsp+380], 80 ; 00000050H
  00bb9	c6 84 24 dd 01
	00 00 01	 mov	 BYTE PTR $T5[rsp+381], 1
  00bc1	c6 84 24 de 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+382], 0
  00bc9	c6 84 24 df 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+383], 0
  00bd1	c6 84 24 e0 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+384], 0
  00bd9	c6 84 24 e1 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+385], 0
  00be1	c6 84 24 e2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+386], 0
  00be9	c6 84 24 e3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+387], 0
  00bf1	c6 84 24 e4 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+388], 0
  00bf9	c6 84 24 e5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+389], 0
  00c01	c6 84 24 e6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+390], 0
  00c09	c6 84 24 e7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+391], 0
  00c11	c6 84 24 e8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+392], 0
  00c19	c6 84 24 e9 01
	00 00 70	 mov	 BYTE PTR $T5[rsp+393], 112 ; 00000070H
  00c21	c6 84 24 ea 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+394], 0
  00c29	c6 84 24 eb 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+395], 0
  00c31	c6 84 24 ec 01
	00 00 14	 mov	 BYTE PTR $T5[rsp+396], 20
  00c39	c6 84 24 ed 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+397], 0
  00c41	c6 84 24 ee 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+398], 0
  00c49	c6 84 24 ef 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+399], 0
  00c51	c6 84 24 f0 01
	00 00 20	 mov	 BYTE PTR $T5[rsp+400], 32 ; 00000020H
  00c59	c6 84 24 f1 01
	00 00 32	 mov	 BYTE PTR $T5[rsp+401], 50 ; 00000032H
  00c61	c6 84 24 f2 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+402], 0
  00c69	c6 84 24 f3 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+403], 0
  00c71	c6 84 24 f4 01
	00 00 54	 mov	 BYTE PTR $T5[rsp+404], 84 ; 00000054H
  00c79	c6 84 24 f5 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+405], 0
  00c81	c6 84 24 f6 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+406], 0
  00c89	c6 84 24 f7 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+407], 0
  00c91	c6 84 24 f8 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+408], 0
  00c99	c6 84 24 f9 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+409], 0
  00ca1	c6 84 24 fa 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+410], 0
  00ca9	c6 84 24 fb 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+411], 0
  00cb1	c6 84 24 fc 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+412], 0
  00cb9	c6 84 24 fd 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+413], 0
  00cc1	c6 84 24 fe 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+414], 0
  00cc9	c6 84 24 ff 01
	00 00 00	 mov	 BYTE PTR $T5[rsp+415], 0
  00cd1	c6 84 24 00 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+416], 0
  00cd9	c6 84 24 01 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+417], 0
  00ce1	c6 84 24 02 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+418], 0
  00ce9	c6 84 24 03 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+419], 0
  00cf1	c6 84 24 04 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+420], 0
  00cf9	c6 84 24 05 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+421], 0
  00d01	c6 84 24 06 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+422], 0
  00d09	c6 84 24 07 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+423], 0
  00d11	c6 84 24 08 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+424], 0
  00d19	c6 84 24 09 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+425], 0
  00d21	c6 84 24 0a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+426], 0
  00d29	c6 84 24 0b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+427], 0
  00d31	c6 84 24 0c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+428], 0
  00d39	c6 84 24 0d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+429], 0
  00d41	c6 84 24 0e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+430], 0
  00d49	c6 84 24 0f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+431], 0
  00d51	c6 84 24 10 02
	00 00 80	 mov	 BYTE PTR $T5[rsp+432], 128 ; 00000080H
  00d59	c6 84 24 11 02
	00 00 32	 mov	 BYTE PTR $T5[rsp+433], 50 ; 00000032H
  00d61	c6 84 24 12 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+434], 0
  00d69	c6 84 24 13 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+435], 0
  00d71	c6 84 24 14 02
	00 00 18	 mov	 BYTE PTR $T5[rsp+436], 24
  00d79	c6 84 24 15 02
	00 00 01	 mov	 BYTE PTR $T5[rsp+437], 1
  00d81	c6 84 24 16 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+438], 0
  00d89	c6 84 24 17 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+439], 0
  00d91	c6 84 24 18 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+440], 0
  00d99	c6 84 24 19 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+441], 0
  00da1	c6 84 24 1a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+442], 0
  00da9	c6 84 24 1b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+443], 0
  00db1	c6 84 24 1c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+444], 0
  00db9	c6 84 24 1d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+445], 0
  00dc1	c6 84 24 1e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+446], 0
  00dc9	c6 84 24 1f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+447], 0
  00dd1	c6 84 24 20 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+448], 0
  00dd9	c6 84 24 21 02
	00 00 30	 mov	 BYTE PTR $T5[rsp+449], 48 ; 00000030H
  00de1	c6 84 24 22 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+450], 0
  00de9	c6 84 24 23 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+451], 0
  00df1	c6 84 24 24 02
	00 00 b0	 mov	 BYTE PTR $T5[rsp+452], 176 ; 000000b0H
  00df9	c6 84 24 25 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+453], 0
  00e01	c6 84 24 26 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+454], 0
  00e09	c6 84 24 27 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+455], 0
  00e11	c6 84 24 28 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+456], 0
  00e19	c6 84 24 29 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+457], 0
  00e21	c6 84 24 2a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+458], 0
  00e29	c6 84 24 2b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+459], 0
  00e31	c6 84 24 2c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+460], 0
  00e39	c6 84 24 2d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+461], 0
  00e41	c6 84 24 2e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+462], 0
  00e49	c6 84 24 2f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+463], 0
  00e51	c6 84 24 30 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+464], 0
  00e59	c6 84 24 31 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+465], 0
  00e61	c6 84 24 32 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+466], 0
  00e69	c6 84 24 33 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+467], 0
  00e71	c6 84 24 34 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+468], 0
  00e79	c6 84 24 35 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+469], 0
  00e81	c6 84 24 36 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+470], 0
  00e89	c6 84 24 37 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+471], 0
  00e91	c6 84 24 38 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+472], 0
  00e99	c6 84 24 39 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+473], 0
  00ea1	c6 84 24 3a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+474], 0
  00ea9	c6 84 24 3b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+475], 0
  00eb1	c6 84 24 3c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+476], 0
  00eb9	c6 84 24 3d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+477], 0
  00ec1	c6 84 24 3e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+478], 0
  00ec9	c6 84 24 3f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+479], 0
  00ed1	c6 84 24 40 02
	00 00 2e	 mov	 BYTE PTR $T5[rsp+480], 46 ; 0000002eH
  00ed9	c6 84 24 41 02
	00 00 74	 mov	 BYTE PTR $T5[rsp+481], 116 ; 00000074H
  00ee1	c6 84 24 42 02
	00 00 65	 mov	 BYTE PTR $T5[rsp+482], 101 ; 00000065H
  00ee9	c6 84 24 43 02
	00 00 78	 mov	 BYTE PTR $T5[rsp+483], 120 ; 00000078H
  00ef1	c6 84 24 44 02
	00 00 74	 mov	 BYTE PTR $T5[rsp+484], 116 ; 00000074H
  00ef9	c6 84 24 45 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+485], 0
  00f01	c6 84 24 46 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+486], 0
  00f09	c6 84 24 47 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+487], 0
  00f11	c6 84 24 48 02
	00 00 ad	 mov	 BYTE PTR $T5[rsp+488], 173 ; 000000adH
  00f19	c6 84 24 49 02
	00 00 11	 mov	 BYTE PTR $T5[rsp+489], 17
  00f21	c6 84 24 4a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+490], 0
  00f29	c6 84 24 4b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+491], 0
  00f31	c6 84 24 4c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+492], 0
  00f39	c6 84 24 4d 02
	00 00 10	 mov	 BYTE PTR $T5[rsp+493], 16
  00f41	c6 84 24 4e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+494], 0
  00f49	c6 84 24 4f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+495], 0
  00f51	c6 84 24 50 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+496], 0
  00f59	c6 84 24 51 02
	00 00 12	 mov	 BYTE PTR $T5[rsp+497], 18
  00f61	c6 84 24 52 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+498], 0
  00f69	c6 84 24 53 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+499], 0
  00f71	c6 84 24 54 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+500], 0
  00f79	c6 84 24 55 02
	00 00 04	 mov	 BYTE PTR $T5[rsp+501], 4
  00f81	c6 84 24 56 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+502], 0
  00f89	c6 84 24 57 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+503], 0
  00f91	c6 84 24 58 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+504], 0
  00f99	c6 84 24 59 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+505], 0
  00fa1	c6 84 24 5a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+506], 0
  00fa9	c6 84 24 5b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+507], 0
  00fb1	c6 84 24 5c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+508], 0
  00fb9	c6 84 24 5d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+509], 0
  00fc1	c6 84 24 5e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+510], 0
  00fc9	c6 84 24 5f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+511], 0
  00fd1	c6 84 24 60 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+512], 0
  00fd9	c6 84 24 61 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+513], 0
  00fe1	c6 84 24 62 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+514], 0
  00fe9	c6 84 24 63 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+515], 0
  00ff1	c6 84 24 64 02
	00 00 20	 mov	 BYTE PTR $T5[rsp+516], 32 ; 00000020H
  00ff9	c6 84 24 65 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+517], 0
  01001	c6 84 24 66 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+518], 0
  01009	c6 84 24 67 02
	00 00 68	 mov	 BYTE PTR $T5[rsp+519], 104 ; 00000068H
  01011	c6 84 24 68 02
	00 00 2e	 mov	 BYTE PTR $T5[rsp+520], 46 ; 0000002eH
  01019	c6 84 24 69 02
	00 00 72	 mov	 BYTE PTR $T5[rsp+521], 114 ; 00000072H
  01021	c6 84 24 6a 02
	00 00 64	 mov	 BYTE PTR $T5[rsp+522], 100 ; 00000064H
  01029	c6 84 24 6b 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+523], 97 ; 00000061H
  01031	c6 84 24 6c 02
	00 00 74	 mov	 BYTE PTR $T5[rsp+524], 116 ; 00000074H
  01039	c6 84 24 6d 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+525], 97 ; 00000061H
  01041	c6 84 24 6e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+526], 0
  01049	c6 84 24 6f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+527], 0
  01051	c6 84 24 70 02
	00 00 6c	 mov	 BYTE PTR $T5[rsp+528], 108 ; 0000006cH
  01059	c6 84 24 71 02
	00 00 07	 mov	 BYTE PTR $T5[rsp+529], 7
  01061	c6 84 24 72 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+530], 0
  01069	c6 84 24 73 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+531], 0
  01071	c6 84 24 74 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+532], 0
  01079	c6 84 24 75 02
	00 00 30	 mov	 BYTE PTR $T5[rsp+533], 48 ; 00000030H
  01081	c6 84 24 76 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+534], 0
  01089	c6 84 24 77 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+535], 0
  01091	c6 84 24 78 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+536], 0
  01099	c6 84 24 79 02
	00 00 08	 mov	 BYTE PTR $T5[rsp+537], 8
  010a1	c6 84 24 7a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+538], 0
  010a9	c6 84 24 7b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+539], 0
  010b1	c6 84 24 7c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+540], 0
  010b9	c6 84 24 7d 02
	00 00 16	 mov	 BYTE PTR $T5[rsp+541], 22
  010c1	c6 84 24 7e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+542], 0
  010c9	c6 84 24 7f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+543], 0
  010d1	c6 84 24 80 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+544], 0
  010d9	c6 84 24 81 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+545], 0
  010e1	c6 84 24 82 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+546], 0
  010e9	c6 84 24 83 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+547], 0
  010f1	c6 84 24 84 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+548], 0
  010f9	c6 84 24 85 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+549], 0
  01101	c6 84 24 86 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+550], 0
  01109	c6 84 24 87 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+551], 0
  01111	c6 84 24 88 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+552], 0
  01119	c6 84 24 89 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+553], 0
  01121	c6 84 24 8a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+554], 0
  01129	c6 84 24 8b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+555], 0
  01131	c6 84 24 8c 02
	00 00 40	 mov	 BYTE PTR $T5[rsp+556], 64 ; 00000040H
  01139	c6 84 24 8d 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+557], 0
  01141	c6 84 24 8e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+558], 0
  01149	c6 84 24 8f 02
	00 00 48	 mov	 BYTE PTR $T5[rsp+559], 72 ; 00000048H
  01151	c6 84 24 90 02
	00 00 2e	 mov	 BYTE PTR $T5[rsp+560], 46 ; 0000002eH
  01159	c6 84 24 91 02
	00 00 64	 mov	 BYTE PTR $T5[rsp+561], 100 ; 00000064H
  01161	c6 84 24 92 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+562], 97 ; 00000061H
  01169	c6 84 24 93 02
	00 00 74	 mov	 BYTE PTR $T5[rsp+563], 116 ; 00000074H
  01171	c6 84 24 94 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+564], 97 ; 00000061H
  01179	c6 84 24 95 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+565], 0
  01181	c6 84 24 96 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+566], 0
  01189	c6 84 24 97 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+567], 0
  01191	c6 84 24 98 02
	00 00 24	 mov	 BYTE PTR $T5[rsp+568], 36 ; 00000024H
  01199	c6 84 24 99 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+569], 0
  011a1	c6 84 24 9a 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+570], 0
  011a9	c6 84 24 9b 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+571], 0
  011b1	c6 84 24 9c 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+572], 0
  011b9	c6 84 24 9d 02
	00 00 40	 mov	 BYTE PTR $T5[rsp+573], 64 ; 00000040H
  011c1	c6 84 24 9e 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+574], 0
  011c9	c6 84 24 9f 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+575], 0
  011d1	c6 84 24 a0 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+576], 0
  011d9	c6 84 24 a1 02
	00 00 02	 mov	 BYTE PTR $T5[rsp+577], 2
  011e1	c6 84 24 a2 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+578], 0
  011e9	c6 84 24 a3 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+579], 0
  011f1	c6 84 24 a4 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+580], 0
  011f9	c6 84 24 a5 02
	00 00 1e	 mov	 BYTE PTR $T5[rsp+581], 30
  01201	c6 84 24 a6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+582], 0
  01209	c6 84 24 a7 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+583], 0
  01211	c6 84 24 a8 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+584], 0
  01219	c6 84 24 a9 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+585], 0
  01221	c6 84 24 aa 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+586], 0
  01229	c6 84 24 ab 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+587], 0
  01231	c6 84 24 ac 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+588], 0
  01239	c6 84 24 ad 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+589], 0
  01241	c6 84 24 ae 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+590], 0
  01249	c6 84 24 af 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+591], 0
  01251	c6 84 24 b0 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+592], 0
  01259	c6 84 24 b1 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+593], 0
  01261	c6 84 24 b2 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+594], 0
  01269	c6 84 24 b3 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+595], 0
  01271	c6 84 24 b4 02
	00 00 40	 mov	 BYTE PTR $T5[rsp+596], 64 ; 00000040H
  01279	c6 84 24 b5 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+597], 0
  01281	c6 84 24 b6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+598], 0
  01289	c6 84 24 b7 02
	00 00 c8	 mov	 BYTE PTR $T5[rsp+599], 200 ; 000000c8H
  01291	c6 84 24 b8 02
	00 00 2e	 mov	 BYTE PTR $T5[rsp+600], 46 ; 0000002eH
  01299	c6 84 24 b9 02
	00 00 70	 mov	 BYTE PTR $T5[rsp+601], 112 ; 00000070H
  012a1	c6 84 24 ba 02
	00 00 64	 mov	 BYTE PTR $T5[rsp+602], 100 ; 00000064H
  012a9	c6 84 24 bb 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+603], 97 ; 00000061H
  012b1	c6 84 24 bc 02
	00 00 74	 mov	 BYTE PTR $T5[rsp+604], 116 ; 00000074H
  012b9	c6 84 24 bd 02
	00 00 61	 mov	 BYTE PTR $T5[rsp+605], 97 ; 00000061H
  012c1	c6 84 24 be 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+606], 0
  012c9	c6 84 24 bf 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+607], 0
  012d1	c6 84 24 c0 02
	00 00 50	 mov	 BYTE PTR $T5[rsp+608], 80 ; 00000050H
  012d9	c6 84 24 c1 02
	00 00 01	 mov	 BYTE PTR $T5[rsp+609], 1
  012e1	c6 84 24 c2 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+610], 0
  012e9	c6 84 24 c3 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+611], 0
  012f1	c6 84 24 c4 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+612], 0
  012f9	c6 84 24 c5 02
	00 00 50	 mov	 BYTE PTR $T5[rsp+613], 80 ; 00000050H
  01301	c6 84 24 c6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+614], 0
  01309	c6 84 24 c7 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+615], 0
  01311	c6 84 24 c8 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+616], 0
  01319	c6 84 24 c9 02
	00 00 02	 mov	 BYTE PTR $T5[rsp+617], 2
  01321	c6 84 24 ca 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+618], 0
  01329	c6 84 24 cb 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+619], 0
  01331	c6 84 24 cc 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+620], 0
  01339	c6 84 24 cd 02
	00 00 20	 mov	 BYTE PTR $T5[rsp+621], 32 ; 00000020H
  01341	c6 84 24 ce 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+622], 0
  01349	c6 84 24 cf 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+623], 0
  01351	c6 84 24 d0 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+624], 0
  01359	c6 84 24 d1 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+625], 0
  01361	c6 84 24 d2 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+626], 0
  01369	c6 84 24 d3 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+627], 0
  01371	c6 84 24 d4 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+628], 0
  01379	c6 84 24 d5 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+629], 0
  01381	c6 84 24 d6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+630], 0
  01389	c6 84 24 d7 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+631], 0
  01391	c6 84 24 d8 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+632], 0
  01399	c6 84 24 d9 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+633], 0
  013a1	c6 84 24 da 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+634], 0
  013a9	c6 84 24 db 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+635], 0
  013b1	c6 84 24 dc 02
	00 00 40	 mov	 BYTE PTR $T5[rsp+636], 64 ; 00000040H
  013b9	c6 84 24 dd 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+637], 0
  013c1	c6 84 24 de 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+638], 0
  013c9	c6 84 24 df 02
	00 00 48	 mov	 BYTE PTR $T5[rsp+639], 72 ; 00000048H
  013d1	c6 84 24 e0 02
	00 00 49	 mov	 BYTE PTR $T5[rsp+640], 73 ; 00000049H
  013d9	c6 84 24 e1 02
	00 00 4e	 mov	 BYTE PTR $T5[rsp+641], 78 ; 0000004eH
  013e1	c6 84 24 e2 02
	00 00 49	 mov	 BYTE PTR $T5[rsp+642], 73 ; 00000049H
  013e9	c6 84 24 e3 02
	00 00 54	 mov	 BYTE PTR $T5[rsp+643], 84 ; 00000054H
  013f1	c6 84 24 e4 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+644], 0
  013f9	c6 84 24 e5 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+645], 0
  01401	c6 84 24 e6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+646], 0
  01409	c6 84 24 e7 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+647], 0
  01411	c6 84 24 e8 02
	00 00 c0	 mov	 BYTE PTR $T5[rsp+648], 192 ; 000000c0H
  01419	c6 84 24 e9 02
	00 00 02	 mov	 BYTE PTR $T5[rsp+649], 2
  01421	c6 84 24 ea 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+650], 0
  01429	c6 84 24 eb 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+651], 0
  01431	c6 84 24 ec 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+652], 0
  01439	c6 84 24 ed 02
	00 00 60	 mov	 BYTE PTR $T5[rsp+653], 96 ; 00000060H
  01441	c6 84 24 ee 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+654], 0
  01449	c6 84 24 ef 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+655], 0
  01451	c6 84 24 f0 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+656], 0
  01459	c6 84 24 f1 02
	00 00 04	 mov	 BYTE PTR $T5[rsp+657], 4
  01461	c6 84 24 f2 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+658], 0
  01469	c6 84 24 f3 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+659], 0
  01471	c6 84 24 f4 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+660], 0
  01479	c6 84 24 f5 02
	00 00 22	 mov	 BYTE PTR $T5[rsp+661], 34 ; 00000022H
  01481	c6 84 24 f6 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+662], 0
  01489	c6 84 24 f7 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+663], 0
  01491	c6 84 24 f8 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+664], 0
  01499	c6 84 24 f9 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+665], 0
  014a1	c6 84 24 fa 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+666], 0
  014a9	c6 84 24 fb 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+667], 0
  014b1	c6 84 24 fc 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+668], 0
  014b9	c6 84 24 fd 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+669], 0
  014c1	c6 84 24 fe 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+670], 0
  014c9	c6 84 24 ff 02
	00 00 00	 mov	 BYTE PTR $T5[rsp+671], 0
  014d1	c6 84 24 00 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+672], 0
  014d9	c6 84 24 01 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+673], 0
  014e1	c6 84 24 02 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+674], 0
  014e9	c6 84 24 03 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+675], 0
  014f1	c6 84 24 04 03
	00 00 20	 mov	 BYTE PTR $T5[rsp+676], 32 ; 00000020H
  014f9	c6 84 24 05 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+677], 0
  01501	c6 84 24 06 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+678], 0
  01509	c6 84 24 07 03
	00 00 62	 mov	 BYTE PTR $T5[rsp+679], 98 ; 00000062H
  01511	c6 84 24 08 03
	00 00 2e	 mov	 BYTE PTR $T5[rsp+680], 46 ; 0000002eH
  01519	c6 84 24 09 03
	00 00 72	 mov	 BYTE PTR $T5[rsp+681], 114 ; 00000072H
  01521	c6 84 24 0a 03
	00 00 65	 mov	 BYTE PTR $T5[rsp+682], 101 ; 00000065H
  01529	c6 84 24 0b 03
	00 00 6c	 mov	 BYTE PTR $T5[rsp+683], 108 ; 0000006cH
  01531	c6 84 24 0c 03
	00 00 6f	 mov	 BYTE PTR $T5[rsp+684], 111 ; 0000006fH
  01539	c6 84 24 0d 03
	00 00 63	 mov	 BYTE PTR $T5[rsp+685], 99 ; 00000063H
  01541	c6 84 24 0e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+686], 0
  01549	c6 84 24 0f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+687], 0
  01551	c6 84 24 10 03
	00 00 14	 mov	 BYTE PTR $T5[rsp+688], 20
  01559	c6 84 24 11 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+689], 0
  01561	c6 84 24 12 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+690], 0
  01569	c6 84 24 13 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+691], 0
  01571	c6 84 24 14 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+692], 0
  01579	c6 84 24 15 03
	00 00 70	 mov	 BYTE PTR $T5[rsp+693], 112 ; 00000070H
  01581	c6 84 24 16 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+694], 0
  01589	c6 84 24 17 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+695], 0
  01591	c6 84 24 18 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+696], 0
  01599	c6 84 24 19 03
	00 00 02	 mov	 BYTE PTR $T5[rsp+697], 2
  015a1	c6 84 24 1a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+698], 0
  015a9	c6 84 24 1b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+699], 0
  015b1	c6 84 24 1c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+700], 0
  015b9	c6 84 24 1d 03
	00 00 26	 mov	 BYTE PTR $T5[rsp+701], 38 ; 00000026H
  015c1	c6 84 24 1e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+702], 0
  015c9	c6 84 24 1f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+703], 0
  015d1	c6 84 24 20 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+704], 0
  015d9	c6 84 24 21 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+705], 0
  015e1	c6 84 24 22 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+706], 0
  015e9	c6 84 24 23 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+707], 0
  015f1	c6 84 24 24 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+708], 0
  015f9	c6 84 24 25 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+709], 0
  01601	c6 84 24 26 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+710], 0
  01609	c6 84 24 27 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+711], 0
  01611	c6 84 24 28 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+712], 0
  01619	c6 84 24 29 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+713], 0
  01621	c6 84 24 2a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+714], 0
  01629	c6 84 24 2b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+715], 0
  01631	c6 84 24 2c 03
	00 00 40	 mov	 BYTE PTR $T5[rsp+716], 64 ; 00000040H
  01639	c6 84 24 2d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+717], 0
  01641	c6 84 24 2e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+718], 0
  01649	c6 84 24 2f 03
	00 00 42	 mov	 BYTE PTR $T5[rsp+719], 66 ; 00000042H
  01651	c6 84 24 30 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+720], 0
  01659	c6 84 24 31 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+721], 0
  01661	c6 84 24 32 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+722], 0
  01669	c6 84 24 33 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+723], 0
  01671	c6 84 24 34 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+724], 0
  01679	c6 84 24 35 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+725], 0
  01681	c6 84 24 36 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+726], 0
  01689	c6 84 24 37 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+727], 0
  01691	c6 84 24 38 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+728], 0
  01699	c6 84 24 39 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+729], 0
  016a1	c6 84 24 3a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+730], 0
  016a9	c6 84 24 3b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+731], 0
  016b1	c6 84 24 3c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+732], 0
  016b9	c6 84 24 3d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+733], 0
  016c1	c6 84 24 3e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+734], 0
  016c9	c6 84 24 3f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+735], 0
  016d1	c6 84 24 40 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+736], 0
  016d9	c6 84 24 41 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+737], 0
  016e1	c6 84 24 42 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+738], 0
  016e9	c6 84 24 43 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+739], 0
  016f1	c6 84 24 44 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+740], 0
  016f9	c6 84 24 45 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+741], 0
  01701	c6 84 24 46 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+742], 0
  01709	c6 84 24 47 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+743], 0
  01711	c6 84 24 48 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+744], 0
  01719	c6 84 24 49 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+745], 0
  01721	c6 84 24 4a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+746], 0
  01729	c6 84 24 4b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+747], 0
  01731	c6 84 24 4c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+748], 0
  01739	c6 84 24 4d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+749], 0
  01741	c6 84 24 4e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+750], 0
  01749	c6 84 24 4f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+751], 0
  01751	c6 84 24 50 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+752], 0
  01759	c6 84 24 51 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+753], 0
  01761	c6 84 24 52 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+754], 0
  01769	c6 84 24 53 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+755], 0
  01771	c6 84 24 54 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+756], 0
  01779	c6 84 24 55 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+757], 0
  01781	c6 84 24 56 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+758], 0
  01789	c6 84 24 57 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+759], 0
  01791	c6 84 24 58 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+760], 0
  01799	c6 84 24 59 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+761], 0
  017a1	c6 84 24 5a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+762], 0
  017a9	c6 84 24 5b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+763], 0
  017b1	c6 84 24 5c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+764], 0
  017b9	c6 84 24 5d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+765], 0
  017c1	c6 84 24 5e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+766], 0
  017c9	c6 84 24 5f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+767], 0
  017d1	c6 84 24 60 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+768], 0
  017d9	c6 84 24 61 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+769], 0
  017e1	c6 84 24 62 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+770], 0
  017e9	c6 84 24 63 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+771], 0
  017f1	c6 84 24 64 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+772], 0
  017f9	c6 84 24 65 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+773], 0
  01801	c6 84 24 66 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+774], 0
  01809	c6 84 24 67 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+775], 0
  01811	c6 84 24 68 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+776], 0
  01819	c6 84 24 69 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+777], 0
  01821	c6 84 24 6a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+778], 0
  01829	c6 84 24 6b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+779], 0
  01831	c6 84 24 6c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+780], 0
  01839	c6 84 24 6d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+781], 0
  01841	c6 84 24 6e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+782], 0
  01849	c6 84 24 6f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+783], 0
  01851	c6 84 24 70 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+784], 0
  01859	c6 84 24 71 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+785], 0
  01861	c6 84 24 72 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+786], 0
  01869	c6 84 24 73 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+787], 0
  01871	c6 84 24 74 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+788], 0
  01879	c6 84 24 75 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+789], 0
  01881	c6 84 24 76 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+790], 0
  01889	c6 84 24 77 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+791], 0
  01891	c6 84 24 78 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+792], 0
  01899	c6 84 24 79 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+793], 0
  018a1	c6 84 24 7a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+794], 0
  018a9	c6 84 24 7b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+795], 0
  018b1	c6 84 24 7c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+796], 0
  018b9	c6 84 24 7d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+797], 0
  018c1	c6 84 24 7e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+798], 0
  018c9	c6 84 24 7f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+799], 0
  018d1	c6 84 24 80 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+800], 0
  018d9	c6 84 24 81 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+801], 0
  018e1	c6 84 24 82 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+802], 0
  018e9	c6 84 24 83 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+803], 0
  018f1	c6 84 24 84 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+804], 0
  018f9	c6 84 24 85 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+805], 0
  01901	c6 84 24 86 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+806], 0
  01909	c6 84 24 87 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+807], 0
  01911	c6 84 24 88 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+808], 0
  01919	c6 84 24 89 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+809], 0
  01921	c6 84 24 8a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+810], 0
  01929	c6 84 24 8b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+811], 0
  01931	c6 84 24 8c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+812], 0
  01939	c6 84 24 8d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+813], 0
  01941	c6 84 24 8e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+814], 0
  01949	c6 84 24 8f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+815], 0
  01951	c6 84 24 90 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+816], 0
  01959	c6 84 24 91 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+817], 0
  01961	c6 84 24 92 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+818], 0
  01969	c6 84 24 93 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+819], 0
  01971	c6 84 24 94 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+820], 0
  01979	c6 84 24 95 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+821], 0
  01981	c6 84 24 96 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+822], 0
  01989	c6 84 24 97 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+823], 0
  01991	c6 84 24 98 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+824], 0
  01999	c6 84 24 99 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+825], 0
  019a1	c6 84 24 9a 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+826], 0
  019a9	c6 84 24 9b 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+827], 0
  019b1	c6 84 24 9c 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+828], 0
  019b9	c6 84 24 9d 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+829], 0
  019c1	c6 84 24 9e 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+830], 0
  019c9	c6 84 24 9f 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+831], 0
  019d1	c6 84 24 a0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+832], 0
  019d9	c6 84 24 a1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+833], 0
  019e1	c6 84 24 a2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+834], 0
  019e9	c6 84 24 a3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+835], 0
  019f1	c6 84 24 a4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+836], 0
  019f9	c6 84 24 a5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+837], 0
  01a01	c6 84 24 a6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+838], 0
  01a09	c6 84 24 a7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+839], 0
  01a11	c6 84 24 a8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+840], 0
  01a19	c6 84 24 a9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+841], 0
  01a21	c6 84 24 aa 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+842], 0
  01a29	c6 84 24 ab 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+843], 0
  01a31	c6 84 24 ac 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+844], 0
  01a39	c6 84 24 ad 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+845], 0
  01a41	c6 84 24 ae 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+846], 0
  01a49	c6 84 24 af 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+847], 0
  01a51	c6 84 24 b0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+848], 0
  01a59	c6 84 24 b1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+849], 0
  01a61	c6 84 24 b2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+850], 0
  01a69	c6 84 24 b3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+851], 0
  01a71	c6 84 24 b4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+852], 0
  01a79	c6 84 24 b5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+853], 0
  01a81	c6 84 24 b6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+854], 0
  01a89	c6 84 24 b7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+855], 0
  01a91	c6 84 24 b8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+856], 0
  01a99	c6 84 24 b9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+857], 0
  01aa1	c6 84 24 ba 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+858], 0
  01aa9	c6 84 24 bb 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+859], 0
  01ab1	c6 84 24 bc 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+860], 0
  01ab9	c6 84 24 bd 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+861], 0
  01ac1	c6 84 24 be 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+862], 0
  01ac9	c6 84 24 bf 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+863], 0
  01ad1	c6 84 24 c0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+864], 0
  01ad9	c6 84 24 c1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+865], 0
  01ae1	c6 84 24 c2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+866], 0
  01ae9	c6 84 24 c3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+867], 0
  01af1	c6 84 24 c4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+868], 0
  01af9	c6 84 24 c5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+869], 0
  01b01	c6 84 24 c6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+870], 0
  01b09	c6 84 24 c7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+871], 0
  01b11	c6 84 24 c8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+872], 0
  01b19	c6 84 24 c9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+873], 0
  01b21	c6 84 24 ca 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+874], 0
  01b29	c6 84 24 cb 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+875], 0
  01b31	c6 84 24 cc 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+876], 0
  01b39	c6 84 24 cd 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+877], 0
  01b41	c6 84 24 ce 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+878], 0
  01b49	c6 84 24 cf 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+879], 0
  01b51	c6 84 24 d0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+880], 0
  01b59	c6 84 24 d1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+881], 0
  01b61	c6 84 24 d2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+882], 0
  01b69	c6 84 24 d3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+883], 0
  01b71	c6 84 24 d4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+884], 0
  01b79	c6 84 24 d5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+885], 0
  01b81	c6 84 24 d6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+886], 0
  01b89	c6 84 24 d7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+887], 0
  01b91	c6 84 24 d8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+888], 0
  01b99	c6 84 24 d9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+889], 0
  01ba1	c6 84 24 da 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+890], 0
  01ba9	c6 84 24 db 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+891], 0
  01bb1	c6 84 24 dc 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+892], 0
  01bb9	c6 84 24 dd 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+893], 0
  01bc1	c6 84 24 de 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+894], 0
  01bc9	c6 84 24 df 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+895], 0
  01bd1	c6 84 24 e0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+896], 0
  01bd9	c6 84 24 e1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+897], 0
  01be1	c6 84 24 e2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+898], 0
  01be9	c6 84 24 e3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+899], 0
  01bf1	c6 84 24 e4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+900], 0
  01bf9	c6 84 24 e5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+901], 0
  01c01	c6 84 24 e6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+902], 0
  01c09	c6 84 24 e7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+903], 0
  01c11	c6 84 24 e8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+904], 0
  01c19	c6 84 24 e9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+905], 0
  01c21	c6 84 24 ea 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+906], 0
  01c29	c6 84 24 eb 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+907], 0
  01c31	c6 84 24 ec 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+908], 0
  01c39	c6 84 24 ed 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+909], 0
  01c41	c6 84 24 ee 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+910], 0
  01c49	c6 84 24 ef 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+911], 0
  01c51	c6 84 24 f0 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+912], 0
  01c59	c6 84 24 f1 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+913], 0
  01c61	c6 84 24 f2 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+914], 0
  01c69	c6 84 24 f3 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+915], 0
  01c71	c6 84 24 f4 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+916], 0
  01c79	c6 84 24 f5 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+917], 0
  01c81	c6 84 24 f6 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+918], 0
  01c89	c6 84 24 f7 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+919], 0
  01c91	c6 84 24 f8 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+920], 0
  01c99	c6 84 24 f9 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+921], 0
  01ca1	c6 84 24 fa 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+922], 0
  01ca9	c6 84 24 fb 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+923], 0
  01cb1	c6 84 24 fc 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+924], 0
  01cb9	c6 84 24 fd 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+925], 0
  01cc1	c6 84 24 fe 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+926], 0
  01cc9	c6 84 24 ff 03
	00 00 00	 mov	 BYTE PTR $T5[rsp+927], 0
  01cd1	c6 84 24 00 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+928], 0
  01cd9	c6 84 24 01 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+929], 0
  01ce1	c6 84 24 02 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+930], 0
  01ce9	c6 84 24 03 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+931], 0
  01cf1	c6 84 24 04 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+932], 0
  01cf9	c6 84 24 05 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+933], 0
  01d01	c6 84 24 06 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+934], 0
  01d09	c6 84 24 07 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+935], 0
  01d11	c6 84 24 08 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+936], 0
  01d19	c6 84 24 09 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+937], 0
  01d21	c6 84 24 0a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+938], 0
  01d29	c6 84 24 0b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+939], 0
  01d31	c6 84 24 0c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+940], 0
  01d39	c6 84 24 0d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+941], 0
  01d41	c6 84 24 0e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+942], 0
  01d49	c6 84 24 0f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+943], 0
  01d51	c6 84 24 10 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+944], 0
  01d59	c6 84 24 11 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+945], 0
  01d61	c6 84 24 12 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+946], 0
  01d69	c6 84 24 13 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+947], 0
  01d71	c6 84 24 14 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+948], 0
  01d79	c6 84 24 15 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+949], 0
  01d81	c6 84 24 16 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+950], 0
  01d89	c6 84 24 17 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+951], 0
  01d91	c6 84 24 18 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+952], 0
  01d99	c6 84 24 19 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+953], 0
  01da1	c6 84 24 1a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+954], 0
  01da9	c6 84 24 1b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+955], 0
  01db1	c6 84 24 1c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+956], 0
  01db9	c6 84 24 1d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+957], 0
  01dc1	c6 84 24 1e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+958], 0
  01dc9	c6 84 24 1f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+959], 0
  01dd1	c6 84 24 20 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+960], 0
  01dd9	c6 84 24 21 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+961], 0
  01de1	c6 84 24 22 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+962], 0
  01de9	c6 84 24 23 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+963], 0
  01df1	c6 84 24 24 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+964], 0
  01df9	c6 84 24 25 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+965], 0
  01e01	c6 84 24 26 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+966], 0
  01e09	c6 84 24 27 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+967], 0
  01e11	c6 84 24 28 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+968], 0
  01e19	c6 84 24 29 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+969], 0
  01e21	c6 84 24 2a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+970], 0
  01e29	c6 84 24 2b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+971], 0
  01e31	c6 84 24 2c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+972], 0
  01e39	c6 84 24 2d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+973], 0
  01e41	c6 84 24 2e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+974], 0
  01e49	c6 84 24 2f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+975], 0
  01e51	c6 84 24 30 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+976], 0
  01e59	c6 84 24 31 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+977], 0
  01e61	c6 84 24 32 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+978], 0
  01e69	c6 84 24 33 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+979], 0
  01e71	c6 84 24 34 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+980], 0
  01e79	c6 84 24 35 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+981], 0
  01e81	c6 84 24 36 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+982], 0
  01e89	c6 84 24 37 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+983], 0
  01e91	c6 84 24 38 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+984], 0
  01e99	c6 84 24 39 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+985], 0
  01ea1	c6 84 24 3a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+986], 0
  01ea9	c6 84 24 3b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+987], 0
  01eb1	c6 84 24 3c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+988], 0
  01eb9	c6 84 24 3d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+989], 0
  01ec1	c6 84 24 3e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+990], 0
  01ec9	c6 84 24 3f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+991], 0
  01ed1	c6 84 24 40 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+992], 0
  01ed9	c6 84 24 41 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+993], 0
  01ee1	c6 84 24 42 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+994], 0
  01ee9	c6 84 24 43 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+995], 0
  01ef1	c6 84 24 44 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+996], 0
  01ef9	c6 84 24 45 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+997], 0
  01f01	c6 84 24 46 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+998], 0
  01f09	c6 84 24 47 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+999], 0
  01f11	c6 84 24 48 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1000], 0
  01f19	c6 84 24 49 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1001], 0
  01f21	c6 84 24 4a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1002], 0
  01f29	c6 84 24 4b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1003], 0
  01f31	c6 84 24 4c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1004], 0
  01f39	c6 84 24 4d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1005], 0
  01f41	c6 84 24 4e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1006], 0
  01f49	c6 84 24 4f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1007], 0
  01f51	c6 84 24 50 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1008], 0
  01f59	c6 84 24 51 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1009], 0
  01f61	c6 84 24 52 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1010], 0
  01f69	c6 84 24 53 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1011], 0
  01f71	c6 84 24 54 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1012], 0
  01f79	c6 84 24 55 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1013], 0
  01f81	c6 84 24 56 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1014], 0
  01f89	c6 84 24 57 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1015], 0
  01f91	c6 84 24 58 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1016], 0
  01f99	c6 84 24 59 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1017], 0
  01fa1	c6 84 24 5a 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1018], 0
  01fa9	c6 84 24 5b 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1019], 0
  01fb1	c6 84 24 5c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1020], 0
  01fb9	c6 84 24 5d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1021], 0
  01fc1	c6 84 24 5e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1022], 0
  01fc9	c6 84 24 5f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1023], 0
  01fd1	c6 84 24 60 04
	00 00 40	 mov	 BYTE PTR $T5[rsp+1024], 64 ; 00000040H
  01fd9	c6 84 24 61 04
	00 00 53	 mov	 BYTE PTR $T5[rsp+1025], 83 ; 00000053H
  01fe1	c6 84 24 62 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1026], 72 ; 00000048H
  01fe9	c6 84 24 63 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1027], 131 ; 00000083H
  01ff1	c6 84 24 64 04
	00 00 ec	 mov	 BYTE PTR $T5[rsp+1028], 236 ; 000000ecH
  01ff9	c6 84 24 65 04
	00 00 70	 mov	 BYTE PTR $T5[rsp+1029], 112 ; 00000070H
  02001	c6 84 24 66 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1030], 72 ; 00000048H
  02009	c6 84 24 67 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1031], 139 ; 0000008bH
  02011	c6 84 24 68 04
	00 00 d9	 mov	 BYTE PTR $T5[rsp+1032], 217 ; 000000d9H
  02019	c6 84 24 69 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1033], 72 ; 00000048H
  02021	c6 84 24 6a 04
	00 00 85	 mov	 BYTE PTR $T5[rsp+1034], 133 ; 00000085H
  02029	c6 84 24 6b 04
	00 00 c9	 mov	 BYTE PTR $T5[rsp+1035], 201 ; 000000c9H
  02031	c6 84 24 6c 04
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1036], 15
  02039	c6 84 24 6d 04
	00 00 84	 mov	 BYTE PTR $T5[rsp+1037], 132 ; 00000084H
  02041	c6 84 24 6e 04
	00 00 a1	 mov	 BYTE PTR $T5[rsp+1038], 161 ; 000000a1H
  02049	c6 84 24 6f 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1039], 2
  02051	c6 84 24 70 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1040], 0
  02059	c6 84 24 71 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1041], 0
  02061	c6 84 24 72 04
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1042], 255 ; 000000ffH
  02069	c6 84 24 73 04
	00 00 15	 mov	 BYTE PTR $T5[rsp+1043], 21
  02071	c6 84 24 74 04
	00 00 08	 mov	 BYTE PTR $T5[rsp+1044], 8
  02079	c6 84 24 75 04
	00 00 20	 mov	 BYTE PTR $T5[rsp+1045], 32 ; 00000020H
  02081	c6 84 24 76 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1046], 0
  02089	c6 84 24 77 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1047], 0
  02091	c6 84 24 78 04
	00 00 3c	 mov	 BYTE PTR $T5[rsp+1048], 60 ; 0000003cH
  02099	c6 84 24 79 04
	00 00 01	 mov	 BYTE PTR $T5[rsp+1049], 1
  020a1	c6 84 24 7a 04
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1050], 15
  020a9	c6 84 24 7b 04
	00 00 85	 mov	 BYTE PTR $T5[rsp+1051], 133 ; 00000085H
  020b1	c6 84 24 7c 04
	00 00 93	 mov	 BYTE PTR $T5[rsp+1052], 147 ; 00000093H
  020b9	c6 84 24 7d 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1053], 2
  020c1	c6 84 24 7e 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1054], 0
  020c9	c6 84 24 7f 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1055], 0
  020d1	c6 84 24 80 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1056], 139 ; 0000008bH
  020d9	c6 84 24 81 04
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1057], 75 ; 0000004bH
  020e1	c6 84 24 82 04
	00 00 04	 mov	 BYTE PTR $T5[rsp+1058], 4
  020e9	c6 84 24 83 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1059], 72 ; 00000048H
  020f1	c6 84 24 84 04
	00 00 89	 mov	 BYTE PTR $T5[rsp+1060], 137 ; 00000089H
  020f9	c6 84 24 85 04
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1061], 124 ; 0000007cH
  02101	c6 84 24 86 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1062], 36 ; 00000024H
  02109	c6 84 24 87 04
	00 00 68	 mov	 BYTE PTR $T5[rsp+1063], 104 ; 00000068H
  02111	c6 84 24 88 04
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1064], 76 ; 0000004cH
  02119	c6 84 24 89 04
	00 00 89	 mov	 BYTE PTR $T5[rsp+1065], 137 ; 00000089H
  02121	c6 84 24 8a 04
	00 00 64	 mov	 BYTE PTR $T5[rsp+1066], 100 ; 00000064H
  02129	c6 84 24 8b 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1067], 36 ; 00000024H
  02131	c6 84 24 8c 04
	00 00 60	 mov	 BYTE PTR $T5[rsp+1068], 96 ; 00000060H
  02139	c6 84 24 8d 04
	00 00 45	 mov	 BYTE PTR $T5[rsp+1069], 69 ; 00000045H
  02141	c6 84 24 8e 04
	00 00 33	 mov	 BYTE PTR $T5[rsp+1070], 51 ; 00000033H
  02149	c6 84 24 8f 04
	00 00 e4	 mov	 BYTE PTR $T5[rsp+1071], 228 ; 000000e4H
  02151	c6 84 24 90 04
	00 00 66	 mov	 BYTE PTR $T5[rsp+1072], 102 ; 00000066H
  02159	c6 84 24 91 04
	00 00 44	 mov	 BYTE PTR $T5[rsp+1073], 68 ; 00000044H
  02161	c6 84 24 92 04
	00 00 89	 mov	 BYTE PTR $T5[rsp+1074], 137 ; 00000089H
  02169	c6 84 24 93 04
	00 00 63	 mov	 BYTE PTR $T5[rsp+1075], 99 ; 00000063H
  02171	c6 84 24 94 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1076], 2
  02179	c6 84 24 95 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1077], 131 ; 00000083H
  02181	c6 84 24 96 04
	00 00 e9	 mov	 BYTE PTR $T5[rsp+1078], 233 ; 000000e9H
  02189	c6 84 24 97 04
	00 00 01	 mov	 BYTE PTR $T5[rsp+1079], 1
  02191	c6 84 24 98 04
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1080], 15
  02199	c6 84 24 99 04
	00 00 84	 mov	 BYTE PTR $T5[rsp+1081], 132 ; 00000084H
  021a1	c6 84 24 9a 04
	00 00 39	 mov	 BYTE PTR $T5[rsp+1082], 57 ; 00000039H
  021a9	c6 84 24 9b 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1083], 2
  021b1	c6 84 24 9c 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1084], 0
  021b9	c6 84 24 9d 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1085], 0
  021c1	c6 84 24 9e 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1086], 131 ; 00000083H
  021c9	c6 84 24 9f 04
	00 00 e9	 mov	 BYTE PTR $T5[rsp+1087], 233 ; 000000e9H
  021d1	c6 84 24 a0 04
	00 00 01	 mov	 BYTE PTR $T5[rsp+1088], 1
  021d9	c6 84 24 a1 04
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1089], 15
  021e1	c6 84 24 a2 04
	00 00 84	 mov	 BYTE PTR $T5[rsp+1090], 132 ; 00000084H
  021e9	c6 84 24 a3 04
	00 00 03	 mov	 BYTE PTR $T5[rsp+1091], 3
  021f1	c6 84 24 a4 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1092], 2
  021f9	c6 84 24 a5 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1093], 0
  02201	c6 84 24 a6 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1094], 0
  02209	c6 84 24 a7 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1095], 131 ; 00000083H
  02211	c6 84 24 a8 04
	00 00 e9	 mov	 BYTE PTR $T5[rsp+1096], 233 ; 000000e9H
  02219	c6 84 24 a9 04
	00 00 01	 mov	 BYTE PTR $T5[rsp+1097], 1
  02221	c6 84 24 aa 04
	00 00 74	 mov	 BYTE PTR $T5[rsp+1098], 116 ; 00000074H
  02229	c6 84 24 ab 04
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1099], 124 ; 0000007cH
  02231	c6 84 24 ac 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1100], 131 ; 00000083H
  02239	c6 84 24 ad 04
	00 00 f9	 mov	 BYTE PTR $T5[rsp+1101], 249 ; 000000f9H
  02241	c6 84 24 ae 04
	00 00 01	 mov	 BYTE PTR $T5[rsp+1102], 1
  02249	c6 84 24 af 04
	00 00 74	 mov	 BYTE PTR $T5[rsp+1103], 116 ; 00000074H
  02251	c6 84 24 b0 04
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1104], 30
  02259	c6 84 24 b1 04
	00 00 44	 mov	 BYTE PTR $T5[rsp+1105], 68 ; 00000044H
  02261	c6 84 24 b2 04
	00 00 88	 mov	 BYTE PTR $T5[rsp+1106], 136 ; 00000088H
  02269	c6 84 24 b3 04
	00 00 23	 mov	 BYTE PTR $T5[rsp+1107], 35 ; 00000023H
  02271	c6 84 24 b4 04
	00 00 b8	 mov	 BYTE PTR $T5[rsp+1108], 184 ; 000000b8H
  02279	c6 84 24 b5 04
	00 00 04	 mov	 BYTE PTR $T5[rsp+1109], 4
  02281	c6 84 24 b6 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1110], 0
  02289	c6 84 24 b7 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1111], 0
  02291	c6 84 24 b8 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1112], 0
  02299	c6 84 24 b9 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1113], 72 ; 00000048H
  022a1	c6 84 24 ba 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1114], 139 ; 0000008bH
  022a9	c6 84 24 bb 04
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1115], 124 ; 0000007cH
  022b1	c6 84 24 bc 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1116], 36 ; 00000024H
  022b9	c6 84 24 bd 04
	00 00 68	 mov	 BYTE PTR $T5[rsp+1117], 104 ; 00000068H
  022c1	c6 84 24 be 04
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1118], 76 ; 0000004cH
  022c9	c6 84 24 bf 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1119], 139 ; 0000008bH
  022d1	c6 84 24 c0 04
	00 00 64	 mov	 BYTE PTR $T5[rsp+1120], 100 ; 00000064H
  022d9	c6 84 24 c1 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1121], 36 ; 00000024H
  022e1	c6 84 24 c2 04
	00 00 60	 mov	 BYTE PTR $T5[rsp+1122], 96 ; 00000060H
  022e9	c6 84 24 c3 04
	00 00 66	 mov	 BYTE PTR $T5[rsp+1123], 102 ; 00000066H
  022f1	c6 84 24 c4 04
	00 00 89	 mov	 BYTE PTR $T5[rsp+1124], 137 ; 00000089H
  022f9	c6 84 24 c5 04
	00 00 43	 mov	 BYTE PTR $T5[rsp+1125], 67 ; 00000043H
  02301	c6 84 24 c6 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1126], 2
  02309	c6 84 24 c7 04
	00 00 33	 mov	 BYTE PTR $T5[rsp+1127], 51 ; 00000033H
  02311	c6 84 24 c8 04
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1128], 192 ; 000000c0H
  02319	c6 84 24 c9 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1129], 72 ; 00000048H
  02321	c6 84 24 ca 04
	00 00 83	 mov	 BYTE PTR $T5[rsp+1130], 131 ; 00000083H
  02329	c6 84 24 cb 04
	00 00 c4	 mov	 BYTE PTR $T5[rsp+1131], 196 ; 000000c4H
  02331	c6 84 24 cc 04
	00 00 70	 mov	 BYTE PTR $T5[rsp+1132], 112 ; 00000070H
  02339	c6 84 24 cd 04
	00 00 5b	 mov	 BYTE PTR $T5[rsp+1133], 91 ; 0000005bH
  02341	c6 84 24 ce 04
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1134], 195 ; 000000c3H
  02349	c6 84 24 cf 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1135], 139 ; 0000008bH
  02351	c6 84 24 d0 04
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1136], 75 ; 0000004bH
  02359	c6 84 24 d1 04
	00 00 18	 mov	 BYTE PTR $T5[rsp+1137], 24
  02361	c6 84 24 d2 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1138], 72 ; 00000048H
  02369	c6 84 24 d3 04
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1139], 141 ; 0000008dH
  02371	c6 84 24 d4 04
	00 00 94	 mov	 BYTE PTR $T5[rsp+1140], 148 ; 00000094H
  02379	c6 84 24 d5 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1141], 36 ; 00000024H
  02381	c6 84 24 d6 04
	00 00 80	 mov	 BYTE PTR $T5[rsp+1142], 128 ; 00000080H
  02389	c6 84 24 d7 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1143], 0
  02391	c6 84 24 d8 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1144], 0
  02399	c6 84 24 d9 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1145], 0
  023a1	c6 84 24 da 04
	00 00 44	 mov	 BYTE PTR $T5[rsp+1146], 68 ; 00000044H
  023a9	c6 84 24 db 04
	00 00 89	 mov	 BYTE PTR $T5[rsp+1147], 137 ; 00000089H
  023b1	c6 84 24 dc 04
	00 00 a4	 mov	 BYTE PTR $T5[rsp+1148], 164 ; 000000a4H
  023b9	c6 84 24 dd 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1149], 36 ; 00000024H
  023c1	c6 84 24 de 04
	00 00 80	 mov	 BYTE PTR $T5[rsp+1150], 128 ; 00000080H
  023c9	c6 84 24 df 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1151], 0
  023d1	c6 84 24 e0 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1152], 0
  023d9	c6 84 24 e1 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1153], 0
  023e1	c6 84 24 e2 04
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1154], 232 ; 000000e8H
  023e9	c6 84 24 e3 04
	00 00 99	 mov	 BYTE PTR $T5[rsp+1155], 153 ; 00000099H
  023f1	c6 84 24 e4 04
	00 00 0c	 mov	 BYTE PTR $T5[rsp+1156], 12
  023f9	c6 84 24 e5 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1157], 0
  02401	c6 84 24 e6 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1158], 0
  02409	c6 84 24 e7 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1159], 72 ; 00000048H
  02411	c6 84 24 e8 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1160], 139 ; 0000008bH
  02419	c6 84 24 e9 04
	00 00 f8	 mov	 BYTE PTR $T5[rsp+1161], 248 ; 000000f8H
  02421	c6 84 24 ea 04
	00 00 44	 mov	 BYTE PTR $T5[rsp+1162], 68 ; 00000044H
  02429	c6 84 24 eb 04
	00 00 39	 mov	 BYTE PTR $T5[rsp+1163], 57 ; 00000039H
  02431	c6 84 24 ec 04
	00 00 a4	 mov	 BYTE PTR $T5[rsp+1164], 164 ; 000000a4H
  02439	c6 84 24 ed 04
	00 00 24	 mov	 BYTE PTR $T5[rsp+1165], 36 ; 00000024H
  02441	c6 84 24 ee 04
	00 00 80	 mov	 BYTE PTR $T5[rsp+1166], 128 ; 00000080H
  02449	c6 84 24 ef 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1167], 0
  02451	c6 84 24 f0 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1168], 0
  02459	c6 84 24 f1 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1169], 0
  02461	c6 84 24 f2 04
	00 00 7d	 mov	 BYTE PTR $T5[rsp+1170], 125 ; 0000007dH
  02469	c6 84 24 f3 04
	00 00 0a	 mov	 BYTE PTR $T5[rsp+1171], 10
  02471	c6 84 24 f4 04
	00 00 b8	 mov	 BYTE PTR $T5[rsp+1172], 184 ; 000000b8H
  02479	c6 84 24 f5 04
	00 00 02	 mov	 BYTE PTR $T5[rsp+1173], 2
  02481	c6 84 24 f6 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1174], 0
  02489	c6 84 24 f7 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1175], 0
  02491	c6 84 24 f8 04
	00 00 00	 mov	 BYTE PTR $T5[rsp+1176], 0
  02499	c6 84 24 f9 04
	00 00 44	 mov	 BYTE PTR $T5[rsp+1177], 68 ; 00000044H
  024a1	c6 84 24 fa 04
	00 00 88	 mov	 BYTE PTR $T5[rsp+1178], 136 ; 00000088H
  024a9	c6 84 24 fb 04
	00 00 23	 mov	 BYTE PTR $T5[rsp+1179], 35 ; 00000023H
  024b1	c6 84 24 fc 04
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1180], 235 ; 000000ebH
  024b9	c6 84 24 fd 04
	00 00 bb	 mov	 BYTE PTR $T5[rsp+1181], 187 ; 000000bbH
  024c1	c6 84 24 fe 04
	00 00 48	 mov	 BYTE PTR $T5[rsp+1182], 72 ; 00000048H
  024c9	c6 84 24 ff 04
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1183], 139 ; 0000008bH
  024d1	c6 84 24 00 05
	00 00 cf	 mov	 BYTE PTR $T5[rsp+1184], 207 ; 000000cfH
  024d9	c6 84 24 01 05
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1185], 232 ; 000000e8H
  024e1	c6 84 24 02 05
	00 00 10	 mov	 BYTE PTR $T5[rsp+1186], 16
  024e9	c6 84 24 03 05
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1187], 15
  024f1	c6 84 24 04 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1188], 0
  024f9	c6 84 24 05 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1189], 0
  02501	c6 84 24 06 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1190], 72 ; 00000048H
  02509	c6 84 24 07 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1191], 139 ; 0000008bH
  02511	c6 84 24 08 05
	00 00 cf	 mov	 BYTE PTR $T5[rsp+1192], 207 ; 000000cfH
  02519	c6 84 24 09 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1193], 72 ; 00000048H
  02521	c6 84 24 0a 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1194], 137 ; 00000089H
  02529	c6 84 24 0b 05
	00 00 43	 mov	 BYTE PTR $T5[rsp+1195], 67 ; 00000043H
  02531	c6 84 24 0c 05
	00 00 28	 mov	 BYTE PTR $T5[rsp+1196], 40 ; 00000028H
  02539	c6 84 24 0d 05
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1197], 255 ; 000000ffH
  02541	c6 84 24 0e 05
	00 00 15	 mov	 BYTE PTR $T5[rsp+1198], 21
  02549	c6 84 24 0f 05
	00 00 75	 mov	 BYTE PTR $T5[rsp+1199], 117 ; 00000075H
  02551	c6 84 24 10 05
	00 00 1f	 mov	 BYTE PTR $T5[rsp+1200], 31
  02559	c6 84 24 11 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1201], 0
  02561	c6 84 24 12 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1202], 0
  02569	c6 84 24 13 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1203], 72 ; 00000048H
  02571	c6 84 24 14 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1204], 139 ; 0000008bH
  02579	c6 84 24 15 05
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1205], 124 ; 0000007cH
  02581	c6 84 24 16 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1206], 36 ; 00000024H
  02589	c6 84 24 17 05
	00 00 68	 mov	 BYTE PTR $T5[rsp+1207], 104 ; 00000068H
  02591	c6 84 24 18 05
	00 00 33	 mov	 BYTE PTR $T5[rsp+1208], 51 ; 00000033H
  02599	c6 84 24 19 05
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1209], 192 ; 000000c0H
  025a1	c6 84 24 1a 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1210], 76 ; 0000004cH
  025a9	c6 84 24 1b 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1211], 139 ; 0000008bH
  025b1	c6 84 24 1c 05
	00 00 64	 mov	 BYTE PTR $T5[rsp+1212], 100 ; 00000064H
  025b9	c6 84 24 1d 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1213], 36 ; 00000024H
  025c1	c6 84 24 1e 05
	00 00 60	 mov	 BYTE PTR $T5[rsp+1214], 96 ; 00000060H
  025c9	c6 84 24 1f 05
	00 00 c6	 mov	 BYTE PTR $T5[rsp+1215], 198 ; 000000c6H
  025d1	c6 84 24 20 05
	00 00 03	 mov	 BYTE PTR $T5[rsp+1216], 3
  025d9	c6 84 24 21 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1217], 1
  025e1	c6 84 24 22 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1218], 72 ; 00000048H
  025e9	c6 84 24 23 05
	00 00 83	 mov	 BYTE PTR $T5[rsp+1219], 131 ; 00000083H
  025f1	c6 84 24 24 05
	00 00 c4	 mov	 BYTE PTR $T5[rsp+1220], 196 ; 000000c4H
  025f9	c6 84 24 25 05
	00 00 70	 mov	 BYTE PTR $T5[rsp+1221], 112 ; 00000070H
  02601	c6 84 24 26 05
	00 00 5b	 mov	 BYTE PTR $T5[rsp+1222], 91 ; 0000005bH
  02609	c6 84 24 27 05
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1223], 195 ; 000000c3H
  02611	c6 84 24 28 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1224], 72 ; 00000048H
  02619	c6 84 24 29 05
	00 00 63	 mov	 BYTE PTR $T5[rsp+1225], 99 ; 00000063H
  02621	c6 84 24 2a 05
	00 00 7b	 mov	 BYTE PTR $T5[rsp+1226], 123 ; 0000007bH
  02629	c6 84 24 2b 05
	00 00 18	 mov	 BYTE PTR $T5[rsp+1227], 24
  02631	c6 84 24 2c 05
	00 00 85	 mov	 BYTE PTR $T5[rsp+1228], 133 ; 00000085H
  02639	c6 84 24 2d 05
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1229], 255 ; 000000ffH
  02641	c6 84 24 2e 05
	00 00 75	 mov	 BYTE PTR $T5[rsp+1230], 117 ; 00000075H
  02649	c6 84 24 2f 05
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1231], 30
  02651	c6 84 24 30 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1232], 72 ; 00000048H
  02659	c6 84 24 31 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1233], 139 ; 0000008bH
  02661	c6 84 24 32 05
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1234], 124 ; 0000007cH
  02669	c6 84 24 33 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1235], 36 ; 00000024H
  02671	c6 84 24 34 05
	00 00 68	 mov	 BYTE PTR $T5[rsp+1236], 104 ; 00000068H
  02679	c6 84 24 35 05
	00 00 b8	 mov	 BYTE PTR $T5[rsp+1237], 184 ; 000000b8H
  02681	c6 84 24 36 05
	00 00 05	 mov	 BYTE PTR $T5[rsp+1238], 5
  02689	c6 84 24 37 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1239], 0
  02691	c6 84 24 38 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1240], 0
  02699	c6 84 24 39 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1241], 0
  026a1	c6 84 24 3a 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1242], 76 ; 0000004cH
  026a9	c6 84 24 3b 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1243], 139 ; 0000008bH
  026b1	c6 84 24 3c 05
	00 00 64	 mov	 BYTE PTR $T5[rsp+1244], 100 ; 00000064H
  026b9	c6 84 24 3d 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1245], 36 ; 00000024H
  026c1	c6 84 24 3e 05
	00 00 60	 mov	 BYTE PTR $T5[rsp+1246], 96 ; 00000060H
  026c9	c6 84 24 3f 05
	00 00 66	 mov	 BYTE PTR $T5[rsp+1247], 102 ; 00000066H
  026d1	c6 84 24 40 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1248], 137 ; 00000089H
  026d9	c6 84 24 41 05
	00 00 43	 mov	 BYTE PTR $T5[rsp+1249], 67 ; 00000043H
  026e1	c6 84 24 42 05
	00 00 02	 mov	 BYTE PTR $T5[rsp+1250], 2
  026e9	c6 84 24 43 05
	00 00 33	 mov	 BYTE PTR $T5[rsp+1251], 51 ; 00000033H
  026f1	c6 84 24 44 05
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1252], 192 ; 000000c0H
  026f9	c6 84 24 45 05
	00 00 c6	 mov	 BYTE PTR $T5[rsp+1253], 198 ; 000000c6H
  02701	c6 84 24 46 05
	00 00 03	 mov	 BYTE PTR $T5[rsp+1254], 3
  02709	c6 84 24 47 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1255], 1
  02711	c6 84 24 48 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1256], 72 ; 00000048H
  02719	c6 84 24 49 05
	00 00 83	 mov	 BYTE PTR $T5[rsp+1257], 131 ; 00000083H
  02721	c6 84 24 4a 05
	00 00 c4	 mov	 BYTE PTR $T5[rsp+1258], 196 ; 000000c4H
  02729	c6 84 24 4b 05
	00 00 70	 mov	 BYTE PTR $T5[rsp+1259], 112 ; 00000070H
  02731	c6 84 24 4c 05
	00 00 5b	 mov	 BYTE PTR $T5[rsp+1260], 91 ; 0000005bH
  02739	c6 84 24 4d 05
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1261], 195 ; 000000c3H
  02741	c6 84 24 4e 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1262], 72 ; 00000048H
  02749	c6 84 24 4f 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1263], 139 ; 0000008bH
  02751	c6 84 24 50 05
	00 00 93	 mov	 BYTE PTR $T5[rsp+1264], 147 ; 00000093H
  02759	c6 84 24 51 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1265], 72 ; 00000048H
  02761	c6 84 24 52 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1266], 1
  02769	c6 84 24 53 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1267], 0
  02771	c6 84 24 54 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1268], 0
  02779	c6 84 24 55 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1269], 72 ; 00000048H
  02781	c6 84 24 56 05
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1270], 141 ; 0000008dH
  02789	c6 84 24 57 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1271], 76 ; 0000004cH
  02791	c6 84 24 58 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1272], 36 ; 00000024H
  02799	c6 84 24 59 05
	00 00 40	 mov	 BYTE PTR $T5[rsp+1273], 64 ; 00000040H
  027a1	c6 84 24 5a 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1274], 76 ; 0000004cH
  027a9	c6 84 24 5b 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1275], 137 ; 00000089H
  027b1	c6 84 24 5c 05
	00 00 74	 mov	 BYTE PTR $T5[rsp+1276], 116 ; 00000074H
  027b9	c6 84 24 5d 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1277], 36 ; 00000024H
  027c1	c6 84 24 5e 05
	00 00 58	 mov	 BYTE PTR $T5[rsp+1278], 88 ; 00000058H
  027c9	c6 84 24 5f 05
	00 00 49	 mov	 BYTE PTR $T5[rsp+1279], 73 ; 00000049H
  027d1	c6 84 24 60 05
	00 00 c7	 mov	 BYTE PTR $T5[rsp+1280], 199 ; 000000c7H
  027d9	c6 84 24 61 05
	00 00 c6	 mov	 BYTE PTR $T5[rsp+1281], 198 ; 000000c6H
  027e1	c6 84 24 62 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1282], 1
  027e9	c6 84 24 63 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1283], 0
  027f1	c6 84 24 64 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1284], 0
  027f9	c6 84 24 65 05
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1285], 192 ; 000000c0H
  02801	c6 84 24 66 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1286], 76 ; 0000004cH
  02809	c6 84 24 67 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1287], 137 ; 00000089H
  02811	c6 84 24 68 05
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1288], 124 ; 0000007cH
  02819	c6 84 24 69 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1289], 36 ; 00000024H
  02821	c6 84 24 6a 05
	00 00 50	 mov	 BYTE PTR $T5[rsp+1290], 80 ; 00000050H
  02829	c6 84 24 6b 05
	00 00 4d	 mov	 BYTE PTR $T5[rsp+1291], 77 ; 0000004dH
  02831	c6 84 24 6c 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1292], 139 ; 0000008bH
  02839	c6 84 24 6d 05
	00 00 fc	 mov	 BYTE PTR $T5[rsp+1293], 252 ; 000000fcH
  02841	c6 84 24 6e 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1294], 76 ; 0000004cH
  02849	c6 84 24 6f 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1295], 137 ; 00000089H
  02851	c6 84 24 70 05
	00 00 63	 mov	 BYTE PTR $T5[rsp+1296], 99 ; 00000063H
  02859	c6 84 24 71 05
	00 00 28	 mov	 BYTE PTR $T5[rsp+1297], 40 ; 00000028H
  02861	c6 84 24 72 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1298], 76 ; 0000004cH
  02869	c6 84 24 73 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1299], 137 ; 00000089H
  02871	c6 84 24 74 05
	00 00 a4	 mov	 BYTE PTR $T5[rsp+1300], 164 ; 000000a4H
  02879	c6 84 24 75 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1301], 36 ; 00000024H
  02881	c6 84 24 76 05
	00 00 80	 mov	 BYTE PTR $T5[rsp+1302], 128 ; 00000080H
  02889	c6 84 24 77 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1303], 0
  02891	c6 84 24 78 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1304], 0
  02899	c6 84 24 79 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1305], 0
  028a1	c6 84 24 7a 05
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1306], 255 ; 000000ffH
  028a9	c6 84 24 7b 05
	00 00 15	 mov	 BYTE PTR $T5[rsp+1307], 21
  028b1	c6 84 24 7c 05
	00 00 e0	 mov	 BYTE PTR $T5[rsp+1308], 224 ; 000000e0H
  028b9	c6 84 24 7d 05
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1309], 30
  028c1	c6 84 24 7e 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1310], 0
  028c9	c6 84 24 7f 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1311], 0
  028d1	c6 84 24 80 05
	00 00 41	 mov	 BYTE PTR $T5[rsp+1312], 65 ; 00000041H
  028d9	c6 84 24 81 05
	00 00 b0	 mov	 BYTE PTR $T5[rsp+1313], 176 ; 000000b0H
  028e1	c6 84 24 82 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1314], 1
  028e9	c6 84 24 83 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1315], 72 ; 00000048H
  028f1	c6 84 24 84 05
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1316], 141 ; 0000008dH
  028f9	c6 84 24 85 05
	00 00 54	 mov	 BYTE PTR $T5[rsp+1317], 84 ; 00000054H
  02901	c6 84 24 86 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1318], 36 ; 00000024H
  02909	c6 84 24 87 05
	00 00 40	 mov	 BYTE PTR $T5[rsp+1319], 64 ; 00000040H
  02911	c6 84 24 88 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1320], 72 ; 00000048H
  02919	c6 84 24 89 05
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1321], 141 ; 0000008dH
  02921	c6 84 24 8a 05
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1322], 76 ; 0000004cH
  02929	c6 84 24 8b 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1323], 36 ; 00000024H
  02931	c6 84 24 8c 05
	00 00 30	 mov	 BYTE PTR $T5[rsp+1324], 48 ; 00000030H
  02939	c6 84 24 8d 05
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1325], 255 ; 000000ffH
  02941	c6 84 24 8e 05
	00 00 15	 mov	 BYTE PTR $T5[rsp+1326], 21
  02949	c6 84 24 8f 05
	00 00 d5	 mov	 BYTE PTR $T5[rsp+1327], 213 ; 000000d5H
  02951	c6 84 24 90 05
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1328], 30
  02959	c6 84 24 91 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1329], 0
  02961	c6 84 24 92 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1330], 0
  02969	c6 84 24 93 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1331], 72 ; 00000048H
  02971	c6 84 24 94 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1332], 139 ; 0000008bH
  02979	c6 84 24 95 05
	00 00 cf	 mov	 BYTE PTR $T5[rsp+1333], 207 ; 000000cfH
  02981	c6 84 24 96 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1334], 72 ; 00000048H
  02989	c6 84 24 97 05
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1335], 141 ; 0000008dH
  02991	c6 84 24 98 05
	00 00 94	 mov	 BYTE PTR $T5[rsp+1336], 148 ; 00000094H
  02999	c6 84 24 99 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1337], 36 ; 00000024H
  029a1	c6 84 24 9a 05
	00 00 80	 mov	 BYTE PTR $T5[rsp+1338], 128 ; 00000080H
  029a9	c6 84 24 9b 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1339], 0
  029b1	c6 84 24 9c 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1340], 0
  029b9	c6 84 24 9d 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1341], 0
  029c1	c6 84 24 9e 05
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1342], 255 ; 000000ffH
  029c9	c6 84 24 9f 05
	00 00 15	 mov	 BYTE PTR $T5[rsp+1343], 21
  029d1	c6 84 24 a0 05
	00 00 ec	 mov	 BYTE PTR $T5[rsp+1344], 236 ; 000000ecH
  029d9	c6 84 24 a1 05
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1345], 30
  029e1	c6 84 24 a2 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1346], 0
  029e9	c6 84 24 a3 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1347], 0
  029f1	c6 84 24 a4 05
	00 00 85	 mov	 BYTE PTR $T5[rsp+1348], 133 ; 00000085H
  029f9	c6 84 24 a5 05
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1349], 192 ; 000000c0H
  02a01	c6 84 24 a6 05
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1350], 15
  02a09	c6 84 24 a7 05
	00 00 88	 mov	 BYTE PTR $T5[rsp+1351], 136 ; 00000088H
  02a11	c6 84 24 a8 05
	00 00 df	 mov	 BYTE PTR $T5[rsp+1352], 223 ; 000000dfH
  02a19	c6 84 24 a9 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1353], 0
  02a21	c6 84 24 aa 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1354], 0
  02a29	c6 84 24 ab 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1355], 0
  02a31	c6 84 24 ac 05
	00 00 65	 mov	 BYTE PTR $T5[rsp+1356], 101 ; 00000065H
  02a39	c6 84 24 ad 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1357], 72 ; 00000048H
  02a41	c6 84 24 ae 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1358], 139 ; 0000008bH
  02a49	c6 84 24 af 05
	00 00 0c	 mov	 BYTE PTR $T5[rsp+1359], 12
  02a51	c6 84 24 b0 05
	00 00 25	 mov	 BYTE PTR $T5[rsp+1360], 37 ; 00000025H
  02a59	c6 84 24 b1 05
	00 00 88	 mov	 BYTE PTR $T5[rsp+1361], 136 ; 00000088H
  02a61	c6 84 24 b2 05
	00 00 01	 mov	 BYTE PTR $T5[rsp+1362], 1
  02a69	c6 84 24 b3 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1363], 0
  02a71	c6 84 24 b4 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1364], 0
  02a79	c6 84 24 b5 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1365], 72 ; 00000048H
  02a81	c6 84 24 b6 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1366], 139 ; 0000008bH
  02a89	c6 84 24 b7 05
	00 00 94	 mov	 BYTE PTR $T5[rsp+1367], 148 ; 00000094H
  02a91	c6 84 24 b8 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1368], 36 ; 00000024H
  02a99	c6 84 24 b9 05
	00 00 80	 mov	 BYTE PTR $T5[rsp+1369], 128 ; 00000080H
  02aa1	c6 84 24 ba 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1370], 0
  02aa9	c6 84 24 bb 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1371], 0
  02ab1	c6 84 24 bc 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1372], 0
  02ab9	c6 84 24 bd 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1373], 72 ; 00000048H
  02ac1	c6 84 24 be 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1374], 137 ; 00000089H
  02ac9	c6 84 24 bf 05
	00 00 ac	 mov	 BYTE PTR $T5[rsp+1375], 172 ; 000000acH
  02ad1	c6 84 24 c0 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1376], 36 ; 00000024H
  02ad9	c6 84 24 c1 05
	00 00 88	 mov	 BYTE PTR $T5[rsp+1377], 136 ; 00000088H
  02ae1	c6 84 24 c2 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1378], 0
  02ae9	c6 84 24 c3 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1379], 0
  02af1	c6 84 24 c4 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1380], 0
  02af9	c6 84 24 c5 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1381], 72 ; 00000048H
  02b01	c6 84 24 c6 05
	00 00 85	 mov	 BYTE PTR $T5[rsp+1382], 133 ; 00000085H
  02b09	c6 84 24 c7 05
	00 00 c9	 mov	 BYTE PTR $T5[rsp+1383], 201 ; 000000c9H
  02b11	c6 84 24 c8 05
	00 00 75	 mov	 BYTE PTR $T5[rsp+1384], 117 ; 00000075H
  02b19	c6 84 24 c9 05
	00 00 05	 mov	 BYTE PTR $T5[rsp+1385], 5
  02b21	c6 84 24 ca 05
	00 00 49	 mov	 BYTE PTR $T5[rsp+1386], 73 ; 00000049H
  02b29	c6 84 24 cb 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1387], 139 ; 0000008bH
  02b31	c6 84 24 cc 05
	00 00 ee	 mov	 BYTE PTR $T5[rsp+1388], 238 ; 000000eeH
  02b39	c6 84 24 cd 05
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1389], 235 ; 000000ebH
  02b41	c6 84 24 ce 05
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1390], 30
  02b49	c6 84 24 cf 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1391], 72 ; 00000048H
  02b51	c6 84 24 d0 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1392], 139 ; 0000008bH
  02b59	c6 84 24 d1 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1393], 137 ; 00000089H
  02b61	c6 84 24 d2 05
	00 00 98	 mov	 BYTE PTR $T5[rsp+1394], 152 ; 00000098H
  02b69	c6 84 24 d3 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1395], 0
  02b71	c6 84 24 d4 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1396], 0
  02b79	c6 84 24 d5 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1397], 0
  02b81	c6 84 24 d6 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1398], 72 ; 00000048H
  02b89	c6 84 24 d7 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1399], 139 ; 0000008bH
  02b91	c6 84 24 d8 05
	00 00 84	 mov	 BYTE PTR $T5[rsp+1400], 132 ; 00000084H
  02b99	c6 84 24 d9 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1401], 36 ; 00000024H
  02ba1	c6 84 24 da 05
	00 00 80	 mov	 BYTE PTR $T5[rsp+1402], 128 ; 00000080H
  02ba9	c6 84 24 db 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1403], 0
  02bb1	c6 84 24 dc 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1404], 0
  02bb9	c6 84 24 dd 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1405], 0
  02bc1	c6 84 24 de 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1406], 72 ; 00000048H
  02bc9	c6 84 24 df 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1407], 139 ; 0000008bH
  02bd1	c6 84 24 e0 05
	00 00 69	 mov	 BYTE PTR $T5[rsp+1408], 105 ; 00000069H
  02bd9	c6 84 24 e1 05
	00 00 20	 mov	 BYTE PTR $T5[rsp+1409], 32 ; 00000020H
  02be1	c6 84 24 e2 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1410], 72 ; 00000048H
  02be9	c6 84 24 e3 05
	00 00 89	 mov	 BYTE PTR $T5[rsp+1411], 137 ; 00000089H
  02bf1	c6 84 24 e4 05
	00 00 41	 mov	 BYTE PTR $T5[rsp+1412], 65 ; 00000041H
  02bf9	c6 84 24 e5 05
	00 00 20	 mov	 BYTE PTR $T5[rsp+1413], 32 ; 00000020H
  02c01	c6 84 24 e6 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1414], 72 ; 00000048H
  02c09	c6 84 24 e7 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1415], 139 ; 0000008bH
  02c11	c6 84 24 e8 05
	00 00 42	 mov	 BYTE PTR $T5[rsp+1416], 66 ; 00000042H
  02c19	c6 84 24 e9 05
	00 00 28	 mov	 BYTE PTR $T5[rsp+1417], 40 ; 00000028H
  02c21	c6 84 24 ea 05
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1418], 15
  02c29	c6 84 24 eb 05
	00 00 22	 mov	 BYTE PTR $T5[rsp+1419], 34 ; 00000022H
  02c31	c6 84 24 ec 05
	00 00 d8	 mov	 BYTE PTR $T5[rsp+1420], 216 ; 000000d8H
  02c39	c6 84 24 ed 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1421], 72 ; 00000048H
  02c41	c6 84 24 ee 05
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1422], 139 ; 0000008bH
  02c49	c6 84 24 ef 05
	00 00 8c	 mov	 BYTE PTR $T5[rsp+1423], 140 ; 0000008cH
  02c51	c6 84 24 f0 05
	00 00 24	 mov	 BYTE PTR $T5[rsp+1424], 36 ; 00000024H
  02c59	c6 84 24 f1 05
	00 00 80	 mov	 BYTE PTR $T5[rsp+1425], 128 ; 00000080H
  02c61	c6 84 24 f2 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1426], 0
  02c69	c6 84 24 f3 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1427], 0
  02c71	c6 84 24 f4 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1428], 0
  02c79	c6 84 24 f5 05
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1429], 232 ; 000000e8H
  02c81	c6 84 24 f6 05
	00 00 16	 mov	 BYTE PTR $T5[rsp+1430], 22
  02c89	c6 84 24 f7 05
	00 00 0e	 mov	 BYTE PTR $T5[rsp+1431], 14
  02c91	c6 84 24 f8 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1432], 0
  02c99	c6 84 24 f9 05
	00 00 00	 mov	 BYTE PTR $T5[rsp+1433], 0
  02ca1	c6 84 24 fa 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1434], 72 ; 00000048H
  02ca9	c6 84 24 fb 05
	00 00 85	 mov	 BYTE PTR $T5[rsp+1435], 133 ; 00000085H
  02cb1	c6 84 24 fc 05
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1436], 192 ; 000000c0H
  02cb9	c6 84 24 fd 05
	00 00 74	 mov	 BYTE PTR $T5[rsp+1437], 116 ; 00000074H
  02cc1	c6 84 24 fe 05
	00 00 50	 mov	 BYTE PTR $T5[rsp+1438], 80 ; 00000050H
  02cc9	c6 84 24 ff 05
	00 00 48	 mov	 BYTE PTR $T5[rsp+1439], 72 ; 00000048H
  02cd1	c6 84 24 00 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1440], 137 ; 00000089H
  02cd9	c6 84 24 01 06
	00 00 b4	 mov	 BYTE PTR $T5[rsp+1441], 180 ; 000000b4H
  02ce1	c6 84 24 02 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1442], 36 ; 00000024H
  02ce9	c6 84 24 03 06
	00 00 90	 mov	 BYTE PTR $T5[rsp+1443], 144 ; 00000090H
  02cf1	c6 84 24 04 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1444], 0
  02cf9	c6 84 24 05 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1445], 0
  02d01	c6 84 24 06 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1446], 0
  02d09	c6 84 24 07 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1447], 72 ; 00000048H
  02d11	c6 84 24 08 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1448], 139 ; 0000008bH
  02d19	c6 84 24 09 06
	00 00 70	 mov	 BYTE PTR $T5[rsp+1449], 112 ; 00000070H
  02d21	c6 84 24 0a 06
	00 00 18	 mov	 BYTE PTR $T5[rsp+1450], 24
  02d29	c6 84 24 0b 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1451], 72 ; 00000048H
  02d31	c6 84 24 0c 06
	00 00 85	 mov	 BYTE PTR $T5[rsp+1452], 133 ; 00000085H
  02d39	c6 84 24 0d 06
	00 00 f6	 mov	 BYTE PTR $T5[rsp+1453], 246 ; 000000f6H
  02d41	c6 84 24 0e 06
	00 00 74	 mov	 BYTE PTR $T5[rsp+1454], 116 ; 00000074H
  02d49	c6 84 24 0f 06
	00 00 37	 mov	 BYTE PTR $T5[rsp+1455], 55 ; 00000037H
  02d51	c6 84 24 10 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1456], 72 ; 00000048H
  02d59	c6 84 24 11 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1457], 139 ; 0000008bH
  02d61	c6 84 24 12 06
	00 00 7e	 mov	 BYTE PTR $T5[rsp+1458], 126 ; 0000007eH
  02d69	c6 84 24 13 06
	00 00 10	 mov	 BYTE PTR $T5[rsp+1459], 16
  02d71	c6 84 24 14 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1460], 72 ; 00000048H
  02d79	c6 84 24 15 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1461], 131 ; 00000083H
  02d81	c6 84 24 16 06
	00 00 c6	 mov	 BYTE PTR $T5[rsp+1462], 198 ; 000000c6H
  02d89	c6 84 24 17 06
	00 00 10	 mov	 BYTE PTR $T5[rsp+1463], 16
  02d91	c6 84 24 18 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1464], 72 ; 00000048H
  02d99	c6 84 24 19 06
	00 00 3b	 mov	 BYTE PTR $T5[rsp+1465], 59 ; 0000003bH
  02da1	c6 84 24 1a 06
	00 00 fe	 mov	 BYTE PTR $T5[rsp+1466], 254 ; 000000feH
  02da9	c6 84 24 1b 06
	00 00 74	 mov	 BYTE PTR $T5[rsp+1467], 116 ; 00000074H
  02db1	c6 84 24 1c 06
	00 00 2a	 mov	 BYTE PTR $T5[rsp+1468], 42 ; 0000002aH
  02db9	c6 84 24 1d 06
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1469], 15
  02dc1	c6 84 24 1e 06
	00 00 1f	 mov	 BYTE PTR $T5[rsp+1470], 31
  02dc9	c6 84 24 1f 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1471], 0
  02dd1	c6 84 24 20 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1472], 72 ; 00000048H
  02dd9	c6 84 24 21 06
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1473], 141 ; 0000008dH
  02de1	c6 84 24 22 06
	00 00 4f	 mov	 BYTE PTR $T5[rsp+1474], 79 ; 0000004fH
  02de9	c6 84 24 23 06
	00 00 58	 mov	 BYTE PTR $T5[rsp+1475], 88 ; 00000058H
  02df1	c6 84 24 24 06
	00 00 41	 mov	 BYTE PTR $T5[rsp+1476], 65 ; 00000041H
  02df9	c6 84 24 25 06
	00 00 b0	 mov	 BYTE PTR $T5[rsp+1477], 176 ; 000000b0H
  02e01	c6 84 24 26 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1478], 1
  02e09	c6 84 24 27 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1479], 72 ; 00000048H
  02e11	c6 84 24 28 06
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1480], 141 ; 0000008dH
  02e19	c6 84 24 29 06
	00 00 54	 mov	 BYTE PTR $T5[rsp+1481], 84 ; 00000054H
  02e21	c6 84 24 2a 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1482], 36 ; 00000024H
  02e29	c6 84 24 2b 06
	00 00 30	 mov	 BYTE PTR $T5[rsp+1483], 48 ; 00000030H
  02e31	c6 84 24 2c 06
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1484], 255 ; 000000ffH
  02e39	c6 84 24 2d 06
	00 00 15	 mov	 BYTE PTR $T5[rsp+1485], 21
  02e41	c6 84 24 2e 06
	00 00 3e	 mov	 BYTE PTR $T5[rsp+1486], 62 ; 0000003eH
  02e49	c6 84 24 2f 06
	00 00 1e	 mov	 BYTE PTR $T5[rsp+1487], 30
  02e51	c6 84 24 30 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1488], 0
  02e59	c6 84 24 31 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1489], 0
  02e61	c6 84 24 32 06
	00 00 85	 mov	 BYTE PTR $T5[rsp+1490], 133 ; 00000085H
  02e69	c6 84 24 33 06
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1491], 192 ; 000000c0H
  02e71	c6 84 24 34 06
	00 00 74	 mov	 BYTE PTR $T5[rsp+1492], 116 ; 00000074H
  02e79	c6 84 24 35 06
	00 00 0a	 mov	 BYTE PTR $T5[rsp+1493], 10
  02e81	c6 84 24 36 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1494], 72 ; 00000048H
  02e89	c6 84 24 37 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1495], 139 ; 0000008bH
  02e91	c6 84 24 38 06
	00 00 3f	 mov	 BYTE PTR $T5[rsp+1496], 63 ; 0000003fH
  02e99	c6 84 24 39 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1497], 72 ; 00000048H
  02ea1	c6 84 24 3a 06
	00 00 3b	 mov	 BYTE PTR $T5[rsp+1498], 59 ; 0000003bH
  02ea9	c6 84 24 3b 06
	00 00 fe	 mov	 BYTE PTR $T5[rsp+1499], 254 ; 000000feH
  02eb1	c6 84 24 3c 06
	00 00 75	 mov	 BYTE PTR $T5[rsp+1500], 117 ; 00000075H
  02eb9	c6 84 24 3d 06
	00 00 e2	 mov	 BYTE PTR $T5[rsp+1501], 226 ; 000000e2H
  02ec1	c6 84 24 3e 06
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1502], 235 ; 000000ebH
  02ec9	c6 84 24 3f 06
	00 00 07	 mov	 BYTE PTR $T5[rsp+1503], 7
  02ed1	c6 84 24 40 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1504], 76 ; 0000004cH
  02ed9	c6 84 24 41 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1505], 139 ; 0000008bH
  02ee1	c6 84 24 42 06
	00 00 7f	 mov	 BYTE PTR $T5[rsp+1506], 127 ; 0000007fH
  02ee9	c6 84 24 43 06
	00 00 30	 mov	 BYTE PTR $T5[rsp+1507], 48 ; 00000030H
  02ef1	c6 84 24 44 06
	00 00 45	 mov	 BYTE PTR $T5[rsp+1508], 69 ; 00000045H
  02ef9	c6 84 24 45 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1509], 139 ; 0000008bH
  02f01	c6 84 24 46 06
	00 00 f4	 mov	 BYTE PTR $T5[rsp+1510], 244 ; 000000f4H
  02f09	c6 84 24 47 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1511], 72 ; 00000048H
  02f11	c6 84 24 48 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1512], 139 ; 0000008bH
  02f19	c6 84 24 49 06
	00 00 b4	 mov	 BYTE PTR $T5[rsp+1513], 180 ; 000000b4H
  02f21	c6 84 24 4a 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1514], 36 ; 00000024H
  02f29	c6 84 24 4b 06
	00 00 90	 mov	 BYTE PTR $T5[rsp+1515], 144 ; 00000090H
  02f31	c6 84 24 4c 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1516], 0
  02f39	c6 84 24 4d 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1517], 0
  02f41	c6 84 24 4e 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1518], 0
  02f49	c6 84 24 4f 06
	00 00 65	 mov	 BYTE PTR $T5[rsp+1519], 101 ; 00000065H
  02f51	c6 84 24 50 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1520], 72 ; 00000048H
  02f59	c6 84 24 51 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1521], 139 ; 0000008bH
  02f61	c6 84 24 52 06
	00 00 04	 mov	 BYTE PTR $T5[rsp+1522], 4
  02f69	c6 84 24 53 06
	00 00 25	 mov	 BYTE PTR $T5[rsp+1523], 37 ; 00000025H
  02f71	c6 84 24 54 06
	00 00 88	 mov	 BYTE PTR $T5[rsp+1524], 136 ; 00000088H
  02f79	c6 84 24 55 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1525], 1
  02f81	c6 84 24 56 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1526], 0
  02f89	c6 84 24 57 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1527], 0
  02f91	c6 84 24 58 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1528], 72 ; 00000048H
  02f99	c6 84 24 59 06
	00 00 85	 mov	 BYTE PTR $T5[rsp+1529], 133 ; 00000085H
  02fa1	c6 84 24 5a 06
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1530], 192 ; 000000c0H
  02fa9	c6 84 24 5b 06
	00 00 74	 mov	 BYTE PTR $T5[rsp+1531], 116 ; 00000074H
  02fb1	c6 84 24 5c 06
	00 00 12	 mov	 BYTE PTR $T5[rsp+1532], 18
  02fb9	c6 84 24 5d 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1533], 72 ; 00000048H
  02fc1	c6 84 24 5e 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1534], 139 ; 0000008bH
  02fc9	c6 84 24 5f 06
	00 00 80	 mov	 BYTE PTR $T5[rsp+1535], 128 ; 00000080H
  02fd1	c6 84 24 60 06
	00 00 98	 mov	 BYTE PTR $T5[rsp+1536], 152 ; 00000098H
  02fd9	c6 84 24 61 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1537], 0
  02fe1	c6 84 24 62 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1538], 0
  02fe9	c6 84 24 63 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1539], 0
  02ff1	c6 84 24 64 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1540], 72 ; 00000048H
  02ff9	c6 84 24 65 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1541], 137 ; 00000089H
  03001	c6 84 24 66 06
	00 00 68	 mov	 BYTE PTR $T5[rsp+1542], 104 ; 00000068H
  03009	c6 84 24 67 06
	00 00 20	 mov	 BYTE PTR $T5[rsp+1543], 32 ; 00000020H
  03011	c6 84 24 68 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1544], 72 ; 00000048H
  03019	c6 84 24 69 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1545], 139 ; 0000008bH
  03021	c6 84 24 6a 06
	00 00 45	 mov	 BYTE PTR $T5[rsp+1546], 69 ; 00000045H
  03029	c6 84 24 6b 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1547], 40 ; 00000028H
  03031	c6 84 24 6c 06
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1548], 15
  03039	c6 84 24 6d 06
	00 00 22	 mov	 BYTE PTR $T5[rsp+1549], 34 ; 00000022H
  03041	c6 84 24 6e 06
	00 00 d8	 mov	 BYTE PTR $T5[rsp+1550], 216 ; 000000d8H
  03049	c6 84 24 6f 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1551], 72 ; 00000048H
  03051	c6 84 24 70 06
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1552], 141 ; 0000008dH
  03059	c6 84 24 71 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1553], 76 ; 0000004cH
  03061	c6 84 24 72 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1554], 36 ; 00000024H
  03069	c6 84 24 73 06
	00 00 30	 mov	 BYTE PTR $T5[rsp+1555], 48 ; 00000030H
  03071	c6 84 24 74 06
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1556], 255 ; 000000ffH
  03079	c6 84 24 75 06
	00 00 15	 mov	 BYTE PTR $T5[rsp+1557], 21
  03081	c6 84 24 76 06
	00 00 fe	 mov	 BYTE PTR $T5[rsp+1558], 254 ; 000000feH
  03089	c6 84 24 77 06
	00 00 1d	 mov	 BYTE PTR $T5[rsp+1559], 29
  03091	c6 84 24 78 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1560], 0
  03099	c6 84 24 79 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1561], 0
  030a1	c6 84 24 7a 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1562], 72 ; 00000048H
  030a9	c6 84 24 7b 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1563], 139 ; 0000008bH
  030b1	c6 84 24 7c 06
	00 00 ac	 mov	 BYTE PTR $T5[rsp+1564], 172 ; 000000acH
  030b9	c6 84 24 7d 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1565], 36 ; 00000024H
  030c1	c6 84 24 7e 06
	00 00 88	 mov	 BYTE PTR $T5[rsp+1566], 136 ; 00000088H
  030c9	c6 84 24 7f 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1567], 0
  030d1	c6 84 24 80 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1568], 0
  030d9	c6 84 24 81 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1569], 0
  030e1	c6 84 24 82 06
	00 00 45	 mov	 BYTE PTR $T5[rsp+1570], 69 ; 00000045H
  030e9	c6 84 24 83 06
	00 00 85	 mov	 BYTE PTR $T5[rsp+1571], 133 ; 00000085H
  030f1	c6 84 24 84 06
	00 00 f6	 mov	 BYTE PTR $T5[rsp+1572], 246 ; 000000f6H
  030f9	c6 84 24 85 06
	00 00 78	 mov	 BYTE PTR $T5[rsp+1573], 120 ; 00000078H
  03101	c6 84 24 86 06
	00 00 04	 mov	 BYTE PTR $T5[rsp+1574], 4
  03109	c6 84 24 87 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1575], 76 ; 0000004cH
  03111	c6 84 24 88 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1576], 137 ; 00000089H
  03119	c6 84 24 89 06
	00 00 7b	 mov	 BYTE PTR $T5[rsp+1577], 123 ; 0000007bH
  03121	c6 84 24 8a 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1578], 40 ; 00000028H
  03129	c6 84 24 8b 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1579], 76 ; 0000004cH
  03131	c6 84 24 8c 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1580], 139 ; 0000008bH
  03139	c6 84 24 8d 06
	00 00 74	 mov	 BYTE PTR $T5[rsp+1581], 116 ; 00000074H
  03141	c6 84 24 8e 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1582], 36 ; 00000024H
  03149	c6 84 24 8f 06
	00 00 58	 mov	 BYTE PTR $T5[rsp+1583], 88 ; 00000058H
  03151	c6 84 24 90 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1584], 76 ; 0000004cH
  03159	c6 84 24 91 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1585], 139 ; 0000008bH
  03161	c6 84 24 92 06
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1586], 124 ; 0000007cH
  03169	c6 84 24 93 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1587], 36 ; 00000024H
  03171	c6 84 24 94 06
	00 00 50	 mov	 BYTE PTR $T5[rsp+1588], 80 ; 00000050H
  03179	c6 84 24 95 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1589], 72 ; 00000048H
  03181	c6 84 24 96 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1590], 139 ; 0000008bH
  03189	c6 84 24 97 06
	00 00 7c	 mov	 BYTE PTR $T5[rsp+1591], 124 ; 0000007cH
  03191	c6 84 24 98 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1592], 36 ; 00000024H
  03199	c6 84 24 99 06
	00 00 68	 mov	 BYTE PTR $T5[rsp+1593], 104 ; 00000068H
  031a1	c6 84 24 9a 06
	00 00 33	 mov	 BYTE PTR $T5[rsp+1594], 51 ; 00000033H
  031a9	c6 84 24 9b 06
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1595], 192 ; 000000c0H
  031b1	c6 84 24 9c 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1596], 76 ; 0000004cH
  031b9	c6 84 24 9d 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1597], 139 ; 0000008bH
  031c1	c6 84 24 9e 06
	00 00 64	 mov	 BYTE PTR $T5[rsp+1598], 100 ; 00000064H
  031c9	c6 84 24 9f 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1599], 36 ; 00000024H
  031d1	c6 84 24 a0 06
	00 00 60	 mov	 BYTE PTR $T5[rsp+1600], 96 ; 00000060H
  031d9	c6 84 24 a1 06
	00 00 c6	 mov	 BYTE PTR $T5[rsp+1601], 198 ; 000000c6H
  031e1	c6 84 24 a2 06
	00 00 03	 mov	 BYTE PTR $T5[rsp+1602], 3
  031e9	c6 84 24 a3 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1603], 1
  031f1	c6 84 24 a4 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1604], 72 ; 00000048H
  031f9	c6 84 24 a5 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1605], 131 ; 00000083H
  03201	c6 84 24 a6 06
	00 00 c4	 mov	 BYTE PTR $T5[rsp+1606], 196 ; 000000c4H
  03209	c6 84 24 a7 06
	00 00 70	 mov	 BYTE PTR $T5[rsp+1607], 112 ; 00000070H
  03211	c6 84 24 a8 06
	00 00 5b	 mov	 BYTE PTR $T5[rsp+1608], 91 ; 0000005bH
  03219	c6 84 24 a9 06
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1609], 195 ; 000000c3H
  03221	c6 84 24 aa 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1610], 76 ; 0000004cH
  03229	c6 84 24 ab 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1611], 139 ; 0000008bH
  03231	c6 84 24 ac 06
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1612], 75 ; 0000004bH
  03239	c6 84 24 ad 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1613], 40 ; 00000028H
  03241	c6 84 24 ae 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1614], 72 ; 00000048H
  03249	c6 84 24 af 06
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1615], 141 ; 0000008dH
  03251	c6 84 24 b0 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1616], 131 ; 00000083H
  03259	c6 84 24 b1 06
	00 00 50	 mov	 BYTE PTR $T5[rsp+1617], 80 ; 00000050H
  03261	c6 84 24 b2 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1618], 1
  03269	c6 84 24 b3 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1619], 0
  03271	c6 84 24 b4 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1620], 0
  03279	c6 84 24 b5 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1621], 76 ; 0000004cH
  03281	c6 84 24 b6 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1622], 139 ; 0000008bH
  03289	c6 84 24 b7 06
	00 00 43	 mov	 BYTE PTR $T5[rsp+1623], 67 ; 00000043H
  03291	c6 84 24 b8 06
	00 00 20	 mov	 BYTE PTR $T5[rsp+1624], 32 ; 00000020H
  03299	c6 84 24 b9 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1625], 139 ; 0000008bH
  032a1	c6 84 24 ba 06
	00 00 53	 mov	 BYTE PTR $T5[rsp+1626], 83 ; 00000053H
  032a9	c6 84 24 bb 06
	00 00 1c	 mov	 BYTE PTR $T5[rsp+1627], 28
  032b1	c6 84 24 bc 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1628], 139 ; 0000008bH
  032b9	c6 84 24 bd 06
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1629], 75 ; 0000004bH
  032c1	c6 84 24 be 06
	00 00 18	 mov	 BYTE PTR $T5[rsp+1630], 24
  032c9	c6 84 24 bf 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1631], 72 ; 00000048H
  032d1	c6 84 24 c0 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1632], 137 ; 00000089H
  032d9	c6 84 24 c1 06
	00 00 44	 mov	 BYTE PTR $T5[rsp+1633], 68 ; 00000044H
  032e1	c6 84 24 c2 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1634], 36 ; 00000024H
  032e9	c6 84 24 c3 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1635], 40 ; 00000028H
  032f1	c6 84 24 c4 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1636], 72 ; 00000048H
  032f9	c6 84 24 c5 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1637], 139 ; 0000008bH
  03301	c6 84 24 c6 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1638], 131 ; 00000083H
  03309	c6 84 24 c7 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1639], 72 ; 00000048H
  03311	c6 84 24 c8 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1640], 1
  03319	c6 84 24 c9 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1641], 0
  03321	c6 84 24 ca 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1642], 0
  03329	c6 84 24 cb 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1643], 72 ; 00000048H
  03331	c6 84 24 cc 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1644], 137 ; 00000089H
  03339	c6 84 24 cd 06
	00 00 44	 mov	 BYTE PTR $T5[rsp+1645], 68 ; 00000044H
  03341	c6 84 24 ce 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1646], 36 ; 00000024H
  03349	c6 84 24 cf 06
	00 00 20	 mov	 BYTE PTR $T5[rsp+1647], 32 ; 00000020H
  03351	c6 84 24 d0 06
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1648], 232 ; 000000e8H
  03359	c6 84 24 d1 06
	00 00 bb	 mov	 BYTE PTR $T5[rsp+1649], 187 ; 000000bbH
  03361	c6 84 24 d2 06
	00 00 09	 mov	 BYTE PTR $T5[rsp+1650], 9
  03369	c6 84 24 d3 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1651], 0
  03371	c6 84 24 d4 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1652], 0
  03379	c6 84 24 d5 06
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1653], 235 ; 000000ebH
  03381	c6 84 24 d6 06
	00 00 2b	 mov	 BYTE PTR $T5[rsp+1654], 43 ; 0000002bH
  03389	c6 84 24 d7 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1655], 76 ; 0000004cH
  03391	c6 84 24 d8 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1656], 139 ; 0000008bH
  03399	c6 84 24 d9 06
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1657], 75 ; 0000004bH
  033a1	c6 84 24 da 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1658], 40 ; 00000028H
  033a9	c6 84 24 db 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1659], 72 ; 00000048H
  033b1	c6 84 24 dc 06
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1660], 141 ; 0000008dH
  033b9	c6 84 24 dd 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1661], 131 ; 00000083H
  033c1	c6 84 24 de 06
	00 00 50	 mov	 BYTE PTR $T5[rsp+1662], 80 ; 00000050H
  033c9	c6 84 24 df 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1663], 1
  033d1	c6 84 24 e0 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1664], 0
  033d9	c6 84 24 e1 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1665], 0
  033e1	c6 84 24 e2 06
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1666], 76 ; 0000004cH
  033e9	c6 84 24 e3 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1667], 139 ; 0000008bH
  033f1	c6 84 24 e4 06
	00 00 43	 mov	 BYTE PTR $T5[rsp+1668], 67 ; 00000043H
  033f9	c6 84 24 e5 06
	00 00 20	 mov	 BYTE PTR $T5[rsp+1669], 32 ; 00000020H
  03401	c6 84 24 e6 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1670], 139 ; 0000008bH
  03409	c6 84 24 e7 06
	00 00 53	 mov	 BYTE PTR $T5[rsp+1671], 83 ; 00000053H
  03411	c6 84 24 e8 06
	00 00 1c	 mov	 BYTE PTR $T5[rsp+1672], 28
  03419	c6 84 24 e9 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1673], 139 ; 0000008bH
  03421	c6 84 24 ea 06
	00 00 4b	 mov	 BYTE PTR $T5[rsp+1674], 75 ; 0000004bH
  03429	c6 84 24 eb 06
	00 00 18	 mov	 BYTE PTR $T5[rsp+1675], 24
  03431	c6 84 24 ec 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1676], 72 ; 00000048H
  03439	c6 84 24 ed 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1677], 137 ; 00000089H
  03441	c6 84 24 ee 06
	00 00 44	 mov	 BYTE PTR $T5[rsp+1678], 68 ; 00000044H
  03449	c6 84 24 ef 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1679], 36 ; 00000024H
  03451	c6 84 24 f0 06
	00 00 28	 mov	 BYTE PTR $T5[rsp+1680], 40 ; 00000028H
  03459	c6 84 24 f1 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1681], 72 ; 00000048H
  03461	c6 84 24 f2 06
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1682], 139 ; 0000008bH
  03469	c6 84 24 f3 06
	00 00 83	 mov	 BYTE PTR $T5[rsp+1683], 131 ; 00000083H
  03471	c6 84 24 f4 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1684], 72 ; 00000048H
  03479	c6 84 24 f5 06
	00 00 01	 mov	 BYTE PTR $T5[rsp+1685], 1
  03481	c6 84 24 f6 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1686], 0
  03489	c6 84 24 f7 06
	00 00 00	 mov	 BYTE PTR $T5[rsp+1687], 0
  03491	c6 84 24 f8 06
	00 00 48	 mov	 BYTE PTR $T5[rsp+1688], 72 ; 00000048H
  03499	c6 84 24 f9 06
	00 00 89	 mov	 BYTE PTR $T5[rsp+1689], 137 ; 00000089H
  034a1	c6 84 24 fa 06
	00 00 44	 mov	 BYTE PTR $T5[rsp+1690], 68 ; 00000044H
  034a9	c6 84 24 fb 06
	00 00 24	 mov	 BYTE PTR $T5[rsp+1691], 36 ; 00000024H
  034b1	c6 84 24 fc 06
	00 00 20	 mov	 BYTE PTR $T5[rsp+1692], 32 ; 00000020H
  034b9	c6 84 24 fd 06
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1693], 232 ; 000000e8H
  034c1	c6 84 24 fe 06
	00 00 be	 mov	 BYTE PTR $T5[rsp+1694], 190 ; 000000beH
  034c9	c6 84 24 ff 06
	00 00 08	 mov	 BYTE PTR $T5[rsp+1695], 8
  034d1	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1696], 0
  034d9	c6 84 24 01 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1697], 0
  034e1	c6 84 24 02 07
	00 00 85	 mov	 BYTE PTR $T5[rsp+1698], 133 ; 00000085H
  034e9	c6 84 24 03 07
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1699], 192 ; 000000c0H
  034f1	c6 84 24 04 07
	00 00 79	 mov	 BYTE PTR $T5[rsp+1700], 121 ; 00000079H
  034f9	c6 84 24 05 07
	00 00 8f	 mov	 BYTE PTR $T5[rsp+1701], 143 ; 0000008fH
  03501	c6 84 24 06 07
	00 00 44	 mov	 BYTE PTR $T5[rsp+1702], 68 ; 00000044H
  03509	c6 84 24 07 07
	00 00 88	 mov	 BYTE PTR $T5[rsp+1703], 136 ; 00000088H
  03511	c6 84 24 08 07
	00 00 23	 mov	 BYTE PTR $T5[rsp+1704], 35 ; 00000023H
  03519	c6 84 24 09 07
	00 00 b8	 mov	 BYTE PTR $T5[rsp+1705], 184 ; 000000b8H
  03521	c6 84 24 0a 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1706], 5
  03529	c6 84 24 0b 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1707], 0
  03531	c6 84 24 0c 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1708], 0
  03539	c6 84 24 0d 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1709], 0
  03541	c6 84 24 0e 07
	00 00 e9	 mov	 BYTE PTR $T5[rsp+1710], 233 ; 000000e9H
  03549	c6 84 24 0f 07
	00 00 a6	 mov	 BYTE PTR $T5[rsp+1711], 166 ; 000000a6H
  03551	c6 84 24 10 07
	00 00 fd	 mov	 BYTE PTR $T5[rsp+1712], 253 ; 000000fdH
  03559	c6 84 24 11 07
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1713], 255 ; 000000ffH
  03561	c6 84 24 12 07
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1714], 255 ; 000000ffH
  03569	c6 84 24 13 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1715], 72 ; 00000048H
  03571	c6 84 24 14 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1716], 139 ; 0000008bH
  03579	c6 84 24 15 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1717], 5
  03581	c6 84 24 16 07
	00 00 4e	 mov	 BYTE PTR $T5[rsp+1718], 78 ; 0000004eH
  03589	c6 84 24 17 07
	00 00 2d	 mov	 BYTE PTR $T5[rsp+1719], 45 ; 0000002dH
  03591	c6 84 24 18 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1720], 0
  03599	c6 84 24 19 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1721], 0
  035a1	c6 84 24 1a 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1722], 72 ; 00000048H
  035a9	c6 84 24 1b 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1723], 139 ; 0000008bH
  035b1	c6 84 24 1c 07
	00 00 cb	 mov	 BYTE PTR $T5[rsp+1724], 203 ; 000000cbH
  035b9	c6 84 24 1d 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1725], 72 ; 00000048H
  035c1	c6 84 24 1e 07
	00 00 83	 mov	 BYTE PTR $T5[rsp+1726], 131 ; 00000083H
  035c9	c6 84 24 1f 07
	00 00 c4	 mov	 BYTE PTR $T5[rsp+1727], 196 ; 000000c4H
  035d1	c6 84 24 20 07
	00 00 70	 mov	 BYTE PTR $T5[rsp+1728], 112 ; 00000070H
  035d9	c6 84 24 21 07
	00 00 5b	 mov	 BYTE PTR $T5[rsp+1729], 91 ; 0000005bH
  035e1	c6 84 24 22 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1730], 72 ; 00000048H
  035e9	c6 84 24 23 07
	00 00 ff	 mov	 BYTE PTR $T5[rsp+1731], 255 ; 000000ffH
  035f1	c6 84 24 24 07
	00 00 25	 mov	 BYTE PTR $T5[rsp+1732], 37 ; 00000025H
  035f9	c6 84 24 25 07
	00 00 ef	 mov	 BYTE PTR $T5[rsp+1733], 239 ; 000000efH
  03601	c6 84 24 26 07
	00 00 1d	 mov	 BYTE PTR $T5[rsp+1734], 29
  03609	c6 84 24 27 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1735], 0
  03611	c6 84 24 28 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1736], 0
  03619	c6 84 24 29 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1737], 204 ; 000000ccH
  03621	c6 84 24 2a 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1738], 204 ; 000000ccH
  03629	c6 84 24 2b 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1739], 204 ; 000000ccH
  03631	c6 84 24 2c 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1740], 204 ; 000000ccH
  03639	c6 84 24 2d 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1741], 204 ; 000000ccH
  03641	c6 84 24 2e 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1742], 204 ; 000000ccH
  03649	c6 84 24 2f 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1743], 204 ; 000000ccH
  03651	c6 84 24 30 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1744], 15
  03659	c6 84 24 31 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1745], 16
  03661	c6 84 24 32 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1746], 1
  03669	c6 84 24 33 07
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1747], 76 ; 0000004cH
  03671	c6 84 24 34 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1748], 139 ; 0000008bH
  03679	c6 84 24 35 07
	00 00 c1	 mov	 BYTE PTR $T5[rsp+1749], 193 ; 000000c1H
  03681	c6 84 24 36 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1750], 15
  03689	c6 84 24 37 07
	00 00 11	 mov	 BYTE PTR $T5[rsp+1751], 17
  03691	c6 84 24 38 07
	00 00 02	 mov	 BYTE PTR $T5[rsp+1752], 2
  03699	c6 84 24 39 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1753], 15
  036a1	c6 84 24 3a 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1754], 16
  036a9	c6 84 24 3b 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1755], 73 ; 00000049H
  036b1	c6 84 24 3c 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1756], 16
  036b9	c6 84 24 3d 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1757], 15
  036c1	c6 84 24 3e 07
	00 00 11	 mov	 BYTE PTR $T5[rsp+1758], 17
  036c9	c6 84 24 3f 07
	00 00 4a	 mov	 BYTE PTR $T5[rsp+1759], 74 ; 0000004aH
  036d1	c6 84 24 40 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1760], 16
  036d9	c6 84 24 41 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1761], 15
  036e1	c6 84 24 42 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1762], 16
  036e9	c6 84 24 43 07
	00 00 41	 mov	 BYTE PTR $T5[rsp+1763], 65 ; 00000041H
  036f1	c6 84 24 44 07
	00 00 20	 mov	 BYTE PTR $T5[rsp+1764], 32 ; 00000020H
  036f9	c6 84 24 45 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1765], 15
  03701	c6 84 24 46 07
	00 00 11	 mov	 BYTE PTR $T5[rsp+1766], 17
  03709	c6 84 24 47 07
	00 00 42	 mov	 BYTE PTR $T5[rsp+1767], 66 ; 00000042H
  03711	c6 84 24 48 07
	00 00 20	 mov	 BYTE PTR $T5[rsp+1768], 32 ; 00000020H
  03719	c6 84 24 49 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1769], 72 ; 00000048H
  03721	c6 84 24 4a 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1770], 139 ; 0000008bH
  03729	c6 84 24 4b 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1771], 1
  03731	c6 84 24 4c 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1772], 72 ; 00000048H
  03739	c6 84 24 4d 07
	00 00 3b	 mov	 BYTE PTR $T5[rsp+1773], 59 ; 0000003bH
  03741	c6 84 24 4e 07
	00 00 c1	 mov	 BYTE PTR $T5[rsp+1774], 193 ; 000000c1H
  03749	c6 84 24 4f 07
	00 00 75	 mov	 BYTE PTR $T5[rsp+1775], 117 ; 00000075H
  03751	c6 84 24 50 07
	00 00 09	 mov	 BYTE PTR $T5[rsp+1776], 9
  03759	c6 84 24 51 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1777], 72 ; 00000048H
  03761	c6 84 24 52 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1778], 137 ; 00000089H
  03769	c6 84 24 53 07
	00 00 52	 mov	 BYTE PTR $T5[rsp+1779], 82 ; 00000052H
  03771	c6 84 24 54 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1780], 8
  03779	c6 84 24 55 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1781], 72 ; 00000048H
  03781	c6 84 24 56 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1782], 137 ; 00000089H
  03789	c6 84 24 57 07
	00 00 12	 mov	 BYTE PTR $T5[rsp+1783], 18
  03791	c6 84 24 58 07
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1784], 235 ; 000000ebH
  03799	c6 84 24 59 07
	00 00 19	 mov	 BYTE PTR $T5[rsp+1785], 25
  037a1	c6 84 24 5a 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1786], 72 ; 00000048H
  037a9	c6 84 24 5b 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1787], 137 ; 00000089H
  037b1	c6 84 24 5c 07
	00 00 02	 mov	 BYTE PTR $T5[rsp+1788], 2
  037b9	c6 84 24 5d 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1789], 72 ; 00000048H
  037c1	c6 84 24 5e 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1790], 139 ; 0000008bH
  037c9	c6 84 24 5f 07
	00 00 41	 mov	 BYTE PTR $T5[rsp+1791], 65 ; 00000041H
  037d1	c6 84 24 60 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1792], 8
  037d9	c6 84 24 61 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1793], 72 ; 00000048H
  037e1	c6 84 24 62 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1794], 137 ; 00000089H
  037e9	c6 84 24 63 07
	00 00 42	 mov	 BYTE PTR $T5[rsp+1795], 66 ; 00000042H
  037f1	c6 84 24 64 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1796], 8
  037f9	c6 84 24 65 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1797], 72 ; 00000048H
  03801	c6 84 24 66 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1798], 139 ; 0000008bH
  03809	c6 84 24 67 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1799], 1
  03811	c6 84 24 68 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1800], 72 ; 00000048H
  03819	c6 84 24 69 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1801], 137 ; 00000089H
  03821	c6 84 24 6a 07
	00 00 50	 mov	 BYTE PTR $T5[rsp+1802], 80 ; 00000050H
  03829	c6 84 24 6b 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1803], 8
  03831	c6 84 24 6c 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1804], 72 ; 00000048H
  03839	c6 84 24 6d 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1805], 139 ; 0000008bH
  03841	c6 84 24 6e 07
	00 00 41	 mov	 BYTE PTR $T5[rsp+1806], 65 ; 00000041H
  03849	c6 84 24 6f 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1807], 8
  03851	c6 84 24 70 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1808], 72 ; 00000048H
  03859	c6 84 24 71 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1809], 137 ; 00000089H
  03861	c6 84 24 72 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1810], 16
  03869	c6 84 24 73 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1811], 72 ; 00000048H
  03871	c6 84 24 74 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1812], 139 ; 0000008bH
  03879	c6 84 24 75 07
	00 00 41	 mov	 BYTE PTR $T5[rsp+1813], 65 ; 00000041H
  03881	c6 84 24 76 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1814], 16
  03889	c6 84 24 77 07
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1815], 76 ; 0000004cH
  03891	c6 84 24 78 07
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1816], 141 ; 0000008dH
  03899	c6 84 24 79 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1817], 73 ; 00000049H
  038a1	c6 84 24 7a 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1818], 16
  038a9	c6 84 24 7b 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1819], 72 ; 00000048H
  038b1	c6 84 24 7c 07
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1820], 141 ; 0000008dH
  038b9	c6 84 24 7d 07
	00 00 4a	 mov	 BYTE PTR $T5[rsp+1821], 74 ; 0000004aH
  038c1	c6 84 24 7e 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1822], 16
  038c9	c6 84 24 7f 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1823], 73 ; 00000049H
  038d1	c6 84 24 80 07
	00 00 3b	 mov	 BYTE PTR $T5[rsp+1824], 59 ; 0000003bH
  038d9	c6 84 24 81 07
	00 00 c1	 mov	 BYTE PTR $T5[rsp+1825], 193 ; 000000c1H
  038e1	c6 84 24 82 07
	00 00 75	 mov	 BYTE PTR $T5[rsp+1826], 117 ; 00000075H
  038e9	c6 84 24 83 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1827], 8
  038f1	c6 84 24 84 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1828], 72 ; 00000048H
  038f9	c6 84 24 85 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1829], 137 ; 00000089H
  03901	c6 84 24 86 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1830], 73 ; 00000049H
  03909	c6 84 24 87 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1831], 8
  03911	c6 84 24 88 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1832], 72 ; 00000048H
  03919	c6 84 24 89 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1833], 137 ; 00000089H
  03921	c6 84 24 8a 07
	00 00 09	 mov	 BYTE PTR $T5[rsp+1834], 9
  03929	c6 84 24 8b 07
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1835], 195 ; 000000c3H
  03931	c6 84 24 8c 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1836], 72 ; 00000048H
  03939	c6 84 24 8d 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1837], 137 ; 00000089H
  03941	c6 84 24 8e 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1838], 1
  03949	c6 84 24 8f 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1839], 73 ; 00000049H
  03951	c6 84 24 90 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1840], 139 ; 0000008bH
  03959	c6 84 24 91 07
	00 00 40	 mov	 BYTE PTR $T5[rsp+1841], 64 ; 00000040H
  03961	c6 84 24 92 07
	00 00 18	 mov	 BYTE PTR $T5[rsp+1842], 24
  03969	c6 84 24 93 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1843], 72 ; 00000048H
  03971	c6 84 24 94 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1844], 137 ; 00000089H
  03979	c6 84 24 95 07
	00 00 42	 mov	 BYTE PTR $T5[rsp+1845], 66 ; 00000042H
  03981	c6 84 24 96 07
	00 00 18	 mov	 BYTE PTR $T5[rsp+1846], 24
  03989	c6 84 24 97 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1847], 73 ; 00000049H
  03991	c6 84 24 98 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1848], 139 ; 0000008bH
  03999	c6 84 24 99 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1849], 1
  039a1	c6 84 24 9a 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1850], 72 ; 00000048H
  039a9	c6 84 24 9b 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1851], 137 ; 00000089H
  039b1	c6 84 24 9c 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1852], 72 ; 00000048H
  039b9	c6 84 24 9d 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1853], 8
  039c1	c6 84 24 9e 07
	00 00 49	 mov	 BYTE PTR $T5[rsp+1854], 73 ; 00000049H
  039c9	c6 84 24 9f 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1855], 139 ; 0000008bH
  039d1	c6 84 24 a0 07
	00 00 40	 mov	 BYTE PTR $T5[rsp+1856], 64 ; 00000040H
  039d9	c6 84 24 a1 07
	00 00 18	 mov	 BYTE PTR $T5[rsp+1857], 24
  039e1	c6 84 24 a2 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1858], 72 ; 00000048H
  039e9	c6 84 24 a3 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1859], 137 ; 00000089H
  039f1	c6 84 24 a4 07
	00 00 08	 mov	 BYTE PTR $T5[rsp+1860], 8
  039f9	c6 84 24 a5 07
	00 00 c3	 mov	 BYTE PTR $T5[rsp+1861], 195 ; 000000c3H
  03a01	c6 84 24 a6 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1862], 204 ; 000000ccH
  03a09	c6 84 24 a7 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1863], 204 ; 000000ccH
  03a11	c6 84 24 a8 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1864], 204 ; 000000ccH
  03a19	c6 84 24 a9 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1865], 204 ; 000000ccH
  03a21	c6 84 24 aa 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1866], 204 ; 000000ccH
  03a29	c6 84 24 ab 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1867], 204 ; 000000ccH
  03a31	c6 84 24 ac 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1868], 204 ; 000000ccH
  03a39	c6 84 24 ad 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1869], 204 ; 000000ccH
  03a41	c6 84 24 ae 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1870], 204 ; 000000ccH
  03a49	c6 84 24 af 07
	00 00 cc	 mov	 BYTE PTR $T5[rsp+1871], 204 ; 000000ccH
  03a51	c6 84 24 b0 07
	00 00 40	 mov	 BYTE PTR $T5[rsp+1872], 64 ; 00000040H
  03a59	c6 84 24 b1 07
	00 00 55	 mov	 BYTE PTR $T5[rsp+1873], 85 ; 00000055H
  03a61	c6 84 24 b2 07
	00 00 53	 mov	 BYTE PTR $T5[rsp+1874], 83 ; 00000053H
  03a69	c6 84 24 b3 07
	00 00 56	 mov	 BYTE PTR $T5[rsp+1875], 86 ; 00000056H
  03a71	c6 84 24 b4 07
	00 00 57	 mov	 BYTE PTR $T5[rsp+1876], 87 ; 00000057H
  03a79	c6 84 24 b5 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1877], 72 ; 00000048H
  03a81	c6 84 24 b6 07
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1878], 141 ; 0000008dH
  03a89	c6 84 24 b7 07
	00 00 6c	 mov	 BYTE PTR $T5[rsp+1879], 108 ; 0000006cH
  03a91	c6 84 24 b8 07
	00 00 24	 mov	 BYTE PTR $T5[rsp+1880], 36 ; 00000024H
  03a99	c6 84 24 b9 07
	00 00 88	 mov	 BYTE PTR $T5[rsp+1881], 136 ; 00000088H
  03aa1	c6 84 24 ba 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1882], 72 ; 00000048H
  03aa9	c6 84 24 bb 07
	00 00 81	 mov	 BYTE PTR $T5[rsp+1883], 129 ; 00000081H
  03ab1	c6 84 24 bc 07
	00 00 ec	 mov	 BYTE PTR $T5[rsp+1884], 236 ; 000000ecH
  03ab9	c6 84 24 bd 07
	00 00 78	 mov	 BYTE PTR $T5[rsp+1885], 120 ; 00000078H
  03ac1	c6 84 24 be 07
	00 00 01	 mov	 BYTE PTR $T5[rsp+1886], 1
  03ac9	c6 84 24 bf 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1887], 0
  03ad1	c6 84 24 c0 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1888], 0
  03ad9	c6 84 24 c1 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1889], 72 ; 00000048H
  03ae1	c6 84 24 c2 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1890], 139 ; 0000008bH
  03ae9	c6 84 24 c3 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1891], 5
  03af1	c6 84 24 c4 07
	00 00 f8	 mov	 BYTE PTR $T5[rsp+1892], 248 ; 000000f8H
  03af9	c6 84 24 c5 07
	00 00 1c	 mov	 BYTE PTR $T5[rsp+1893], 28
  03b01	c6 84 24 c6 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1894], 0
  03b09	c6 84 24 c7 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1895], 0
  03b11	c6 84 24 c8 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1896], 72 ; 00000048H
  03b19	c6 84 24 c9 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1897], 139 ; 0000008bH
  03b21	c6 84 24 ca 07
	00 00 38	 mov	 BYTE PTR $T5[rsp+1898], 56 ; 00000038H
  03b29	c6 84 24 cb 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1899], 72 ; 00000048H
  03b31	c6 84 24 cc 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1900], 139 ; 0000008bH
  03b39	c6 84 24 cd 07
	00 00 df	 mov	 BYTE PTR $T5[rsp+1901], 223 ; 000000dfH
  03b41	c6 84 24 ce 07
	00 00 66	 mov	 BYTE PTR $T5[rsp+1902], 102 ; 00000066H
  03b49	c6 84 24 cf 07
	00 00 90	 mov	 BYTE PTR $T5[rsp+1903], 144 ; 00000090H
  03b51	c6 84 24 d0 07
	00 00 f2	 mov	 BYTE PTR $T5[rsp+1904], 242 ; 000000f2H
  03b59	c6 84 24 d1 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1905], 15
  03b61	c6 84 24 d2 07
	00 00 10	 mov	 BYTE PTR $T5[rsp+1906], 16
  03b69	c6 84 24 d3 07
	00 00 83	 mov	 BYTE PTR $T5[rsp+1907], 131 ; 00000083H
  03b71	c6 84 24 d4 07
	00 00 a8	 mov	 BYTE PTR $T5[rsp+1908], 168 ; 000000a8H
  03b79	c6 84 24 d5 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1909], 5
  03b81	c6 84 24 d6 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1910], 0
  03b89	c6 84 24 d7 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1911], 0
  03b91	c6 84 24 d8 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1912], 72 ; 00000048H
  03b99	c6 84 24 d9 07
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1913], 141 ; 0000008dH
  03ba1	c6 84 24 da 07
	00 00 15	 mov	 BYTE PTR $T5[rsp+1914], 21
  03ba9	c6 84 24 db 07
	00 00 71	 mov	 BYTE PTR $T5[rsp+1915], 113 ; 00000071H
  03bb1	c6 84 24 dc 07
	00 00 0d	 mov	 BYTE PTR $T5[rsp+1916], 13
  03bb9	c6 84 24 dd 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1917], 0
  03bc1	c6 84 24 de 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1918], 0
  03bc9	c6 84 24 df 07
	00 00 f2	 mov	 BYTE PTR $T5[rsp+1919], 242 ; 000000f2H
  03bd1	c6 84 24 e0 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1920], 15
  03bd9	c6 84 24 e1 07
	00 00 11	 mov	 BYTE PTR $T5[rsp+1921], 17
  03be1	c6 84 24 e2 07
	00 00 44	 mov	 BYTE PTR $T5[rsp+1922], 68 ; 00000044H
  03be9	c6 84 24 e3 07
	00 00 24	 mov	 BYTE PTR $T5[rsp+1923], 36 ; 00000024H
  03bf1	c6 84 24 e4 07
	00 00 38	 mov	 BYTE PTR $T5[rsp+1924], 56 ; 00000038H
  03bf9	c6 84 24 e5 07
	00 00 48	 mov	 BYTE PTR $T5[rsp+1925], 72 ; 00000048H
  03c01	c6 84 24 e6 07
	00 00 8d	 mov	 BYTE PTR $T5[rsp+1926], 141 ; 0000008dH
  03c09	c6 84 24 e7 07
	00 00 4c	 mov	 BYTE PTR $T5[rsp+1927], 76 ; 0000004cH
  03c11	c6 84 24 e8 07
	00 00 24	 mov	 BYTE PTR $T5[rsp+1928], 36 ; 00000024H
  03c19	c6 84 24 e9 07
	00 00 38	 mov	 BYTE PTR $T5[rsp+1929], 56 ; 00000038H
  03c21	c6 84 24 ea 07
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1930], 139 ; 0000008bH
  03c29	c6 84 24 eb 07
	00 00 83	 mov	 BYTE PTR $T5[rsp+1931], 131 ; 00000083H
  03c31	c6 84 24 ec 07
	00 00 b0	 mov	 BYTE PTR $T5[rsp+1932], 176 ; 000000b0H
  03c39	c6 84 24 ed 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1933], 5
  03c41	c6 84 24 ee 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1934], 0
  03c49	c6 84 24 ef 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1935], 0
  03c51	c6 84 24 f0 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1936], 137 ; 00000089H
  03c59	c6 84 24 f1 07
	00 00 44	 mov	 BYTE PTR $T5[rsp+1937], 68 ; 00000044H
  03c61	c6 84 24 f2 07
	00 00 24	 mov	 BYTE PTR $T5[rsp+1938], 36 ; 00000024H
  03c69	c6 84 24 f3 07
	00 00 40	 mov	 BYTE PTR $T5[rsp+1939], 64 ; 00000040H
  03c71	c6 84 24 f4 07
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1940], 15
  03c79	c6 84 24 f5 07
	00 00 b7	 mov	 BYTE PTR $T5[rsp+1941], 183 ; 000000b7H
  03c81	c6 84 24 f6 07
	00 00 83	 mov	 BYTE PTR $T5[rsp+1942], 131 ; 00000083H
  03c89	c6 84 24 f7 07
	00 00 b4	 mov	 BYTE PTR $T5[rsp+1943], 180 ; 000000b4H
  03c91	c6 84 24 f8 07
	00 00 05	 mov	 BYTE PTR $T5[rsp+1944], 5
  03c99	c6 84 24 f9 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1945], 0
  03ca1	c6 84 24 fa 07
	00 00 00	 mov	 BYTE PTR $T5[rsp+1946], 0
  03ca9	c6 84 24 fb 07
	00 00 66	 mov	 BYTE PTR $T5[rsp+1947], 102 ; 00000066H
  03cb1	c6 84 24 fc 07
	00 00 89	 mov	 BYTE PTR $T5[rsp+1948], 137 ; 00000089H
  03cb9	c6 84 24 fd 07
	00 00 44	 mov	 BYTE PTR $T5[rsp+1949], 68 ; 00000044H
  03cc1	c6 84 24 fe 07
	00 00 24	 mov	 BYTE PTR $T5[rsp+1950], 36 ; 00000024H
  03cc9	c6 84 24 ff 07
	00 00 44	 mov	 BYTE PTR $T5[rsp+1951], 68 ; 00000044H
  03cd1	c6 84 24 00 08
	00 00 0f	 mov	 BYTE PTR $T5[rsp+1952], 15
  03cd9	c6 84 24 01 08
	00 00 b6	 mov	 BYTE PTR $T5[rsp+1953], 182 ; 000000b6H
  03ce1	c6 84 24 02 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+1954], 131 ; 00000083H
  03ce9	c6 84 24 03 08
	00 00 b6	 mov	 BYTE PTR $T5[rsp+1955], 182 ; 000000b6H
  03cf1	c6 84 24 04 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+1956], 5
  03cf9	c6 84 24 05 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1957], 0
  03d01	c6 84 24 06 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1958], 0
  03d09	c6 84 24 07 08
	00 00 88	 mov	 BYTE PTR $T5[rsp+1959], 136 ; 00000088H
  03d11	c6 84 24 08 08
	00 00 44	 mov	 BYTE PTR $T5[rsp+1960], 68 ; 00000044H
  03d19	c6 84 24 09 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+1961], 36 ; 00000024H
  03d21	c6 84 24 0a 08
	00 00 46	 mov	 BYTE PTR $T5[rsp+1962], 70 ; 00000046H
  03d29	c6 84 24 0b 08
	00 00 e8	 mov	 BYTE PTR $T5[rsp+1963], 232 ; 000000e8H
  03d31	c6 84 24 0c 08
	00 00 0c	 mov	 BYTE PTR $T5[rsp+1964], 12
  03d39	c6 84 24 0d 08
	00 00 0c	 mov	 BYTE PTR $T5[rsp+1965], 12
  03d41	c6 84 24 0e 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1966], 0
  03d49	c6 84 24 0f 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1967], 0
  03d51	c6 84 24 10 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1968], 72 ; 00000048H
  03d59	c6 84 24 11 08
	00 00 85	 mov	 BYTE PTR $T5[rsp+1969], 133 ; 00000085H
  03d61	c6 84 24 12 08
	00 00 c0	 mov	 BYTE PTR $T5[rsp+1970], 192 ; 000000c0H
  03d69	c6 84 24 13 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+1971], 116 ; 00000074H
  03d71	c6 84 24 14 08
	00 00 09	 mov	 BYTE PTR $T5[rsp+1972], 9
  03d79	c6 84 24 15 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+1973], 131 ; 00000083H
  03d81	c6 84 24 16 08
	00 00 bb	 mov	 BYTE PTR $T5[rsp+1974], 187 ; 000000bbH
  03d89	c6 84 24 17 08
	00 00 f0	 mov	 BYTE PTR $T5[rsp+1975], 240 ; 000000f0H
  03d91	c6 84 24 18 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+1976], 5
  03d99	c6 84 24 19 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1977], 0
  03da1	c6 84 24 1a 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1978], 0
  03da9	c6 84 24 1b 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1979], 0
  03db1	c6 84 24 1c 08
	00 00 75	 mov	 BYTE PTR $T5[rsp+1980], 117 ; 00000075H
  03db9	c6 84 24 1d 08
	00 00 1a	 mov	 BYTE PTR $T5[rsp+1981], 26
  03dc1	c6 84 24 1e 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1982], 72 ; 00000048H
  03dc9	c6 84 24 1f 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+1983], 139 ; 0000008bH
  03dd1	c6 84 24 20 08
	00 00 9b	 mov	 BYTE PTR $T5[rsp+1984], 155 ; 0000009bH
  03dd9	c6 84 24 21 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1985], 72 ; 00000048H
  03de1	c6 84 24 22 08
	00 00 04	 mov	 BYTE PTR $T5[rsp+1986], 4
  03de9	c6 84 24 23 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1987], 0
  03df1	c6 84 24 24 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1988], 0
  03df9	c6 84 24 25 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1989], 72 ; 00000048H
  03e01	c6 84 24 26 08
	00 00 81	 mov	 BYTE PTR $T5[rsp+1990], 129 ; 00000081H
  03e09	c6 84 24 27 08
	00 00 eb	 mov	 BYTE PTR $T5[rsp+1991], 235 ; 000000ebH
  03e11	c6 84 24 28 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1992], 72 ; 00000048H
  03e19	c6 84 24 29 08
	00 00 04	 mov	 BYTE PTR $T5[rsp+1993], 4
  03e21	c6 84 24 2a 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1994], 0
  03e29	c6 84 24 2b 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+1995], 0
  03e31	c6 84 24 2c 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+1996], 72 ; 00000048H
  03e39	c6 84 24 2d 08
	00 00 3b	 mov	 BYTE PTR $T5[rsp+1997], 59 ; 0000003bH
  03e41	c6 84 24 2e 08
	00 00 df	 mov	 BYTE PTR $T5[rsp+1998], 223 ; 000000dfH
  03e49	c6 84 24 2f 08
	00 00 75	 mov	 BYTE PTR $T5[rsp+1999], 117 ; 00000075H
  03e51	c6 84 24 30 08
	00 00 9f	 mov	 BYTE PTR $T5[rsp+2000], 159 ; 0000009fH
  03e59	c6 84 24 31 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2001], 72 ; 00000048H
  03e61	c6 84 24 32 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2002], 139 ; 0000008bH
  03e69	c6 84 24 33 08
	00 00 9d	 mov	 BYTE PTR $T5[rsp+2003], 157 ; 0000009dH
  03e71	c6 84 24 34 08
	00 00 b0	 mov	 BYTE PTR $T5[rsp+2004], 176 ; 000000b0H
  03e79	c6 84 24 35 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2005], 0
  03e81	c6 84 24 36 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2006], 0
  03e89	c6 84 24 37 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2007], 0
  03e91	c6 84 24 38 08
	00 00 65	 mov	 BYTE PTR $T5[rsp+2008], 101 ; 00000065H
  03e99	c6 84 24 39 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2009], 72 ; 00000048H
  03ea1	c6 84 24 3a 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2010], 139 ; 0000008bH
  03ea9	c6 84 24 3b 08
	00 00 34	 mov	 BYTE PTR $T5[rsp+2011], 52 ; 00000034H
  03eb1	c6 84 24 3c 08
	00 00 25	 mov	 BYTE PTR $T5[rsp+2012], 37 ; 00000025H
  03eb9	c6 84 24 3d 08
	00 00 88	 mov	 BYTE PTR $T5[rsp+2013], 136 ; 00000088H
  03ec1	c6 84 24 3e 08
	00 00 01	 mov	 BYTE PTR $T5[rsp+2014], 1
  03ec9	c6 84 24 3f 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2015], 0
  03ed1	c6 84 24 40 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2016], 0
  03ed9	c6 84 24 41 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2017], 72 ; 00000048H
  03ee1	c6 84 24 42 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2018], 139 ; 0000008bH
  03ee9	c6 84 24 43 08
	00 00 be	 mov	 BYTE PTR $T5[rsp+2019], 190 ; 000000beH
  03ef1	c6 84 24 44 08
	00 00 98	 mov	 BYTE PTR $T5[rsp+2020], 152 ; 00000098H
  03ef9	c6 84 24 45 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2021], 0
  03f01	c6 84 24 46 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2022], 0
  03f09	c6 84 24 47 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2023], 0
  03f11	c6 84 24 48 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2024], 72 ; 00000048H
  03f19	c6 84 24 49 08
	00 00 39	 mov	 BYTE PTR $T5[rsp+2025], 57 ; 00000039H
  03f21	c6 84 24 4a 08
	00 00 5f	 mov	 BYTE PTR $T5[rsp+2026], 95 ; 0000005fH
  03f29	c6 84 24 4b 08
	00 00 20	 mov	 BYTE PTR $T5[rsp+2027], 32 ; 00000020H
  03f31	c6 84 24 4c 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2028], 116 ; 00000074H
  03f39	c6 84 24 4d 08
	00 00 5d	 mov	 BYTE PTR $T5[rsp+2029], 93 ; 0000005dH
  03f41	c6 84 24 4e 08
	00 00 80	 mov	 BYTE PTR $T5[rsp+2030], 128 ; 00000080H
  03f49	c6 84 24 4f 08
	00 00 be	 mov	 BYTE PTR $T5[rsp+2031], 190 ; 000000beH
  03f51	c6 84 24 50 08
	00 00 4a	 mov	 BYTE PTR $T5[rsp+2032], 74 ; 0000004aH
  03f59	c6 84 24 51 08
	00 00 02	 mov	 BYTE PTR $T5[rsp+2033], 2
  03f61	c6 84 24 52 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2034], 0
  03f69	c6 84 24 53 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2035], 0
  03f71	c6 84 24 54 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2036], 0
  03f79	c6 84 24 55 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2037], 116 ; 00000074H
  03f81	c6 84 24 56 08
	00 00 0c	 mov	 BYTE PTR $T5[rsp+2038], 12
  03f89	c6 84 24 57 08
	00 00 b9	 mov	 BYTE PTR $T5[rsp+2039], 185 ; 000000b9H
  03f91	c6 84 24 58 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+2040], 5
  03f99	c6 84 24 59 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2041], 0
  03fa1	c6 84 24 5a 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2042], 0
  03fa9	c6 84 24 5b 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2043], 0
  03fb1	c6 84 24 5c 08
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2044], 255 ; 000000ffH
  03fb9	c6 84 24 5d 08
	00 00 15	 mov	 BYTE PTR $T5[rsp+2045], 21
  03fc1	c6 84 24 5e 08
	00 00 56	 mov	 BYTE PTR $T5[rsp+2046], 86 ; 00000056H
  03fc9	c6 84 24 5f 08
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2047], 28
  03fd1	c6 84 24 60 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2048], 0
  03fd9	c6 84 24 61 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2049], 0
  03fe1	c6 84 24 62 08
	00 00 cc	 mov	 BYTE PTR $T5[rsp+2050], 204 ; 000000ccH
  03fe9	c6 84 24 63 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2051], 72 ; 00000048H
  03ff1	c6 84 24 64 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2052], 139 ; 0000008bH
  03ff9	c6 84 24 65 08
	00 00 96	 mov	 BYTE PTR $T5[rsp+2053], 150 ; 00000096H
  04001	c6 84 24 66 08
	00 00 58	 mov	 BYTE PTR $T5[rsp+2054], 88 ; 00000058H
  04009	c6 84 24 67 08
	00 00 02	 mov	 BYTE PTR $T5[rsp+2055], 2
  04011	c6 84 24 68 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2056], 0
  04019	c6 84 24 69 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2057], 0
  04021	c6 84 24 6a 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2058], 72 ; 00000048H
  04029	c6 84 24 6b 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2059], 139 ; 0000008bH
  04031	c6 84 24 6c 08
	00 00 cf	 mov	 BYTE PTR $T5[rsp+2060], 207 ; 000000cfH
  04039	c6 84 24 6d 08
	00 00 e8	 mov	 BYTE PTR $T5[rsp+2061], 232 ; 000000e8H
  04041	c6 84 24 6e 08
	00 00 be	 mov	 BYTE PTR $T5[rsp+2062], 190 ; 000000beH
  04049	c6 84 24 6f 08
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2063], 254 ; 000000feH
  04051	c6 84 24 70 08
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2064], 255 ; 000000ffH
  04059	c6 84 24 71 08
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2065], 255 ; 000000ffH
  04061	c6 84 24 72 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2066], 72 ; 00000048H
  04069	c6 84 24 73 08
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2067], 141 ; 0000008dH
  04071	c6 84 24 74 08
	00 00 47	 mov	 BYTE PTR $T5[rsp+2068], 71 ; 00000047H
  04079	c6 84 24 75 08
	00 00 10	 mov	 BYTE PTR $T5[rsp+2069], 16
  04081	c6 84 24 76 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2070], 72 ; 00000048H
  04089	c6 84 24 77 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2071], 137 ; 00000089H
  04091	c6 84 24 78 08
	00 00 7f	 mov	 BYTE PTR $T5[rsp+2072], 127 ; 0000007fH
  04099	c6 84 24 79 08
	00 00 08	 mov	 BYTE PTR $T5[rsp+2073], 8
  040a1	c6 84 24 7a 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2074], 72 ; 00000048H
  040a9	c6 84 24 7b 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2075], 137 ; 00000089H
  040b1	c6 84 24 7c 08
	00 00 40	 mov	 BYTE PTR $T5[rsp+2076], 64 ; 00000040H
  040b9	c6 84 24 7d 08
	00 00 08	 mov	 BYTE PTR $T5[rsp+2077], 8
  040c1	c6 84 24 7e 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2078], 72 ; 00000048H
  040c9	c6 84 24 7f 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2079], 137 ; 00000089H
  040d1	c6 84 24 80 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2080], 0
  040d9	c6 84 24 81 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2081], 72 ; 00000048H
  040e1	c6 84 24 82 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2082], 139 ; 0000008bH
  040e9	c6 84 24 83 08
	00 00 47	 mov	 BYTE PTR $T5[rsp+2083], 71 ; 00000047H
  040f1	c6 84 24 84 08
	00 00 20	 mov	 BYTE PTR $T5[rsp+2084], 32 ; 00000020H
  040f9	c6 84 24 85 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2085], 72 ; 00000048H
  04101	c6 84 24 86 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2086], 137 ; 00000089H
  04109	c6 84 24 87 08
	00 00 3f	 mov	 BYTE PTR $T5[rsp+2087], 63 ; 0000003fH
  04111	c6 84 24 88 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2088], 72 ; 00000048H
  04119	c6 84 24 89 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2089], 137 ; 00000089H
  04121	c6 84 24 8a 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+2090], 5
  04129	c6 84 24 8b 08
	00 00 e1	 mov	 BYTE PTR $T5[rsp+2091], 225 ; 000000e1H
  04131	c6 84 24 8c 08
	00 00 2b	 mov	 BYTE PTR $T5[rsp+2092], 43 ; 0000002bH
  04139	c6 84 24 8d 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2093], 0
  04141	c6 84 24 8e 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2094], 0
  04149	c6 84 24 8f 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2095], 72 ; 00000048H
  04151	c6 84 24 90 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2096], 137 ; 00000089H
  04159	c6 84 24 91 08
	00 00 5f	 mov	 BYTE PTR $T5[rsp+2097], 95 ; 0000005fH
  04161	c6 84 24 92 08
	00 00 20	 mov	 BYTE PTR $T5[rsp+2098], 32 ; 00000020H
  04169	c6 84 24 93 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2099], 102 ; 00000066H
  04171	c6 84 24 94 08
	00 00 c7	 mov	 BYTE PTR $T5[rsp+2100], 199 ; 000000c7H
  04179	c6 84 24 95 08
	00 00 47	 mov	 BYTE PTR $T5[rsp+2101], 71 ; 00000047H
  04181	c6 84 24 96 08
	00 00 28	 mov	 BYTE PTR $T5[rsp+2102], 40 ; 00000028H
  04189	c6 84 24 97 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2103], 0
  04191	c6 84 24 98 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2104], 0
  04199	c6 84 24 99 08
	00 00 c6	 mov	 BYTE PTR $T5[rsp+2105], 198 ; 000000c6H
  041a1	c6 84 24 9a 08
	00 00 47	 mov	 BYTE PTR $T5[rsp+2106], 71 ; 00000047H
  041a9	c6 84 24 9b 08
	00 00 2a	 mov	 BYTE PTR $T5[rsp+2107], 42 ; 0000002aH
  041b1	c6 84 24 9c 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2108], 0
  041b9	c6 84 24 9d 08
	00 00 c6	 mov	 BYTE PTR $T5[rsp+2109], 198 ; 000000c6H
  041c1	c6 84 24 9e 08
	00 00 86	 mov	 BYTE PTR $T5[rsp+2110], 134 ; 00000086H
  041c9	c6 84 24 9f 08
	00 00 4a	 mov	 BYTE PTR $T5[rsp+2111], 74 ; 0000004aH
  041d1	c6 84 24 a0 08
	00 00 02	 mov	 BYTE PTR $T5[rsp+2112], 2
  041d9	c6 84 24 a1 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2113], 0
  041e1	c6 84 24 a2 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2114], 0
  041e9	c6 84 24 a3 08
	00 00 01	 mov	 BYTE PTR $T5[rsp+2115], 1
  041f1	c6 84 24 a4 08
	00 00 48	 mov	 BYTE PTR $T5[rsp+2116], 72 ; 00000048H
  041f9	c6 84 24 a5 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2117], 139 ; 0000008bH
  04201	c6 84 24 a6 08
	00 00 43	 mov	 BYTE PTR $T5[rsp+2118], 67 ; 00000043H
  04209	c6 84 24 a7 08
	00 00 28	 mov	 BYTE PTR $T5[rsp+2119], 40 ; 00000028H
  04211	c6 84 24 a8 08
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2120], 15
  04219	c6 84 24 a9 08
	00 00 22	 mov	 BYTE PTR $T5[rsp+2121], 34 ; 00000022H
  04221	c6 84 24 aa 08
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2122], 216 ; 000000d8H
  04229	c6 84 24 ab 08
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2123], 139 ; 0000008bH
  04231	c6 84 24 ac 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+2124], 5
  04239	c6 84 24 ad 08
	00 00 8f	 mov	 BYTE PTR $T5[rsp+2125], 143 ; 0000008fH
  04241	c6 84 24 ae 08
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2126], 28
  04249	c6 84 24 af 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2127], 0
  04251	c6 84 24 b0 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2128], 0
  04259	c6 84 24 b1 08
	00 00 b9	 mov	 BYTE PTR $T5[rsp+2129], 185 ; 000000b9H
  04261	c6 84 24 b2 08
	00 00 77	 mov	 BYTE PTR $T5[rsp+2130], 119 ; 00000077H
  04269	c6 84 24 b3 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2131], 0
  04271	c6 84 24 b4 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2132], 0
  04279	c6 84 24 b5 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2133], 0
  04281	c6 84 24 b6 08
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2134], 15
  04289	c6 84 24 b7 08
	00 00 10	 mov	 BYTE PTR $T5[rsp+2135], 16
  04291	c6 84 24 b8 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+2136], 5
  04299	c6 84 24 b9 08
	00 00 73	 mov	 BYTE PTR $T5[rsp+2137], 115 ; 00000073H
  042a1	c6 84 24 ba 08
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2138], 28
  042a9	c6 84 24 bb 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2139], 0
  042b1	c6 84 24 bc 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2140], 0
  042b9	c6 84 24 bd 08
	00 00 89	 mov	 BYTE PTR $T5[rsp+2141], 137 ; 00000089H
  042c1	c6 84 24 be 08
	00 00 44	 mov	 BYTE PTR $T5[rsp+2142], 68 ; 00000044H
  042c9	c6 84 24 bf 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2143], 36 ; 00000024H
  042d1	c6 84 24 c0 08
	00 00 30	 mov	 BYTE PTR $T5[rsp+2144], 48 ; 00000030H
  042d9	c6 84 24 c1 08
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2145], 15
  042e1	c6 84 24 c2 08
	00 00 b7	 mov	 BYTE PTR $T5[rsp+2146], 183 ; 000000b7H
  042e9	c6 84 24 c3 08
	00 00 05	 mov	 BYTE PTR $T5[rsp+2147], 5
  042f1	c6 84 24 c4 08
	00 00 7c	 mov	 BYTE PTR $T5[rsp+2148], 124 ; 0000007cH
  042f9	c6 84 24 c5 08
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2149], 28
  04301	c6 84 24 c6 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2150], 0
  04309	c6 84 24 c7 08
	00 00 00	 mov	 BYTE PTR $T5[rsp+2151], 0
  04311	c6 84 24 c8 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2152], 102 ; 00000066H
  04319	c6 84 24 c9 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2153], 131 ; 00000083H
  04321	c6 84 24 ca 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2154], 116 ; 00000074H
  04329	c6 84 24 cb 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2155], 36 ; 00000024H
  04331	c6 84 24 cc 08
	00 00 30	 mov	 BYTE PTR $T5[rsp+2156], 48 ; 00000030H
  04339	c6 84 24 cd 08
	00 00 41	 mov	 BYTE PTR $T5[rsp+2157], 65 ; 00000041H
  04341	c6 84 24 ce 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2158], 102 ; 00000066H
  04349	c6 84 24 cf 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2159], 131 ; 00000083H
  04351	c6 84 24 d0 08
	00 00 f0	 mov	 BYTE PTR $T5[rsp+2160], 240 ; 000000f0H
  04359	c6 84 24 d1 08
	00 00 43	 mov	 BYTE PTR $T5[rsp+2161], 67 ; 00000043H
  04361	c6 84 24 d2 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2162], 102 ; 00000066H
  04369	c6 84 24 d3 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2163], 131 ; 00000083H
  04371	c6 84 24 d4 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2164], 116 ; 00000074H
  04379	c6 84 24 d5 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2165], 36 ; 00000024H
  04381	c6 84 24 d6 08
	00 00 32	 mov	 BYTE PTR $T5[rsp+2166], 50 ; 00000032H
  04389	c6 84 24 d7 08
	00 00 42	 mov	 BYTE PTR $T5[rsp+2167], 66 ; 00000042H
  04391	c6 84 24 d8 08
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2168], 15
  04399	c6 84 24 d9 08
	00 00 11	 mov	 BYTE PTR $T5[rsp+2169], 17
  043a1	c6 84 24 da 08
	00 00 44	 mov	 BYTE PTR $T5[rsp+2170], 68 ; 00000044H
  043a9	c6 84 24 db 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2171], 36 ; 00000024H
  043b1	c6 84 24 dc 08
	00 00 20	 mov	 BYTE PTR $T5[rsp+2172], 32 ; 00000020H
  043b9	c6 84 24 dd 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2173], 102 ; 00000066H
  043c1	c6 84 24 de 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2174], 131 ; 00000083H
  043c9	c6 84 24 df 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2175], 116 ; 00000074H
  043d1	c6 84 24 e0 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2176], 36 ; 00000024H
  043d9	c6 84 24 e1 08
	00 00 22	 mov	 BYTE PTR $T5[rsp+2177], 34 ; 00000022H
  043e1	c6 84 24 e2 08
	00 00 3a	 mov	 BYTE PTR $T5[rsp+2178], 58 ; 0000003aH
  043e9	c6 84 24 e3 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2179], 102 ; 00000066H
  043f1	c6 84 24 e4 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2180], 131 ; 00000083H
  043f9	c6 84 24 e5 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2181], 116 ; 00000074H
  04401	c6 84 24 e6 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2182], 36 ; 00000024H
  04409	c6 84 24 e7 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2183], 36 ; 00000024H
  04411	c6 84 24 e8 08
	00 00 3b	 mov	 BYTE PTR $T5[rsp+2184], 59 ; 0000003bH
  04419	c6 84 24 e9 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2185], 102 ; 00000066H
  04421	c6 84 24 ea 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2186], 131 ; 00000083H
  04429	c6 84 24 eb 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2187], 116 ; 00000074H
  04431	c6 84 24 ec 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2188], 36 ; 00000024H
  04439	c6 84 24 ed 08
	00 00 26	 mov	 BYTE PTR $T5[rsp+2189], 38 ; 00000026H
  04441	c6 84 24 ee 08
	00 00 3c	 mov	 BYTE PTR $T5[rsp+2190], 60 ; 0000003cH
  04449	c6 84 24 ef 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2191], 102 ; 00000066H
  04451	c6 84 24 f0 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2192], 131 ; 00000083H
  04459	c6 84 24 f1 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2193], 116 ; 00000074H
  04461	c6 84 24 f2 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2194], 36 ; 00000024H
  04469	c6 84 24 f3 08
	00 00 28	 mov	 BYTE PTR $T5[rsp+2195], 40 ; 00000028H
  04471	c6 84 24 f4 08
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2196], 61 ; 0000003dH
  04479	c6 84 24 f5 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2197], 102 ; 00000066H
  04481	c6 84 24 f6 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2198], 131 ; 00000083H
  04489	c6 84 24 f7 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2199], 116 ; 00000074H
  04491	c6 84 24 f8 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2200], 36 ; 00000024H
  04499	c6 84 24 f9 08
	00 00 2a	 mov	 BYTE PTR $T5[rsp+2201], 42 ; 0000002aH
  044a1	c6 84 24 fa 08
	00 00 3e	 mov	 BYTE PTR $T5[rsp+2202], 62 ; 0000003eH
  044a9	c6 84 24 fb 08
	00 00 66	 mov	 BYTE PTR $T5[rsp+2203], 102 ; 00000066H
  044b1	c6 84 24 fc 08
	00 00 83	 mov	 BYTE PTR $T5[rsp+2204], 131 ; 00000083H
  044b9	c6 84 24 fd 08
	00 00 74	 mov	 BYTE PTR $T5[rsp+2205], 116 ; 00000074H
  044c1	c6 84 24 fe 08
	00 00 24	 mov	 BYTE PTR $T5[rsp+2206], 36 ; 00000024H
  044c9	c6 84 24 ff 08
	00 00 2c	 mov	 BYTE PTR $T5[rsp+2207], 44 ; 0000002cH
  044d1	c6 84 24 00 09
	00 00 3f	 mov	 BYTE PTR $T5[rsp+2208], 63 ; 0000003fH
  044d9	c6 84 24 01 09
	00 00 66	 mov	 BYTE PTR $T5[rsp+2209], 102 ; 00000066H
  044e1	c6 84 24 02 09
	00 00 83	 mov	 BYTE PTR $T5[rsp+2210], 131 ; 00000083H
  044e9	c6 84 24 03 09
	00 00 74	 mov	 BYTE PTR $T5[rsp+2211], 116 ; 00000074H
  044f1	c6 84 24 04 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2212], 36 ; 00000024H
  044f9	c6 84 24 05 09
	00 00 2e	 mov	 BYTE PTR $T5[rsp+2213], 46 ; 0000002eH
  04501	c6 84 24 06 09
	00 00 40	 mov	 BYTE PTR $T5[rsp+2214], 64 ; 00000040H
  04509	c6 84 24 07 09
	00 00 66	 mov	 BYTE PTR $T5[rsp+2215], 102 ; 00000066H
  04511	c6 84 24 08 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2216], 137 ; 00000089H
  04519	c6 84 24 09 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2217], 76 ; 0000004cH
  04521	c6 84 24 0a 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2218], 36 ; 00000024H
  04529	c6 84 24 0b 09
	00 00 20	 mov	 BYTE PTR $T5[rsp+2219], 32 ; 00000020H
  04531	c6 84 24 0c 09
	00 00 48	 mov	 BYTE PTR $T5[rsp+2220], 72 ; 00000048H
  04539	c6 84 24 0d 09
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2221], 141 ; 0000008dH
  04541	c6 84 24 0e 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2222], 76 ; 0000004cH
  04549	c6 84 24 0f 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2223], 36 ; 00000024H
  04551	c6 84 24 10 09
	00 00 20	 mov	 BYTE PTR $T5[rsp+2224], 32 ; 00000020H
  04559	c6 84 24 11 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2225], 76 ; 0000004cH
  04561	c6 84 24 12 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2226], 137 ; 00000089H
  04569	c6 84 24 13 09
	00 00 a4	 mov	 BYTE PTR $T5[rsp+2227], 164 ; 000000a4H
  04571	c6 84 24 14 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2228], 36 ; 00000024H
  04579	c6 84 24 15 09
	00 00 a0	 mov	 BYTE PTR $T5[rsp+2229], 160 ; 000000a0H
  04581	c6 84 24 16 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2230], 1
  04589	c6 84 24 17 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2231], 0
  04591	c6 84 24 18 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2232], 0
  04599	c6 84 24 19 09
	00 00 66	 mov	 BYTE PTR $T5[rsp+2233], 102 ; 00000066H
  045a1	c6 84 24 1a 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2234], 137 ; 00000089H
  045a9	c6 84 24 1b 09
	00 00 44	 mov	 BYTE PTR $T5[rsp+2235], 68 ; 00000044H
  045b1	c6 84 24 1c 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2236], 36 ; 00000024H
  045b9	c6 84 24 1d 09
	00 00 34	 mov	 BYTE PTR $T5[rsp+2237], 52 ; 00000034H
  045c1	c6 84 24 1e 09
	00 00 e8	 mov	 BYTE PTR $T5[rsp+2238], 232 ; 000000e8H
  045c9	c6 84 24 1f 09
	00 00 9d	 mov	 BYTE PTR $T5[rsp+2239], 157 ; 0000009dH
  045d1	c6 84 24 20 09
	00 00 08	 mov	 BYTE PTR $T5[rsp+2240], 8
  045d9	c6 84 24 21 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2241], 0
  045e1	c6 84 24 22 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2242], 0
  045e9	c6 84 24 23 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2243], 76 ; 0000004cH
  045f1	c6 84 24 24 09
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2244], 139 ; 0000008bH
  045f9	c6 84 24 25 09
	00 00 e0	 mov	 BYTE PTR $T5[rsp+2245], 224 ; 000000e0H
  04601	c6 84 24 26 09
	00 00 48	 mov	 BYTE PTR $T5[rsp+2246], 72 ; 00000048H
  04609	c6 84 24 27 09
	00 00 85	 mov	 BYTE PTR $T5[rsp+2247], 133 ; 00000085H
  04611	c6 84 24 28 09
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2248], 192 ; 000000c0H
  04619	c6 84 24 29 09
	00 00 75	 mov	 BYTE PTR $T5[rsp+2249], 117 ; 00000075H
  04621	c6 84 24 2a 09
	00 00 1b	 mov	 BYTE PTR $T5[rsp+2250], 27
  04629	c6 84 24 2b 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2251], 76 ; 0000004cH
  04631	c6 84 24 2c 09
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2252], 141 ; 0000008dH
  04639	c6 84 24 2d 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2253], 5
  04641	c6 84 24 2e 09
	00 00 2e	 mov	 BYTE PTR $T5[rsp+2254], 46 ; 0000002eH
  04649	c6 84 24 2f 09
	00 00 0c	 mov	 BYTE PTR $T5[rsp+2255], 12
  04651	c6 84 24 30 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2256], 0
  04659	c6 84 24 31 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2257], 0
  04661	c6 84 24 32 09
	00 00 33	 mov	 BYTE PTR $T5[rsp+2258], 51 ; 00000033H
  04669	c6 84 24 33 09
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2259], 210 ; 000000d2H
  04671	c6 84 24 34 09
	00 00 33	 mov	 BYTE PTR $T5[rsp+2260], 51 ; 00000033H
  04679	c6 84 24 35 09
	00 00 c9	 mov	 BYTE PTR $T5[rsp+2261], 201 ; 000000c9H
  04681	c6 84 24 36 09
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2262], 255 ; 000000ffH
  04689	c6 84 24 37 09
	00 00 15	 mov	 BYTE PTR $T5[rsp+2263], 21
  04691	c6 84 24 38 09
	00 00 74	 mov	 BYTE PTR $T5[rsp+2264], 116 ; 00000074H
  04699	c6 84 24 39 09
	00 00 1b	 mov	 BYTE PTR $T5[rsp+2265], 27
  046a1	c6 84 24 3a 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2266], 0
  046a9	c6 84 24 3b 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2267], 0
  046b1	c6 84 24 3c 09
	00 00 b8	 mov	 BYTE PTR $T5[rsp+2268], 184 ; 000000b8H
  046b9	c6 84 24 3d 09
	00 00 80	 mov	 BYTE PTR $T5[rsp+2269], 128 ; 00000080H
  046c1	c6 84 24 3e 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2270], 0
  046c9	c6 84 24 3f 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2271], 0
  046d1	c6 84 24 40 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2272], 0
  046d9	c6 84 24 41 09
	00 00 e9	 mov	 BYTE PTR $T5[rsp+2273], 233 ; 000000e9H
  046e1	c6 84 24 42 09
	00 00 54	 mov	 BYTE PTR $T5[rsp+2274], 84 ; 00000054H
  046e9	c6 84 24 43 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2275], 5
  046f1	c6 84 24 44 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2276], 0
  046f9	c6 84 24 45 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2277], 0
  04701	c6 84 24 46 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2278], 15
  04709	c6 84 24 47 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2279], 16
  04711	c6 84 24 48 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2280], 5
  04719	c6 84 24 49 09
	00 00 73	 mov	 BYTE PTR $T5[rsp+2281], 115 ; 00000073H
  04721	c6 84 24 4a 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2282], 28
  04729	c6 84 24 4b 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2283], 0
  04731	c6 84 24 4c 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2284], 0
  04739	c6 84 24 4d 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2285], 69 ; 00000045H
  04741	c6 84 24 4e 09
	00 00 33	 mov	 BYTE PTR $T5[rsp+2286], 51 ; 00000033H
  04749	c6 84 24 4f 09
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2287], 192 ; 000000c0H
  04751	c6 84 24 50 09
	00 00 83	 mov	 BYTE PTR $T5[rsp+2288], 131 ; 00000083H
  04759	c6 84 24 51 09
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2289], 61 ; 0000003dH
  04761	c6 84 24 52 09
	00 00 29	 mov	 BYTE PTR $T5[rsp+2290], 41 ; 00000029H
  04769	c6 84 24 53 09
	00 00 2b	 mov	 BYTE PTR $T5[rsp+2291], 43 ; 0000002bH
  04771	c6 84 24 54 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2292], 0
  04779	c6 84 24 55 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2293], 0
  04781	c6 84 24 56 09
	00 00 02	 mov	 BYTE PTR $T5[rsp+2294], 2
  04789	c6 84 24 57 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2295], 15
  04791	c6 84 24 58 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2296], 16
  04799	c6 84 24 59 09
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2297], 13
  047a1	c6 84 24 5a 09
	00 00 72	 mov	 BYTE PTR $T5[rsp+2298], 114 ; 00000072H
  047a9	c6 84 24 5b 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2299], 28
  047b1	c6 84 24 5c 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2300], 0
  047b9	c6 84 24 5d 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2301], 0
  047c1	c6 84 24 5e 09
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2302], 139 ; 0000008bH
  047c9	c6 84 24 5f 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2303], 5
  047d1	c6 84 24 60 09
	00 00 c4	 mov	 BYTE PTR $T5[rsp+2304], 196 ; 000000c4H
  047d9	c6 84 24 61 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2305], 28
  047e1	c6 84 24 62 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2306], 0
  047e9	c6 84 24 63 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2307], 0
  047f1	c6 84 24 64 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2308], 76 ; 0000004cH
  047f9	c6 84 24 65 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2309], 137 ; 00000089H
  04801	c6 84 24 66 09
	00 00 ac	 mov	 BYTE PTR $T5[rsp+2310], 172 ; 000000acH
  04809	c6 84 24 67 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2311], 36 ; 00000024H
  04811	c6 84 24 68 09
	00 00 a8	 mov	 BYTE PTR $T5[rsp+2312], 168 ; 000000a8H
  04819	c6 84 24 69 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2313], 1
  04821	c6 84 24 6a 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2314], 0
  04829	c6 84 24 6b 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2315], 0
  04831	c6 84 24 6c 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2316], 69 ; 00000045H
  04839	c6 84 24 6d 09
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2317], 141 ; 0000008dH
  04841	c6 84 24 6e 09
	00 00 50	 mov	 BYTE PTR $T5[rsp+2318], 80 ; 00000050H
  04849	c6 84 24 6f 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2319], 5
  04851	c6 84 24 70 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2320], 76 ; 0000004cH
  04859	c6 84 24 71 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2321], 137 ; 00000089H
  04861	c6 84 24 72 09
	00 00 b4	 mov	 BYTE PTR $T5[rsp+2322], 180 ; 000000b4H
  04869	c6 84 24 73 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2323], 36 ; 00000024H
  04871	c6 84 24 74 09
	00 00 b8	 mov	 BYTE PTR $T5[rsp+2324], 184 ; 000000b8H
  04879	c6 84 24 75 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2325], 1
  04881	c6 84 24 76 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2326], 0
  04889	c6 84 24 77 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2327], 0
  04891	c6 84 24 78 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2328], 69 ; 00000045H
  04899	c6 84 24 79 09
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2329], 141 ; 0000008dH
  048a1	c6 84 24 7a 09
	00 00 58	 mov	 BYTE PTR $T5[rsp+2330], 88 ; 00000058H
  048a9	c6 84 24 7b 09
	00 00 1f	 mov	 BYTE PTR $T5[rsp+2331], 31
  048b1	c6 84 24 7c 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2332], 15
  048b9	c6 84 24 7d 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2333], 17
  048c1	c6 84 24 7e 09
	00 00 44	 mov	 BYTE PTR $T5[rsp+2334], 68 ; 00000044H
  048c9	c6 84 24 7f 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2335], 36 ; 00000024H
  048d1	c6 84 24 80 09
	00 00 60	 mov	 BYTE PTR $T5[rsp+2336], 96 ; 00000060H
  048d9	c6 84 24 81 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2337], 76 ; 0000004cH
  048e1	c6 84 24 82 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2338], 137 ; 00000089H
  048e9	c6 84 24 83 09
	00 00 bc	 mov	 BYTE PTR $T5[rsp+2339], 188 ; 000000bcH
  048f1	c6 84 24 84 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2340], 36 ; 00000024H
  048f9	c6 84 24 85 09
	00 00 70	 mov	 BYTE PTR $T5[rsp+2341], 112 ; 00000070H
  04901	c6 84 24 86 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2342], 1
  04909	c6 84 24 87 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2343], 0
  04911	c6 84 24 88 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2344], 0
  04919	c6 84 24 89 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2345], 15
  04921	c6 84 24 8a 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2346], 16
  04929	c6 84 24 8b 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2347], 5
  04931	c6 84 24 8c 09
	00 00 50	 mov	 BYTE PTR $T5[rsp+2348], 80 ; 00000050H
  04939	c6 84 24 8d 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2349], 28
  04941	c6 84 24 8e 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2350], 0
  04949	c6 84 24 8f 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2351], 0
  04951	c6 84 24 90 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2352], 15
  04959	c6 84 24 91 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2353], 17
  04961	c6 84 24 92 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2354], 69 ; 00000045H
  04969	c6 84 24 93 09
	00 00 80	 mov	 BYTE PTR $T5[rsp+2355], 128 ; 00000080H
  04971	c6 84 24 94 09
	00 00 89	 mov	 BYTE PTR $T5[rsp+2356], 137 ; 00000089H
  04979	c6 84 24 95 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2357], 69 ; 00000045H
  04981	c6 84 24 96 09
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2358], 200 ; 000000c8H
  04989	c6 84 24 97 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2359], 15
  04991	c6 84 24 98 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2360], 16
  04999	c6 84 24 99 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2361], 5
  049a1	c6 84 24 9a 09
	00 00 62	 mov	 BYTE PTR $T5[rsp+2362], 98 ; 00000062H
  049a9	c6 84 24 9b 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2363], 28
  049b1	c6 84 24 9c 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2364], 0
  049b9	c6 84 24 9d 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2365], 0
  049c1	c6 84 24 9e 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2366], 15
  049c9	c6 84 24 9f 09
	00 00 b6	 mov	 BYTE PTR $T5[rsp+2367], 182 ; 000000b6H
  049d1	c6 84 24 a0 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2368], 5
  049d9	c6 84 24 a1 09
	00 00 87	 mov	 BYTE PTR $T5[rsp+2369], 135 ; 00000087H
  049e1	c6 84 24 a2 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2370], 28
  049e9	c6 84 24 a3 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2371], 0
  049f1	c6 84 24 a4 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2372], 0
  049f9	c6 84 24 a5 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2373], 15
  04a01	c6 84 24 a6 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2374], 17
  04a09	c6 84 24 a7 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2375], 76 ; 0000004cH
  04a11	c6 84 24 a8 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2376], 36 ; 00000024H
  04a19	c6 84 24 a9 09
	00 00 70	 mov	 BYTE PTR $T5[rsp+2377], 112 ; 00000070H
  04a21	c6 84 24 aa 09
	00 00 88	 mov	 BYTE PTR $T5[rsp+2378], 136 ; 00000088H
  04a29	c6 84 24 ab 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2379], 69 ; 00000045H
  04a31	c6 84 24 ac 09
	00 00 cc	 mov	 BYTE PTR $T5[rsp+2380], 204 ; 000000ccH
  04a39	c6 84 24 ad 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2381], 15
  04a41	c6 84 24 ae 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2382], 16
  04a49	c6 84 24 af 09
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2383], 13
  04a51	c6 84 24 b0 09
	00 00 3c	 mov	 BYTE PTR $T5[rsp+2384], 60 ; 0000003cH
  04a59	c6 84 24 b1 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2385], 28
  04a61	c6 84 24 b2 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2386], 0
  04a69	c6 84 24 b3 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2387], 0
  04a71	c6 84 24 b4 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2388], 15
  04a79	c6 84 24 b5 09
	00 00 29	 mov	 BYTE PTR $T5[rsp+2389], 41 ; 00000029H
  04a81	c6 84 24 b6 09
	00 00 b4	 mov	 BYTE PTR $T5[rsp+2390], 180 ; 000000b4H
  04a89	c6 84 24 b7 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2391], 36 ; 00000024H
  04a91	c6 84 24 b8 09
	00 00 60	 mov	 BYTE PTR $T5[rsp+2392], 96 ; 00000060H
  04a99	c6 84 24 b9 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2393], 1
  04aa1	c6 84 24 ba 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2394], 0
  04aa9	c6 84 24 bb 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2395], 0
  04ab1	c6 84 24 bc 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2396], 15
  04ab9	c6 84 24 bd 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2397], 17
  04ac1	c6 84 24 be 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2398], 69 ; 00000045H
  04ac9	c6 84 24 bf 09
	00 00 a0	 mov	 BYTE PTR $T5[rsp+2399], 160 ; 000000a0H
  04ad1	c6 84 24 c0 09
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2400], 242 ; 000000f2H
  04ad9	c6 84 24 c1 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2401], 15
  04ae1	c6 84 24 c2 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2402], 16
  04ae9	c6 84 24 c3 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2403], 5
  04af1	c6 84 24 c4 09
	00 00 58	 mov	 BYTE PTR $T5[rsp+2404], 88 ; 00000058H
  04af9	c6 84 24 c5 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2405], 28
  04b01	c6 84 24 c6 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2406], 0
  04b09	c6 84 24 c7 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2407], 0
  04b11	c6 84 24 c8 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2408], 15
  04b19	c6 84 24 c9 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2409], 17
  04b21	c6 84 24 ca 09
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2410], 77 ; 0000004dH
  04b29	c6 84 24 cb 09
	00 00 90	 mov	 BYTE PTR $T5[rsp+2411], 144 ; 00000090H
  04b31	c6 84 24 cc 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2412], 15
  04b39	c6 84 24 cd 09
	00 00 10	 mov	 BYTE PTR $T5[rsp+2413], 16
  04b41	c6 84 24 ce 09
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2414], 13
  04b49	c6 84 24 cf 09
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2415], 61 ; 0000003dH
  04b51	c6 84 24 d0 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2416], 28
  04b59	c6 84 24 d1 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2417], 0
  04b61	c6 84 24 d2 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2418], 0
  04b69	c6 84 24 d3 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2419], 15
  04b71	c6 84 24 d4 09
	00 00 29	 mov	 BYTE PTR $T5[rsp+2420], 41 ; 00000029H
  04b79	c6 84 24 d5 09
	00 00 bc	 mov	 BYTE PTR $T5[rsp+2421], 188 ; 000000bcH
  04b81	c6 84 24 d6 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2422], 36 ; 00000024H
  04b89	c6 84 24 d7 09
	00 00 50	 mov	 BYTE PTR $T5[rsp+2423], 80 ; 00000050H
  04b91	c6 84 24 d8 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2424], 1
  04b99	c6 84 24 d9 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2425], 0
  04ba1	c6 84 24 da 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2426], 0
  04ba9	c6 84 24 db 09
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2427], 242 ; 000000f2H
  04bb1	c6 84 24 dc 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2428], 15
  04bb9	c6 84 24 dd 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2429], 17
  04bc1	c6 84 24 de 09
	00 00 45	 mov	 BYTE PTR $T5[rsp+2430], 69 ; 00000045H
  04bc9	c6 84 24 df 09
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2431], 192 ; 000000c0H
  04bd1	c6 84 24 e0 09
	00 00 44	 mov	 BYTE PTR $T5[rsp+2432], 68 ; 00000044H
  04bd9	c6 84 24 e1 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2433], 15
  04be1	c6 84 24 e2 09
	00 00 29	 mov	 BYTE PTR $T5[rsp+2434], 41 ; 00000029H
  04be9	c6 84 24 e3 09
	00 00 84	 mov	 BYTE PTR $T5[rsp+2435], 132 ; 00000084H
  04bf1	c6 84 24 e4 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2436], 36 ; 00000024H
  04bf9	c6 84 24 e5 09
	00 00 40	 mov	 BYTE PTR $T5[rsp+2437], 64 ; 00000040H
  04c01	c6 84 24 e6 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2438], 1
  04c09	c6 84 24 e7 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2439], 0
  04c11	c6 84 24 e8 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2440], 0
  04c19	c6 84 24 e9 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2441], 15
  04c21	c6 84 24 ea 09
	00 00 11	 mov	 BYTE PTR $T5[rsp+2442], 17
  04c29	c6 84 24 eb 09
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2443], 77 ; 0000004dH
  04c31	c6 84 24 ec 09
	00 00 b0	 mov	 BYTE PTR $T5[rsp+2444], 176 ; 000000b0H
  04c39	c6 84 24 ed 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2445], 15
  04c41	c6 84 24 ee 09
	00 00 8c	 mov	 BYTE PTR $T5[rsp+2446], 140 ; 0000008cH
  04c49	c6 84 24 ef 09
	00 00 4e	 mov	 BYTE PTR $T5[rsp+2447], 78 ; 0000004eH
  04c51	c6 84 24 f0 09
	00 00 01	 mov	 BYTE PTR $T5[rsp+2448], 1
  04c59	c6 84 24 f1 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2449], 0
  04c61	c6 84 24 f2 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2450], 0
  04c69	c6 84 24 f3 09
	00 00 66	 mov	 BYTE PTR $T5[rsp+2451], 102 ; 00000066H
  04c71	c6 84 24 f4 09
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2452], 15
  04c79	c6 84 24 f5 09
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2453], 111 ; 0000006fH
  04c81	c6 84 24 f6 09
	00 00 05	 mov	 BYTE PTR $T5[rsp+2454], 5
  04c89	c6 84 24 f7 09
	00 00 65	 mov	 BYTE PTR $T5[rsp+2455], 101 ; 00000065H
  04c91	c6 84 24 f8 09
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2456], 28
  04c99	c6 84 24 f9 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2457], 0
  04ca1	c6 84 24 fa 09
	00 00 00	 mov	 BYTE PTR $T5[rsp+2458], 0
  04ca9	c6 84 24 fb 09
	00 00 48	 mov	 BYTE PTR $T5[rsp+2459], 72 ; 00000048H
  04cb1	c6 84 24 fc 09
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2460], 141 ; 0000008dH
  04cb9	c6 84 24 fd 09
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2461], 76 ; 0000004cH
  04cc1	c6 84 24 fe 09
	00 00 24	 mov	 BYTE PTR $T5[rsp+2462], 36 ; 00000024H
  04cc9	c6 84 24 ff 09
	00 00 64	 mov	 BYTE PTR $T5[rsp+2463], 100 ; 00000064H
  04cd1	c6 84 24 00 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2464], 102 ; 00000066H
  04cd9	c6 84 24 01 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2465], 15
  04ce1	c6 84 24 02 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2466], 111 ; 0000006fH
  04ce9	c6 84 24 03 0a
	00 00 2d	 mov	 BYTE PTR $T5[rsp+2467], 45 ; 0000002dH
  04cf1	c6 84 24 04 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2468], 40 ; 00000028H
  04cf9	c6 84 24 05 0a
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2469], 28
  04d01	c6 84 24 06 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2470], 0
  04d09	c6 84 24 07 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2471], 0
  04d11	c6 84 24 08 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2472], 102 ; 00000066H
  04d19	c6 84 24 09 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2473], 15
  04d21	c6 84 24 0a 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2474], 111 ; 0000006fH
  04d29	c6 84 24 0b 0a
	00 00 25	 mov	 BYTE PTR $T5[rsp+2475], 37 ; 00000025H
  04d31	c6 84 24 0c 0a
	00 00 60	 mov	 BYTE PTR $T5[rsp+2476], 96 ; 00000060H
  04d39	c6 84 24 0d 0a
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2477], 28
  04d41	c6 84 24 0e 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2478], 0
  04d49	c6 84 24 0f 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2479], 0
  04d51	c6 84 24 10 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2480], 102 ; 00000066H
  04d59	c6 84 24 11 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2481], 15
  04d61	c6 84 24 12 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2482], 111 ; 0000006fH
  04d69	c6 84 24 13 0a
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2483], 61 ; 0000003dH
  04d71	c6 84 24 14 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2484], 40 ; 00000028H
  04d79	c6 84 24 15 0a
	00 00 1c	 mov	 BYTE PTR $T5[rsp+2485], 28
  04d81	c6 84 24 16 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2486], 0
  04d89	c6 84 24 17 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2487], 0
  04d91	c6 84 24 18 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2488], 102 ; 00000066H
  04d99	c6 84 24 19 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2489], 15
  04da1	c6 84 24 1a 0a
	00 00 7f	 mov	 BYTE PTR $T5[rsp+2490], 127 ; 0000007fH
  04da9	c6 84 24 1b 0a
	00 00 44	 mov	 BYTE PTR $T5[rsp+2491], 68 ; 00000044H
  04db1	c6 84 24 1c 0a
	00 00 24	 mov	 BYTE PTR $T5[rsp+2492], 36 ; 00000024H
  04db9	c6 84 24 1d 0a
	00 00 50	 mov	 BYTE PTR $T5[rsp+2493], 80 ; 00000050H
  04dc1	c6 84 24 1e 0a
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2494], 139 ; 0000008bH
  04dc9	c6 84 24 1f 0a
	00 00 54	 mov	 BYTE PTR $T5[rsp+2495], 84 ; 00000054H
  04dd1	c6 84 24 20 0a
	00 00 24	 mov	 BYTE PTR $T5[rsp+2496], 36 ; 00000024H
  04dd9	c6 84 24 21 0a
	00 00 50	 mov	 BYTE PTR $T5[rsp+2497], 80 ; 00000050H
  04de1	c6 84 24 22 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2498], 102 ; 00000066H
  04de9	c6 84 24 23 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2499], 65 ; 00000041H
  04df1	c6 84 24 24 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2500], 15
  04df9	c6 84 24 25 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2501], 110 ; 0000006eH
  04e01	c6 84 24 26 0a
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2502], 242 ; 000000f2H
  04e09	c6 84 24 27 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2503], 102 ; 00000066H
  04e11	c6 84 24 28 0a
	00 00 45	 mov	 BYTE PTR $T5[rsp+2504], 69 ; 00000045H
  04e19	c6 84 24 29 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2505], 15
  04e21	c6 84 24 2a 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2506], 110 ; 0000006eH
  04e29	c6 84 24 2b 0a
	00 00 c3	 mov	 BYTE PTR $T5[rsp+2507], 195 ; 000000c3H
  04e31	c6 84 24 2c 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2508], 15
  04e39	c6 84 24 2d 0a
	00 00 1f	 mov	 BYTE PTR $T5[rsp+2509], 31
  04e41	c6 84 24 2e 0a
	00 00 40	 mov	 BYTE PTR $T5[rsp+2510], 64 ; 00000040H
  04e49	c6 84 24 2f 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2511], 0
  04e51	c6 84 24 30 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2512], 102 ; 00000066H
  04e59	c6 84 24 31 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2513], 65 ; 00000041H
  04e61	c6 84 24 32 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2514], 15
  04e69	c6 84 24 33 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2515], 110 ; 0000006eH
  04e71	c6 84 24 34 0a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2516], 208 ; 000000d0H
  04e79	c6 84 24 35 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2517], 65 ; 00000041H
  04e81	c6 84 24 36 0a
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2518], 141 ; 0000008dH
  04e89	c6 84 24 37 0a
	00 00 40	 mov	 BYTE PTR $T5[rsp+2519], 64 ; 00000040H
  04e91	c6 84 24 38 0a
	00 00 04	 mov	 BYTE PTR $T5[rsp+2520], 4
  04e99	c6 84 24 39 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2521], 102 ; 00000066H
  04ea1	c6 84 24 3a 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2522], 15
  04ea9	c6 84 24 3b 0a
	00 00 70	 mov	 BYTE PTR $T5[rsp+2523], 112 ; 00000070H
  04eb1	c6 84 24 3c 0a
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2524], 210 ; 000000d2H
  04eb9	c6 84 24 3d 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2525], 0
  04ec1	c6 84 24 3e 0a
	00 00 48	 mov	 BYTE PTR $T5[rsp+2526], 72 ; 00000048H
  04ec9	c6 84 24 3f 0a
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2527], 141 ; 0000008dH
  04ed1	c6 84 24 40 0a
	00 00 49	 mov	 BYTE PTR $T5[rsp+2528], 73 ; 00000049H
  04ed9	c6 84 24 41 0a
	00 00 08	 mov	 BYTE PTR $T5[rsp+2529], 8
  04ee1	c6 84 24 42 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2530], 102 ; 00000066H
  04ee9	c6 84 24 43 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2531], 15
  04ef1	c6 84 24 44 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2532], 254 ; 000000feH
  04ef9	c6 84 24 45 0a
	00 00 d5	 mov	 BYTE PTR $T5[rsp+2533], 213 ; 000000d5H
  04f01	c6 84 24 46 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2534], 102 ; 00000066H
  04f09	c6 84 24 47 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2535], 15
  04f11	c6 84 24 48 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2536], 110 ; 0000006eH
  04f19	c6 84 24 49 0a
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2537], 216 ; 000000d8H
  04f21	c6 84 24 4a 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2538], 102 ; 00000066H
  04f29	c6 84 24 4b 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2539], 15
  04f31	c6 84 24 4c 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2540], 111 ; 0000006fH
  04f39	c6 84 24 4d 0a
	00 00 ca	 mov	 BYTE PTR $T5[rsp+2541], 202 ; 000000caH
  04f41	c6 84 24 4e 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2542], 102 ; 00000066H
  04f49	c6 84 24 4f 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2543], 15
  04f51	c6 84 24 50 0a
	00 00 70	 mov	 BYTE PTR $T5[rsp+2544], 112 ; 00000070H
  04f59	c6 84 24 51 0a
	00 00 db	 mov	 BYTE PTR $T5[rsp+2545], 219 ; 000000dbH
  04f61	c6 84 24 52 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2546], 0
  04f69	c6 84 24 53 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2547], 102 ; 00000066H
  04f71	c6 84 24 54 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2548], 15
  04f79	c6 84 24 55 0a
	00 00 62	 mov	 BYTE PTR $T5[rsp+2549], 98 ; 00000062H
  04f81	c6 84 24 56 0a
	00 00 ca	 mov	 BYTE PTR $T5[rsp+2550], 202 ; 000000caH
  04f89	c6 84 24 57 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2551], 102 ; 00000066H
  04f91	c6 84 24 58 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2552], 15
  04f99	c6 84 24 59 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2553], 111 ; 0000006fH
  04fa1	c6 84 24 5a 0a
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2554], 194 ; 000000c2H
  04fa9	c6 84 24 5b 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2555], 102 ; 00000066H
  04fb1	c6 84 24 5c 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2556], 15
  04fb9	c6 84 24 5d 0a
	00 00 6a	 mov	 BYTE PTR $T5[rsp+2557], 106 ; 0000006aH
  04fc1	c6 84 24 5e 0a
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2558], 194 ; 000000c2H
  04fc9	c6 84 24 5f 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2559], 102 ; 00000066H
  04fd1	c6 84 24 60 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2560], 15
  04fd9	c6 84 24 61 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2561], 254 ; 000000feH
  04fe1	c6 84 24 62 0a
	00 00 dd	 mov	 BYTE PTR $T5[rsp+2562], 221 ; 000000ddH
  04fe9	c6 84 24 63 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2563], 102 ; 00000066H
  04ff1	c6 84 24 64 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2564], 15
  04ff9	c6 84 24 65 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2565], 56 ; 00000038H
  05001	c6 84 24 66 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2566], 40 ; 00000028H
  05009	c6 84 24 67 0a
	00 00 c4	 mov	 BYTE PTR $T5[rsp+2567], 196 ; 000000c4H
  05011	c6 84 24 68 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2568], 65 ; 00000041H
  05019	c6 84 24 69 0a
	00 00 83	 mov	 BYTE PTR $T5[rsp+2569], 131 ; 00000083H
  05021	c6 84 24 6a 0a
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2570], 192 ; 000000c0H
  05029	c6 84 24 6b 0a
	00 00 08	 mov	 BYTE PTR $T5[rsp+2571], 8
  05031	c6 84 24 6c 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2572], 102 ; 00000066H
  05039	c6 84 24 6d 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2573], 15
  05041	c6 84 24 6e 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2574], 56 ; 00000038H
  05049	c6 84 24 6f 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2575], 40 ; 00000028H
  05051	c6 84 24 70 0a
	00 00 cc	 mov	 BYTE PTR $T5[rsp+2576], 204 ; 000000ccH
  05059	c6 84 24 71 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2577], 15
  05061	c6 84 24 72 0a
	00 00 c6	 mov	 BYTE PTR $T5[rsp+2578], 198 ; 000000c6H
  05069	c6 84 24 73 0a
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2579], 200 ; 000000c8H
  05071	c6 84 24 74 0a
	00 00 dd	 mov	 BYTE PTR $T5[rsp+2580], 221 ; 000000ddH
  05079	c6 84 24 75 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2581], 102 ; 00000066H
  05081	c6 84 24 76 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2582], 15
  05089	c6 84 24 77 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2583], 254 ; 000000feH
  05091	c6 84 24 78 0a
	00 00 ca	 mov	 BYTE PTR $T5[rsp+2584], 202 ; 000000caH
  05099	c6 84 24 79 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2585], 102 ; 00000066H
  050a1	c6 84 24 7a 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2586], 15
  050a9	c6 84 24 7b 0a
	00 00 e2	 mov	 BYTE PTR $T5[rsp+2587], 226 ; 000000e2H
  050b1	c6 84 24 7c 0a
	00 00 ce	 mov	 BYTE PTR $T5[rsp+2588], 206 ; 000000ceH
  050b9	c6 84 24 7d 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2589], 102 ; 00000066H
  050c1	c6 84 24 7e 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2590], 15
  050c9	c6 84 24 7f 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2591], 111 ; 0000006fH
  050d1	c6 84 24 80 0a
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2592], 193 ; 000000c1H
  050d9	c6 84 24 81 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2593], 102 ; 00000066H
  050e1	c6 84 24 82 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2594], 65 ; 00000041H
  050e9	c6 84 24 83 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2595], 15
  050f1	c6 84 24 84 0a
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2596], 210 ; 000000d2H
  050f9	c6 84 24 85 0a
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2597], 192 ; 000000c0H
  05101	c6 84 24 86 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2598], 102 ; 00000066H
  05109	c6 84 24 87 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2599], 15
  05111	c6 84 24 88 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2600], 254 ; 000000feH
  05119	c6 84 24 89 0a
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2601], 193 ; 000000c1H
  05121	c6 84 24 8a 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2602], 102 ; 00000066H
  05129	c6 84 24 8b 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2603], 15
  05131	c6 84 24 8c 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2604], 56 ; 00000038H
  05139	c6 84 24 8d 0a
	00 00 40	 mov	 BYTE PTR $T5[rsp+2605], 64 ; 00000040H
  05141	c6 84 24 8e 0a
	00 00 c7	 mov	 BYTE PTR $T5[rsp+2606], 199 ; 000000c7H
  05149	c6 84 24 8f 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2607], 102 ; 00000066H
  05151	c6 84 24 90 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2608], 15
  05159	c6 84 24 91 0a
	00 00 fa	 mov	 BYTE PTR $T5[rsp+2609], 250 ; 000000faH
  05161	c6 84 24 92 0a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2610], 208 ; 000000d0H
  05169	c6 84 24 93 0a
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2611], 242 ; 000000f2H
  05171	c6 84 24 94 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2612], 15
  05179	c6 84 24 95 0a
	00 00 70	 mov	 BYTE PTR $T5[rsp+2613], 112 ; 00000070H
  05181	c6 84 24 96 0a
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2614], 194 ; 000000c2H
  05189	c6 84 24 97 0a
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2615], 216 ; 000000d8H
  05191	c6 84 24 98 0a
	00 00 f3	 mov	 BYTE PTR $T5[rsp+2616], 243 ; 000000f3H
  05199	c6 84 24 99 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2617], 15
  051a1	c6 84 24 9a 0a
	00 00 70	 mov	 BYTE PTR $T5[rsp+2618], 112 ; 00000070H
  051a9	c6 84 24 9b 0a
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2619], 200 ; 000000c8H
  051b1	c6 84 24 9c 0a
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2620], 216 ; 000000d8H
  051b9	c6 84 24 9d 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2621], 102 ; 00000066H
  051c1	c6 84 24 9e 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2622], 15
  051c9	c6 84 24 9f 0a
	00 00 70	 mov	 BYTE PTR $T5[rsp+2623], 112 ; 00000070H
  051d1	c6 84 24 a0 0a
	00 00 d1	 mov	 BYTE PTR $T5[rsp+2624], 209 ; 000000d1H
  051d9	c6 84 24 a1 0a
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2625], 216 ; 000000d8H
  051e1	c6 84 24 a2 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2626], 102 ; 00000066H
  051e9	c6 84 24 a3 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2627], 15
  051f1	c6 84 24 a4 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2628], 111 ; 0000006fH
  051f9	c6 84 24 a5 0a
	00 00 cb	 mov	 BYTE PTR $T5[rsp+2629], 203 ; 000000cbH
  05201	c6 84 24 a6 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2630], 102 ; 00000066H
  05209	c6 84 24 a7 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2631], 15
  05211	c6 84 24 a8 0a
	00 00 db	 mov	 BYTE PTR $T5[rsp+2632], 219 ; 000000dbH
  05219	c6 84 24 a9 0a
	00 00 15	 mov	 BYTE PTR $T5[rsp+2633], 21
  05221	c6 84 24 aa 0a
	00 00 a2	 mov	 BYTE PTR $T5[rsp+2634], 162 ; 000000a2H
  05229	c6 84 24 ab 0a
	00 00 1b	 mov	 BYTE PTR $T5[rsp+2635], 27
  05231	c6 84 24 ac 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2636], 0
  05239	c6 84 24 ad 0a
	00 00 00	 mov	 BYTE PTR $T5[rsp+2637], 0
  05241	c6 84 24 ae 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2638], 102 ; 00000066H
  05249	c6 84 24 af 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2639], 15
  05251	c6 84 24 b0 0a
	00 00 67	 mov	 BYTE PTR $T5[rsp+2640], 103 ; 00000067H
  05259	c6 84 24 b1 0a
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2641], 210 ; 000000d2H
  05261	c6 84 24 b2 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2642], 102 ; 00000066H
  05269	c6 84 24 b3 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2643], 15
  05271	c6 84 24 b4 0a
	00 00 62	 mov	 BYTE PTR $T5[rsp+2644], 98 ; 00000062H
  05279	c6 84 24 b5 0a
	00 00 cb	 mov	 BYTE PTR $T5[rsp+2645], 203 ; 000000cbH
  05281	c6 84 24 b6 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2646], 102 ; 00000066H
  05289	c6 84 24 b7 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2647], 15
  05291	c6 84 24 b8 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2648], 56 ; 00000038H
  05299	c6 84 24 b9 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2649], 40 ; 00000028H
  052a1	c6 84 24 ba 0a
	00 00 cc	 mov	 BYTE PTR $T5[rsp+2650], 204 ; 000000ccH
  052a9	c6 84 24 bb 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2651], 102 ; 00000066H
  052b1	c6 84 24 bc 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2652], 15
  052b9	c6 84 24 bd 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2653], 110 ; 0000006eH
  052c1	c6 84 24 be 0a
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2654], 194 ; 000000c2H
  052c9	c6 84 24 bf 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2655], 102 ; 00000066H
  052d1	c6 84 24 c0 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2656], 15
  052d9	c6 84 24 c1 0a
	00 00 fc	 mov	 BYTE PTR $T5[rsp+2657], 252 ; 000000fcH
  052e1	c6 84 24 c2 0a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2658], 208 ; 000000d0H
  052e9	c6 84 24 c3 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2659], 102 ; 00000066H
  052f1	c6 84 24 c4 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2660], 15
  052f9	c6 84 24 c5 0a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2661], 110 ; 0000006eH
  05301	c6 84 24 c6 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2662], 65 ; 00000041H
  05309	c6 84 24 c7 0a
	00 00 f4	 mov	 BYTE PTR $T5[rsp+2663], 244 ; 000000f4H
  05311	c6 84 24 c8 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2664], 102 ; 00000066H
  05319	c6 84 24 c9 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2665], 15
  05321	c6 84 24 ca 0a
	00 00 ef	 mov	 BYTE PTR $T5[rsp+2666], 239 ; 000000efH
  05329	c6 84 24 cb 0a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2667], 208 ; 000000d0H
  05331	c6 84 24 cc 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2668], 102 ; 00000066H
  05339	c6 84 24 cd 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2669], 15
  05341	c6 84 24 ce 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2670], 111 ; 0000006fH
  05349	c6 84 24 cf 0a
	00 00 c3	 mov	 BYTE PTR $T5[rsp+2671], 195 ; 000000c3H
  05351	c6 84 24 d0 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2672], 102 ; 00000066H
  05359	c6 84 24 d1 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2673], 15
  05361	c6 84 24 d2 0a
	00 00 6a	 mov	 BYTE PTR $T5[rsp+2674], 106 ; 0000006aH
  05369	c6 84 24 d3 0a
	00 00 c3	 mov	 BYTE PTR $T5[rsp+2675], 195 ; 000000c3H
  05371	c6 84 24 d4 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2676], 102 ; 00000066H
  05379	c6 84 24 d5 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2677], 15
  05381	c6 84 24 d6 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2678], 56 ; 00000038H
  05389	c6 84 24 d7 0a
	00 00 28	 mov	 BYTE PTR $T5[rsp+2679], 40 ; 00000028H
  05391	c6 84 24 d8 0a
	00 00 c4	 mov	 BYTE PTR $T5[rsp+2680], 196 ; 000000c4H
  05399	c6 84 24 d9 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2681], 102 ; 00000066H
  053a1	c6 84 24 da 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2682], 15
  053a9	c6 84 24 db 0a
	00 00 7e	 mov	 BYTE PTR $T5[rsp+2683], 126 ; 0000007eH
  053b1	c6 84 24 dc 0a
	00 00 51	 mov	 BYTE PTR $T5[rsp+2684], 81 ; 00000051H
  053b9	c6 84 24 dd 0a
	00 00 f4	 mov	 BYTE PTR $T5[rsp+2685], 244 ; 000000f4H
  053c1	c6 84 24 de 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2686], 15
  053c9	c6 84 24 df 0a
	00 00 c6	 mov	 BYTE PTR $T5[rsp+2687], 198 ; 000000c6H
  053d1	c6 84 24 e0 0a
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2688], 200 ; 000000c8H
  053d9	c6 84 24 e1 0a
	00 00 dd	 mov	 BYTE PTR $T5[rsp+2689], 221 ; 000000ddH
  053e1	c6 84 24 e2 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2690], 102 ; 00000066H
  053e9	c6 84 24 e3 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2691], 15
  053f1	c6 84 24 e4 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2692], 254 ; 000000feH
  053f9	c6 84 24 e5 0a
	00 00 cb	 mov	 BYTE PTR $T5[rsp+2693], 203 ; 000000cbH
  05401	c6 84 24 e6 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2694], 102 ; 00000066H
  05409	c6 84 24 e7 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2695], 15
  05411	c6 84 24 e8 0a
	00 00 e2	 mov	 BYTE PTR $T5[rsp+2696], 226 ; 000000e2H
  05419	c6 84 24 e9 0a
	00 00 ce	 mov	 BYTE PTR $T5[rsp+2697], 206 ; 000000ceH
  05421	c6 84 24 ea 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2698], 102 ; 00000066H
  05429	c6 84 24 eb 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2699], 15
  05431	c6 84 24 ec 0a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2700], 111 ; 0000006fH
  05439	c6 84 24 ed 0a
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2701], 193 ; 000000c1H
  05441	c6 84 24 ee 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2702], 102 ; 00000066H
  05449	c6 84 24 ef 0a
	00 00 41	 mov	 BYTE PTR $T5[rsp+2703], 65 ; 00000041H
  05451	c6 84 24 f0 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2704], 15
  05459	c6 84 24 f1 0a
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2705], 210 ; 000000d2H
  05461	c6 84 24 f2 0a
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2706], 192 ; 000000c0H
  05469	c6 84 24 f3 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2707], 102 ; 00000066H
  05471	c6 84 24 f4 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2708], 15
  05479	c6 84 24 f5 0a
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2709], 254 ; 000000feH
  05481	c6 84 24 f6 0a
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2710], 193 ; 000000c1H
  05489	c6 84 24 f7 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2711], 102 ; 00000066H
  05491	c6 84 24 f8 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2712], 15
  05499	c6 84 24 f9 0a
	00 00 38	 mov	 BYTE PTR $T5[rsp+2713], 56 ; 00000038H
  054a1	c6 84 24 fa 0a
	00 00 40	 mov	 BYTE PTR $T5[rsp+2714], 64 ; 00000040H
  054a9	c6 84 24 fb 0a
	00 00 c7	 mov	 BYTE PTR $T5[rsp+2715], 199 ; 000000c7H
  054b1	c6 84 24 fc 0a
	00 00 66	 mov	 BYTE PTR $T5[rsp+2716], 102 ; 00000066H
  054b9	c6 84 24 fd 0a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2717], 15
  054c1	c6 84 24 fe 0a
	00 00 fa	 mov	 BYTE PTR $T5[rsp+2718], 250 ; 000000faH
  054c9	c6 84 24 ff 0a
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2719], 216 ; 000000d8H
  054d1	c6 84 24 00 0b
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2720], 242 ; 000000f2H
  054d9	c6 84 24 01 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2721], 15
  054e1	c6 84 24 02 0b
	00 00 70	 mov	 BYTE PTR $T5[rsp+2722], 112 ; 00000070H
  054e9	c6 84 24 03 0b
	00 00 c3	 mov	 BYTE PTR $T5[rsp+2723], 195 ; 000000c3H
  054f1	c6 84 24 04 0b
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2724], 216 ; 000000d8H
  054f9	c6 84 24 05 0b
	00 00 f3	 mov	 BYTE PTR $T5[rsp+2725], 243 ; 000000f3H
  05501	c6 84 24 06 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2726], 15
  05509	c6 84 24 07 0b
	00 00 70	 mov	 BYTE PTR $T5[rsp+2727], 112 ; 00000070H
  05511	c6 84 24 08 0b
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2728], 200 ; 000000c8H
  05519	c6 84 24 09 0b
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2729], 216 ; 000000d8H
  05521	c6 84 24 0a 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2730], 102 ; 00000066H
  05529	c6 84 24 0b 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2731], 15
  05531	c6 84 24 0c 0b
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2732], 110 ; 0000006eH
  05539	c6 84 24 0d 0b
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2733], 194 ; 000000c2H
  05541	c6 84 24 0e 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2734], 102 ; 00000066H
  05549	c6 84 24 0f 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2735], 15
  05551	c6 84 24 10 0b
	00 00 70	 mov	 BYTE PTR $T5[rsp+2736], 112 ; 00000070H
  05559	c6 84 24 11 0b
	00 00 d1	 mov	 BYTE PTR $T5[rsp+2737], 209 ; 000000d1H
  05561	c6 84 24 12 0b
	00 00 d8	 mov	 BYTE PTR $T5[rsp+2738], 216 ; 000000d8H
  05569	c6 84 24 13 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2739], 102 ; 00000066H
  05571	c6 84 24 14 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2740], 15
  05579	c6 84 24 15 0b
	00 00 db	 mov	 BYTE PTR $T5[rsp+2741], 219 ; 000000dbH
  05581	c6 84 24 16 0b
	00 00 15	 mov	 BYTE PTR $T5[rsp+2742], 21
  05589	c6 84 24 17 0b
	00 00 35	 mov	 BYTE PTR $T5[rsp+2743], 53 ; 00000035H
  05591	c6 84 24 18 0b
	00 00 1b	 mov	 BYTE PTR $T5[rsp+2744], 27
  05599	c6 84 24 19 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2745], 0
  055a1	c6 84 24 1a 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2746], 0
  055a9	c6 84 24 1b 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2747], 102 ; 00000066H
  055b1	c6 84 24 1c 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2748], 15
  055b9	c6 84 24 1d 0b
	00 00 67	 mov	 BYTE PTR $T5[rsp+2749], 103 ; 00000067H
  055c1	c6 84 24 1e 0b
	00 00 d2	 mov	 BYTE PTR $T5[rsp+2750], 210 ; 000000d2H
  055c9	c6 84 24 1f 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2751], 102 ; 00000066H
  055d1	c6 84 24 20 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2752], 15
  055d9	c6 84 24 21 0b
	00 00 fc	 mov	 BYTE PTR $T5[rsp+2753], 252 ; 000000fcH
  055e1	c6 84 24 22 0b
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2754], 208 ; 000000d0H
  055e9	c6 84 24 23 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2755], 102 ; 00000066H
  055f1	c6 84 24 24 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2756], 15
  055f9	c6 84 24 25 0b
	00 00 6e	 mov	 BYTE PTR $T5[rsp+2757], 110 ; 0000006eH
  05601	c6 84 24 26 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2758], 65 ; 00000041H
  05609	c6 84 24 27 0b
	00 00 f8	 mov	 BYTE PTR $T5[rsp+2759], 248 ; 000000f8H
  05611	c6 84 24 28 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2760], 102 ; 00000066H
  05619	c6 84 24 29 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2761], 15
  05621	c6 84 24 2a 0b
	00 00 ef	 mov	 BYTE PTR $T5[rsp+2762], 239 ; 000000efH
  05629	c6 84 24 2b 0b
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2763], 208 ; 000000d0H
  05631	c6 84 24 2c 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2764], 102 ; 00000066H
  05639	c6 84 24 2d 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2765], 15
  05641	c6 84 24 2e 0b
	00 00 7e	 mov	 BYTE PTR $T5[rsp+2766], 126 ; 0000007eH
  05649	c6 84 24 2f 0b
	00 00 51	 mov	 BYTE PTR $T5[rsp+2767], 81 ; 00000051H
  05651	c6 84 24 30 0b
	00 00 f8	 mov	 BYTE PTR $T5[rsp+2768], 248 ; 000000f8H
  05659	c6 84 24 31 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2769], 65 ; 00000041H
  05661	c6 84 24 32 0b
	00 00 83	 mov	 BYTE PTR $T5[rsp+2770], 131 ; 00000083H
  05669	c6 84 24 33 0b
	00 00 f8	 mov	 BYTE PTR $T5[rsp+2771], 248 ; 000000f8H
  05671	c6 84 24 34 0b
	00 00 68	 mov	 BYTE PTR $T5[rsp+2772], 104 ; 00000068H
  05679	c6 84 24 35 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2773], 15
  05681	c6 84 24 36 0b
	00 00 8c	 mov	 BYTE PTR $T5[rsp+2774], 140 ; 0000008cH
  05689	c6 84 24 37 0b
	00 00 f5	 mov	 BYTE PTR $T5[rsp+2775], 245 ; 000000f5H
  05691	c6 84 24 38 0b
	00 00 fe	 mov	 BYTE PTR $T5[rsp+2776], 254 ; 000000feH
  05699	c6 84 24 39 0b
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2777], 255 ; 000000ffH
  056a1	c6 84 24 3a 0b
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2778], 255 ; 000000ffH
  056a9	c6 84 24 3b 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2779], 65 ; 00000041H
  056b1	c6 84 24 3c 0b
	00 00 83	 mov	 BYTE PTR $T5[rsp+2780], 131 ; 00000083H
  056b9	c6 84 24 3d 0b
	00 00 f8	 mov	 BYTE PTR $T5[rsp+2781], 248 ; 000000f8H
  056c1	c6 84 24 3e 0b
	00 00 6d	 mov	 BYTE PTR $T5[rsp+2782], 109 ; 0000006dH
  056c9	c6 84 24 3f 0b
	00 00 7d	 mov	 BYTE PTR $T5[rsp+2783], 125 ; 0000007dH
  056d1	c6 84 24 40 0b
	00 00 43	 mov	 BYTE PTR $T5[rsp+2784], 67 ; 00000043H
  056d9	c6 84 24 41 0b
	00 00 49	 mov	 BYTE PTR $T5[rsp+2785], 73 ; 00000049H
  056e1	c6 84 24 42 0b
	00 00 63	 mov	 BYTE PTR $T5[rsp+2786], 99 ; 00000063H
  056e9	c6 84 24 43 0b
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2787], 192 ; 000000c0H
  056f1	c6 84 24 44 0b
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2788], 76 ; 0000004cH
  056f9	c6 84 24 45 0b
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2789], 141 ; 0000008dH
  05701	c6 84 24 46 0b
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2790], 76 ; 0000004cH
  05709	c6 84 24 47 0b
	00 00 24	 mov	 BYTE PTR $T5[rsp+2791], 36 ; 00000024H
  05711	c6 84 24 48 0b
	00 00 60	 mov	 BYTE PTR $T5[rsp+2792], 96 ; 00000060H
  05719	c6 84 24 49 0b
	00 00 4c	 mov	 BYTE PTR $T5[rsp+2793], 76 ; 0000004cH
  05721	c6 84 24 4a 0b
	00 00 03	 mov	 BYTE PTR $T5[rsp+2794], 3
  05729	c6 84 24 4b 0b
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2795], 200 ; 000000c8H
  05731	c6 84 24 4c 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2796], 15
  05739	c6 84 24 4d 0b
	00 00 1f	 mov	 BYTE PTR $T5[rsp+2797], 31
  05741	c6 84 24 4e 0b
	00 00 40	 mov	 BYTE PTR $T5[rsp+2798], 64 ; 00000040H
  05749	c6 84 24 4f 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2799], 0
  05751	c6 84 24 50 0b
	00 00 b8	 mov	 BYTE PTR $T5[rsp+2800], 184 ; 000000b8H
  05759	c6 84 24 51 0b
	00 00 93	 mov	 BYTE PTR $T5[rsp+2801], 147 ; 00000093H
  05761	c6 84 24 52 0b
	00 00 24	 mov	 BYTE PTR $T5[rsp+2802], 36 ; 00000024H
  05769	c6 84 24 53 0b
	00 00 49	 mov	 BYTE PTR $T5[rsp+2803], 73 ; 00000049H
  05771	c6 84 24 54 0b
	00 00 92	 mov	 BYTE PTR $T5[rsp+2804], 146 ; 00000092H
  05779	c6 84 24 55 0b
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2805], 77 ; 0000004dH
  05781	c6 84 24 56 0b
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2806], 141 ; 0000008dH
  05789	c6 84 24 57 0b
	00 00 49	 mov	 BYTE PTR $T5[rsp+2807], 73 ; 00000049H
  05791	c6 84 24 58 0b
	00 00 01	 mov	 BYTE PTR $T5[rsp+2808], 1
  05799	c6 84 24 59 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2809], 65 ; 00000041H
  057a1	c6 84 24 5a 0b
	00 00 f7	 mov	 BYTE PTR $T5[rsp+2810], 247 ; 000000f7H
  057a9	c6 84 24 5b 0b
	00 00 e8	 mov	 BYTE PTR $T5[rsp+2811], 232 ; 000000e8H
  057b1	c6 84 24 5c 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2812], 65 ; 00000041H
  057b9	c6 84 24 5d 0b
	00 00 03	 mov	 BYTE PTR $T5[rsp+2813], 3
  057c1	c6 84 24 5e 0b
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2814], 208 ; 000000d0H
  057c9	c6 84 24 5f 0b
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2815], 193 ; 000000c1H
  057d1	c6 84 24 60 0b
	00 00 fa	 mov	 BYTE PTR $T5[rsp+2816], 250 ; 000000faH
  057d9	c6 84 24 61 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2817], 5
  057e1	c6 84 24 62 0b
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2818], 139 ; 0000008bH
  057e9	c6 84 24 63 0b
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2819], 194 ; 000000c2H
  057f1	c6 84 24 64 0b
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2820], 193 ; 000000c1H
  057f9	c6 84 24 65 0b
	00 00 e8	 mov	 BYTE PTR $T5[rsp+2821], 232 ; 000000e8H
  05801	c6 84 24 66 0b
	00 00 1f	 mov	 BYTE PTR $T5[rsp+2822], 31
  05809	c6 84 24 67 0b
	00 00 03	 mov	 BYTE PTR $T5[rsp+2823], 3
  05811	c6 84 24 68 0b
	00 00 d0	 mov	 BYTE PTR $T5[rsp+2824], 208 ; 000000d0H
  05819	c6 84 24 69 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2825], 15
  05821	c6 84 24 6a 0b
	00 00 be	 mov	 BYTE PTR $T5[rsp+2826], 190 ; 000000beH
  05829	c6 84 24 6b 0b
	00 00 c2	 mov	 BYTE PTR $T5[rsp+2827], 194 ; 000000c2H
  05831	c6 84 24 6c 0b
	00 00 6b	 mov	 BYTE PTR $T5[rsp+2828], 107 ; 0000006bH
  05839	c6 84 24 6d 0b
	00 00 c8	 mov	 BYTE PTR $T5[rsp+2829], 200 ; 000000c8H
  05841	c6 84 24 6e 0b
	00 00 38	 mov	 BYTE PTR $T5[rsp+2830], 56 ; 00000038H
  05849	c6 84 24 6f 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2831], 65 ; 00000041H
  05851	c6 84 24 70 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2832], 15
  05859	c6 84 24 71 0b
	00 00 b6	 mov	 BYTE PTR $T5[rsp+2833], 182 ; 000000b6H
  05861	c6 84 24 72 0b
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2834], 192 ; 000000c0H
  05869	c6 84 24 73 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2835], 65 ; 00000041H
  05871	c6 84 24 74 0b
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2836], 255 ; 000000ffH
  05879	c6 84 24 75 0b
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2837], 192 ; 000000c0H
  05881	c6 84 24 76 0b
	00 00 2a	 mov	 BYTE PTR $T5[rsp+2838], 42 ; 0000002aH
  05889	c6 84 24 77 0b
	00 00 c1	 mov	 BYTE PTR $T5[rsp+2839], 193 ; 000000c1H
  05891	c6 84 24 78 0b
	00 00 04	 mov	 BYTE PTR $T5[rsp+2840], 4
  05899	c6 84 24 79 0b
	00 00 39	 mov	 BYTE PTR $T5[rsp+2841], 57 ; 00000039H
  058a1	c6 84 24 7a 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2842], 65 ; 00000041H
  058a9	c6 84 24 7b 0b
	00 00 30	 mov	 BYTE PTR $T5[rsp+2843], 48 ; 00000030H
  058b1	c6 84 24 7c 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2844], 65 ; 00000041H
  058b9	c6 84 24 7d 0b
	00 00 ff	 mov	 BYTE PTR $T5[rsp+2845], 255 ; 000000ffH
  058c1	c6 84 24 7e 0b
	00 00 41	 mov	 BYTE PTR $T5[rsp+2846], 65 ; 00000041H
  058c9	c6 84 24 7f 0b
	00 00 83	 mov	 BYTE PTR $T5[rsp+2847], 131 ; 00000083H
  058d1	c6 84 24 80 0b
	00 00 f8	 mov	 BYTE PTR $T5[rsp+2848], 248 ; 000000f8H
  058d9	c6 84 24 81 0b
	00 00 6d	 mov	 BYTE PTR $T5[rsp+2849], 109 ; 0000006dH
  058e1	c6 84 24 82 0b
	00 00 7c	 mov	 BYTE PTR $T5[rsp+2850], 124 ; 0000007cH
  058e9	c6 84 24 83 0b
	00 00 cc	 mov	 BYTE PTR $T5[rsp+2851], 204 ; 000000ccH
  058f1	c6 84 24 84 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2852], 15
  058f9	c6 84 24 85 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2853], 16
  05901	c6 84 24 86 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2854], 5
  05909	c6 84 24 87 0b
	00 00 c5	 mov	 BYTE PTR $T5[rsp+2855], 197 ; 000000c5H
  05911	c6 84 24 88 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2856], 25
  05919	c6 84 24 89 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2857], 0
  05921	c6 84 24 8a 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2858], 0
  05929	c6 84 24 8b 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2859], 69 ; 00000045H
  05931	c6 84 24 8c 0b
	00 00 33	 mov	 BYTE PTR $T5[rsp+2860], 51 ; 00000033H
  05939	c6 84 24 8d 0b
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2861], 192 ; 000000c0H
  05941	c6 84 24 8e 0b
	00 00 83	 mov	 BYTE PTR $T5[rsp+2862], 131 ; 00000083H
  05949	c6 84 24 8f 0b
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2863], 61 ; 0000003dH
  05951	c6 84 24 90 0b
	00 00 eb	 mov	 BYTE PTR $T5[rsp+2864], 235 ; 000000ebH
  05959	c6 84 24 91 0b
	00 00 28	 mov	 BYTE PTR $T5[rsp+2865], 40 ; 00000028H
  05961	c6 84 24 92 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2866], 0
  05969	c6 84 24 93 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2867], 0
  05971	c6 84 24 94 0b
	00 00 02	 mov	 BYTE PTR $T5[rsp+2868], 2
  05979	c6 84 24 95 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2869], 15
  05981	c6 84 24 96 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2870], 16
  05989	c6 84 24 97 0b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2871], 13
  05991	c6 84 24 98 0b
	00 00 c4	 mov	 BYTE PTR $T5[rsp+2872], 196 ; 000000c4H
  05999	c6 84 24 99 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2873], 25
  059a1	c6 84 24 9a 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2874], 0
  059a9	c6 84 24 9b 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2875], 0
  059b1	c6 84 24 9c 0b
	00 00 8b	 mov	 BYTE PTR $T5[rsp+2876], 139 ; 0000008bH
  059b9	c6 84 24 9d 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2877], 5
  059c1	c6 84 24 9e 0b
	00 00 16	 mov	 BYTE PTR $T5[rsp+2878], 22
  059c9	c6 84 24 9f 0b
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2879], 26
  059d1	c6 84 24 a0 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2880], 0
  059d9	c6 84 24 a1 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2881], 0
  059e1	c6 84 24 a2 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2882], 15
  059e9	c6 84 24 a3 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2883], 17
  059f1	c6 84 24 a4 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2884], 69 ; 00000045H
  059f9	c6 84 24 a5 0b
	00 00 cd	 mov	 BYTE PTR $T5[rsp+2885], 205 ; 000000cdH
  05a01	c6 84 24 a6 0b
	00 00 89	 mov	 BYTE PTR $T5[rsp+2886], 137 ; 00000089H
  05a09	c6 84 24 a7 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2887], 69 ; 00000045H
  05a11	c6 84 24 a8 0b
	00 00 35	 mov	 BYTE PTR $T5[rsp+2888], 53 ; 00000035H
  05a19	c6 84 24 a9 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2889], 15
  05a21	c6 84 24 aa 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2890], 16
  05a29	c6 84 24 ab 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2891], 5
  05a31	c6 84 24 ac 0b
	00 00 c0	 mov	 BYTE PTR $T5[rsp+2892], 192 ; 000000c0H
  05a39	c6 84 24 ad 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2893], 25
  05a41	c6 84 24 ae 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2894], 0
  05a49	c6 84 24 af 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2895], 0
  05a51	c6 84 24 b0 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2896], 15
  05a59	c6 84 24 b1 0b
	00 00 b6	 mov	 BYTE PTR $T5[rsp+2897], 182 ; 000000b6H
  05a61	c6 84 24 b2 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2898], 5
  05a69	c6 84 24 b3 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2899], 5
  05a71	c6 84 24 b4 0b
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2900], 26
  05a79	c6 84 24 b5 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2901], 0
  05a81	c6 84 24 b6 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2902], 0
  05a89	c6 84 24 b7 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2903], 15
  05a91	c6 84 24 b8 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2904], 17
  05a99	c6 84 24 b9 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2905], 69 ; 00000045H
  05aa1	c6 84 24 ba 0b
	00 00 ed	 mov	 BYTE PTR $T5[rsp+2906], 237 ; 000000edH
  05aa9	c6 84 24 bb 0b
	00 00 88	 mov	 BYTE PTR $T5[rsp+2907], 136 ; 00000088H
  05ab1	c6 84 24 bc 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2908], 69 ; 00000045H
  05ab9	c6 84 24 bd 0b
	00 00 39	 mov	 BYTE PTR $T5[rsp+2909], 57 ; 00000039H
  05ac1	c6 84 24 be 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2910], 15
  05ac9	c6 84 24 bf 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2911], 16
  05ad1	c6 84 24 c0 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2912], 5
  05ad9	c6 84 24 c1 0b
	00 00 cb	 mov	 BYTE PTR $T5[rsp+2913], 203 ; 000000cbH
  05ae1	c6 84 24 c2 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2914], 25
  05ae9	c6 84 24 c3 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2915], 0
  05af1	c6 84 24 c4 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2916], 0
  05af9	c6 84 24 c5 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2917], 15
  05b01	c6 84 24 c6 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2918], 17
  05b09	c6 84 24 c7 0b
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2919], 77 ; 0000004dH
  05b11	c6 84 24 c8 0b
	00 00 dd	 mov	 BYTE PTR $T5[rsp+2920], 221 ; 000000ddH
  05b19	c6 84 24 c9 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2921], 15
  05b21	c6 84 24 ca 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2922], 16
  05b29	c6 84 24 cb 0b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2923], 13
  05b31	c6 84 24 cc 0b
	00 00 b0	 mov	 BYTE PTR $T5[rsp+2924], 176 ; 000000b0H
  05b39	c6 84 24 cd 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2925], 25
  05b41	c6 84 24 ce 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2926], 0
  05b49	c6 84 24 cf 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2927], 0
  05b51	c6 84 24 d0 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2928], 15
  05b59	c6 84 24 d1 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2929], 17
  05b61	c6 84 24 d2 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2930], 69 ; 00000045H
  05b69	c6 84 24 d3 0b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2931], 13
  05b71	c6 84 24 d4 0b
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2932], 242 ; 000000f2H
  05b79	c6 84 24 d5 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2933], 15
  05b81	c6 84 24 d6 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2934], 16
  05b89	c6 84 24 d7 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2935], 5
  05b91	c6 84 24 d8 0b
	00 00 d4	 mov	 BYTE PTR $T5[rsp+2936], 212 ; 000000d4H
  05b99	c6 84 24 d9 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2937], 25
  05ba1	c6 84 24 da 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2938], 0
  05ba9	c6 84 24 db 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2939], 0
  05bb1	c6 84 24 dc 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2940], 15
  05bb9	c6 84 24 dd 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2941], 17
  05bc1	c6 84 24 de 0b
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2942], 77 ; 0000004dH
  05bc9	c6 84 24 df 0b
	00 00 fd	 mov	 BYTE PTR $T5[rsp+2943], 253 ; 000000fdH
  05bd1	c6 84 24 e0 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2944], 15
  05bd9	c6 84 24 e1 0b
	00 00 10	 mov	 BYTE PTR $T5[rsp+2945], 16
  05be1	c6 84 24 e2 0b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+2946], 13
  05be9	c6 84 24 e3 0b
	00 00 b9	 mov	 BYTE PTR $T5[rsp+2947], 185 ; 000000b9H
  05bf1	c6 84 24 e4 0b
	00 00 19	 mov	 BYTE PTR $T5[rsp+2948], 25
  05bf9	c6 84 24 e5 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2949], 0
  05c01	c6 84 24 e6 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2950], 0
  05c09	c6 84 24 e7 0b
	00 00 f2	 mov	 BYTE PTR $T5[rsp+2951], 242 ; 000000f2H
  05c11	c6 84 24 e8 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2952], 15
  05c19	c6 84 24 e9 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2953], 17
  05c21	c6 84 24 ea 0b
	00 00 45	 mov	 BYTE PTR $T5[rsp+2954], 69 ; 00000045H
  05c29	c6 84 24 eb 0b
	00 00 2d	 mov	 BYTE PTR $T5[rsp+2955], 45 ; 0000002dH
  05c31	c6 84 24 ec 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2956], 15
  05c39	c6 84 24 ed 0b
	00 00 11	 mov	 BYTE PTR $T5[rsp+2957], 17
  05c41	c6 84 24 ee 0b
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2958], 77 ; 0000004dH
  05c49	c6 84 24 ef 0b
	00 00 1d	 mov	 BYTE PTR $T5[rsp+2959], 29
  05c51	c6 84 24 f0 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2960], 15
  05c59	c6 84 24 f1 0b
	00 00 8c	 mov	 BYTE PTR $T5[rsp+2961], 140 ; 0000008cH
  05c61	c6 84 24 f2 0b
	00 00 4b	 mov	 BYTE PTR $T5[rsp+2962], 75 ; 0000004bH
  05c69	c6 84 24 f3 0b
	00 00 01	 mov	 BYTE PTR $T5[rsp+2963], 1
  05c71	c6 84 24 f4 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2964], 0
  05c79	c6 84 24 f5 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2965], 0
  05c81	c6 84 24 f6 0b
	00 00 66	 mov	 BYTE PTR $T5[rsp+2966], 102 ; 00000066H
  05c89	c6 84 24 f7 0b
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2967], 15
  05c91	c6 84 24 f8 0b
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2968], 111 ; 0000006fH
  05c99	c6 84 24 f9 0b
	00 00 05	 mov	 BYTE PTR $T5[rsp+2969], 5
  05ca1	c6 84 24 fa 0b
	00 00 62	 mov	 BYTE PTR $T5[rsp+2970], 98 ; 00000062H
  05ca9	c6 84 24 fb 0b
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2971], 26
  05cb1	c6 84 24 fc 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2972], 0
  05cb9	c6 84 24 fd 0b
	00 00 00	 mov	 BYTE PTR $T5[rsp+2973], 0
  05cc1	c6 84 24 fe 0b
	00 00 48	 mov	 BYTE PTR $T5[rsp+2974], 72 ; 00000048H
  05cc9	c6 84 24 ff 0b
	00 00 8d	 mov	 BYTE PTR $T5[rsp+2975], 141 ; 0000008dH
  05cd1	c6 84 24 00 0c
	00 00 4d	 mov	 BYTE PTR $T5[rsp+2976], 77 ; 0000004dH
  05cd9	c6 84 24 01 0c
	00 00 d1	 mov	 BYTE PTR $T5[rsp+2977], 209 ; 000000d1H
  05ce1	c6 84 24 02 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+2978], 102 ; 00000066H
  05ce9	c6 84 24 03 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2979], 15
  05cf1	c6 84 24 04 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2980], 111 ; 0000006fH
  05cf9	c6 84 24 05 0c
	00 00 2d	 mov	 BYTE PTR $T5[rsp+2981], 45 ; 0000002dH
  05d01	c6 84 24 06 0c
	00 00 26	 mov	 BYTE PTR $T5[rsp+2982], 38 ; 00000026H
  05d09	c6 84 24 07 0c
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2983], 26
  05d11	c6 84 24 08 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+2984], 0
  05d19	c6 84 24 09 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+2985], 0
  05d21	c6 84 24 0a 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+2986], 102 ; 00000066H
  05d29	c6 84 24 0b 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2987], 15
  05d31	c6 84 24 0c 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2988], 111 ; 0000006fH
  05d39	c6 84 24 0d 0c
	00 00 25	 mov	 BYTE PTR $T5[rsp+2989], 37 ; 00000025H
  05d41	c6 84 24 0e 0c
	00 00 5e	 mov	 BYTE PTR $T5[rsp+2990], 94 ; 0000005eH
  05d49	c6 84 24 0f 0c
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2991], 26
  05d51	c6 84 24 10 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+2992], 0
  05d59	c6 84 24 11 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+2993], 0
  05d61	c6 84 24 12 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+2994], 102 ; 00000066H
  05d69	c6 84 24 13 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+2995], 15
  05d71	c6 84 24 14 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+2996], 111 ; 0000006fH
  05d79	c6 84 24 15 0c
	00 00 3d	 mov	 BYTE PTR $T5[rsp+2997], 61 ; 0000003dH
  05d81	c6 84 24 16 0c
	00 00 26	 mov	 BYTE PTR $T5[rsp+2998], 38 ; 00000026H
  05d89	c6 84 24 17 0c
	00 00 1a	 mov	 BYTE PTR $T5[rsp+2999], 26
  05d91	c6 84 24 18 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3000], 0
  05d99	c6 84 24 19 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3001], 0
  05da1	c6 84 24 1a 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3002], 102 ; 00000066H
  05da9	c6 84 24 1b 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3003], 15
  05db1	c6 84 24 1c 0c
	00 00 7f	 mov	 BYTE PTR $T5[rsp+3004], 127 ; 0000007fH
  05db9	c6 84 24 1d 0c
	00 00 44	 mov	 BYTE PTR $T5[rsp+3005], 68 ; 00000044H
  05dc1	c6 84 24 1e 0c
	00 00 24	 mov	 BYTE PTR $T5[rsp+3006], 36 ; 00000024H
  05dc9	c6 84 24 1f 0c
	00 00 50	 mov	 BYTE PTR $T5[rsp+3007], 80 ; 00000050H
  05dd1	c6 84 24 20 0c
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3008], 139 ; 0000008bH
  05dd9	c6 84 24 21 0c
	00 00 54	 mov	 BYTE PTR $T5[rsp+3009], 84 ; 00000054H
  05de1	c6 84 24 22 0c
	00 00 24	 mov	 BYTE PTR $T5[rsp+3010], 36 ; 00000024H
  05de9	c6 84 24 23 0c
	00 00 50	 mov	 BYTE PTR $T5[rsp+3011], 80 ; 00000050H
  05df1	c6 84 24 24 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3012], 102 ; 00000066H
  05df9	c6 84 24 25 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3013], 65 ; 00000041H
  05e01	c6 84 24 26 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3014], 15
  05e09	c6 84 24 27 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3015], 110 ; 0000006eH
  05e11	c6 84 24 28 0c
	00 00 f2	 mov	 BYTE PTR $T5[rsp+3016], 242 ; 000000f2H
  05e19	c6 84 24 29 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3017], 102 ; 00000066H
  05e21	c6 84 24 2a 0c
	00 00 45	 mov	 BYTE PTR $T5[rsp+3018], 69 ; 00000045H
  05e29	c6 84 24 2b 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3019], 15
  05e31	c6 84 24 2c 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3020], 110 ; 0000006eH
  05e39	c6 84 24 2d 0c
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3021], 195 ; 000000c3H
  05e41	c6 84 24 2e 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3022], 102 ; 00000066H
  05e49	c6 84 24 2f 0c
	00 00 90	 mov	 BYTE PTR $T5[rsp+3023], 144 ; 00000090H
  05e51	c6 84 24 30 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3024], 102 ; 00000066H
  05e59	c6 84 24 31 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3025], 65 ; 00000041H
  05e61	c6 84 24 32 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3026], 15
  05e69	c6 84 24 33 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3027], 110 ; 0000006eH
  05e71	c6 84 24 34 0c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3028], 208 ; 000000d0H
  05e79	c6 84 24 35 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3029], 65 ; 00000041H
  05e81	c6 84 24 36 0c
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3030], 141 ; 0000008dH
  05e89	c6 84 24 37 0c
	00 00 40	 mov	 BYTE PTR $T5[rsp+3031], 64 ; 00000040H
  05e91	c6 84 24 38 0c
	00 00 04	 mov	 BYTE PTR $T5[rsp+3032], 4
  05e99	c6 84 24 39 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3033], 102 ; 00000066H
  05ea1	c6 84 24 3a 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3034], 15
  05ea9	c6 84 24 3b 0c
	00 00 70	 mov	 BYTE PTR $T5[rsp+3035], 112 ; 00000070H
  05eb1	c6 84 24 3c 0c
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3036], 210 ; 000000d2H
  05eb9	c6 84 24 3d 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3037], 0
  05ec1	c6 84 24 3e 0c
	00 00 48	 mov	 BYTE PTR $T5[rsp+3038], 72 ; 00000048H
  05ec9	c6 84 24 3f 0c
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3039], 141 ; 0000008dH
  05ed1	c6 84 24 40 0c
	00 00 49	 mov	 BYTE PTR $T5[rsp+3040], 73 ; 00000049H
  05ed9	c6 84 24 41 0c
	00 00 08	 mov	 BYTE PTR $T5[rsp+3041], 8
  05ee1	c6 84 24 42 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3042], 102 ; 00000066H
  05ee9	c6 84 24 43 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3043], 15
  05ef1	c6 84 24 44 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3044], 254 ; 000000feH
  05ef9	c6 84 24 45 0c
	00 00 d5	 mov	 BYTE PTR $T5[rsp+3045], 213 ; 000000d5H
  05f01	c6 84 24 46 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3046], 102 ; 00000066H
  05f09	c6 84 24 47 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3047], 15
  05f11	c6 84 24 48 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3048], 110 ; 0000006eH
  05f19	c6 84 24 49 0c
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3049], 216 ; 000000d8H
  05f21	c6 84 24 4a 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3050], 102 ; 00000066H
  05f29	c6 84 24 4b 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3051], 15
  05f31	c6 84 24 4c 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3052], 111 ; 0000006fH
  05f39	c6 84 24 4d 0c
	00 00 ca	 mov	 BYTE PTR $T5[rsp+3053], 202 ; 000000caH
  05f41	c6 84 24 4e 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3054], 102 ; 00000066H
  05f49	c6 84 24 4f 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3055], 15
  05f51	c6 84 24 50 0c
	00 00 70	 mov	 BYTE PTR $T5[rsp+3056], 112 ; 00000070H
  05f59	c6 84 24 51 0c
	00 00 db	 mov	 BYTE PTR $T5[rsp+3057], 219 ; 000000dbH
  05f61	c6 84 24 52 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3058], 0
  05f69	c6 84 24 53 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3059], 102 ; 00000066H
  05f71	c6 84 24 54 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3060], 15
  05f79	c6 84 24 55 0c
	00 00 62	 mov	 BYTE PTR $T5[rsp+3061], 98 ; 00000062H
  05f81	c6 84 24 56 0c
	00 00 ca	 mov	 BYTE PTR $T5[rsp+3062], 202 ; 000000caH
  05f89	c6 84 24 57 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3063], 102 ; 00000066H
  05f91	c6 84 24 58 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3064], 15
  05f99	c6 84 24 59 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3065], 111 ; 0000006fH
  05fa1	c6 84 24 5a 0c
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3066], 194 ; 000000c2H
  05fa9	c6 84 24 5b 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3067], 102 ; 00000066H
  05fb1	c6 84 24 5c 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3068], 15
  05fb9	c6 84 24 5d 0c
	00 00 6a	 mov	 BYTE PTR $T5[rsp+3069], 106 ; 0000006aH
  05fc1	c6 84 24 5e 0c
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3070], 194 ; 000000c2H
  05fc9	c6 84 24 5f 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3071], 102 ; 00000066H
  05fd1	c6 84 24 60 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3072], 15
  05fd9	c6 84 24 61 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3073], 254 ; 000000feH
  05fe1	c6 84 24 62 0c
	00 00 dd	 mov	 BYTE PTR $T5[rsp+3074], 221 ; 000000ddH
  05fe9	c6 84 24 63 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3075], 102 ; 00000066H
  05ff1	c6 84 24 64 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3076], 15
  05ff9	c6 84 24 65 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3077], 56 ; 00000038H
  06001	c6 84 24 66 0c
	00 00 28	 mov	 BYTE PTR $T5[rsp+3078], 40 ; 00000028H
  06009	c6 84 24 67 0c
	00 00 c4	 mov	 BYTE PTR $T5[rsp+3079], 196 ; 000000c4H
  06011	c6 84 24 68 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3080], 65 ; 00000041H
  06019	c6 84 24 69 0c
	00 00 83	 mov	 BYTE PTR $T5[rsp+3081], 131 ; 00000083H
  06021	c6 84 24 6a 0c
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3082], 192 ; 000000c0H
  06029	c6 84 24 6b 0c
	00 00 08	 mov	 BYTE PTR $T5[rsp+3083], 8
  06031	c6 84 24 6c 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3084], 102 ; 00000066H
  06039	c6 84 24 6d 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3085], 15
  06041	c6 84 24 6e 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3086], 56 ; 00000038H
  06049	c6 84 24 6f 0c
	00 00 28	 mov	 BYTE PTR $T5[rsp+3087], 40 ; 00000028H
  06051	c6 84 24 70 0c
	00 00 cc	 mov	 BYTE PTR $T5[rsp+3088], 204 ; 000000ccH
  06059	c6 84 24 71 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3089], 15
  06061	c6 84 24 72 0c
	00 00 c6	 mov	 BYTE PTR $T5[rsp+3090], 198 ; 000000c6H
  06069	c6 84 24 73 0c
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3091], 200 ; 000000c8H
  06071	c6 84 24 74 0c
	00 00 dd	 mov	 BYTE PTR $T5[rsp+3092], 221 ; 000000ddH
  06079	c6 84 24 75 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3093], 102 ; 00000066H
  06081	c6 84 24 76 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3094], 15
  06089	c6 84 24 77 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3095], 254 ; 000000feH
  06091	c6 84 24 78 0c
	00 00 ca	 mov	 BYTE PTR $T5[rsp+3096], 202 ; 000000caH
  06099	c6 84 24 79 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3097], 102 ; 00000066H
  060a1	c6 84 24 7a 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3098], 15
  060a9	c6 84 24 7b 0c
	00 00 e2	 mov	 BYTE PTR $T5[rsp+3099], 226 ; 000000e2H
  060b1	c6 84 24 7c 0c
	00 00 ce	 mov	 BYTE PTR $T5[rsp+3100], 206 ; 000000ceH
  060b9	c6 84 24 7d 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3101], 102 ; 00000066H
  060c1	c6 84 24 7e 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3102], 15
  060c9	c6 84 24 7f 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3103], 111 ; 0000006fH
  060d1	c6 84 24 80 0c
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3104], 193 ; 000000c1H
  060d9	c6 84 24 81 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3105], 102 ; 00000066H
  060e1	c6 84 24 82 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3106], 65 ; 00000041H
  060e9	c6 84 24 83 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3107], 15
  060f1	c6 84 24 84 0c
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3108], 210 ; 000000d2H
  060f9	c6 84 24 85 0c
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3109], 192 ; 000000c0H
  06101	c6 84 24 86 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3110], 102 ; 00000066H
  06109	c6 84 24 87 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3111], 15
  06111	c6 84 24 88 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3112], 254 ; 000000feH
  06119	c6 84 24 89 0c
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3113], 193 ; 000000c1H
  06121	c6 84 24 8a 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3114], 102 ; 00000066H
  06129	c6 84 24 8b 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3115], 15
  06131	c6 84 24 8c 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3116], 56 ; 00000038H
  06139	c6 84 24 8d 0c
	00 00 40	 mov	 BYTE PTR $T5[rsp+3117], 64 ; 00000040H
  06141	c6 84 24 8e 0c
	00 00 c7	 mov	 BYTE PTR $T5[rsp+3118], 199 ; 000000c7H
  06149	c6 84 24 8f 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3119], 102 ; 00000066H
  06151	c6 84 24 90 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3120], 15
  06159	c6 84 24 91 0c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+3121], 250 ; 000000faH
  06161	c6 84 24 92 0c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3122], 208 ; 000000d0H
  06169	c6 84 24 93 0c
	00 00 f2	 mov	 BYTE PTR $T5[rsp+3123], 242 ; 000000f2H
  06171	c6 84 24 94 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3124], 15
  06179	c6 84 24 95 0c
	00 00 70	 mov	 BYTE PTR $T5[rsp+3125], 112 ; 00000070H
  06181	c6 84 24 96 0c
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3126], 194 ; 000000c2H
  06189	c6 84 24 97 0c
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3127], 216 ; 000000d8H
  06191	c6 84 24 98 0c
	00 00 f3	 mov	 BYTE PTR $T5[rsp+3128], 243 ; 000000f3H
  06199	c6 84 24 99 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3129], 15
  061a1	c6 84 24 9a 0c
	00 00 70	 mov	 BYTE PTR $T5[rsp+3130], 112 ; 00000070H
  061a9	c6 84 24 9b 0c
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3131], 200 ; 000000c8H
  061b1	c6 84 24 9c 0c
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3132], 216 ; 000000d8H
  061b9	c6 84 24 9d 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3133], 102 ; 00000066H
  061c1	c6 84 24 9e 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3134], 15
  061c9	c6 84 24 9f 0c
	00 00 70	 mov	 BYTE PTR $T5[rsp+3135], 112 ; 00000070H
  061d1	c6 84 24 a0 0c
	00 00 d1	 mov	 BYTE PTR $T5[rsp+3136], 209 ; 000000d1H
  061d9	c6 84 24 a1 0c
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3137], 216 ; 000000d8H
  061e1	c6 84 24 a2 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3138], 102 ; 00000066H
  061e9	c6 84 24 a3 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3139], 15
  061f1	c6 84 24 a4 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3140], 111 ; 0000006fH
  061f9	c6 84 24 a5 0c
	00 00 cb	 mov	 BYTE PTR $T5[rsp+3141], 203 ; 000000cbH
  06201	c6 84 24 a6 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3142], 102 ; 00000066H
  06209	c6 84 24 a7 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3143], 15
  06211	c6 84 24 a8 0c
	00 00 db	 mov	 BYTE PTR $T5[rsp+3144], 219 ; 000000dbH
  06219	c6 84 24 a9 0c
	00 00 15	 mov	 BYTE PTR $T5[rsp+3145], 21
  06221	c6 84 24 aa 0c
	00 00 a2	 mov	 BYTE PTR $T5[rsp+3146], 162 ; 000000a2H
  06229	c6 84 24 ab 0c
	00 00 19	 mov	 BYTE PTR $T5[rsp+3147], 25
  06231	c6 84 24 ac 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3148], 0
  06239	c6 84 24 ad 0c
	00 00 00	 mov	 BYTE PTR $T5[rsp+3149], 0
  06241	c6 84 24 ae 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3150], 102 ; 00000066H
  06249	c6 84 24 af 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3151], 15
  06251	c6 84 24 b0 0c
	00 00 67	 mov	 BYTE PTR $T5[rsp+3152], 103 ; 00000067H
  06259	c6 84 24 b1 0c
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3153], 210 ; 000000d2H
  06261	c6 84 24 b2 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3154], 102 ; 00000066H
  06269	c6 84 24 b3 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3155], 15
  06271	c6 84 24 b4 0c
	00 00 62	 mov	 BYTE PTR $T5[rsp+3156], 98 ; 00000062H
  06279	c6 84 24 b5 0c
	00 00 cb	 mov	 BYTE PTR $T5[rsp+3157], 203 ; 000000cbH
  06281	c6 84 24 b6 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3158], 102 ; 00000066H
  06289	c6 84 24 b7 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3159], 15
  06291	c6 84 24 b8 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3160], 56 ; 00000038H
  06299	c6 84 24 b9 0c
	00 00 28	 mov	 BYTE PTR $T5[rsp+3161], 40 ; 00000028H
  062a1	c6 84 24 ba 0c
	00 00 cc	 mov	 BYTE PTR $T5[rsp+3162], 204 ; 000000ccH
  062a9	c6 84 24 bb 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3163], 102 ; 00000066H
  062b1	c6 84 24 bc 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3164], 15
  062b9	c6 84 24 bd 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3165], 110 ; 0000006eH
  062c1	c6 84 24 be 0c
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3166], 194 ; 000000c2H
  062c9	c6 84 24 bf 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3167], 102 ; 00000066H
  062d1	c6 84 24 c0 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3168], 15
  062d9	c6 84 24 c1 0c
	00 00 fc	 mov	 BYTE PTR $T5[rsp+3169], 252 ; 000000fcH
  062e1	c6 84 24 c2 0c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3170], 208 ; 000000d0H
  062e9	c6 84 24 c3 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3171], 102 ; 00000066H
  062f1	c6 84 24 c4 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3172], 15
  062f9	c6 84 24 c5 0c
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3173], 110 ; 0000006eH
  06301	c6 84 24 c6 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3174], 65 ; 00000041H
  06309	c6 84 24 c7 0c
	00 00 f4	 mov	 BYTE PTR $T5[rsp+3175], 244 ; 000000f4H
  06311	c6 84 24 c8 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3176], 102 ; 00000066H
  06319	c6 84 24 c9 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3177], 15
  06321	c6 84 24 ca 0c
	00 00 ef	 mov	 BYTE PTR $T5[rsp+3178], 239 ; 000000efH
  06329	c6 84 24 cb 0c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3179], 208 ; 000000d0H
  06331	c6 84 24 cc 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3180], 102 ; 00000066H
  06339	c6 84 24 cd 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3181], 15
  06341	c6 84 24 ce 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3182], 111 ; 0000006fH
  06349	c6 84 24 cf 0c
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3183], 195 ; 000000c3H
  06351	c6 84 24 d0 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3184], 102 ; 00000066H
  06359	c6 84 24 d1 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3185], 15
  06361	c6 84 24 d2 0c
	00 00 6a	 mov	 BYTE PTR $T5[rsp+3186], 106 ; 0000006aH
  06369	c6 84 24 d3 0c
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3187], 195 ; 000000c3H
  06371	c6 84 24 d4 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3188], 102 ; 00000066H
  06379	c6 84 24 d5 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3189], 15
  06381	c6 84 24 d6 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3190], 56 ; 00000038H
  06389	c6 84 24 d7 0c
	00 00 28	 mov	 BYTE PTR $T5[rsp+3191], 40 ; 00000028H
  06391	c6 84 24 d8 0c
	00 00 c4	 mov	 BYTE PTR $T5[rsp+3192], 196 ; 000000c4H
  06399	c6 84 24 d9 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3193], 102 ; 00000066H
  063a1	c6 84 24 da 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3194], 15
  063a9	c6 84 24 db 0c
	00 00 7e	 mov	 BYTE PTR $T5[rsp+3195], 126 ; 0000007eH
  063b1	c6 84 24 dc 0c
	00 00 51	 mov	 BYTE PTR $T5[rsp+3196], 81 ; 00000051H
  063b9	c6 84 24 dd 0c
	00 00 f4	 mov	 BYTE PTR $T5[rsp+3197], 244 ; 000000f4H
  063c1	c6 84 24 de 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3198], 15
  063c9	c6 84 24 df 0c
	00 00 c6	 mov	 BYTE PTR $T5[rsp+3199], 198 ; 000000c6H
  063d1	c6 84 24 e0 0c
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3200], 200 ; 000000c8H
  063d9	c6 84 24 e1 0c
	00 00 dd	 mov	 BYTE PTR $T5[rsp+3201], 221 ; 000000ddH
  063e1	c6 84 24 e2 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3202], 102 ; 00000066H
  063e9	c6 84 24 e3 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3203], 15
  063f1	c6 84 24 e4 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3204], 254 ; 000000feH
  063f9	c6 84 24 e5 0c
	00 00 cb	 mov	 BYTE PTR $T5[rsp+3205], 203 ; 000000cbH
  06401	c6 84 24 e6 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3206], 102 ; 00000066H
  06409	c6 84 24 e7 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3207], 15
  06411	c6 84 24 e8 0c
	00 00 e2	 mov	 BYTE PTR $T5[rsp+3208], 226 ; 000000e2H
  06419	c6 84 24 e9 0c
	00 00 ce	 mov	 BYTE PTR $T5[rsp+3209], 206 ; 000000ceH
  06421	c6 84 24 ea 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3210], 102 ; 00000066H
  06429	c6 84 24 eb 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3211], 15
  06431	c6 84 24 ec 0c
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3212], 111 ; 0000006fH
  06439	c6 84 24 ed 0c
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3213], 193 ; 000000c1H
  06441	c6 84 24 ee 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3214], 102 ; 00000066H
  06449	c6 84 24 ef 0c
	00 00 41	 mov	 BYTE PTR $T5[rsp+3215], 65 ; 00000041H
  06451	c6 84 24 f0 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3216], 15
  06459	c6 84 24 f1 0c
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3217], 210 ; 000000d2H
  06461	c6 84 24 f2 0c
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3218], 192 ; 000000c0H
  06469	c6 84 24 f3 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3219], 102 ; 00000066H
  06471	c6 84 24 f4 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3220], 15
  06479	c6 84 24 f5 0c
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3221], 254 ; 000000feH
  06481	c6 84 24 f6 0c
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3222], 193 ; 000000c1H
  06489	c6 84 24 f7 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3223], 102 ; 00000066H
  06491	c6 84 24 f8 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3224], 15
  06499	c6 84 24 f9 0c
	00 00 38	 mov	 BYTE PTR $T5[rsp+3225], 56 ; 00000038H
  064a1	c6 84 24 fa 0c
	00 00 40	 mov	 BYTE PTR $T5[rsp+3226], 64 ; 00000040H
  064a9	c6 84 24 fb 0c
	00 00 c7	 mov	 BYTE PTR $T5[rsp+3227], 199 ; 000000c7H
  064b1	c6 84 24 fc 0c
	00 00 66	 mov	 BYTE PTR $T5[rsp+3228], 102 ; 00000066H
  064b9	c6 84 24 fd 0c
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3229], 15
  064c1	c6 84 24 fe 0c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+3230], 250 ; 000000faH
  064c9	c6 84 24 ff 0c
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3231], 216 ; 000000d8H
  064d1	c6 84 24 00 0d
	00 00 f2	 mov	 BYTE PTR $T5[rsp+3232], 242 ; 000000f2H
  064d9	c6 84 24 01 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3233], 15
  064e1	c6 84 24 02 0d
	00 00 70	 mov	 BYTE PTR $T5[rsp+3234], 112 ; 00000070H
  064e9	c6 84 24 03 0d
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3235], 195 ; 000000c3H
  064f1	c6 84 24 04 0d
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3236], 216 ; 000000d8H
  064f9	c6 84 24 05 0d
	00 00 f3	 mov	 BYTE PTR $T5[rsp+3237], 243 ; 000000f3H
  06501	c6 84 24 06 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3238], 15
  06509	c6 84 24 07 0d
	00 00 70	 mov	 BYTE PTR $T5[rsp+3239], 112 ; 00000070H
  06511	c6 84 24 08 0d
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3240], 200 ; 000000c8H
  06519	c6 84 24 09 0d
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3241], 216 ; 000000d8H
  06521	c6 84 24 0a 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3242], 102 ; 00000066H
  06529	c6 84 24 0b 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3243], 15
  06531	c6 84 24 0c 0d
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3244], 110 ; 0000006eH
  06539	c6 84 24 0d 0d
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3245], 194 ; 000000c2H
  06541	c6 84 24 0e 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3246], 102 ; 00000066H
  06549	c6 84 24 0f 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3247], 15
  06551	c6 84 24 10 0d
	00 00 70	 mov	 BYTE PTR $T5[rsp+3248], 112 ; 00000070H
  06559	c6 84 24 11 0d
	00 00 d1	 mov	 BYTE PTR $T5[rsp+3249], 209 ; 000000d1H
  06561	c6 84 24 12 0d
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3250], 216 ; 000000d8H
  06569	c6 84 24 13 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3251], 102 ; 00000066H
  06571	c6 84 24 14 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3252], 15
  06579	c6 84 24 15 0d
	00 00 db	 mov	 BYTE PTR $T5[rsp+3253], 219 ; 000000dbH
  06581	c6 84 24 16 0d
	00 00 15	 mov	 BYTE PTR $T5[rsp+3254], 21
  06589	c6 84 24 17 0d
	00 00 35	 mov	 BYTE PTR $T5[rsp+3255], 53 ; 00000035H
  06591	c6 84 24 18 0d
	00 00 19	 mov	 BYTE PTR $T5[rsp+3256], 25
  06599	c6 84 24 19 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3257], 0
  065a1	c6 84 24 1a 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3258], 0
  065a9	c6 84 24 1b 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3259], 102 ; 00000066H
  065b1	c6 84 24 1c 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3260], 15
  065b9	c6 84 24 1d 0d
	00 00 67	 mov	 BYTE PTR $T5[rsp+3261], 103 ; 00000067H
  065c1	c6 84 24 1e 0d
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3262], 210 ; 000000d2H
  065c9	c6 84 24 1f 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3263], 102 ; 00000066H
  065d1	c6 84 24 20 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3264], 15
  065d9	c6 84 24 21 0d
	00 00 fc	 mov	 BYTE PTR $T5[rsp+3265], 252 ; 000000fcH
  065e1	c6 84 24 22 0d
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3266], 208 ; 000000d0H
  065e9	c6 84 24 23 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3267], 102 ; 00000066H
  065f1	c6 84 24 24 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3268], 15
  065f9	c6 84 24 25 0d
	00 00 6e	 mov	 BYTE PTR $T5[rsp+3269], 110 ; 0000006eH
  06601	c6 84 24 26 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3270], 65 ; 00000041H
  06609	c6 84 24 27 0d
	00 00 f8	 mov	 BYTE PTR $T5[rsp+3271], 248 ; 000000f8H
  06611	c6 84 24 28 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3272], 102 ; 00000066H
  06619	c6 84 24 29 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3273], 15
  06621	c6 84 24 2a 0d
	00 00 ef	 mov	 BYTE PTR $T5[rsp+3274], 239 ; 000000efH
  06629	c6 84 24 2b 0d
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3275], 208 ; 000000d0H
  06631	c6 84 24 2c 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3276], 102 ; 00000066H
  06639	c6 84 24 2d 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3277], 15
  06641	c6 84 24 2e 0d
	00 00 7e	 mov	 BYTE PTR $T5[rsp+3278], 126 ; 0000007eH
  06649	c6 84 24 2f 0d
	00 00 51	 mov	 BYTE PTR $T5[rsp+3279], 81 ; 00000051H
  06651	c6 84 24 30 0d
	00 00 f8	 mov	 BYTE PTR $T5[rsp+3280], 248 ; 000000f8H
  06659	c6 84 24 31 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3281], 65 ; 00000041H
  06661	c6 84 24 32 0d
	00 00 83	 mov	 BYTE PTR $T5[rsp+3282], 131 ; 00000083H
  06669	c6 84 24 33 0d
	00 00 f8	 mov	 BYTE PTR $T5[rsp+3283], 248 ; 000000f8H
  06671	c6 84 24 34 0d
	00 00 68	 mov	 BYTE PTR $T5[rsp+3284], 104 ; 00000068H
  06679	c6 84 24 35 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3285], 15
  06681	c6 84 24 36 0d
	00 00 8c	 mov	 BYTE PTR $T5[rsp+3286], 140 ; 0000008cH
  06689	c6 84 24 37 0d
	00 00 f5	 mov	 BYTE PTR $T5[rsp+3287], 245 ; 000000f5H
  06691	c6 84 24 38 0d
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3288], 254 ; 000000feH
  06699	c6 84 24 39 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3289], 255 ; 000000ffH
  066a1	c6 84 24 3a 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3290], 255 ; 000000ffH
  066a9	c6 84 24 3b 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3291], 65 ; 00000041H
  066b1	c6 84 24 3c 0d
	00 00 83	 mov	 BYTE PTR $T5[rsp+3292], 131 ; 00000083H
  066b9	c6 84 24 3d 0d
	00 00 f8	 mov	 BYTE PTR $T5[rsp+3293], 248 ; 000000f8H
  066c1	c6 84 24 3e 0d
	00 00 6d	 mov	 BYTE PTR $T5[rsp+3294], 109 ; 0000006dH
  066c9	c6 84 24 3f 0d
	00 00 7d	 mov	 BYTE PTR $T5[rsp+3295], 125 ; 0000007dH
  066d1	c6 84 24 40 0d
	00 00 43	 mov	 BYTE PTR $T5[rsp+3296], 67 ; 00000043H
  066d9	c6 84 24 41 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3297], 73 ; 00000049H
  066e1	c6 84 24 42 0d
	00 00 63	 mov	 BYTE PTR $T5[rsp+3298], 99 ; 00000063H
  066e9	c6 84 24 43 0d
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3299], 192 ; 000000c0H
  066f1	c6 84 24 44 0d
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3300], 76 ; 0000004cH
  066f9	c6 84 24 45 0d
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3301], 141 ; 0000008dH
  06701	c6 84 24 46 0d
	00 00 4d	 mov	 BYTE PTR $T5[rsp+3302], 77 ; 0000004dH
  06709	c6 84 24 47 0d
	00 00 cd	 mov	 BYTE PTR $T5[rsp+3303], 205 ; 000000cdH
  06711	c6 84 24 48 0d
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3304], 76 ; 0000004cH
  06719	c6 84 24 49 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3305], 3
  06721	c6 84 24 4a 0d
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3306], 200 ; 000000c8H
  06729	c6 84 24 4b 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3307], 15
  06731	c6 84 24 4c 0d
	00 00 1f	 mov	 BYTE PTR $T5[rsp+3308], 31
  06739	c6 84 24 4d 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3309], 68 ; 00000044H
  06741	c6 84 24 4e 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3310], 0
  06749	c6 84 24 4f 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3311], 0
  06751	c6 84 24 50 0d
	00 00 b8	 mov	 BYTE PTR $T5[rsp+3312], 184 ; 000000b8H
  06759	c6 84 24 51 0d
	00 00 93	 mov	 BYTE PTR $T5[rsp+3313], 147 ; 00000093H
  06761	c6 84 24 52 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3314], 36 ; 00000024H
  06769	c6 84 24 53 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3315], 73 ; 00000049H
  06771	c6 84 24 54 0d
	00 00 92	 mov	 BYTE PTR $T5[rsp+3316], 146 ; 00000092H
  06779	c6 84 24 55 0d
	00 00 4d	 mov	 BYTE PTR $T5[rsp+3317], 77 ; 0000004dH
  06781	c6 84 24 56 0d
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3318], 141 ; 0000008dH
  06789	c6 84 24 57 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3319], 73 ; 00000049H
  06791	c6 84 24 58 0d
	00 00 01	 mov	 BYTE PTR $T5[rsp+3320], 1
  06799	c6 84 24 59 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3321], 65 ; 00000041H
  067a1	c6 84 24 5a 0d
	00 00 f7	 mov	 BYTE PTR $T5[rsp+3322], 247 ; 000000f7H
  067a9	c6 84 24 5b 0d
	00 00 e8	 mov	 BYTE PTR $T5[rsp+3323], 232 ; 000000e8H
  067b1	c6 84 24 5c 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3324], 65 ; 00000041H
  067b9	c6 84 24 5d 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3325], 3
  067c1	c6 84 24 5e 0d
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3326], 208 ; 000000d0H
  067c9	c6 84 24 5f 0d
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3327], 193 ; 000000c1H
  067d1	c6 84 24 60 0d
	00 00 fa	 mov	 BYTE PTR $T5[rsp+3328], 250 ; 000000faH
  067d9	c6 84 24 61 0d
	00 00 05	 mov	 BYTE PTR $T5[rsp+3329], 5
  067e1	c6 84 24 62 0d
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3330], 139 ; 0000008bH
  067e9	c6 84 24 63 0d
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3331], 194 ; 000000c2H
  067f1	c6 84 24 64 0d
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3332], 193 ; 000000c1H
  067f9	c6 84 24 65 0d
	00 00 e8	 mov	 BYTE PTR $T5[rsp+3333], 232 ; 000000e8H
  06801	c6 84 24 66 0d
	00 00 1f	 mov	 BYTE PTR $T5[rsp+3334], 31
  06809	c6 84 24 67 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3335], 3
  06811	c6 84 24 68 0d
	00 00 d0	 mov	 BYTE PTR $T5[rsp+3336], 208 ; 000000d0H
  06819	c6 84 24 69 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3337], 15
  06821	c6 84 24 6a 0d
	00 00 be	 mov	 BYTE PTR $T5[rsp+3338], 190 ; 000000beH
  06829	c6 84 24 6b 0d
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3339], 194 ; 000000c2H
  06831	c6 84 24 6c 0d
	00 00 6b	 mov	 BYTE PTR $T5[rsp+3340], 107 ; 0000006bH
  06839	c6 84 24 6d 0d
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3341], 200 ; 000000c8H
  06841	c6 84 24 6e 0d
	00 00 38	 mov	 BYTE PTR $T5[rsp+3342], 56 ; 00000038H
  06849	c6 84 24 6f 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3343], 65 ; 00000041H
  06851	c6 84 24 70 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3344], 15
  06859	c6 84 24 71 0d
	00 00 b6	 mov	 BYTE PTR $T5[rsp+3345], 182 ; 000000b6H
  06861	c6 84 24 72 0d
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3346], 192 ; 000000c0H
  06869	c6 84 24 73 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3347], 65 ; 00000041H
  06871	c6 84 24 74 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3348], 255 ; 000000ffH
  06879	c6 84 24 75 0d
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3349], 192 ; 000000c0H
  06881	c6 84 24 76 0d
	00 00 2a	 mov	 BYTE PTR $T5[rsp+3350], 42 ; 0000002aH
  06889	c6 84 24 77 0d
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3351], 193 ; 000000c1H
  06891	c6 84 24 78 0d
	00 00 04	 mov	 BYTE PTR $T5[rsp+3352], 4
  06899	c6 84 24 79 0d
	00 00 39	 mov	 BYTE PTR $T5[rsp+3353], 57 ; 00000039H
  068a1	c6 84 24 7a 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3354], 65 ; 00000041H
  068a9	c6 84 24 7b 0d
	00 00 30	 mov	 BYTE PTR $T5[rsp+3355], 48 ; 00000030H
  068b1	c6 84 24 7c 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3356], 65 ; 00000041H
  068b9	c6 84 24 7d 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3357], 255 ; 000000ffH
  068c1	c6 84 24 7e 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3358], 65 ; 00000041H
  068c9	c6 84 24 7f 0d
	00 00 83	 mov	 BYTE PTR $T5[rsp+3359], 131 ; 00000083H
  068d1	c6 84 24 80 0d
	00 00 f8	 mov	 BYTE PTR $T5[rsp+3360], 248 ; 000000f8H
  068d9	c6 84 24 81 0d
	00 00 6d	 mov	 BYTE PTR $T5[rsp+3361], 109 ; 0000006dH
  068e1	c6 84 24 82 0d
	00 00 7c	 mov	 BYTE PTR $T5[rsp+3362], 124 ; 0000007cH
  068e9	c6 84 24 83 0d
	00 00 cc	 mov	 BYTE PTR $T5[rsp+3363], 204 ; 000000ccH
  068f1	c6 84 24 84 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3364], 73 ; 00000049H
  068f9	c6 84 24 85 0d
	00 00 63	 mov	 BYTE PTR $T5[rsp+3365], 99 ; 00000063H
  06901	c6 84 24 86 0d
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3366], 76 ; 0000004cH
  06909	c6 84 24 87 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3367], 36 ; 00000024H
  06911	c6 84 24 88 0d
	00 00 3c	 mov	 BYTE PTR $T5[rsp+3368], 60 ; 0000003cH
  06919	c6 84 24 89 0d
	00 00 45	 mov	 BYTE PTR $T5[rsp+3369], 69 ; 00000045H
  06921	c6 84 24 8a 0d
	00 00 33	 mov	 BYTE PTR $T5[rsp+3370], 51 ; 00000033H
  06929	c6 84 24 8b 0d
	00 00 f6	 mov	 BYTE PTR $T5[rsp+3371], 246 ; 000000f6H
  06931	c6 84 24 8c 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3372], 68 ; 00000044H
  06939	c6 84 24 8d 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3373], 15
  06941	c6 84 24 8e 0d
	00 00 28	 mov	 BYTE PTR $T5[rsp+3374], 40 ; 00000028H
  06949	c6 84 24 8f 0d
	00 00 84	 mov	 BYTE PTR $T5[rsp+3375], 132 ; 00000084H
  06951	c6 84 24 90 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3376], 36 ; 00000024H
  06959	c6 84 24 91 0d
	00 00 40	 mov	 BYTE PTR $T5[rsp+3377], 64 ; 00000040H
  06961	c6 84 24 92 0d
	00 00 01	 mov	 BYTE PTR $T5[rsp+3378], 1
  06969	c6 84 24 93 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3379], 0
  06971	c6 84 24 94 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3380], 0
  06979	c6 84 24 95 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3381], 73 ; 00000049H
  06981	c6 84 24 96 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3382], 3
  06989	c6 84 24 97 0d
	00 00 cc	 mov	 BYTE PTR $T5[rsp+3383], 204 ; 000000ccH
  06991	c6 84 24 98 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3384], 15
  06999	c6 84 24 99 0d
	00 00 28	 mov	 BYTE PTR $T5[rsp+3385], 40 ; 00000028H
  069a1	c6 84 24 9a 0d
	00 00 bc	 mov	 BYTE PTR $T5[rsp+3386], 188 ; 000000bcH
  069a9	c6 84 24 9b 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3387], 36 ; 00000024H
  069b1	c6 84 24 9c 0d
	00 00 50	 mov	 BYTE PTR $T5[rsp+3388], 80 ; 00000050H
  069b9	c6 84 24 9d 0d
	00 00 01	 mov	 BYTE PTR $T5[rsp+3389], 1
  069c1	c6 84 24 9e 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3390], 0
  069c9	c6 84 24 9f 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3391], 0
  069d1	c6 84 24 a0 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3392], 15
  069d9	c6 84 24 a1 0d
	00 00 28	 mov	 BYTE PTR $T5[rsp+3393], 40 ; 00000028H
  069e1	c6 84 24 a2 0d
	00 00 b4	 mov	 BYTE PTR $T5[rsp+3394], 180 ; 000000b4H
  069e9	c6 84 24 a3 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3395], 36 ; 00000024H
  069f1	c6 84 24 a4 0d
	00 00 60	 mov	 BYTE PTR $T5[rsp+3396], 96 ; 00000060H
  069f9	c6 84 24 a5 0d
	00 00 01	 mov	 BYTE PTR $T5[rsp+3397], 1
  06a01	c6 84 24 a6 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3398], 0
  06a09	c6 84 24 a7 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3399], 0
  06a11	c6 84 24 a8 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3400], 68 ; 00000044H
  06a19	c6 84 24 a9 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3401], 15
  06a21	c6 84 24 aa 0d
	00 00 b7	 mov	 BYTE PTR $T5[rsp+3402], 183 ; 000000b7H
  06a29	c6 84 24 ab 0d
	00 00 79	 mov	 BYTE PTR $T5[rsp+3403], 121 ; 00000079H
  06a31	c6 84 24 ac 0d
	00 00 14	 mov	 BYTE PTR $T5[rsp+3404], 20
  06a39	c6 84 24 ad 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3405], 68 ; 00000044H
  06a41	c6 84 24 ae 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3406], 15
  06a49	c6 84 24 af 0d
	00 00 b7	 mov	 BYTE PTR $T5[rsp+3407], 183 ; 000000b7H
  06a51	c6 84 24 b0 0d
	00 00 69	 mov	 BYTE PTR $T5[rsp+3408], 105 ; 00000069H
  06a59	c6 84 24 b1 0d
	00 00 06	 mov	 BYTE PTR $T5[rsp+3409], 6
  06a61	c6 84 24 b2 0d
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3410], 76 ; 0000004cH
  06a69	c6 84 24 b3 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3411], 3
  06a71	c6 84 24 b4 0d
	00 00 f9	 mov	 BYTE PTR $T5[rsp+3412], 249 ; 000000f9H
  06a79	c6 84 24 b5 0d
	00 00 4d	 mov	 BYTE PTR $T5[rsp+3413], 77 ; 0000004dH
  06a81	c6 84 24 b6 0d
	00 00 85	 mov	 BYTE PTR $T5[rsp+3414], 133 ; 00000085H
  06a89	c6 84 24 b7 0d
	00 00 ed	 mov	 BYTE PTR $T5[rsp+3415], 237 ; 000000edH
  06a91	c6 84 24 b8 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3416], 15
  06a99	c6 84 24 b9 0d
	00 00 84	 mov	 BYTE PTR $T5[rsp+3417], 132 ; 00000084H
  06aa1	c6 84 24 ba 0d
	00 00 a3	 mov	 BYTE PTR $T5[rsp+3418], 163 ; 000000a3H
  06aa9	c6 84 24 bb 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3419], 0
  06ab1	c6 84 24 bc 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3420], 0
  06ab9	c6 84 24 bd 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3421], 0
  06ac1	c6 84 24 be 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3422], 68 ; 00000044H
  06ac9	c6 84 24 bf 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3423], 15
  06ad1	c6 84 24 c0 0d
	00 00 b6	 mov	 BYTE PTR $T5[rsp+3424], 182 ; 000000b6H
  06ad9	c6 84 24 c1 0d
	00 00 54	 mov	 BYTE PTR $T5[rsp+3425], 84 ; 00000054H
  06ae1	c6 84 24 c2 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3426], 36 ; 00000024H
  06ae9	c6 84 24 c3 0d
	00 00 60	 mov	 BYTE PTR $T5[rsp+3427], 96 ; 00000060H
  06af1	c6 84 24 c4 0d
	00 00 33	 mov	 BYTE PTR $T5[rsp+3428], 51 ; 00000033H
  06af9	c6 84 24 c5 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3429], 255 ; 000000ffH
  06b01	c6 84 24 c6 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3430], 102 ; 00000066H
  06b09	c6 84 24 c7 0d
	00 00 66	 mov	 BYTE PTR $T5[rsp+3431], 102 ; 00000066H
  06b11	c6 84 24 c8 0d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3432], 15
  06b19	c6 84 24 c9 0d
	00 00 1f	 mov	 BYTE PTR $T5[rsp+3433], 31
  06b21	c6 84 24 ca 0d
	00 00 84	 mov	 BYTE PTR $T5[rsp+3434], 132 ; 00000084H
  06b29	c6 84 24 cb 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3435], 0
  06b31	c6 84 24 cc 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3436], 0
  06b39	c6 84 24 cd 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3437], 0
  06b41	c6 84 24 ce 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3438], 0
  06b49	c6 84 24 cf 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3439], 0
  06b51	c6 84 24 d0 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3440], 65 ; 00000041H
  06b59	c6 84 24 d1 0d
	00 00 f7	 mov	 BYTE PTR $T5[rsp+3441], 247 ; 000000f7H
  06b61	c6 84 24 d2 0d
	00 00 44	 mov	 BYTE PTR $T5[rsp+3442], 68 ; 00000044H
  06b69	c6 84 24 d3 0d
	00 00 3f	 mov	 BYTE PTR $T5[rsp+3443], 63 ; 0000003fH
  06b71	c6 84 24 d4 0d
	00 00 3c	 mov	 BYTE PTR $T5[rsp+3444], 60 ; 0000003cH
  06b79	c6 84 24 d5 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3445], 0
  06b81	c6 84 24 d6 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3446], 0
  06b89	c6 84 24 d7 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3447], 0
  06b91	c6 84 24 d8 0d
	00 00 20	 mov	 BYTE PTR $T5[rsp+3448], 32 ; 00000020H
  06b99	c6 84 24 d9 0d
	00 00 74	 mov	 BYTE PTR $T5[rsp+3449], 116 ; 00000074H
  06ba1	c6 84 24 da 0d
	00 00 76	 mov	 BYTE PTR $T5[rsp+3450], 118 ; 00000076H
  06ba9	c6 84 24 db 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3451], 65 ; 00000041H
  06bb1	c6 84 24 dc 0d
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3452], 139 ; 0000008bH
  06bb9	c6 84 24 dd 0d
	00 00 74	 mov	 BYTE PTR $T5[rsp+3453], 116 ; 00000074H
  06bc1	c6 84 24 de 0d
	00 00 3f	 mov	 BYTE PTR $T5[rsp+3454], 63 ; 0000003fH
  06bc9	c6 84 24 df 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3455], 36 ; 00000024H
  06bd1	c6 84 24 e0 0d
	00 00 48	 mov	 BYTE PTR $T5[rsp+3456], 72 ; 00000048H
  06bd9	c6 84 24 e1 0d
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3457], 141 ; 0000008dH
  06be1	c6 84 24 e2 0d
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3458], 76 ; 0000004cH
  06be9	c6 84 24 e3 0d
	00 00 24	 mov	 BYTE PTR $T5[rsp+3459], 36 ; 00000024H
  06bf1	c6 84 24 e4 0d
	00 00 60	 mov	 BYTE PTR $T5[rsp+3460], 96 ; 00000060H
  06bf9	c6 84 24 e5 0d
	00 00 49	 mov	 BYTE PTR $T5[rsp+3461], 73 ; 00000049H
  06c01	c6 84 24 e6 0d
	00 00 03	 mov	 BYTE PTR $T5[rsp+3462], 3
  06c09	c6 84 24 e7 0d
	00 00 f4	 mov	 BYTE PTR $T5[rsp+3463], 244 ; 000000f4H
  06c11	c6 84 24 e8 0d
	00 00 48	 mov	 BYTE PTR $T5[rsp+3464], 72 ; 00000048H
  06c19	c6 84 24 e9 0d
	00 00 c7	 mov	 BYTE PTR $T5[rsp+3465], 199 ; 000000c7H
  06c21	c6 84 24 ea 0d
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3466], 192 ; 000000c0H
  06c29	c6 84 24 eb 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3467], 255 ; 000000ffH
  06c31	c6 84 24 ec 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3468], 255 ; 000000ffH
  06c39	c6 84 24 ed 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3469], 255 ; 000000ffH
  06c41	c6 84 24 ee 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3470], 255 ; 000000ffH
  06c49	c6 84 24 ef 0d
	00 00 90	 mov	 BYTE PTR $T5[rsp+3471], 144 ; 00000090H
  06c51	c6 84 24 f0 0d
	00 00 48	 mov	 BYTE PTR $T5[rsp+3472], 72 ; 00000048H
  06c59	c6 84 24 f1 0d
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3473], 255 ; 000000ffH
  06c61	c6 84 24 f2 0d
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3474], 192 ; 000000c0H
  06c69	c6 84 24 f3 0d
	00 00 80	 mov	 BYTE PTR $T5[rsp+3475], 128 ; 00000080H
  06c71	c6 84 24 f4 0d
	00 00 3c	 mov	 BYTE PTR $T5[rsp+3476], 60 ; 0000003cH
  06c79	c6 84 24 f5 0d
	00 00 01	 mov	 BYTE PTR $T5[rsp+3477], 1
  06c81	c6 84 24 f6 0d
	00 00 00	 mov	 BYTE PTR $T5[rsp+3478], 0
  06c89	c6 84 24 f7 0d
	00 00 75	 mov	 BYTE PTR $T5[rsp+3479], 117 ; 00000075H
  06c91	c6 84 24 f8 0d
	00 00 f7	 mov	 BYTE PTR $T5[rsp+3480], 247 ; 000000f7H
  06c99	c6 84 24 f9 0d
	00 00 45	 mov	 BYTE PTR $T5[rsp+3481], 69 ; 00000045H
  06ca1	c6 84 24 fa 0d
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3482], 139 ; 0000008bH
  06ca9	c6 84 24 fb 0d
	00 00 5c	 mov	 BYTE PTR $T5[rsp+3483], 92 ; 0000005cH
  06cb1	c6 84 24 fc 0d
	00 00 3f	 mov	 BYTE PTR $T5[rsp+3484], 63 ; 0000003fH
  06cb9	c6 84 24 fd 0d
	00 00 20	 mov	 BYTE PTR $T5[rsp+3485], 32 ; 00000020H
  06cc1	c6 84 24 fe 0d
	00 00 41	 mov	 BYTE PTR $T5[rsp+3486], 65 ; 00000041H
  06cc9	c6 84 24 ff 0d
	00 00 b9	 mov	 BYTE PTR $T5[rsp+3487], 185 ; 000000b9H
  06cd1	c6 84 24 00 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3488], 0
  06cd9	c6 84 24 01 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3489], 0
  06ce1	c6 84 24 02 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3490], 0
  06ce9	c6 84 24 03 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3491], 0
  06cf1	c6 84 24 04 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3492], 76 ; 0000004cH
  06cf9	c6 84 24 05 0e
	00 00 2b	 mov	 BYTE PTR $T5[rsp+3493], 43 ; 0000002bH
  06d01	c6 84 24 06 0e
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3494], 216 ; 000000d8H
  06d09	c6 84 24 07 0e
	00 00 74	 mov	 BYTE PTR $T5[rsp+3495], 116 ; 00000074H
  06d11	c6 84 24 08 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3496], 72 ; 00000048H
  06d19	c6 84 24 09 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3497], 72 ; 00000048H
  06d21	c6 84 24 0a 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3498], 141 ; 0000008dH
  06d29	c6 84 24 0b 0e
	00 00 44	 mov	 BYTE PTR $T5[rsp+3499], 68 ; 00000044H
  06d31	c6 84 24 0c 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3500], 36 ; 00000024H
  06d39	c6 84 24 0d 0e
	00 00 60	 mov	 BYTE PTR $T5[rsp+3501], 96 ; 00000060H
  06d41	c6 84 24 0e 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3502], 72 ; 00000048H
  06d49	c6 84 24 0f 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3503], 139 ; 0000008bH
  06d51	c6 84 24 10 0e
	00 00 de	 mov	 BYTE PTR $T5[rsp+3504], 222 ; 000000deH
  06d59	c6 84 24 11 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3505], 72 ; 00000048H
  06d61	c6 84 24 12 0e
	00 00 2b	 mov	 BYTE PTR $T5[rsp+3506], 43 ; 0000002bH
  06d69	c6 84 24 13 0e
	00 00 d8	 mov	 BYTE PTR $T5[rsp+3507], 216 ; 000000d8H
  06d71	c6 84 24 14 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3508], 72 ; 00000048H
  06d79	c6 84 24 15 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3509], 141 ; 0000008dH
  06d81	c6 84 24 16 0e
	00 00 55	 mov	 BYTE PTR $T5[rsp+3510], 85 ; 00000055H
  06d89	c6 84 24 17 0e
	00 00 cd	 mov	 BYTE PTR $T5[rsp+3511], 205 ; 000000cdH
  06d91	c6 84 24 18 0e
	00 00 45	 mov	 BYTE PTR $T5[rsp+3512], 69 ; 00000045H
  06d99	c6 84 24 19 0e
	00 00 84	 mov	 BYTE PTR $T5[rsp+3513], 132 ; 00000084H
  06da1	c6 84 24 1a 0e
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3514], 210 ; 000000d2H
  06da9	c6 84 24 1b 0e
	00 00 74	 mov	 BYTE PTR $T5[rsp+3515], 116 ; 00000074H
  06db1	c6 84 24 1c 0e
	00 00 2f	 mov	 BYTE PTR $T5[rsp+3516], 47 ; 0000002fH
  06db9	c6 84 24 1d 0e
	00 00 41	 mov	 BYTE PTR $T5[rsp+3517], 65 ; 00000041H
  06dc1	c6 84 24 1e 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3518], 15
  06dc9	c6 84 24 1f 0e
	00 00 b6	 mov	 BYTE PTR $T5[rsp+3519], 182 ; 000000b6H
  06dd1	c6 84 24 20 0e
	00 00 ca	 mov	 BYTE PTR $T5[rsp+3520], 202 ; 000000caH
  06dd9	c6 84 24 21 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3521], 72 ; 00000048H
  06de1	c6 84 24 22 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3522], 141 ; 0000008dH
  06de9	c6 84 24 23 0e
	00 00 44	 mov	 BYTE PTR $T5[rsp+3523], 68 ; 00000044H
  06df1	c6 84 24 24 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3524], 36 ; 00000024H
  06df9	c6 84 24 25 0e
	00 00 60	 mov	 BYTE PTR $T5[rsp+3525], 96 ; 00000060H
  06e01	c6 84 24 26 0e
	00 00 4e	 mov	 BYTE PTR $T5[rsp+3526], 78 ; 0000004eH
  06e09	c6 84 24 27 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3527], 141 ; 0000008dH
  06e11	c6 84 24 28 0e
	00 00 04	 mov	 BYTE PTR $T5[rsp+3528], 4
  06e19	c6 84 24 29 0e
	00 00 0b	 mov	 BYTE PTR $T5[rsp+3529], 11
  06e21	c6 84 24 2a 0e
	00 00 66	 mov	 BYTE PTR $T5[rsp+3530], 102 ; 00000066H
  06e29	c6 84 24 2b 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3531], 15
  06e31	c6 84 24 2c 0e
	00 00 1f	 mov	 BYTE PTR $T5[rsp+3532], 31
  06e39	c6 84 24 2d 0e
	00 00 44	 mov	 BYTE PTR $T5[rsp+3533], 68 ; 00000044H
  06e41	c6 84 24 2e 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3534], 0
  06e49	c6 84 24 2f 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3535], 0
  06e51	c6 84 24 30 0e
	00 00 80	 mov	 BYTE PTR $T5[rsp+3536], 128 ; 00000080H
  06e59	c6 84 24 31 0e
	00 00 f9	 mov	 BYTE PTR $T5[rsp+3537], 249 ; 000000f9H
  06e61	c6 84 24 32 0e
	00 00 78	 mov	 BYTE PTR $T5[rsp+3538], 120 ; 00000078H
  06e69	c6 84 24 33 0e
	00 00 75	 mov	 BYTE PTR $T5[rsp+3539], 117 ; 00000075H
  06e71	c6 84 24 34 0e
	00 00 09	 mov	 BYTE PTR $T5[rsp+3540], 9
  06e79	c6 84 24 35 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3541], 15
  06e81	c6 84 24 36 0e
	00 00 b6	 mov	 BYTE PTR $T5[rsp+3542], 182 ; 000000b6H
  06e89	c6 84 24 37 0e
	00 00 0a	 mov	 BYTE PTR $T5[rsp+3543], 10
  06e91	c6 84 24 38 0e
	00 00 41	 mov	 BYTE PTR $T5[rsp+3544], 65 ; 00000041H
  06e99	c6 84 24 39 0e
	00 00 38	 mov	 BYTE PTR $T5[rsp+3545], 56 ; 00000038H
  06ea1	c6 84 24 3a 0e
	00 00 0c	 mov	 BYTE PTR $T5[rsp+3546], 12
  06ea9	c6 84 24 3b 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3547], 0
  06eb1	c6 84 24 3c 0e
	00 00 75	 mov	 BYTE PTR $T5[rsp+3548], 117 ; 00000075H
  06eb9	c6 84 24 3d 0e
	00 00 70	 mov	 BYTE PTR $T5[rsp+3549], 112 ; 00000070H
  06ec1	c6 84 24 3e 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3550], 15
  06ec9	c6 84 24 3f 0e
	00 00 b6	 mov	 BYTE PTR $T5[rsp+3551], 182 ; 000000b6H
  06ed1	c6 84 24 40 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3552], 72 ; 00000048H
  06ed9	c6 84 24 41 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3553], 1
  06ee1	c6 84 24 42 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3554], 72 ; 00000048H
  06ee9	c6 84 24 43 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3555], 255 ; 000000ffH
  06ef1	c6 84 24 44 0e
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3556], 192 ; 000000c0H
  06ef9	c6 84 24 45 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3557], 72 ; 00000048H
  06f01	c6 84 24 46 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3558], 255 ; 000000ffH
  06f09	c6 84 24 47 0e
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3559], 194 ; 000000c2H
  06f11	c6 84 24 48 0e
	00 00 84	 mov	 BYTE PTR $T5[rsp+3560], 132 ; 00000084H
  06f19	c6 84 24 49 0e
	00 00 c9	 mov	 BYTE PTR $T5[rsp+3561], 201 ; 000000c9H
  06f21	c6 84 24 4a 0e
	00 00 75	 mov	 BYTE PTR $T5[rsp+3562], 117 ; 00000075H
  06f29	c6 84 24 4b 0e
	00 00 e4	 mov	 BYTE PTR $T5[rsp+3563], 228 ; 000000e4H
  06f31	c6 84 24 4c 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3564], 76 ; 0000004cH
  06f39	c6 84 24 4d 0e
	00 00 03	 mov	 BYTE PTR $T5[rsp+3565], 3
  06f41	c6 84 24 4e 0e
	00 00 ce	 mov	 BYTE PTR $T5[rsp+3566], 206 ; 000000ceH
  06f49	c6 84 24 4f 0e
	00 00 75	 mov	 BYTE PTR $T5[rsp+3567], 117 ; 00000075H
  06f51	c6 84 24 50 0e
	00 00 6b	 mov	 BYTE PTR $T5[rsp+3568], 107 ; 0000006bH
  06f59	c6 84 24 51 0e
	00 00 49	 mov	 BYTE PTR $T5[rsp+3569], 73 ; 00000049H
  06f61	c6 84 24 52 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3570], 255 ; 000000ffH
  06f69	c6 84 24 53 0e
	00 00 c6	 mov	 BYTE PTR $T5[rsp+3571], 198 ; 000000c6H
  06f71	c6 84 24 54 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3572], 72 ; 00000048H
  06f79	c6 84 24 55 0e
	00 00 83	 mov	 BYTE PTR $T5[rsp+3573], 131 ; 00000083H
  06f81	c6 84 24 56 0e
	00 00 c7	 mov	 BYTE PTR $T5[rsp+3574], 199 ; 000000c7H
  06f89	c6 84 24 57 0e
	00 00 28	 mov	 BYTE PTR $T5[rsp+3575], 40 ; 00000028H
  06f91	c6 84 24 58 0e
	00 00 4d	 mov	 BYTE PTR $T5[rsp+3576], 77 ; 0000004dH
  06f99	c6 84 24 59 0e
	00 00 3b	 mov	 BYTE PTR $T5[rsp+3577], 59 ; 0000003bH
  06fa1	c6 84 24 5a 0e
	00 00 f5	 mov	 BYTE PTR $T5[rsp+3578], 245 ; 000000f5H
  06fa9	c6 84 24 5b 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3579], 15
  06fb1	c6 84 24 5c 0e
	00 00 82	 mov	 BYTE PTR $T5[rsp+3580], 130 ; 00000082H
  06fb9	c6 84 24 5d 0e
	00 00 6f	 mov	 BYTE PTR $T5[rsp+3581], 111 ; 0000006fH
  06fc1	c6 84 24 5e 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3582], 255 ; 000000ffH
  06fc9	c6 84 24 5f 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3583], 255 ; 000000ffH
  06fd1	c6 84 24 60 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3584], 255 ; 000000ffH
  06fd9	c6 84 24 61 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3585], 76 ; 0000004cH
  06fe1	c6 84 24 62 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3586], 141 ; 0000008dH
  06fe9	c6 84 24 63 0e
	00 00 05	 mov	 BYTE PTR $T5[rsp+3587], 5
  06ff1	c6 84 24 64 0e
	00 00 38	 mov	 BYTE PTR $T5[rsp+3588], 56 ; 00000038H
  06ff9	c6 84 24 65 0e
	00 00 07	 mov	 BYTE PTR $T5[rsp+3589], 7
  07001	c6 84 24 66 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3590], 0
  07009	c6 84 24 67 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3591], 0
  07011	c6 84 24 68 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3592], 72 ; 00000048H
  07019	c6 84 24 69 0e
	00 00 c7	 mov	 BYTE PTR $T5[rsp+3593], 199 ; 000000c7H
  07021	c6 84 24 6a 0e
	00 00 05	 mov	 BYTE PTR $T5[rsp+3594], 5
  07029	c6 84 24 6b 0e
	00 00 05	 mov	 BYTE PTR $T5[rsp+3595], 5
  07031	c6 84 24 6c 0e
	00 00 26	 mov	 BYTE PTR $T5[rsp+3596], 38 ; 00000026H
  07039	c6 84 24 6d 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3597], 0
  07041	c6 84 24 6e 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3598], 0
  07049	c6 84 24 6f 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3599], 0
  07051	c6 84 24 70 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3600], 0
  07059	c6 84 24 71 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3601], 0
  07061	c6 84 24 72 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3602], 0
  07069	c6 84 24 73 0e
	00 00 33	 mov	 BYTE PTR $T5[rsp+3603], 51 ; 00000033H
  07071	c6 84 24 74 0e
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3604], 210 ; 000000d2H
  07079	c6 84 24 75 0e
	00 00 33	 mov	 BYTE PTR $T5[rsp+3605], 51 ; 00000033H
  07081	c6 84 24 76 0e
	00 00 c9	 mov	 BYTE PTR $T5[rsp+3606], 201 ; 000000c9H
  07089	c6 84 24 77 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3607], 255 ; 000000ffH
  07091	c6 84 24 78 0e
	00 00 15	 mov	 BYTE PTR $T5[rsp+3608], 21
  07099	c6 84 24 79 0e
	00 00 33	 mov	 BYTE PTR $T5[rsp+3609], 51 ; 00000033H
  070a1	c6 84 24 7a 0e
	00 00 16	 mov	 BYTE PTR $T5[rsp+3610], 22
  070a9	c6 84 24 7b 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3611], 0
  070b1	c6 84 24 7c 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3612], 0
  070b9	c6 84 24 7d 0e
	00 00 b8	 mov	 BYTE PTR $T5[rsp+3613], 184 ; 000000b8H
  070c1	c6 84 24 7e 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3614], 1
  070c9	c6 84 24 7f 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3615], 0
  070d1	c6 84 24 80 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3616], 0
  070d9	c6 84 24 81 0e
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3617], 192 ; 000000c0H
  070e1	c6 84 24 82 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3618], 76 ; 0000004cH
  070e9	c6 84 24 83 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3619], 139 ; 0000008bH
  070f1	c6 84 24 84 0e
	00 00 b4	 mov	 BYTE PTR $T5[rsp+3620], 180 ; 000000b4H
  070f9	c6 84 24 85 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3621], 36 ; 00000024H
  07101	c6 84 24 86 0e
	00 00 b8	 mov	 BYTE PTR $T5[rsp+3622], 184 ; 000000b8H
  07109	c6 84 24 87 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3623], 1
  07111	c6 84 24 88 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3624], 0
  07119	c6 84 24 89 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3625], 0
  07121	c6 84 24 8a 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3626], 76 ; 0000004cH
  07129	c6 84 24 8b 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3627], 139 ; 0000008bH
  07131	c6 84 24 8c 0e
	00 00 ac	 mov	 BYTE PTR $T5[rsp+3628], 172 ; 000000acH
  07139	c6 84 24 8d 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3629], 36 ; 00000024H
  07141	c6 84 24 8e 0e
	00 00 a8	 mov	 BYTE PTR $T5[rsp+3630], 168 ; 000000a8H
  07149	c6 84 24 8f 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3631], 1
  07151	c6 84 24 90 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3632], 0
  07159	c6 84 24 91 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3633], 0
  07161	c6 84 24 92 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3634], 76 ; 0000004cH
  07169	c6 84 24 93 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3635], 139 ; 0000008bH
  07171	c6 84 24 94 0e
	00 00 bc	 mov	 BYTE PTR $T5[rsp+3636], 188 ; 000000bcH
  07179	c6 84 24 95 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3637], 36 ; 00000024H
  07181	c6 84 24 96 0e
	00 00 70	 mov	 BYTE PTR $T5[rsp+3638], 112 ; 00000070H
  07189	c6 84 24 97 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3639], 1
  07191	c6 84 24 98 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3640], 0
  07199	c6 84 24 99 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3641], 0
  071a1	c6 84 24 9a 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3642], 76 ; 0000004cH
  071a9	c6 84 24 9b 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3643], 139 ; 0000008bH
  071b1	c6 84 24 9c 0e
	00 00 a4	 mov	 BYTE PTR $T5[rsp+3644], 164 ; 000000a4H
  071b9	c6 84 24 9d 0e
	00 00 24	 mov	 BYTE PTR $T5[rsp+3645], 36 ; 00000024H
  071c1	c6 84 24 9e 0e
	00 00 a0	 mov	 BYTE PTR $T5[rsp+3646], 160 ; 000000a0H
  071c9	c6 84 24 9f 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3647], 1
  071d1	c6 84 24 a0 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3648], 0
  071d9	c6 84 24 a1 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3649], 0
  071e1	c6 84 24 a2 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3650], 72 ; 00000048H
  071e9	c6 84 24 a3 0e
	00 00 81	 mov	 BYTE PTR $T5[rsp+3651], 129 ; 00000081H
  071f1	c6 84 24 a4 0e
	00 00 c4	 mov	 BYTE PTR $T5[rsp+3652], 196 ; 000000c4H
  071f9	c6 84 24 a5 0e
	00 00 78	 mov	 BYTE PTR $T5[rsp+3653], 120 ; 00000078H
  07201	c6 84 24 a6 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3654], 1
  07209	c6 84 24 a7 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3655], 0
  07211	c6 84 24 a8 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3656], 0
  07219	c6 84 24 a9 0e
	00 00 5f	 mov	 BYTE PTR $T5[rsp+3657], 95 ; 0000005fH
  07221	c6 84 24 aa 0e
	00 00 5e	 mov	 BYTE PTR $T5[rsp+3658], 94 ; 0000005eH
  07229	c6 84 24 ab 0e
	00 00 5b	 mov	 BYTE PTR $T5[rsp+3659], 91 ; 0000005bH
  07231	c6 84 24 ac 0e
	00 00 5d	 mov	 BYTE PTR $T5[rsp+3660], 93 ; 0000005dH
  07239	c6 84 24 ad 0e
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3661], 195 ; 000000c3H
  07241	c6 84 24 ae 0e
	00 00 49	 mov	 BYTE PTR $T5[rsp+3662], 73 ; 00000049H
  07249	c6 84 24 af 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3663], 255 ; 000000ffH
  07251	c6 84 24 b0 0e
	00 00 c1	 mov	 BYTE PTR $T5[rsp+3664], 193 ; 000000c1H
  07259	c6 84 24 b1 0e
	00 00 4d	 mov	 BYTE PTR $T5[rsp+3665], 77 ; 0000004dH
  07261	c6 84 24 b2 0e
	00 00 3b	 mov	 BYTE PTR $T5[rsp+3666], 59 ; 0000003bH
  07269	c6 84 24 b3 0e
	00 00 cb	 mov	 BYTE PTR $T5[rsp+3667], 203 ; 000000cbH
  07271	c6 84 24 b4 0e
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3668], 15
  07279	c6 84 24 b5 0e
	00 00 82	 mov	 BYTE PTR $T5[rsp+3669], 130 ; 00000082H
  07281	c6 84 24 b6 0e
	00 00 5a	 mov	 BYTE PTR $T5[rsp+3670], 90 ; 0000005aH
  07289	c6 84 24 b7 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3671], 255 ; 000000ffH
  07291	c6 84 24 b8 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3672], 255 ; 000000ffH
  07299	c6 84 24 b9 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3673], 255 ; 000000ffH
  072a1	c6 84 24 ba 0e
	00 00 eb	 mov	 BYTE PTR $T5[rsp+3674], 235 ; 000000ebH
  072a9	c6 84 24 bb 0e
	00 00 95	 mov	 BYTE PTR $T5[rsp+3675], 149 ; 00000095H
  072b1	c6 84 24 bc 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3676], 76 ; 0000004cH
  072b9	c6 84 24 bd 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3677], 141 ; 0000008dH
  072c1	c6 84 24 be 0e
	00 00 05	 mov	 BYTE PTR $T5[rsp+3678], 5
  072c9	c6 84 24 bf 0e
	00 00 0d	 mov	 BYTE PTR $T5[rsp+3679], 13
  072d1	c6 84 24 c0 0e
	00 00 07	 mov	 BYTE PTR $T5[rsp+3680], 7
  072d9	c6 84 24 c1 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3681], 0
  072e1	c6 84 24 c2 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3682], 0
  072e9	c6 84 24 c3 0e
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3683], 76 ; 0000004cH
  072f1	c6 84 24 c4 0e
	00 00 89	 mov	 BYTE PTR $T5[rsp+3684], 137 ; 00000089H
  072f9	c6 84 24 c5 0e
	00 00 0d	 mov	 BYTE PTR $T5[rsp+3685], 13
  07301	c6 84 24 c6 0e
	00 00 ae	 mov	 BYTE PTR $T5[rsp+3686], 174 ; 000000aeH
  07309	c6 84 24 c7 0e
	00 00 25	 mov	 BYTE PTR $T5[rsp+3687], 37 ; 00000025H
  07311	c6 84 24 c8 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3688], 0
  07319	c6 84 24 c9 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3689], 0
  07321	c6 84 24 ca 0e
	00 00 33	 mov	 BYTE PTR $T5[rsp+3690], 51 ; 00000033H
  07329	c6 84 24 cb 0e
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3691], 210 ; 000000d2H
  07331	c6 84 24 cc 0e
	00 00 33	 mov	 BYTE PTR $T5[rsp+3692], 51 ; 00000033H
  07339	c6 84 24 cd 0e
	00 00 c9	 mov	 BYTE PTR $T5[rsp+3693], 201 ; 000000c9H
  07341	c6 84 24 ce 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3694], 255 ; 000000ffH
  07349	c6 84 24 cf 0e
	00 00 15	 mov	 BYTE PTR $T5[rsp+3695], 21
  07351	c6 84 24 d0 0e
	00 00 dc	 mov	 BYTE PTR $T5[rsp+3696], 220 ; 000000dcH
  07359	c6 84 24 d1 0e
	00 00 15	 mov	 BYTE PTR $T5[rsp+3697], 21
  07361	c6 84 24 d2 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3698], 0
  07369	c6 84 24 d3 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3699], 0
  07371	c6 84 24 d4 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3700], 72 ; 00000048H
  07379	c6 84 24 d5 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3701], 139 ; 0000008bH
  07381	c6 84 24 d6 0e
	00 00 0d	 mov	 BYTE PTR $T5[rsp+3702], 13
  07389	c6 84 24 d7 0e
	00 00 9d	 mov	 BYTE PTR $T5[rsp+3703], 157 ; 0000009dH
  07391	c6 84 24 d8 0e
	00 00 25	 mov	 BYTE PTR $T5[rsp+3704], 37 ; 00000025H
  07399	c6 84 24 d9 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3705], 0
  073a1	c6 84 24 da 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3706], 0
  073a9	c6 84 24 db 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3707], 72 ; 00000048H
  073b1	c6 84 24 dc 0e
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3708], 141 ; 0000008dH
  073b9	c6 84 24 dd 0e
	00 00 15	 mov	 BYTE PTR $T5[rsp+3709], 21
  073c1	c6 84 24 de 0e
	00 00 7e	 mov	 BYTE PTR $T5[rsp+3710], 126 ; 0000007eH
  073c9	c6 84 24 df 0e
	00 00 f5	 mov	 BYTE PTR $T5[rsp+3711], 245 ; 000000f5H
  073d1	c6 84 24 e0 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3712], 255 ; 000000ffH
  073d9	c6 84 24 e1 0e
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3713], 255 ; 000000ffH
  073e1	c6 84 24 e2 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3714], 72 ; 00000048H
  073e9	c6 84 24 e3 0e
	00 00 63	 mov	 BYTE PTR $T5[rsp+3715], 99 ; 00000063H
  073f1	c6 84 24 e4 0e
	00 00 41	 mov	 BYTE PTR $T5[rsp+3716], 65 ; 00000041H
  073f9	c6 84 24 e5 0e
	00 00 03	 mov	 BYTE PTR $T5[rsp+3717], 3
  07401	c6 84 24 e6 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3718], 72 ; 00000048H
  07409	c6 84 24 e7 0e
	00 00 87	 mov	 BYTE PTR $T5[rsp+3719], 135 ; 00000087H
  07411	c6 84 24 e8 0e
	00 00 54	 mov	 BYTE PTR $T5[rsp+3720], 84 ; 00000054H
  07419	c6 84 24 e9 0e
	00 00 08	 mov	 BYTE PTR $T5[rsp+3721], 8
  07421	c6 84 24 ea 0e
	00 00 07	 mov	 BYTE PTR $T5[rsp+3722], 7
  07429	c6 84 24 eb 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3723], 72 ; 00000048H
  07431	c6 84 24 ec 0e
	00 00 89	 mov	 BYTE PTR $T5[rsp+3724], 137 ; 00000089H
  07439	c6 84 24 ed 0e
	00 00 15	 mov	 BYTE PTR $T5[rsp+3725], 21
  07441	c6 84 24 ee 0e
	00 00 76	 mov	 BYTE PTR $T5[rsp+3726], 118 ; 00000076H
  07449	c6 84 24 ef 0e
	00 00 25	 mov	 BYTE PTR $T5[rsp+3727], 37 ; 00000025H
  07451	c6 84 24 f0 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3728], 0
  07459	c6 84 24 f1 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3729], 0
  07461	c6 84 24 f2 0e
	00 00 65	 mov	 BYTE PTR $T5[rsp+3730], 101 ; 00000065H
  07469	c6 84 24 f3 0e
	00 00 48	 mov	 BYTE PTR $T5[rsp+3731], 72 ; 00000048H
  07471	c6 84 24 f4 0e
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3732], 139 ; 0000008bH
  07479	c6 84 24 f5 0e
	00 00 3c	 mov	 BYTE PTR $T5[rsp+3733], 60 ; 0000003cH
  07481	c6 84 24 f6 0e
	00 00 25	 mov	 BYTE PTR $T5[rsp+3734], 37 ; 00000025H
  07489	c6 84 24 f7 0e
	00 00 88	 mov	 BYTE PTR $T5[rsp+3735], 136 ; 00000088H
  07491	c6 84 24 f8 0e
	00 00 01	 mov	 BYTE PTR $T5[rsp+3736], 1
  07499	c6 84 24 f9 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3737], 0
  074a1	c6 84 24 fa 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3738], 0
  074a9	c6 84 24 fb 0e
	00 00 80	 mov	 BYTE PTR $T5[rsp+3739], 128 ; 00000080H
  074b1	c6 84 24 fc 0e
	00 00 bf	 mov	 BYTE PTR $T5[rsp+3740], 191 ; 000000bfH
  074b9	c6 84 24 fd 0e
	00 00 4a	 mov	 BYTE PTR $T5[rsp+3741], 74 ; 0000004aH
  074c1	c6 84 24 fe 0e
	00 00 02	 mov	 BYTE PTR $T5[rsp+3742], 2
  074c9	c6 84 24 ff 0e
	00 00 00	 mov	 BYTE PTR $T5[rsp+3743], 0
  074d1	c6 84 24 00 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3744], 0
  074d9	c6 84 24 01 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3745], 0
  074e1	c6 84 24 02 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3746], 72 ; 00000048H
  074e9	c6 84 24 03 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3747], 139 ; 0000008bH
  074f1	c6 84 24 04 0f
	00 00 9f	 mov	 BYTE PTR $T5[rsp+3748], 159 ; 0000009fH
  074f9	c6 84 24 05 0f
	00 00 98	 mov	 BYTE PTR $T5[rsp+3749], 152 ; 00000098H
  07501	c6 84 24 06 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3750], 0
  07509	c6 84 24 07 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3751], 0
  07511	c6 84 24 08 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3752], 0
  07519	c6 84 24 09 0f
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3753], 15
  07521	c6 84 24 0a 0f
	00 00 84	 mov	 BYTE PTR $T5[rsp+3754], 132 ; 00000084H
  07529	c6 84 24 0b 0f
	00 00 86	 mov	 BYTE PTR $T5[rsp+3755], 134 ; 00000086H
  07531	c6 84 24 0c 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3756], 0
  07539	c6 84 24 0d 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3757], 0
  07541	c6 84 24 0e 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3758], 0
  07549	c6 84 24 0f 0f
	00 00 80	 mov	 BYTE PTR $T5[rsp+3759], 128 ; 00000080H
  07551	c6 84 24 10 0f
	00 00 7b	 mov	 BYTE PTR $T5[rsp+3760], 123 ; 0000007bH
  07559	c6 84 24 11 0f
	00 00 28	 mov	 BYTE PTR $T5[rsp+3761], 40 ; 00000028H
  07561	c6 84 24 12 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3762], 0
  07569	c6 84 24 13 0f
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3763], 15
  07571	c6 84 24 14 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3764], 133 ; 00000085H
  07579	c6 84 24 15 0f
	00 00 9b	 mov	 BYTE PTR $T5[rsp+3765], 155 ; 0000009bH
  07581	c6 84 24 16 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3766], 0
  07589	c6 84 24 17 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3767], 0
  07591	c6 84 24 18 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3768], 0
  07599	c6 84 24 19 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3769], 72 ; 00000048H
  075a1	c6 84 24 1a 0f
	00 00 39	 mov	 BYTE PTR $T5[rsp+3770], 57 ; 00000039H
  075a9	c6 84 24 1b 0f
	00 00 1b	 mov	 BYTE PTR $T5[rsp+3771], 27
  075b1	c6 84 24 1c 0f
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3772], 15
  075b9	c6 84 24 1d 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3773], 133 ; 00000085H
  075c1	c6 84 24 1e 0f
	00 00 92	 mov	 BYTE PTR $T5[rsp+3774], 146 ; 00000092H
  075c9	c6 84 24 1f 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3775], 0
  075d1	c6 84 24 20 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3776], 0
  075d9	c6 84 24 21 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3777], 0
  075e1	c6 84 24 22 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3778], 72 ; 00000048H
  075e9	c6 84 24 23 0f
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3779], 141 ; 0000008dH
  075f1	c6 84 24 24 0f
	00 00 43	 mov	 BYTE PTR $T5[rsp+3780], 67 ; 00000043H
  075f9	c6 84 24 25 0f
	00 00 10	 mov	 BYTE PTR $T5[rsp+3781], 16
  07601	c6 84 24 26 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3782], 72 ; 00000048H
  07609	c6 84 24 27 0f
	00 00 39	 mov	 BYTE PTR $T5[rsp+3783], 57 ; 00000039H
  07611	c6 84 24 28 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3784], 0
  07619	c6 84 24 29 0f
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3785], 15
  07621	c6 84 24 2a 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3786], 133 ; 00000085H
  07629	c6 84 24 2b 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3787], 133 ; 00000085H
  07631	c6 84 24 2c 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3788], 0
  07639	c6 84 24 2d 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3789], 0
  07641	c6 84 24 2e 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3790], 0
  07649	c6 84 24 2f 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3791], 72 ; 00000048H
  07651	c6 84 24 30 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3792], 139 ; 0000008bH
  07659	c6 84 24 31 0f
	00 00 8f	 mov	 BYTE PTR $T5[rsp+3793], 143 ; 0000008fH
  07661	c6 84 24 32 0f
	00 00 58	 mov	 BYTE PTR $T5[rsp+3794], 88 ; 00000058H
  07669	c6 84 24 33 0f
	00 00 02	 mov	 BYTE PTR $T5[rsp+3795], 2
  07671	c6 84 24 34 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3796], 0
  07679	c6 84 24 35 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3797], 0
  07681	c6 84 24 36 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3798], 72 ; 00000048H
  07689	c6 84 24 37 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3799], 139 ; 0000008bH
  07691	c6 84 24 38 0f
	00 00 d3	 mov	 BYTE PTR $T5[rsp+3800], 211 ; 000000d3H
  07699	c6 84 24 39 0f
	00 00 e8	 mov	 BYTE PTR $T5[rsp+3801], 232 ; 000000e8H
  076a1	c6 84 24 3a 0f
	00 00 f2	 mov	 BYTE PTR $T5[rsp+3802], 242 ; 000000f2H
  076a9	c6 84 24 3b 0f
	00 00 f7	 mov	 BYTE PTR $T5[rsp+3803], 247 ; 000000f7H
  076b1	c6 84 24 3c 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3804], 255 ; 000000ffH
  076b9	c6 84 24 3d 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3805], 255 ; 000000ffH
  076c1	c6 84 24 3e 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3806], 72 ; 00000048H
  076c9	c6 84 24 3f 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3807], 139 ; 0000008bH
  076d1	c6 84 24 40 0f
	00 00 05	 mov	 BYTE PTR $T5[rsp+3808], 5
  076d9	c6 84 24 41 0f
	00 00 2b	 mov	 BYTE PTR $T5[rsp+3809], 43 ; 0000002bH
  076e1	c6 84 24 42 0f
	00 00 25	 mov	 BYTE PTR $T5[rsp+3810], 37 ; 00000025H
  076e9	c6 84 24 43 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3811], 0
  076f1	c6 84 24 44 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3812], 0
  076f9	c6 84 24 45 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3813], 72 ; 00000048H
  07701	c6 84 24 46 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3814], 133 ; 00000085H
  07709	c6 84 24 47 0f
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3815], 192 ; 000000c0H
  07711	c6 84 24 48 0f
	00 00 74	 mov	 BYTE PTR $T5[rsp+3816], 116 ; 00000074H
  07719	c6 84 24 49 0f
	00 00 04	 mov	 BYTE PTR $T5[rsp+3817], 4
  07721	c6 84 24 4a 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3818], 72 ; 00000048H
  07729	c6 84 24 4b 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3819], 137 ; 00000089H
  07731	c6 84 24 4c 0f
	00 00 43	 mov	 BYTE PTR $T5[rsp+3820], 67 ; 00000043H
  07739	c6 84 24 4d 0f
	00 00 20	 mov	 BYTE PTR $T5[rsp+3821], 32 ; 00000020H
  07741	c6 84 24 4e 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3822], 72 ; 00000048H
  07749	c6 84 24 4f 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3823], 139 ; 0000008bH
  07751	c6 84 24 50 0f
	00 00 87	 mov	 BYTE PTR $T5[rsp+3824], 135 ; 00000087H
  07759	c6 84 24 51 0f
	00 00 58	 mov	 BYTE PTR $T5[rsp+3825], 88 ; 00000058H
  07761	c6 84 24 52 0f
	00 00 02	 mov	 BYTE PTR $T5[rsp+3826], 2
  07769	c6 84 24 53 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3827], 0
  07771	c6 84 24 54 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3828], 0
  07779	c6 84 24 55 0f
	00 00 33	 mov	 BYTE PTR $T5[rsp+3829], 51 ; 00000033H
  07781	c6 84 24 56 0f
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3830], 210 ; 000000d2H
  07789	c6 84 24 57 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3831], 72 ; 00000048H
  07791	c6 84 24 58 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3832], 137 ; 00000089H
  07799	c6 84 24 59 0f
	00 00 50	 mov	 BYTE PTR $T5[rsp+3833], 80 ; 00000050H
  077a1	c6 84 24 5a 0f
	00 00 20	 mov	 BYTE PTR $T5[rsp+3834], 32 ; 00000020H
  077a9	c6 84 24 5b 0f
	00 00 88	 mov	 BYTE PTR $T5[rsp+3835], 136 ; 00000088H
  077b1	c6 84 24 5c 0f
	00 00 97	 mov	 BYTE PTR $T5[rsp+3836], 151 ; 00000097H
  077b9	c6 84 24 5d 0f
	00 00 4a	 mov	 BYTE PTR $T5[rsp+3837], 74 ; 0000004aH
  077c1	c6 84 24 5e 0f
	00 00 02	 mov	 BYTE PTR $T5[rsp+3838], 2
  077c9	c6 84 24 5f 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3839], 0
  077d1	c6 84 24 60 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3840], 0
  077d9	c6 84 24 61 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3841], 72 ; 00000048H
  077e1	c6 84 24 62 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3842], 139 ; 0000008bH
  077e9	c6 84 24 63 0f
	00 00 43	 mov	 BYTE PTR $T5[rsp+3843], 67 ; 00000043H
  077f1	c6 84 24 64 0f
	00 00 20	 mov	 BYTE PTR $T5[rsp+3844], 32 ; 00000020H
  077f9	c6 84 24 65 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3845], 72 ; 00000048H
  07801	c6 84 24 66 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3846], 139 ; 0000008bH
  07809	c6 84 24 67 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3847], 72 ; 00000048H
  07811	c6 84 24 68 0f
	00 00 28	 mov	 BYTE PTR $T5[rsp+3848], 40 ; 00000028H
  07819	c6 84 24 69 0f
	00 00 0f	 mov	 BYTE PTR $T5[rsp+3849], 15
  07821	c6 84 24 6a 0f
	00 00 22	 mov	 BYTE PTR $T5[rsp+3850], 34 ; 00000022H
  07829	c6 84 24 6b 0f
	00 00 d9	 mov	 BYTE PTR $T5[rsp+3851], 217 ; 000000d9H
  07831	c6 84 24 6c 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3852], 72 ; 00000048H
  07839	c6 84 24 6d 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3853], 139 ; 0000008bH
  07841	c6 84 24 6e 0f
	00 00 03	 mov	 BYTE PTR $T5[rsp+3854], 3
  07849	c6 84 24 6f 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3855], 72 ; 00000048H
  07851	c6 84 24 70 0f
	00 00 3b	 mov	 BYTE PTR $T5[rsp+3856], 59 ; 0000003bH
  07859	c6 84 24 71 0f
	00 00 c3	 mov	 BYTE PTR $T5[rsp+3857], 195 ; 000000c3H
  07861	c6 84 24 72 0f
	00 00 74	 mov	 BYTE PTR $T5[rsp+3858], 116 ; 00000074H
  07869	c6 84 24 73 0f
	00 00 04	 mov	 BYTE PTR $T5[rsp+3859], 4
  07871	c6 84 24 74 0f
	00 00 c6	 mov	 BYTE PTR $T5[rsp+3860], 198 ; 000000c6H
  07879	c6 84 24 75 0f
	00 00 43	 mov	 BYTE PTR $T5[rsp+3861], 67 ; 00000043H
  07881	c6 84 24 76 0f
	00 00 29	 mov	 BYTE PTR $T5[rsp+3862], 41 ; 00000029H
  07889	c6 84 24 77 0f
	00 00 01	 mov	 BYTE PTR $T5[rsp+3863], 1
  07891	c6 84 24 78 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3864], 72 ; 00000048H
  07899	c6 84 24 79 0f
	00 00 39	 mov	 BYTE PTR $T5[rsp+3865], 57 ; 00000039H
  078a1	c6 84 24 7a 0f
	00 00 58	 mov	 BYTE PTR $T5[rsp+3866], 88 ; 00000058H
  078a9	c6 84 24 7b 0f
	00 00 08	 mov	 BYTE PTR $T5[rsp+3867], 8
  078b1	c6 84 24 7c 0f
	00 00 75	 mov	 BYTE PTR $T5[rsp+3868], 117 ; 00000075H
  078b9	c6 84 24 7d 0f
	00 00 2f	 mov	 BYTE PTR $T5[rsp+3869], 47 ; 0000002fH
  078c1	c6 84 24 7e 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3870], 72 ; 00000048H
  078c9	c6 84 24 7f 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3871], 139 ; 0000008bH
  078d1	c6 84 24 80 0f
	00 00 4b	 mov	 BYTE PTR $T5[rsp+3872], 75 ; 0000004bH
  078d9	c6 84 24 81 0f
	00 00 08	 mov	 BYTE PTR $T5[rsp+3873], 8
  078e1	c6 84 24 82 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3874], 72 ; 00000048H
  078e9	c6 84 24 83 0f
	00 00 39	 mov	 BYTE PTR $T5[rsp+3875], 57 ; 00000039H
  078f1	c6 84 24 84 0f
	00 00 19	 mov	 BYTE PTR $T5[rsp+3876], 25
  078f9	c6 84 24 85 0f
	00 00 75	 mov	 BYTE PTR $T5[rsp+3877], 117 ; 00000075H
  07901	c6 84 24 86 0f
	00 00 26	 mov	 BYTE PTR $T5[rsp+3878], 38 ; 00000026H
  07909	c6 84 24 87 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3879], 72 ; 00000048H
  07911	c6 84 24 88 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3880], 137 ; 00000089H
  07919	c6 84 24 89 0f
	00 00 01	 mov	 BYTE PTR $T5[rsp+3881], 1
  07921	c6 84 24 8a 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3882], 72 ; 00000048H
  07929	c6 84 24 8b 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3883], 137 ; 00000089H
  07931	c6 84 24 8c 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3884], 72 ; 00000048H
  07939	c6 84 24 8d 0f
	00 00 08	 mov	 BYTE PTR $T5[rsp+3885], 8
  07941	c6 84 24 8e 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3886], 72 ; 00000048H
  07949	c6 84 24 8f 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3887], 137 ; 00000089H
  07951	c6 84 24 90 0f
	00 00 15	 mov	 BYTE PTR $T5[rsp+3888], 21
  07959	c6 84 24 91 0f
	00 00 db	 mov	 BYTE PTR $T5[rsp+3889], 219 ; 000000dbH
  07961	c6 84 24 92 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3890], 36 ; 00000024H
  07969	c6 84 24 93 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3891], 0
  07971	c6 84 24 94 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3892], 0
  07979	c6 84 24 95 0f
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3893], 76 ; 0000004cH
  07981	c6 84 24 96 0f
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3894], 141 ; 0000008dH
  07989	c6 84 24 97 0f
	00 00 05	 mov	 BYTE PTR $T5[rsp+3895], 5
  07991	c6 84 24 98 0f
	00 00 54	 mov	 BYTE PTR $T5[rsp+3896], 84 ; 00000054H
  07999	c6 84 24 99 0f
	00 00 06	 mov	 BYTE PTR $T5[rsp+3897], 6
  079a1	c6 84 24 9a 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3898], 0
  079a9	c6 84 24 9b 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3899], 0
  079b1	c6 84 24 9c 0f
	00 00 33	 mov	 BYTE PTR $T5[rsp+3900], 51 ; 00000033H
  079b9	c6 84 24 9d 0f
	00 00 d2	 mov	 BYTE PTR $T5[rsp+3901], 210 ; 000000d2H
  079c1	c6 84 24 9e 0f
	00 00 33	 mov	 BYTE PTR $T5[rsp+3902], 51 ; 00000033H
  079c9	c6 84 24 9f 0f
	00 00 c9	 mov	 BYTE PTR $T5[rsp+3903], 201 ; 000000c9H
  079d1	c6 84 24 a0 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3904], 255 ; 000000ffH
  079d9	c6 84 24 a1 0f
	00 00 15	 mov	 BYTE PTR $T5[rsp+3905], 21
  079e1	c6 84 24 a2 0f
	00 00 0a	 mov	 BYTE PTR $T5[rsp+3906], 10
  079e9	c6 84 24 a3 0f
	00 00 15	 mov	 BYTE PTR $T5[rsp+3907], 21
  079f1	c6 84 24 a4 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3908], 0
  079f9	c6 84 24 a5 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3909], 0
  07a01	c6 84 24 a6 0f
	00 00 33	 mov	 BYTE PTR $T5[rsp+3910], 51 ; 00000033H
  07a09	c6 84 24 a7 0f
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3911], 192 ; 000000c0H
  07a11	c6 84 24 a8 0f
	00 00 e9	 mov	 BYTE PTR $T5[rsp+3912], 233 ; 000000e9H
  07a19	c6 84 24 a9 0f
	00 00 d5	 mov	 BYTE PTR $T5[rsp+3913], 213 ; 000000d5H
  07a21	c6 84 24 aa 0f
	00 00 fe	 mov	 BYTE PTR $T5[rsp+3914], 254 ; 000000feH
  07a29	c6 84 24 ab 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3915], 255 ; 000000ffH
  07a31	c6 84 24 ac 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3916], 255 ; 000000ffH
  07a39	c6 84 24 ad 0f
	00 00 b9	 mov	 BYTE PTR $T5[rsp+3917], 185 ; 000000b9H
  07a41	c6 84 24 ae 0f
	00 00 03	 mov	 BYTE PTR $T5[rsp+3918], 3
  07a49	c6 84 24 af 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3919], 0
  07a51	c6 84 24 b0 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3920], 0
  07a59	c6 84 24 b1 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3921], 0
  07a61	c6 84 24 b2 0f
	00 00 cd	 mov	 BYTE PTR $T5[rsp+3922], 205 ; 000000cdH
  07a69	c6 84 24 b3 0f
	00 00 29	 mov	 BYTE PTR $T5[rsp+3923], 41 ; 00000029H
  07a71	c6 84 24 b4 0f
	00 00 b9	 mov	 BYTE PTR $T5[rsp+3924], 185 ; 000000b9H
  07a79	c6 84 24 b5 0f
	00 00 06	 mov	 BYTE PTR $T5[rsp+3925], 6
  07a81	c6 84 24 b6 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3926], 0
  07a89	c6 84 24 b7 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3927], 0
  07a91	c6 84 24 b8 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3928], 0
  07a99	c6 84 24 b9 0f
	00 00 ff	 mov	 BYTE PTR $T5[rsp+3929], 255 ; 000000ffH
  07aa1	c6 84 24 ba 0f
	00 00 15	 mov	 BYTE PTR $T5[rsp+3930], 21
  07aa9	c6 84 24 bb 0f
	00 00 f9	 mov	 BYTE PTR $T5[rsp+3931], 249 ; 000000f9H
  07ab1	c6 84 24 bc 0f
	00 00 14	 mov	 BYTE PTR $T5[rsp+3932], 20
  07ab9	c6 84 24 bd 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3933], 0
  07ac1	c6 84 24 be 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3934], 0
  07ac9	c6 84 24 bf 0f
	00 00 cc	 mov	 BYTE PTR $T5[rsp+3935], 204 ; 000000ccH
  07ad1	c6 84 24 c0 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3936], 72 ; 00000048H
  07ad9	c6 84 24 c1 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3937], 137 ; 00000089H
  07ae1	c6 84 24 c2 0f
	00 00 5c	 mov	 BYTE PTR $T5[rsp+3938], 92 ; 0000005cH
  07ae9	c6 84 24 c3 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3939], 36 ; 00000024H
  07af1	c6 84 24 c4 0f
	00 00 08	 mov	 BYTE PTR $T5[rsp+3940], 8
  07af9	c6 84 24 c5 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3941], 72 ; 00000048H
  07b01	c6 84 24 c6 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3942], 137 ; 00000089H
  07b09	c6 84 24 c7 0f
	00 00 6c	 mov	 BYTE PTR $T5[rsp+3943], 108 ; 0000006cH
  07b11	c6 84 24 c8 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3944], 36 ; 00000024H
  07b19	c6 84 24 c9 0f
	00 00 10	 mov	 BYTE PTR $T5[rsp+3945], 16
  07b21	c6 84 24 ca 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3946], 72 ; 00000048H
  07b29	c6 84 24 cb 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3947], 137 ; 00000089H
  07b31	c6 84 24 cc 0f
	00 00 74	 mov	 BYTE PTR $T5[rsp+3948], 116 ; 00000074H
  07b39	c6 84 24 cd 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3949], 36 ; 00000024H
  07b41	c6 84 24 ce 0f
	00 00 18	 mov	 BYTE PTR $T5[rsp+3950], 24
  07b49	c6 84 24 cf 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3951], 72 ; 00000048H
  07b51	c6 84 24 d0 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3952], 137 ; 00000089H
  07b59	c6 84 24 d1 0f
	00 00 7c	 mov	 BYTE PTR $T5[rsp+3953], 124 ; 0000007cH
  07b61	c6 84 24 d2 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3954], 36 ; 00000024H
  07b69	c6 84 24 d3 0f
	00 00 20	 mov	 BYTE PTR $T5[rsp+3955], 32 ; 00000020H
  07b71	c6 84 24 d4 0f
	00 00 41	 mov	 BYTE PTR $T5[rsp+3956], 65 ; 00000041H
  07b79	c6 84 24 d5 0f
	00 00 56	 mov	 BYTE PTR $T5[rsp+3957], 86 ; 00000056H
  07b81	c6 84 24 d6 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3958], 72 ; 00000048H
  07b89	c6 84 24 d7 0f
	00 00 83	 mov	 BYTE PTR $T5[rsp+3959], 131 ; 00000083H
  07b91	c6 84 24 d8 0f
	00 00 ec	 mov	 BYTE PTR $T5[rsp+3960], 236 ; 000000ecH
  07b99	c6 84 24 d9 0f
	00 00 50	 mov	 BYTE PTR $T5[rsp+3961], 80 ; 00000050H
  07ba1	c6 84 24 da 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3962], 139 ; 0000008bH
  07ba9	c6 84 24 db 0f
	00 00 c2	 mov	 BYTE PTR $T5[rsp+3963], 194 ; 000000c2H
  07bb1	c6 84 24 dc 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3964], 139 ; 0000008bH
  07bb9	c6 84 24 dd 0f
	00 00 f9	 mov	 BYTE PTR $T5[rsp+3965], 249 ; 000000f9H
  07bc1	c6 84 24 de 0f
	00 00 33	 mov	 BYTE PTR $T5[rsp+3966], 51 ; 00000033H
  07bc9	c6 84 24 df 0f
	00 00 db	 mov	 BYTE PTR $T5[rsp+3967], 219 ; 000000dbH
  07bd1	c6 84 24 e0 0f
	00 00 48	 mov	 BYTE PTR $T5[rsp+3968], 72 ; 00000048H
  07bd9	c6 84 24 e1 0f
	00 00 8d	 mov	 BYTE PTR $T5[rsp+3969], 141 ; 0000008dH
  07be1	c6 84 24 e2 0f
	00 00 54	 mov	 BYTE PTR $T5[rsp+3970], 84 ; 00000054H
  07be9	c6 84 24 e3 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3971], 36 ; 00000024H
  07bf1	c6 84 24 e4 0f
	00 00 40	 mov	 BYTE PTR $T5[rsp+3972], 64 ; 00000040H
  07bf9	c6 84 24 e5 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3973], 139 ; 0000008bH
  07c01	c6 84 24 e6 0f
	00 00 c8	 mov	 BYTE PTR $T5[rsp+3974], 200 ; 000000c8H
  07c09	c6 84 24 e7 0f
	00 00 89	 mov	 BYTE PTR $T5[rsp+3975], 137 ; 00000089H
  07c11	c6 84 24 e8 0f
	00 00 5c	 mov	 BYTE PTR $T5[rsp+3976], 92 ; 0000005cH
  07c19	c6 84 24 e9 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3977], 36 ; 00000024H
  07c21	c6 84 24 ea 0f
	00 00 40	 mov	 BYTE PTR $T5[rsp+3978], 64 ; 00000040H
  07c29	c6 84 24 eb 0f
	00 00 49	 mov	 BYTE PTR $T5[rsp+3979], 73 ; 00000049H
  07c31	c6 84 24 ec 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3980], 139 ; 0000008bH
  07c39	c6 84 24 ed 0f
	00 00 f1	 mov	 BYTE PTR $T5[rsp+3981], 241 ; 000000f1H
  07c41	c6 84 24 ee 0f
	00 00 49	 mov	 BYTE PTR $T5[rsp+3982], 73 ; 00000049H
  07c49	c6 84 24 ef 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3983], 139 ; 0000008bH
  07c51	c6 84 24 f0 0f
	00 00 e8	 mov	 BYTE PTR $T5[rsp+3984], 232 ; 000000e8H
  07c59	c6 84 24 f1 0f
	00 00 e8	 mov	 BYTE PTR $T5[rsp+3985], 232 ; 000000e8H
  07c61	c6 84 24 f2 0f
	00 00 8a	 mov	 BYTE PTR $T5[rsp+3986], 138 ; 0000008aH
  07c69	c6 84 24 f3 0f
	00 00 01	 mov	 BYTE PTR $T5[rsp+3987], 1
  07c71	c6 84 24 f4 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3988], 0
  07c79	c6 84 24 f5 0f
	00 00 00	 mov	 BYTE PTR $T5[rsp+3989], 0
  07c81	c6 84 24 f6 0f
	00 00 4c	 mov	 BYTE PTR $T5[rsp+3990], 76 ; 0000004cH
  07c89	c6 84 24 f7 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3991], 139 ; 0000008bH
  07c91	c6 84 24 f8 0f
	00 00 f0	 mov	 BYTE PTR $T5[rsp+3992], 240 ; 000000f0H
  07c99	c6 84 24 f9 0f
	00 00 8b	 mov	 BYTE PTR $T5[rsp+3993], 139 ; 0000008bH
  07ca1	c6 84 24 fa 0f
	00 00 44	 mov	 BYTE PTR $T5[rsp+3994], 68 ; 00000044H
  07ca9	c6 84 24 fb 0f
	00 00 24	 mov	 BYTE PTR $T5[rsp+3995], 36 ; 00000024H
  07cb1	c6 84 24 fc 0f
	00 00 40	 mov	 BYTE PTR $T5[rsp+3996], 64 ; 00000040H
  07cb9	c6 84 24 fd 0f
	00 00 85	 mov	 BYTE PTR $T5[rsp+3997], 133 ; 00000085H
  07cc1	c6 84 24 fe 0f
	00 00 c0	 mov	 BYTE PTR $T5[rsp+3998], 192 ; 000000c0H
  07cc9	c6 84 24 ff 0f
	00 00 78	 mov	 BYTE PTR $T5[rsp+3999], 120 ; 00000078H
  07cd1	c6 84 24 00 10
	00 00 67	 mov	 BYTE PTR $T5[rsp+4000], 103 ; 00000067H
  07cd9	c6 84 24 01 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4001], 72 ; 00000048H
  07ce1	c6 84 24 02 10
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4002], 141 ; 0000008dH
  07ce9	c6 84 24 03 10
	00 00 54	 mov	 BYTE PTR $T5[rsp+4003], 84 ; 00000054H
  07cf1	c6 84 24 04 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4004], 36 ; 00000024H
  07cf9	c6 84 24 05 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4005], 64 ; 00000040H
  07d01	c6 84 24 06 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4006], 139 ; 0000008bH
  07d09	c6 84 24 07 10
	00 00 cf	 mov	 BYTE PTR $T5[rsp+4007], 207 ; 000000cfH
  07d11	c6 84 24 08 10
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4008], 232 ; 000000e8H
  07d19	c6 84 24 09 10
	00 00 73	 mov	 BYTE PTR $T5[rsp+4009], 115 ; 00000073H
  07d21	c6 84 24 0a 10
	00 00 01	 mov	 BYTE PTR $T5[rsp+4010], 1
  07d29	c6 84 24 0b 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4011], 0
  07d31	c6 84 24 0c 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4012], 0
  07d39	c6 84 24 0d 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4013], 72 ; 00000048H
  07d41	c6 84 24 0e 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4014], 139 ; 0000008bH
  07d49	c6 84 24 0f 10
	00 00 c8	 mov	 BYTE PTR $T5[rsp+4015], 200 ; 000000c8H
  07d51	c6 84 24 10 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4016], 139 ; 0000008bH
  07d59	c6 84 24 11 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4017], 68 ; 00000044H
  07d61	c6 84 24 12 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4018], 36 ; 00000024H
  07d69	c6 84 24 13 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4019], 64 ; 00000040H
  07d71	c6 84 24 14 10
	00 00 85	 mov	 BYTE PTR $T5[rsp+4020], 133 ; 00000085H
  07d79	c6 84 24 15 10
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4021], 192 ; 000000c0H
  07d81	c6 84 24 16 10
	00 00 78	 mov	 BYTE PTR $T5[rsp+4022], 120 ; 00000078H
  07d89	c6 84 24 17 10
	00 00 50	 mov	 BYTE PTR $T5[rsp+4023], 80 ; 00000050H
  07d91	c6 84 24 18 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4024], 72 ; 00000048H
  07d99	c6 84 24 19 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4025], 139 ; 0000008bH
  07da1	c6 84 24 1a 10
	00 00 bc	 mov	 BYTE PTR $T5[rsp+4026], 188 ; 000000bcH
  07da9	c6 84 24 1b 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4027], 36 ; 00000024H
  07db1	c6 84 24 1c 10
	00 00 80	 mov	 BYTE PTR $T5[rsp+4028], 128 ; 00000080H
  07db9	c6 84 24 1d 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4029], 0
  07dc1	c6 84 24 1e 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4030], 0
  07dc9	c6 84 24 1f 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4031], 0
  07dd1	c6 84 24 20 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4032], 72 ; 00000048H
  07dd9	c6 84 24 21 10
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4033], 141 ; 0000008dH
  07de1	c6 84 24 22 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4034], 68 ; 00000044H
  07de9	c6 84 24 23 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4035], 36 ; 00000024H
  07df1	c6 84 24 24 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4036], 72 ; 00000048H
  07df9	c6 84 24 25 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4037], 72 ; 00000048H
  07e01	c6 84 24 26 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4038], 137 ; 00000089H
  07e09	c6 84 24 27 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4039], 68 ; 00000044H
  07e11	c6 84 24 28 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4040], 36 ; 00000024H
  07e19	c6 84 24 29 10
	00 00 30	 mov	 BYTE PTR $T5[rsp+4041], 48 ; 00000030H
  07e21	c6 84 24 2a 10
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4042], 76 ; 0000004cH
  07e29	c6 84 24 2b 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4043], 139 ; 0000008bH
  07e31	c6 84 24 2c 10
	00 00 ce	 mov	 BYTE PTR $T5[rsp+4044], 206 ; 000000ceH
  07e39	c6 84 24 2d 10
	00 00 c6	 mov	 BYTE PTR $T5[rsp+4045], 198 ; 000000c6H
  07e41	c6 84 24 2e 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4046], 68 ; 00000044H
  07e49	c6 84 24 2f 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4047], 36 ; 00000024H
  07e51	c6 84 24 30 10
	00 00 28	 mov	 BYTE PTR $T5[rsp+4048], 40 ; 00000028H
  07e59	c6 84 24 31 10
	00 00 01	 mov	 BYTE PTR $T5[rsp+4049], 1
  07e61	c6 84 24 32 10
	00 00 4d	 mov	 BYTE PTR $T5[rsp+4050], 77 ; 0000004dH
  07e69	c6 84 24 33 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4051], 139 ; 0000008bH
  07e71	c6 84 24 34 10
	00 00 c6	 mov	 BYTE PTR $T5[rsp+4052], 198 ; 000000c6H
  07e79	c6 84 24 35 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4053], 72 ; 00000048H
  07e81	c6 84 24 36 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4054], 139 ; 0000008bH
  07e89	c6 84 24 37 10
	00 00 d5	 mov	 BYTE PTR $T5[rsp+4055], 213 ; 000000d5H
  07e91	c6 84 24 38 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4056], 72 ; 00000048H
  07e99	c6 84 24 39 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4057], 137 ; 00000089H
  07ea1	c6 84 24 3a 10
	00 00 7c	 mov	 BYTE PTR $T5[rsp+4058], 124 ; 0000007cH
  07ea9	c6 84 24 3b 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4059], 36 ; 00000024H
  07eb1	c6 84 24 3c 10
	00 00 20	 mov	 BYTE PTR $T5[rsp+4060], 32 ; 00000020H
  07eb9	c6 84 24 3d 10
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4061], 232 ; 000000e8H
  07ec1	c6 84 24 3e 10
	00 00 e0	 mov	 BYTE PTR $T5[rsp+4062], 224 ; 000000e0H
  07ec9	c6 84 24 3f 10
	00 00 03	 mov	 BYTE PTR $T5[rsp+4063], 3
  07ed1	c6 84 24 40 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4064], 0
  07ed9	c6 84 24 41 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4065], 0
  07ee1	c6 84 24 42 10
	00 00 85	 mov	 BYTE PTR $T5[rsp+4066], 133 ; 00000085H
  07ee9	c6 84 24 43 10
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4067], 192 ; 000000c0H
  07ef1	c6 84 24 44 10
	00 00 78	 mov	 BYTE PTR $T5[rsp+4068], 120 ; 00000078H
  07ef9	c6 84 24 45 10
	00 00 22	 mov	 BYTE PTR $T5[rsp+4069], 34 ; 00000022H
  07f01	c6 84 24 46 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4070], 72 ; 00000048H
  07f09	c6 84 24 47 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4071], 139 ; 0000008bH
  07f11	c6 84 24 48 10
	00 00 84	 mov	 BYTE PTR $T5[rsp+4072], 132 ; 00000084H
  07f19	c6 84 24 49 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4073], 36 ; 00000024H
  07f21	c6 84 24 4a 10
	00 00 88	 mov	 BYTE PTR $T5[rsp+4074], 136 ; 00000088H
  07f29	c6 84 24 4b 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4075], 0
  07f31	c6 84 24 4c 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4076], 0
  07f39	c6 84 24 4d 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4077], 0
  07f41	c6 84 24 4e 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4078], 72 ; 00000048H
  07f49	c6 84 24 4f 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4079], 139 ; 0000008bH
  07f51	c6 84 24 50 10
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4080], 76 ; 0000004cH
  07f59	c6 84 24 51 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4081], 36 ; 00000024H
  07f61	c6 84 24 52 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4082], 72 ; 00000048H
  07f69	c6 84 24 53 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4083], 72 ; 00000048H
  07f71	c6 84 24 54 10
	00 00 85	 mov	 BYTE PTR $T5[rsp+4084], 133 ; 00000085H
  07f79	c6 84 24 55 10
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4085], 192 ; 000000c0H
  07f81	c6 84 24 56 10
	00 00 74	 mov	 BYTE PTR $T5[rsp+4086], 116 ; 00000074H
  07f89	c6 84 24 57 10
	00 00 03	 mov	 BYTE PTR $T5[rsp+4087], 3
  07f91	c6 84 24 58 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4088], 72 ; 00000048H
  07f99	c6 84 24 59 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4089], 137 ; 00000089H
  07fa1	c6 84 24 5a 10
	00 00 08	 mov	 BYTE PTR $T5[rsp+4090], 8
  07fa9	c6 84 24 5b 10
	00 00 b8	 mov	 BYTE PTR $T5[rsp+4091], 184 ; 000000b8H
  07fb1	c6 84 24 5c 10
	00 00 29	 mov	 BYTE PTR $T5[rsp+4092], 41 ; 00000029H
  07fb9	c6 84 24 5d 10
	00 00 02	 mov	 BYTE PTR $T5[rsp+4093], 2
  07fc1	c6 84 24 5e 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4094], 0
  07fc9	c6 84 24 5f 10
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4095], 192 ; 000000c0H
  07fd1	c6 84 24 60 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4096], 72 ; 00000048H
  07fd9	c6 84 24 61 10
	00 00 3b	 mov	 BYTE PTR $T5[rsp+4097], 59 ; 0000003bH
  07fe1	c6 84 24 62 10
	00 00 cf	 mov	 BYTE PTR $T5[rsp+4098], 207 ; 000000cfH
  07fe9	c6 84 24 63 10
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4099], 15
  07ff1	c6 84 24 64 10
	00 00 45	 mov	 BYTE PTR $T5[rsp+4100], 69 ; 00000045H
  07ff9	c6 84 24 65 10
	00 00 d8	 mov	 BYTE PTR $T5[rsp+4101], 216 ; 000000d8H
  08001	c6 84 24 66 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4102], 139 ; 0000008bH
  08009	c6 84 24 67 10
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4103], 195 ; 000000c3H
  08011	c6 84 24 68 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4104], 72 ; 00000048H
  08019	c6 84 24 69 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4105], 139 ; 0000008bH
  08021	c6 84 24 6a 10
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4106], 92 ; 0000005cH
  08029	c6 84 24 6b 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4107], 36 ; 00000024H
  08031	c6 84 24 6c 10
	00 00 60	 mov	 BYTE PTR $T5[rsp+4108], 96 ; 00000060H
  08039	c6 84 24 6d 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4109], 72 ; 00000048H
  08041	c6 84 24 6e 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4110], 139 ; 0000008bH
  08049	c6 84 24 6f 10
	00 00 6c	 mov	 BYTE PTR $T5[rsp+4111], 108 ; 0000006cH
  08051	c6 84 24 70 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4112], 36 ; 00000024H
  08059	c6 84 24 71 10
	00 00 68	 mov	 BYTE PTR $T5[rsp+4113], 104 ; 00000068H
  08061	c6 84 24 72 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4114], 72 ; 00000048H
  08069	c6 84 24 73 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4115], 139 ; 0000008bH
  08071	c6 84 24 74 10
	00 00 74	 mov	 BYTE PTR $T5[rsp+4116], 116 ; 00000074H
  08079	c6 84 24 75 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4117], 36 ; 00000024H
  08081	c6 84 24 76 10
	00 00 70	 mov	 BYTE PTR $T5[rsp+4118], 112 ; 00000070H
  08089	c6 84 24 77 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4119], 72 ; 00000048H
  08091	c6 84 24 78 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4120], 139 ; 0000008bH
  08099	c6 84 24 79 10
	00 00 7c	 mov	 BYTE PTR $T5[rsp+4121], 124 ; 0000007cH
  080a1	c6 84 24 7a 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4122], 36 ; 00000024H
  080a9	c6 84 24 7b 10
	00 00 78	 mov	 BYTE PTR $T5[rsp+4123], 120 ; 00000078H
  080b1	c6 84 24 7c 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4124], 72 ; 00000048H
  080b9	c6 84 24 7d 10
	00 00 83	 mov	 BYTE PTR $T5[rsp+4125], 131 ; 00000083H
  080c1	c6 84 24 7e 10
	00 00 c4	 mov	 BYTE PTR $T5[rsp+4126], 196 ; 000000c4H
  080c9	c6 84 24 7f 10
	00 00 50	 mov	 BYTE PTR $T5[rsp+4127], 80 ; 00000050H
  080d1	c6 84 24 80 10
	00 00 41	 mov	 BYTE PTR $T5[rsp+4128], 65 ; 00000041H
  080d9	c6 84 24 81 10
	00 00 5e	 mov	 BYTE PTR $T5[rsp+4129], 94 ; 0000005eH
  080e1	c6 84 24 82 10
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4130], 195 ; 000000c3H
  080e9	c6 84 24 83 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4131], 204 ; 000000ccH
  080f1	c6 84 24 84 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4132], 204 ; 000000ccH
  080f9	c6 84 24 85 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4133], 204 ; 000000ccH
  08101	c6 84 24 86 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4134], 204 ; 000000ccH
  08109	c6 84 24 87 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4135], 204 ; 000000ccH
  08111	c6 84 24 88 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4136], 204 ; 000000ccH
  08119	c6 84 24 89 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4137], 204 ; 000000ccH
  08121	c6 84 24 8a 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4138], 204 ; 000000ccH
  08129	c6 84 24 8b 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4139], 204 ; 000000ccH
  08131	c6 84 24 8c 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4140], 204 ; 000000ccH
  08139	c6 84 24 8d 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4141], 204 ; 000000ccH
  08141	c6 84 24 8e 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4142], 204 ; 000000ccH
  08149	c6 84 24 8f 10
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4143], 204 ; 000000ccH
  08151	c6 84 24 90 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4144], 72 ; 00000048H
  08159	c6 84 24 91 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4145], 137 ; 00000089H
  08161	c6 84 24 92 10
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4146], 92 ; 0000005cH
  08169	c6 84 24 93 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4147], 36 ; 00000024H
  08171	c6 84 24 94 10
	00 00 08	 mov	 BYTE PTR $T5[rsp+4148], 8
  08179	c6 84 24 95 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4149], 72 ; 00000048H
  08181	c6 84 24 96 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4150], 137 ; 00000089H
  08189	c6 84 24 97 10
	00 00 6c	 mov	 BYTE PTR $T5[rsp+4151], 108 ; 0000006cH
  08191	c6 84 24 98 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4152], 36 ; 00000024H
  08199	c6 84 24 99 10
	00 00 10	 mov	 BYTE PTR $T5[rsp+4153], 16
  081a1	c6 84 24 9a 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4154], 72 ; 00000048H
  081a9	c6 84 24 9b 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4155], 137 ; 00000089H
  081b1	c6 84 24 9c 10
	00 00 74	 mov	 BYTE PTR $T5[rsp+4156], 116 ; 00000074H
  081b9	c6 84 24 9d 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4157], 36 ; 00000024H
  081c1	c6 84 24 9e 10
	00 00 18	 mov	 BYTE PTR $T5[rsp+4158], 24
  081c9	c6 84 24 9f 10
	00 00 57	 mov	 BYTE PTR $T5[rsp+4159], 87 ; 00000057H
  081d1	c6 84 24 a0 10
	00 00 41	 mov	 BYTE PTR $T5[rsp+4160], 65 ; 00000041H
  081d9	c6 84 24 a1 10
	00 00 56	 mov	 BYTE PTR $T5[rsp+4161], 86 ; 00000056H
  081e1	c6 84 24 a2 10
	00 00 41	 mov	 BYTE PTR $T5[rsp+4162], 65 ; 00000041H
  081e9	c6 84 24 a3 10
	00 00 57	 mov	 BYTE PTR $T5[rsp+4163], 87 ; 00000057H
  081f1	c6 84 24 a4 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4164], 72 ; 00000048H
  081f9	c6 84 24 a5 10
	00 00 83	 mov	 BYTE PTR $T5[rsp+4165], 131 ; 00000083H
  08201	c6 84 24 a6 10
	00 00 ec	 mov	 BYTE PTR $T5[rsp+4166], 236 ; 000000ecH
  08209	c6 84 24 a7 10
	00 00 50	 mov	 BYTE PTR $T5[rsp+4167], 80 ; 00000050H
  08211	c6 84 24 a8 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4168], 139 ; 0000008bH
  08219	c6 84 24 a9 10
	00 00 c2	 mov	 BYTE PTR $T5[rsp+4169], 194 ; 000000c2H
  08221	c6 84 24 aa 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4170], 139 ; 0000008bH
  08229	c6 84 24 ab 10
	00 00 f1	 mov	 BYTE PTR $T5[rsp+4171], 241 ; 000000f1H
  08231	c6 84 24 ac 10
	00 00 33	 mov	 BYTE PTR $T5[rsp+4172], 51 ; 00000033H
  08239	c6 84 24 ad 10
	00 00 db	 mov	 BYTE PTR $T5[rsp+4173], 219 ; 000000dbH
  08241	c6 84 24 ae 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4174], 72 ; 00000048H
  08249	c6 84 24 af 10
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4175], 141 ; 0000008dH
  08251	c6 84 24 b0 10
	00 00 54	 mov	 BYTE PTR $T5[rsp+4176], 84 ; 00000054H
  08259	c6 84 24 b1 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4177], 36 ; 00000024H
  08261	c6 84 24 b2 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4178], 64 ; 00000040H
  08269	c6 84 24 b3 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4179], 139 ; 0000008bH
  08271	c6 84 24 b4 10
	00 00 c8	 mov	 BYTE PTR $T5[rsp+4180], 200 ; 000000c8H
  08279	c6 84 24 b5 10
	00 00 89	 mov	 BYTE PTR $T5[rsp+4181], 137 ; 00000089H
  08281	c6 84 24 b6 10
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4182], 92 ; 0000005cH
  08289	c6 84 24 b7 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4183], 36 ; 00000024H
  08291	c6 84 24 b8 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4184], 64 ; 00000040H
  08299	c6 84 24 b9 10
	00 00 4d	 mov	 BYTE PTR $T5[rsp+4185], 77 ; 0000004dH
  082a1	c6 84 24 ba 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4186], 139 ; 0000008bH
  082a9	c6 84 24 bb 10
	00 00 f1	 mov	 BYTE PTR $T5[rsp+4187], 241 ; 000000f1H
  082b1	c6 84 24 bc 10
	00 00 4d	 mov	 BYTE PTR $T5[rsp+4188], 77 ; 0000004dH
  082b9	c6 84 24 bd 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4189], 139 ; 0000008bH
  082c1	c6 84 24 be 10
	00 00 f8	 mov	 BYTE PTR $T5[rsp+4190], 248 ; 000000f8H
  082c9	c6 84 24 bf 10
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4191], 232 ; 000000e8H
  082d1	c6 84 24 c0 10
	00 00 bc	 mov	 BYTE PTR $T5[rsp+4192], 188 ; 000000bcH
  082d9	c6 84 24 c1 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4193], 0
  082e1	c6 84 24 c2 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4194], 0
  082e9	c6 84 24 c3 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4195], 0
  082f1	c6 84 24 c4 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4196], 72 ; 00000048H
  082f9	c6 84 24 c5 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4197], 139 ; 0000008bH
  08301	c6 84 24 c6 10
	00 00 f8	 mov	 BYTE PTR $T5[rsp+4198], 248 ; 000000f8H
  08309	c6 84 24 c7 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4199], 139 ; 0000008bH
  08311	c6 84 24 c8 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4200], 68 ; 00000044H
  08319	c6 84 24 c9 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4201], 36 ; 00000024H
  08321	c6 84 24 ca 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4202], 64 ; 00000040H
  08329	c6 84 24 cb 10
	00 00 85	 mov	 BYTE PTR $T5[rsp+4203], 133 ; 00000085H
  08331	c6 84 24 cc 10
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4204], 192 ; 000000c0H
  08339	c6 84 24 cd 10
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4205], 15
  08341	c6 84 24 ce 10
	00 00 88	 mov	 BYTE PTR $T5[rsp+4206], 136 ; 00000088H
  08349	c6 84 24 cf 10
	00 00 8e	 mov	 BYTE PTR $T5[rsp+4207], 142 ; 0000008eH
  08351	c6 84 24 d0 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4208], 0
  08359	c6 84 24 d1 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4209], 0
  08361	c6 84 24 d2 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4210], 0
  08369	c6 84 24 d3 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4211], 72 ; 00000048H
  08371	c6 84 24 d4 10
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4212], 141 ; 0000008dH
  08379	c6 84 24 d5 10
	00 00 54	 mov	 BYTE PTR $T5[rsp+4213], 84 ; 00000054H
  08381	c6 84 24 d6 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4214], 36 ; 00000024H
  08389	c6 84 24 d7 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4215], 64 ; 00000040H
  08391	c6 84 24 d8 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4216], 139 ; 0000008bH
  08399	c6 84 24 d9 10
	00 00 ce	 mov	 BYTE PTR $T5[rsp+4217], 206 ; 000000ceH
  083a1	c6 84 24 da 10
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4218], 232 ; 000000e8H
  083a9	c6 84 24 db 10
	00 00 a1	 mov	 BYTE PTR $T5[rsp+4219], 161 ; 000000a1H
  083b1	c6 84 24 dc 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4220], 0
  083b9	c6 84 24 dd 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4221], 0
  083c1	c6 84 24 de 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4222], 0
  083c9	c6 84 24 df 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4223], 72 ; 00000048H
  083d1	c6 84 24 e0 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4224], 139 ; 0000008bH
  083d9	c6 84 24 e1 10
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4225], 232 ; 000000e8H
  083e1	c6 84 24 e2 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4226], 72 ; 00000048H
  083e9	c6 84 24 e3 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4227], 139 ; 0000008bH
  083f1	c6 84 24 e4 10
	00 00 cf	 mov	 BYTE PTR $T5[rsp+4228], 207 ; 000000cfH
  083f9	c6 84 24 e5 10
	00 00 39	 mov	 BYTE PTR $T5[rsp+4229], 57 ; 00000039H
  08401	c6 84 24 e6 10
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4230], 92 ; 0000005cH
  08409	c6 84 24 e7 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4231], 36 ; 00000024H
  08411	c6 84 24 e8 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4232], 64 ; 00000040H
  08419	c6 84 24 e9 10
	00 00 7d	 mov	 BYTE PTR $T5[rsp+4233], 125 ; 0000007dH
  08421	c6 84 24 ea 10
	00 00 0c	 mov	 BYTE PTR $T5[rsp+4234], 12
  08429	c6 84 24 eb 10
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4235], 255 ; 000000ffH
  08431	c6 84 24 ec 10
	00 00 15	 mov	 BYTE PTR $T5[rsp+4236], 21
  08439	c6 84 24 ed 10
	00 00 97	 mov	 BYTE PTR $T5[rsp+4237], 151 ; 00000097H
  08441	c6 84 24 ee 10
	00 00 13	 mov	 BYTE PTR $T5[rsp+4238], 19
  08449	c6 84 24 ef 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4239], 0
  08451	c6 84 24 f0 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4240], 0
  08459	c6 84 24 f1 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4241], 139 ; 0000008bH
  08461	c6 84 24 f2 10
	00 00 44	 mov	 BYTE PTR $T5[rsp+4242], 68 ; 00000044H
  08469	c6 84 24 f3 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4243], 36 ; 00000024H
  08471	c6 84 24 f4 10
	00 00 40	 mov	 BYTE PTR $T5[rsp+4244], 64 ; 00000040H
  08479	c6 84 24 f5 10
	00 00 eb	 mov	 BYTE PTR $T5[rsp+4245], 235 ; 000000ebH
  08481	c6 84 24 f6 10
	00 00 6a	 mov	 BYTE PTR $T5[rsp+4246], 106 ; 0000006aH
  08489	c6 84 24 f7 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4247], 72 ; 00000048H
  08491	c6 84 24 f8 10
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4248], 139 ; 0000008bH
  08499	c6 84 24 f9 10
	00 00 b4	 mov	 BYTE PTR $T5[rsp+4249], 180 ; 000000b4H
  084a1	c6 84 24 fa 10
	00 00 24	 mov	 BYTE PTR $T5[rsp+4250], 36 ; 00000024H
  084a9	c6 84 24 fb 10
	00 00 90	 mov	 BYTE PTR $T5[rsp+4251], 144 ; 00000090H
  084b1	c6 84 24 fc 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4252], 0
  084b9	c6 84 24 fd 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4253], 0
  084c1	c6 84 24 fe 10
	00 00 00	 mov	 BYTE PTR $T5[rsp+4254], 0
  084c9	c6 84 24 ff 10
	00 00 48	 mov	 BYTE PTR $T5[rsp+4255], 72 ; 00000048H
  084d1	c6 84 24 00 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4256], 141 ; 0000008dH
  084d9	c6 84 24 01 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4257], 68 ; 00000044H
  084e1	c6 84 24 02 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4258], 36 ; 00000024H
  084e9	c6 84 24 03 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4259], 72 ; 00000048H
  084f1	c6 84 24 04 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4260], 72 ; 00000048H
  084f9	c6 84 24 05 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4261], 137 ; 00000089H
  08501	c6 84 24 06 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4262], 68 ; 00000044H
  08509	c6 84 24 07 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4263], 36 ; 00000024H
  08511	c6 84 24 08 11
	00 00 30	 mov	 BYTE PTR $T5[rsp+4264], 48 ; 00000030H
  08519	c6 84 24 09 11
	00 00 4d	 mov	 BYTE PTR $T5[rsp+4265], 77 ; 0000004dH
  08521	c6 84 24 0a 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4266], 139 ; 0000008bH
  08529	c6 84 24 0b 11
	00 00 cf	 mov	 BYTE PTR $T5[rsp+4267], 207 ; 000000cfH
  08531	c6 84 24 0c 11
	00 00 c6	 mov	 BYTE PTR $T5[rsp+4268], 198 ; 000000c6H
  08539	c6 84 24 0d 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4269], 68 ; 00000044H
  08541	c6 84 24 0e 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4270], 36 ; 00000024H
  08549	c6 84 24 0f 11
	00 00 28	 mov	 BYTE PTR $T5[rsp+4271], 40 ; 00000028H
  08551	c6 84 24 10 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4272], 1
  08559	c6 84 24 11 11
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4273], 76 ; 0000004cH
  08561	c6 84 24 12 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4274], 139 ; 0000008bH
  08569	c6 84 24 13 11
	00 00 c5	 mov	 BYTE PTR $T5[rsp+4275], 197 ; 000000c5H
  08571	c6 84 24 14 11
	00 00 49	 mov	 BYTE PTR $T5[rsp+4276], 73 ; 00000049H
  08579	c6 84 24 15 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4277], 139 ; 0000008bH
  08581	c6 84 24 16 11
	00 00 d6	 mov	 BYTE PTR $T5[rsp+4278], 214 ; 000000d6H
  08589	c6 84 24 17 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4279], 72 ; 00000048H
  08591	c6 84 24 18 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4280], 137 ; 00000089H
  08599	c6 84 24 19 11
	00 00 74	 mov	 BYTE PTR $T5[rsp+4281], 116 ; 00000074H
  085a1	c6 84 24 1a 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4282], 36 ; 00000024H
  085a9	c6 84 24 1b 11
	00 00 20	 mov	 BYTE PTR $T5[rsp+4283], 32 ; 00000020H
  085b1	c6 84 24 1c 11
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4284], 232 ; 000000e8H
  085b9	c6 84 24 1d 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4285], 1
  085c1	c6 84 24 1e 11
	00 00 03	 mov	 BYTE PTR $T5[rsp+4286], 3
  085c9	c6 84 24 1f 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4287], 0
  085d1	c6 84 24 20 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4288], 0
  085d9	c6 84 24 21 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4289], 72 ; 00000048H
  085e1	c6 84 24 22 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4290], 139 ; 0000008bH
  085e9	c6 84 24 23 11
	00 00 cf	 mov	 BYTE PTR $T5[rsp+4291], 207 ; 000000cfH
  085f1	c6 84 24 24 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4292], 137 ; 00000089H
  085f9	c6 84 24 25 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4293], 68 ; 00000044H
  08601	c6 84 24 26 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4294], 36 ; 00000024H
  08609	c6 84 24 27 11
	00 00 40	 mov	 BYTE PTR $T5[rsp+4295], 64 ; 00000040H
  08611	c6 84 24 28 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4296], 255 ; 000000ffH
  08619	c6 84 24 29 11
	00 00 15	 mov	 BYTE PTR $T5[rsp+4297], 21
  08621	c6 84 24 2a 11
	00 00 5a	 mov	 BYTE PTR $T5[rsp+4298], 90 ; 0000005aH
  08629	c6 84 24 2b 11
	00 00 13	 mov	 BYTE PTR $T5[rsp+4299], 19
  08631	c6 84 24 2c 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4300], 0
  08639	c6 84 24 2d 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4301], 0
  08641	c6 84 24 2e 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4302], 72 ; 00000048H
  08649	c6 84 24 2f 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4303], 139 ; 0000008bH
  08651	c6 84 24 30 11
	00 00 cd	 mov	 BYTE PTR $T5[rsp+4304], 205 ; 000000cdH
  08659	c6 84 24 31 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4305], 255 ; 000000ffH
  08661	c6 84 24 32 11
	00 00 15	 mov	 BYTE PTR $T5[rsp+4306], 21
  08669	c6 84 24 33 11
	00 00 51	 mov	 BYTE PTR $T5[rsp+4307], 81 ; 00000051H
  08671	c6 84 24 34 11
	00 00 13	 mov	 BYTE PTR $T5[rsp+4308], 19
  08679	c6 84 24 35 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4309], 0
  08681	c6 84 24 36 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4310], 0
  08689	c6 84 24 37 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4311], 139 ; 0000008bH
  08691	c6 84 24 38 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4312], 68 ; 00000044H
  08699	c6 84 24 39 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4313], 36 ; 00000024H
  086a1	c6 84 24 3a 11
	00 00 40	 mov	 BYTE PTR $T5[rsp+4314], 64 ; 00000040H
  086a9	c6 84 24 3b 11
	00 00 85	 mov	 BYTE PTR $T5[rsp+4315], 133 ; 00000085H
  086b1	c6 84 24 3c 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4316], 192 ; 000000c0H
  086b9	c6 84 24 3d 11
	00 00 78	 mov	 BYTE PTR $T5[rsp+4317], 120 ; 00000078H
  086c1	c6 84 24 3e 11
	00 00 22	 mov	 BYTE PTR $T5[rsp+4318], 34 ; 00000022H
  086c9	c6 84 24 3f 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4319], 72 ; 00000048H
  086d1	c6 84 24 40 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4320], 139 ; 0000008bH
  086d9	c6 84 24 41 11
	00 00 84	 mov	 BYTE PTR $T5[rsp+4321], 132 ; 00000084H
  086e1	c6 84 24 42 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4322], 36 ; 00000024H
  086e9	c6 84 24 43 11
	00 00 98	 mov	 BYTE PTR $T5[rsp+4323], 152 ; 00000098H
  086f1	c6 84 24 44 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4324], 0
  086f9	c6 84 24 45 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4325], 0
  08701	c6 84 24 46 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4326], 0
  08709	c6 84 24 47 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4327], 72 ; 00000048H
  08711	c6 84 24 48 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4328], 139 ; 0000008bH
  08719	c6 84 24 49 11
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4329], 76 ; 0000004cH
  08721	c6 84 24 4a 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4330], 36 ; 00000024H
  08729	c6 84 24 4b 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4331], 72 ; 00000048H
  08731	c6 84 24 4c 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4332], 72 ; 00000048H
  08739	c6 84 24 4d 11
	00 00 85	 mov	 BYTE PTR $T5[rsp+4333], 133 ; 00000085H
  08741	c6 84 24 4e 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4334], 192 ; 000000c0H
  08749	c6 84 24 4f 11
	00 00 74	 mov	 BYTE PTR $T5[rsp+4335], 116 ; 00000074H
  08751	c6 84 24 50 11
	00 00 03	 mov	 BYTE PTR $T5[rsp+4336], 3
  08759	c6 84 24 51 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4337], 72 ; 00000048H
  08761	c6 84 24 52 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4338], 137 ; 00000089H
  08769	c6 84 24 53 11
	00 00 08	 mov	 BYTE PTR $T5[rsp+4339], 8
  08771	c6 84 24 54 11
	00 00 b8	 mov	 BYTE PTR $T5[rsp+4340], 184 ; 000000b8H
  08779	c6 84 24 55 11
	00 00 29	 mov	 BYTE PTR $T5[rsp+4341], 41 ; 00000029H
  08781	c6 84 24 56 11
	00 00 02	 mov	 BYTE PTR $T5[rsp+4342], 2
  08789	c6 84 24 57 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4343], 0
  08791	c6 84 24 58 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4344], 192 ; 000000c0H
  08799	c6 84 24 59 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4345], 72 ; 00000048H
  087a1	c6 84 24 5a 11
	00 00 3b	 mov	 BYTE PTR $T5[rsp+4346], 59 ; 0000003bH
  087a9	c6 84 24 5b 11
	00 00 ce	 mov	 BYTE PTR $T5[rsp+4347], 206 ; 000000ceH
  087b1	c6 84 24 5c 11
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4348], 15
  087b9	c6 84 24 5d 11
	00 00 45	 mov	 BYTE PTR $T5[rsp+4349], 69 ; 00000045H
  087c1	c6 84 24 5e 11
	00 00 d8	 mov	 BYTE PTR $T5[rsp+4350], 216 ; 000000d8H
  087c9	c6 84 24 5f 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4351], 139 ; 0000008bH
  087d1	c6 84 24 60 11
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4352], 195 ; 000000c3H
  087d9	c6 84 24 61 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4353], 72 ; 00000048H
  087e1	c6 84 24 62 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4354], 139 ; 0000008bH
  087e9	c6 84 24 63 11
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4355], 92 ; 0000005cH
  087f1	c6 84 24 64 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4356], 36 ; 00000024H
  087f9	c6 84 24 65 11
	00 00 70	 mov	 BYTE PTR $T5[rsp+4357], 112 ; 00000070H
  08801	c6 84 24 66 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4358], 72 ; 00000048H
  08809	c6 84 24 67 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4359], 139 ; 0000008bH
  08811	c6 84 24 68 11
	00 00 6c	 mov	 BYTE PTR $T5[rsp+4360], 108 ; 0000006cH
  08819	c6 84 24 69 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4361], 36 ; 00000024H
  08821	c6 84 24 6a 11
	00 00 78	 mov	 BYTE PTR $T5[rsp+4362], 120 ; 00000078H
  08829	c6 84 24 6b 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4363], 72 ; 00000048H
  08831	c6 84 24 6c 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4364], 139 ; 0000008bH
  08839	c6 84 24 6d 11
	00 00 b4	 mov	 BYTE PTR $T5[rsp+4365], 180 ; 000000b4H
  08841	c6 84 24 6e 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4366], 36 ; 00000024H
  08849	c6 84 24 6f 11
	00 00 80	 mov	 BYTE PTR $T5[rsp+4367], 128 ; 00000080H
  08851	c6 84 24 70 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4368], 0
  08859	c6 84 24 71 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4369], 0
  08861	c6 84 24 72 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4370], 0
  08869	c6 84 24 73 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4371], 72 ; 00000048H
  08871	c6 84 24 74 11
	00 00 83	 mov	 BYTE PTR $T5[rsp+4372], 131 ; 00000083H
  08879	c6 84 24 75 11
	00 00 c4	 mov	 BYTE PTR $T5[rsp+4373], 196 ; 000000c4H
  08881	c6 84 24 76 11
	00 00 50	 mov	 BYTE PTR $T5[rsp+4374], 80 ; 00000050H
  08889	c6 84 24 77 11
	00 00 41	 mov	 BYTE PTR $T5[rsp+4375], 65 ; 00000041H
  08891	c6 84 24 78 11
	00 00 5f	 mov	 BYTE PTR $T5[rsp+4376], 95 ; 0000005fH
  08899	c6 84 24 79 11
	00 00 41	 mov	 BYTE PTR $T5[rsp+4377], 65 ; 00000041H
  088a1	c6 84 24 7a 11
	00 00 5e	 mov	 BYTE PTR $T5[rsp+4378], 94 ; 0000005eH
  088a9	c6 84 24 7b 11
	00 00 5f	 mov	 BYTE PTR $T5[rsp+4379], 95 ; 0000005fH
  088b1	c6 84 24 7c 11
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4380], 195 ; 000000c3H
  088b9	c6 84 24 7d 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4381], 204 ; 000000ccH
  088c1	c6 84 24 7e 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4382], 204 ; 000000ccH
  088c9	c6 84 24 7f 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4383], 204 ; 000000ccH
  088d1	c6 84 24 80 11
	00 00 40	 mov	 BYTE PTR $T5[rsp+4384], 64 ; 00000040H
  088d9	c6 84 24 81 11
	00 00 53	 mov	 BYTE PTR $T5[rsp+4385], 83 ; 00000053H
  088e1	c6 84 24 82 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4386], 72 ; 00000048H
  088e9	c6 84 24 83 11
	00 00 83	 mov	 BYTE PTR $T5[rsp+4387], 131 ; 00000083H
  088f1	c6 84 24 84 11
	00 00 ec	 mov	 BYTE PTR $T5[rsp+4388], 236 ; 000000ecH
  088f9	c6 84 24 85 11
	00 00 20	 mov	 BYTE PTR $T5[rsp+4389], 32 ; 00000020H
  08901	c6 84 24 86 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4390], 72 ; 00000048H
  08909	c6 84 24 87 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4391], 139 ; 0000008bH
  08911	c6 84 24 88 11
	00 00 da	 mov	 BYTE PTR $T5[rsp+4392], 218 ; 000000daH
  08919	c6 84 24 89 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4393], 139 ; 0000008bH
  08921	c6 84 24 8a 11
	00 00 c9	 mov	 BYTE PTR $T5[rsp+4394], 201 ; 000000c9H
  08929	c6 84 24 8b 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4395], 72 ; 00000048H
  08931	c6 84 24 8c 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4396], 141 ; 0000008dH
  08939	c6 84 24 8d 11
	00 00 54	 mov	 BYTE PTR $T5[rsp+4397], 84 ; 00000054H
  08941	c6 84 24 8e 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4398], 36 ; 00000024H
  08949	c6 84 24 8f 11
	00 00 40	 mov	 BYTE PTR $T5[rsp+4399], 64 ; 00000040H
  08951	c6 84 24 90 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4400], 255 ; 000000ffH
  08959	c6 84 24 91 11
	00 00 15	 mov	 BYTE PTR $T5[rsp+4401], 21
  08961	c6 84 24 92 11
	00 00 fa	 mov	 BYTE PTR $T5[rsp+4402], 250 ; 000000faH
  08969	c6 84 24 93 11
	00 00 12	 mov	 BYTE PTR $T5[rsp+4403], 18
  08971	c6 84 24 94 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4404], 0
  08979	c6 84 24 95 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4405], 0
  08981	c6 84 24 96 11
	00 00 85	 mov	 BYTE PTR $T5[rsp+4406], 133 ; 00000085H
  08989	c6 84 24 97 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4407], 192 ; 000000c0H
  08991	c6 84 24 98 11
	00 00 79	 mov	 BYTE PTR $T5[rsp+4408], 121 ; 00000079H
  08999	c6 84 24 99 11
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4409], 15
  089a1	c6 84 24 9a 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4410], 72 ; 00000048H
  089a9	c6 84 24 9b 11
	00 00 85	 mov	 BYTE PTR $T5[rsp+4411], 133 ; 00000085H
  089b1	c6 84 24 9c 11
	00 00 db	 mov	 BYTE PTR $T5[rsp+4412], 219 ; 000000dbH
  089b9	c6 84 24 9d 11
	00 00 74	 mov	 BYTE PTR $T5[rsp+4413], 116 ; 00000074H
  089c1	c6 84 24 9e 11
	00 00 02	 mov	 BYTE PTR $T5[rsp+4414], 2
  089c9	c6 84 24 9f 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4415], 137 ; 00000089H
  089d1	c6 84 24 a0 11
	00 00 03	 mov	 BYTE PTR $T5[rsp+4416], 3
  089d9	c6 84 24 a1 11
	00 00 33	 mov	 BYTE PTR $T5[rsp+4417], 51 ; 00000033H
  089e1	c6 84 24 a2 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4418], 192 ; 000000c0H
  089e9	c6 84 24 a3 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4419], 72 ; 00000048H
  089f1	c6 84 24 a4 11
	00 00 83	 mov	 BYTE PTR $T5[rsp+4420], 131 ; 00000083H
  089f9	c6 84 24 a5 11
	00 00 c4	 mov	 BYTE PTR $T5[rsp+4421], 196 ; 000000c4H
  08a01	c6 84 24 a6 11
	00 00 20	 mov	 BYTE PTR $T5[rsp+4422], 32 ; 00000020H
  08a09	c6 84 24 a7 11
	00 00 5b	 mov	 BYTE PTR $T5[rsp+4423], 91 ; 0000005bH
  08a11	c6 84 24 a8 11
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4424], 195 ; 000000c3H
  08a19	c6 84 24 a9 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4425], 72 ; 00000048H
  08a21	c6 84 24 aa 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4426], 139 ; 0000008bH
  08a29	c6 84 24 ab 11
	00 00 44	 mov	 BYTE PTR $T5[rsp+4427], 68 ; 00000044H
  08a31	c6 84 24 ac 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4428], 36 ; 00000024H
  08a39	c6 84 24 ad 11
	00 00 40	 mov	 BYTE PTR $T5[rsp+4429], 64 ; 00000040H
  08a41	c6 84 24 ae 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4430], 72 ; 00000048H
  08a49	c6 84 24 af 11
	00 00 83	 mov	 BYTE PTR $T5[rsp+4431], 131 ; 00000083H
  08a51	c6 84 24 b0 11
	00 00 c4	 mov	 BYTE PTR $T5[rsp+4432], 196 ; 000000c4H
  08a59	c6 84 24 b1 11
	00 00 20	 mov	 BYTE PTR $T5[rsp+4433], 32 ; 00000020H
  08a61	c6 84 24 b2 11
	00 00 5b	 mov	 BYTE PTR $T5[rsp+4434], 91 ; 0000005bH
  08a69	c6 84 24 b3 11
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4435], 195 ; 000000c3H
  08a71	c6 84 24 b4 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4436], 204 ; 000000ccH
  08a79	c6 84 24 b5 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4437], 204 ; 000000ccH
  08a81	c6 84 24 b6 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4438], 204 ; 000000ccH
  08a89	c6 84 24 b7 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4439], 204 ; 000000ccH
  08a91	c6 84 24 b8 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4440], 204 ; 000000ccH
  08a99	c6 84 24 b9 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4441], 204 ; 000000ccH
  08aa1	c6 84 24 ba 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4442], 204 ; 000000ccH
  08aa9	c6 84 24 bb 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4443], 204 ; 000000ccH
  08ab1	c6 84 24 bc 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4444], 204 ; 000000ccH
  08ab9	c6 84 24 bd 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4445], 204 ; 000000ccH
  08ac1	c6 84 24 be 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4446], 204 ; 000000ccH
  08ac9	c6 84 24 bf 11
	00 00 cc	 mov	 BYTE PTR $T5[rsp+4447], 204 ; 000000ccH
  08ad1	c6 84 24 c0 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4448], 72 ; 00000048H
  08ad9	c6 84 24 c1 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4449], 137 ; 00000089H
  08ae1	c6 84 24 c2 11
	00 00 74	 mov	 BYTE PTR $T5[rsp+4450], 116 ; 00000074H
  08ae9	c6 84 24 c3 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4451], 36 ; 00000024H
  08af1	c6 84 24 c4 11
	00 00 18	 mov	 BYTE PTR $T5[rsp+4452], 24
  08af9	c6 84 24 c5 11
	00 00 57	 mov	 BYTE PTR $T5[rsp+4453], 87 ; 00000057H
  08b01	c6 84 24 c6 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4454], 72 ; 00000048H
  08b09	c6 84 24 c7 11
	00 00 81	 mov	 BYTE PTR $T5[rsp+4455], 129 ; 00000081H
  08b11	c6 84 24 c8 11
	00 00 ec	 mov	 BYTE PTR $T5[rsp+4456], 236 ; 000000ecH
  08b19	c6 84 24 c9 11
	00 00 80	 mov	 BYTE PTR $T5[rsp+4457], 128 ; 00000080H
  08b21	c6 84 24 ca 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4458], 1
  08b29	c6 84 24 cb 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4459], 0
  08b31	c6 84 24 cc 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4460], 0
  08b39	c6 84 24 cd 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4461], 72 ; 00000048H
  08b41	c6 84 24 ce 11
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4462], 139 ; 0000008bH
  08b49	c6 84 24 cf 11
	00 00 d1	 mov	 BYTE PTR $T5[rsp+4463], 209 ; 000000d1H
  08b51	c6 84 24 d0 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4464], 72 ; 00000048H
  08b59	c6 84 24 d1 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4465], 141 ; 0000008dH
  08b61	c6 84 24 d2 11
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4466], 76 ; 0000004cH
  08b69	c6 84 24 d3 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4467], 36 ; 00000024H
  08b71	c6 84 24 d4 11
	00 00 30	 mov	 BYTE PTR $T5[rsp+4468], 48 ; 00000030H
  08b79	c6 84 24 d5 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4469], 255 ; 000000ffH
  08b81	c6 84 24 d6 11
	00 00 15	 mov	 BYTE PTR $T5[rsp+4470], 21
  08b89	c6 84 24 d7 11
	00 00 f5	 mov	 BYTE PTR $T5[rsp+4471], 245 ; 000000f5H
  08b91	c6 84 24 d8 11
	00 00 12	 mov	 BYTE PTR $T5[rsp+4472], 18
  08b99	c6 84 24 d9 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4473], 0
  08ba1	c6 84 24 da 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4474], 0
  08ba9	c6 84 24 db 11
	00 00 41	 mov	 BYTE PTR $T5[rsp+4475], 65 ; 00000041H
  08bb1	c6 84 24 dc 11
	00 00 b0	 mov	 BYTE PTR $T5[rsp+4476], 176 ; 000000b0H
  08bb9	c6 84 24 dd 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4477], 1
  08bc1	c6 84 24 de 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4478], 72 ; 00000048H
  08bc9	c6 84 24 df 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4479], 141 ; 0000008dH
  08bd1	c6 84 24 e0 11
	00 00 54	 mov	 BYTE PTR $T5[rsp+4480], 84 ; 00000054H
  08bd9	c6 84 24 e1 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4481], 36 ; 00000024H
  08be1	c6 84 24 e2 11
	00 00 30	 mov	 BYTE PTR $T5[rsp+4482], 48 ; 00000030H
  08be9	c6 84 24 e3 11
	00 00 48	 mov	 BYTE PTR $T5[rsp+4483], 72 ; 00000048H
  08bf1	c6 84 24 e4 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4484], 141 ; 0000008dH
  08bf9	c6 84 24 e5 11
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4485], 76 ; 0000004cH
  08c01	c6 84 24 e6 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4486], 36 ; 00000024H
  08c09	c6 84 24 e7 11
	00 00 20	 mov	 BYTE PTR $T5[rsp+4487], 32 ; 00000020H
  08c11	c6 84 24 e8 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4488], 255 ; 000000ffH
  08c19	c6 84 24 e9 11
	00 00 15	 mov	 BYTE PTR $T5[rsp+4489], 21
  08c21	c6 84 24 ea 11
	00 00 ea	 mov	 BYTE PTR $T5[rsp+4490], 234 ; 000000eaH
  08c29	c6 84 24 eb 11
	00 00 12	 mov	 BYTE PTR $T5[rsp+4491], 18
  08c31	c6 84 24 ec 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4492], 0
  08c39	c6 84 24 ed 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4493], 0
  08c41	c6 84 24 ee 11
	00 00 33	 mov	 BYTE PTR $T5[rsp+4494], 51 ; 00000033H
  08c49	c6 84 24 ef 11
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4495], 255 ; 000000ffH
  08c51	c6 84 24 f0 11
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4496], 76 ; 0000004cH
  08c59	c6 84 24 f1 11
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4497], 141 ; 0000008dH
  08c61	c6 84 24 f2 11
	00 00 8c	 mov	 BYTE PTR $T5[rsp+4498], 140 ; 0000008cH
  08c69	c6 84 24 f3 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4499], 36 ; 00000024H
  08c71	c6 84 24 f4 11
	00 00 98	 mov	 BYTE PTR $T5[rsp+4500], 152 ; 00000098H
  08c79	c6 84 24 f5 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4501], 1
  08c81	c6 84 24 f6 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4502], 0
  08c89	c6 84 24 f7 11
	00 00 00	 mov	 BYTE PTR $T5[rsp+4503], 0
  08c91	c6 84 24 f8 11
	00 00 45	 mov	 BYTE PTR $T5[rsp+4504], 69 ; 00000045H
  08c99	c6 84 24 f9 11
	00 00 33	 mov	 BYTE PTR $T5[rsp+4505], 51 ; 00000033H
  08ca1	c6 84 24 fa 11
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4506], 192 ; 000000c0H
  08ca9	c6 84 24 fb 11
	00 00 89	 mov	 BYTE PTR $T5[rsp+4507], 137 ; 00000089H
  08cb1	c6 84 24 fc 11
	00 00 bc	 mov	 BYTE PTR $T5[rsp+4508], 188 ; 000000bcH
  08cb9	c6 84 24 fd 11
	00 00 24	 mov	 BYTE PTR $T5[rsp+4509], 36 ; 00000024H
  08cc1	c6 84 24 fe 11
	00 00 98	 mov	 BYTE PTR $T5[rsp+4510], 152 ; 00000098H
  08cc9	c6 84 24 ff 11
	00 00 01	 mov	 BYTE PTR $T5[rsp+4511], 1
  08cd1	c6 84 24 00 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4512], 0
  08cd9	c6 84 24 01 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4513], 0
  08ce1	c6 84 24 02 12
	00 00 33	 mov	 BYTE PTR $T5[rsp+4514], 51 ; 00000033H
  08ce9	c6 84 24 03 12
	00 00 d2	 mov	 BYTE PTR $T5[rsp+4515], 210 ; 000000d2H
  08cf1	c6 84 24 04 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4516], 141 ; 0000008dH
  08cf9	c6 84 24 05 12
	00 00 4f	 mov	 BYTE PTR $T5[rsp+4517], 79 ; 0000004fH
  08d01	c6 84 24 06 12
	00 00 0b	 mov	 BYTE PTR $T5[rsp+4518], 11
  08d09	c6 84 24 07 12
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4519], 232 ; 000000e8H
  08d11	c6 84 24 08 12
	00 00 1c	 mov	 BYTE PTR $T5[rsp+4520], 28
  08d19	c6 84 24 09 12
	00 00 02	 mov	 BYTE PTR $T5[rsp+4521], 2
  08d21	c6 84 24 0a 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4522], 0
  08d29	c6 84 24 0b 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4523], 0
  08d31	c6 84 24 0c 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4524], 139 ; 0000008bH
  08d39	c6 84 24 0d 12
	00 00 84	 mov	 BYTE PTR $T5[rsp+4525], 132 ; 00000084H
  08d41	c6 84 24 0e 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4526], 36 ; 00000024H
  08d49	c6 84 24 0f 12
	00 00 98	 mov	 BYTE PTR $T5[rsp+4527], 152 ; 00000098H
  08d51	c6 84 24 10 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4528], 1
  08d59	c6 84 24 11 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4529], 0
  08d61	c6 84 24 12 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4530], 0
  08d69	c6 84 24 13 12
	00 00 85	 mov	 BYTE PTR $T5[rsp+4531], 133 ; 00000085H
  08d71	c6 84 24 14 12
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4532], 192 ; 000000c0H
  08d79	c6 84 24 15 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4533], 15
  08d81	c6 84 24 16 12
	00 00 84	 mov	 BYTE PTR $T5[rsp+4534], 132 ; 00000084H
  08d89	c6 84 24 17 12
	00 00 c1	 mov	 BYTE PTR $T5[rsp+4535], 193 ; 000000c1H
  08d91	c6 84 24 18 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4536], 1
  08d99	c6 84 24 19 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4537], 0
  08da1	c6 84 24 1a 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4538], 0
  08da9	c6 84 24 1b 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4539], 139 ; 0000008bH
  08db1	c6 84 24 1c 12
	00 00 d0	 mov	 BYTE PTR $T5[rsp+4540], 208 ; 000000d0H
  08db9	c6 84 24 1d 12
	00 00 33	 mov	 BYTE PTR $T5[rsp+4541], 51 ; 00000033H
  08dc1	c6 84 24 1e 12
	00 00 c9	 mov	 BYTE PTR $T5[rsp+4542], 201 ; 000000c9H
  08dc9	c6 84 24 1f 12
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4543], 255 ; 000000ffH
  08dd1	c6 84 24 20 12
	00 00 15	 mov	 BYTE PTR $T5[rsp+4544], 21
  08dd9	c6 84 24 21 12
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4545], 195 ; 000000c3H
  08de1	c6 84 24 22 12
	00 00 12	 mov	 BYTE PTR $T5[rsp+4546], 18
  08de9	c6 84 24 23 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4547], 0
  08df1	c6 84 24 24 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4548], 0
  08df9	c6 84 24 25 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4549], 72 ; 00000048H
  08e01	c6 84 24 26 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4550], 139 ; 0000008bH
  08e09	c6 84 24 27 12
	00 00 f0	 mov	 BYTE PTR $T5[rsp+4551], 240 ; 000000f0H
  08e11	c6 84 24 28 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4552], 72 ; 00000048H
  08e19	c6 84 24 29 12
	00 00 85	 mov	 BYTE PTR $T5[rsp+4553], 133 ; 00000085H
  08e21	c6 84 24 2a 12
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4554], 192 ; 000000c0H
  08e29	c6 84 24 2b 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4555], 15
  08e31	c6 84 24 2c 12
	00 00 84	 mov	 BYTE PTR $T5[rsp+4556], 132 ; 00000084H
  08e39	c6 84 24 2d 12
	00 00 ab	 mov	 BYTE PTR $T5[rsp+4557], 171 ; 000000abH
  08e41	c6 84 24 2e 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4558], 1
  08e49	c6 84 24 2f 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4559], 0
  08e51	c6 84 24 30 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4560], 0
  08e59	c6 84 24 31 12
	00 00 44	 mov	 BYTE PTR $T5[rsp+4561], 68 ; 00000044H
  08e61	c6 84 24 32 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4562], 139 ; 0000008bH
  08e69	c6 84 24 33 12
	00 00 84	 mov	 BYTE PTR $T5[rsp+4563], 132 ; 00000084H
  08e71	c6 84 24 34 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4564], 36 ; 00000024H
  08e79	c6 84 24 35 12
	00 00 98	 mov	 BYTE PTR $T5[rsp+4565], 152 ; 00000098H
  08e81	c6 84 24 36 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4566], 1
  08e89	c6 84 24 37 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4567], 0
  08e91	c6 84 24 38 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4568], 0
  08e99	c6 84 24 39 12
	00 00 33	 mov	 BYTE PTR $T5[rsp+4569], 51 ; 00000033H
  08ea1	c6 84 24 3a 12
	00 00 d2	 mov	 BYTE PTR $T5[rsp+4570], 210 ; 000000d2H
  08ea9	c6 84 24 3b 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4571], 72 ; 00000048H
  08eb1	c6 84 24 3c 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4572], 139 ; 0000008bH
  08eb9	c6 84 24 3d 12
	00 00 c8	 mov	 BYTE PTR $T5[rsp+4573], 200 ; 000000c8H
  08ec1	c6 84 24 3e 12
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4574], 232 ; 000000e8H
  08ec9	c6 84 24 3f 12
	00 00 1d	 mov	 BYTE PTR $T5[rsp+4575], 29
  08ed1	c6 84 24 40 12
	00 00 02	 mov	 BYTE PTR $T5[rsp+4576], 2
  08ed9	c6 84 24 41 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4577], 0
  08ee1	c6 84 24 42 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4578], 0
  08ee9	c6 84 24 43 12
	00 00 44	 mov	 BYTE PTR $T5[rsp+4579], 68 ; 00000044H
  08ef1	c6 84 24 44 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4580], 139 ; 0000008bH
  08ef9	c6 84 24 45 12
	00 00 84	 mov	 BYTE PTR $T5[rsp+4581], 132 ; 00000084H
  08f01	c6 84 24 46 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4582], 36 ; 00000024H
  08f09	c6 84 24 47 12
	00 00 98	 mov	 BYTE PTR $T5[rsp+4583], 152 ; 00000098H
  08f11	c6 84 24 48 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4584], 1
  08f19	c6 84 24 49 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4585], 0
  08f21	c6 84 24 4a 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4586], 0
  08f29	c6 84 24 4b 12
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4587], 76 ; 0000004cH
  08f31	c6 84 24 4c 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4588], 141 ; 0000008dH
  08f39	c6 84 24 4d 12
	00 00 8c	 mov	 BYTE PTR $T5[rsp+4589], 140 ; 0000008cH
  08f41	c6 84 24 4e 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4590], 36 ; 00000024H
  08f49	c6 84 24 4f 12
	00 00 98	 mov	 BYTE PTR $T5[rsp+4591], 152 ; 00000098H
  08f51	c6 84 24 50 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4592], 1
  08f59	c6 84 24 51 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4593], 0
  08f61	c6 84 24 52 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4594], 0
  08f69	c6 84 24 53 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4595], 72 ; 00000048H
  08f71	c6 84 24 54 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4596], 139 ; 0000008bH
  08f79	c6 84 24 55 12
	00 00 d6	 mov	 BYTE PTR $T5[rsp+4597], 214 ; 000000d6H
  08f81	c6 84 24 56 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4598], 141 ; 0000008dH
  08f89	c6 84 24 57 12
	00 00 4f	 mov	 BYTE PTR $T5[rsp+4599], 79 ; 0000004fH
  08f91	c6 84 24 58 12
	00 00 0b	 mov	 BYTE PTR $T5[rsp+4600], 11
  08f99	c6 84 24 59 12
	00 00 e8	 mov	 BYTE PTR $T5[rsp+4601], 232 ; 000000e8H
  08fa1	c6 84 24 5a 12
	00 00 ca	 mov	 BYTE PTR $T5[rsp+4602], 202 ; 000000caH
  08fa9	c6 84 24 5b 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4603], 1
  08fb1	c6 84 24 5c 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4604], 0
  08fb9	c6 84 24 5d 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4605], 0
  08fc1	c6 84 24 5e 12
	00 00 85	 mov	 BYTE PTR $T5[rsp+4606], 133 ; 00000085H
  08fc9	c6 84 24 5f 12
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4607], 192 ; 000000c0H
  08fd1	c6 84 24 60 12
	00 00 79	 mov	 BYTE PTR $T5[rsp+4608], 121 ; 00000079H
  08fd9	c6 84 24 61 12
	00 00 1b	 mov	 BYTE PTR $T5[rsp+4609], 27
  08fe1	c6 84 24 62 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4610], 72 ; 00000048H
  08fe9	c6 84 24 63 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4611], 141 ; 0000008dH
  08ff1	c6 84 24 64 12
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4612], 76 ; 0000004cH
  08ff9	c6 84 24 65 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4613], 36 ; 00000024H
  09001	c6 84 24 66 12
	00 00 20	 mov	 BYTE PTR $T5[rsp+4614], 32 ; 00000020H
  09009	c6 84 24 67 12
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4615], 255 ; 000000ffH
  09011	c6 84 24 68 12
	00 00 15	 mov	 BYTE PTR $T5[rsp+4616], 21
  09019	c6 84 24 69 12
	00 00 73	 mov	 BYTE PTR $T5[rsp+4617], 115 ; 00000073H
  09021	c6 84 24 6a 12
	00 00 12	 mov	 BYTE PTR $T5[rsp+4618], 18
  09029	c6 84 24 6b 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4619], 0
  09031	c6 84 24 6c 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4620], 0
  09039	c6 84 24 6d 12
	00 00 33	 mov	 BYTE PTR $T5[rsp+4621], 51 ; 00000033H
  09041	c6 84 24 6e 12
	00 00 d2	 mov	 BYTE PTR $T5[rsp+4622], 210 ; 000000d2H
  09049	c6 84 24 6f 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4623], 72 ; 00000048H
  09051	c6 84 24 70 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4624], 139 ; 0000008bH
  09059	c6 84 24 71 12
	00 00 ce	 mov	 BYTE PTR $T5[rsp+4625], 206 ; 000000ceH
  09061	c6 84 24 72 12
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4626], 255 ; 000000ffH
  09069	c6 84 24 73 12
	00 00 15	 mov	 BYTE PTR $T5[rsp+4627], 21
  09071	c6 84 24 74 12
	00 00 78	 mov	 BYTE PTR $T5[rsp+4628], 120 ; 00000078H
  09079	c6 84 24 75 12
	00 00 12	 mov	 BYTE PTR $T5[rsp+4629], 18
  09081	c6 84 24 76 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4630], 0
  09089	c6 84 24 77 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4631], 0
  09091	c6 84 24 78 12
	00 00 e9	 mov	 BYTE PTR $T5[rsp+4632], 233 ; 000000e9H
  09099	c6 84 24 79 12
	00 00 6a	 mov	 BYTE PTR $T5[rsp+4633], 106 ; 0000006aH
  090a1	c6 84 24 7a 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4634], 1
  090a9	c6 84 24 7b 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4635], 0
  090b1	c6 84 24 7c 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4636], 0
  090b9	c6 84 24 7d 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4637], 72 ; 00000048H
  090c1	c6 84 24 7e 12
	00 00 89	 mov	 BYTE PTR $T5[rsp+4638], 137 ; 00000089H
  090c9	c6 84 24 7f 12
	00 00 9c	 mov	 BYTE PTR $T5[rsp+4639], 156 ; 0000009cH
  090d1	c6 84 24 80 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4640], 36 ; 00000024H
  090d9	c6 84 24 81 12
	00 00 90	 mov	 BYTE PTR $T5[rsp+4641], 144 ; 00000090H
  090e1	c6 84 24 82 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4642], 1
  090e9	c6 84 24 83 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4643], 0
  090f1	c6 84 24 84 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4644], 0
  090f9	c6 84 24 85 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4645], 139 ; 0000008bH
  09101	c6 84 24 86 12
	00 00 df	 mov	 BYTE PTR $T5[rsp+4646], 223 ; 000000dfH
  09109	c6 84 24 87 12
	00 00 39	 mov	 BYTE PTR $T5[rsp+4647], 57 ; 00000039H
  09111	c6 84 24 88 12
	00 00 1e	 mov	 BYTE PTR $T5[rsp+4648], 30
  09119	c6 84 24 89 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4649], 15
  09121	c6 84 24 8a 12
	00 00 86	 mov	 BYTE PTR $T5[rsp+4650], 134 ; 00000086H
  09129	c6 84 24 8b 12
	00 00 1b	 mov	 BYTE PTR $T5[rsp+4651], 27
  09131	c6 84 24 8c 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4652], 1
  09139	c6 84 24 8d 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4653], 0
  09141	c6 84 24 8e 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4654], 0
  09149	c6 84 24 8f 12
	00 00 90	 mov	 BYTE PTR $T5[rsp+4655], 144 ; 00000090H
  09151	c6 84 24 90 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4656], 72 ; 00000048H
  09159	c6 84 24 91 12
	00 00 85	 mov	 BYTE PTR $T5[rsp+4657], 133 ; 00000085H
  09161	c6 84 24 92 12
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4658], 255 ; 000000ffH
  09169	c6 84 24 93 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4659], 15
  09171	c6 84 24 94 12
	00 00 85	 mov	 BYTE PTR $T5[rsp+4660], 133 ; 00000085H
  09179	c6 84 24 95 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4661], 17
  09181	c6 84 24 96 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4662], 1
  09189	c6 84 24 97 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4663], 0
  09191	c6 84 24 98 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4664], 0
  09199	c6 84 24 99 12
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4665], 139 ; 0000008bH
  091a1	c6 84 24 9a 12
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4666], 195 ; 000000c3H
  091a9	c6 84 24 9b 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4667], 141 ; 0000008dH
  091b1	c6 84 24 9c 12
	00 00 57	 mov	 BYTE PTR $T5[rsp+4668], 87 ; 00000057H
  091b9	c6 84 24 9d 12
	00 00 02	 mov	 BYTE PTR $T5[rsp+4669], 2
  091c1	c6 84 24 9e 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4670], 72 ; 00000048H
  091c9	c6 84 24 9f 12
	00 00 69	 mov	 BYTE PTR $T5[rsp+4671], 105 ; 00000069H
  091d1	c6 84 24 a0 12
	00 00 c8	 mov	 BYTE PTR $T5[rsp+4672], 200 ; 000000c8H
  091d9	c6 84 24 a1 12
	00 00 28	 mov	 BYTE PTR $T5[rsp+4673], 40 ; 00000028H
  091e1	c6 84 24 a2 12
	00 00 01	 mov	 BYTE PTR $T5[rsp+4674], 1
  091e9	c6 84 24 a3 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4675], 0
  091f1	c6 84 24 a4 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4676], 0
  091f9	c6 84 24 a5 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4677], 72 ; 00000048H
  09201	c6 84 24 a6 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4678], 141 ; 0000008dH
  09209	c6 84 24 a7 12
	00 00 46	 mov	 BYTE PTR $T5[rsp+4679], 70 ; 00000046H
  09211	c6 84 24 a8 12
	00 00 08	 mov	 BYTE PTR $T5[rsp+4680], 8
  09219	c6 84 24 a9 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4681], 72 ; 00000048H
  09221	c6 84 24 aa 12
	00 00 03	 mov	 BYTE PTR $T5[rsp+4682], 3
  09229	c6 84 24 ab 12
	00 00 c1	 mov	 BYTE PTR $T5[rsp+4683], 193 ; 000000c1H
  09231	c6 84 24 ac 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4684], 72 ; 00000048H
  09239	c6 84 24 ad 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4685], 141 ; 0000008dH
  09241	c6 84 24 ae 12
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4686], 76 ; 0000004cH
  09249	c6 84 24 af 12
	00 00 24	 mov	 BYTE PTR $T5[rsp+4687], 36 ; 00000024H
  09251	c6 84 24 b0 12
	00 00 50	 mov	 BYTE PTR $T5[rsp+4688], 80 ; 00000050H
  09259	c6 84 24 b1 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4689], 72 ; 00000048H
  09261	c6 84 24 b2 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4690], 141 ; 0000008dH
  09269	c6 84 24 b3 12
	00 00 89	 mov	 BYTE PTR $T5[rsp+4691], 137 ; 00000089H
  09271	c6 84 24 b4 12
	00 00 80	 mov	 BYTE PTR $T5[rsp+4692], 128 ; 00000080H
  09279	c6 84 24 b5 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4693], 0
  09281	c6 84 24 b6 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4694], 0
  09289	c6 84 24 b7 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4695], 0
  09291	c6 84 24 b8 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4696], 15
  09299	c6 84 24 b9 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4697], 16
  092a1	c6 84 24 ba 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4698], 0
  092a9	c6 84 24 bb 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4699], 15
  092b1	c6 84 24 bc 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4700], 16
  092b9	c6 84 24 bd 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4701], 72 ; 00000048H
  092c1	c6 84 24 be 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4702], 16
  092c9	c6 84 24 bf 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4703], 72 ; 00000048H
  092d1	c6 84 24 c0 12
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4704], 141 ; 0000008dH
  092d9	c6 84 24 c1 12
	00 00 80	 mov	 BYTE PTR $T5[rsp+4705], 128 ; 00000080H
  092e1	c6 84 24 c2 12
	00 00 80	 mov	 BYTE PTR $T5[rsp+4706], 128 ; 00000080H
  092e9	c6 84 24 c3 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4707], 0
  092f1	c6 84 24 c4 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4708], 0
  092f9	c6 84 24 c5 12
	00 00 00	 mov	 BYTE PTR $T5[rsp+4709], 0
  09301	c6 84 24 c6 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4710], 15
  09309	c6 84 24 c7 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4711], 17
  09311	c6 84 24 c8 12
	00 00 41	 mov	 BYTE PTR $T5[rsp+4712], 65 ; 00000041H
  09319	c6 84 24 c9 12
	00 00 80	 mov	 BYTE PTR $T5[rsp+4713], 128 ; 00000080H
  09321	c6 84 24 ca 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4714], 15
  09329	c6 84 24 cb 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4715], 16
  09331	c6 84 24 cc 12
	00 00 40	 mov	 BYTE PTR $T5[rsp+4716], 64 ; 00000040H
  09339	c6 84 24 cd 12
	00 00 a0	 mov	 BYTE PTR $T5[rsp+4717], 160 ; 000000a0H
  09341	c6 84 24 ce 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4718], 15
  09349	c6 84 24 cf 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4719], 17
  09351	c6 84 24 d0 12
	00 00 49	 mov	 BYTE PTR $T5[rsp+4720], 73 ; 00000049H
  09359	c6 84 24 d1 12
	00 00 90	 mov	 BYTE PTR $T5[rsp+4721], 144 ; 00000090H
  09361	c6 84 24 d2 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4722], 15
  09369	c6 84 24 d3 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4723], 16
  09371	c6 84 24 d4 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4724], 72 ; 00000048H
  09379	c6 84 24 d5 12
	00 00 b0	 mov	 BYTE PTR $T5[rsp+4725], 176 ; 000000b0H
  09381	c6 84 24 d6 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4726], 15
  09389	c6 84 24 d7 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4727], 17
  09391	c6 84 24 d8 12
	00 00 41	 mov	 BYTE PTR $T5[rsp+4728], 65 ; 00000041H
  09399	c6 84 24 d9 12
	00 00 a0	 mov	 BYTE PTR $T5[rsp+4729], 160 ; 000000a0H
  093a1	c6 84 24 da 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4730], 15
  093a9	c6 84 24 db 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4731], 16
  093b1	c6 84 24 dc 12
	00 00 40	 mov	 BYTE PTR $T5[rsp+4732], 64 ; 00000040H
  093b9	c6 84 24 dd 12
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4733], 192 ; 000000c0H
  093c1	c6 84 24 de 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4734], 15
  093c9	c6 84 24 df 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4735], 17
  093d1	c6 84 24 e0 12
	00 00 49	 mov	 BYTE PTR $T5[rsp+4736], 73 ; 00000049H
  093d9	c6 84 24 e1 12
	00 00 b0	 mov	 BYTE PTR $T5[rsp+4737], 176 ; 000000b0H
  093e1	c6 84 24 e2 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4738], 15
  093e9	c6 84 24 e3 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4739], 16
  093f1	c6 84 24 e4 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4740], 72 ; 00000048H
  093f9	c6 84 24 e5 12
	00 00 d0	 mov	 BYTE PTR $T5[rsp+4741], 208 ; 000000d0H
  09401	c6 84 24 e6 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4742], 15
  09409	c6 84 24 e7 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4743], 17
  09411	c6 84 24 e8 12
	00 00 41	 mov	 BYTE PTR $T5[rsp+4744], 65 ; 00000041H
  09419	c6 84 24 e9 12
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4745], 192 ; 000000c0H
  09421	c6 84 24 ea 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4746], 15
  09429	c6 84 24 eb 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4747], 16
  09431	c6 84 24 ec 12
	00 00 40	 mov	 BYTE PTR $T5[rsp+4748], 64 ; 00000040H
  09439	c6 84 24 ed 12
	00 00 e0	 mov	 BYTE PTR $T5[rsp+4749], 224 ; 000000e0H
  09441	c6 84 24 ee 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4750], 15
  09449	c6 84 24 ef 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4751], 17
  09451	c6 84 24 f0 12
	00 00 49	 mov	 BYTE PTR $T5[rsp+4752], 73 ; 00000049H
  09459	c6 84 24 f1 12
	00 00 d0	 mov	 BYTE PTR $T5[rsp+4753], 208 ; 000000d0H
  09461	c6 84 24 f2 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4754], 15
  09469	c6 84 24 f3 12
	00 00 10	 mov	 BYTE PTR $T5[rsp+4755], 16
  09471	c6 84 24 f4 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4756], 72 ; 00000048H
  09479	c6 84 24 f5 12
	00 00 f0	 mov	 BYTE PTR $T5[rsp+4757], 240 ; 000000f0H
  09481	c6 84 24 f6 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4758], 15
  09489	c6 84 24 f7 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4759], 17
  09491	c6 84 24 f8 12
	00 00 41	 mov	 BYTE PTR $T5[rsp+4760], 65 ; 00000041H
  09499	c6 84 24 f9 12
	00 00 e0	 mov	 BYTE PTR $T5[rsp+4761], 224 ; 000000e0H
  094a1	c6 84 24 fa 12
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4762], 15
  094a9	c6 84 24 fb 12
	00 00 11	 mov	 BYTE PTR $T5[rsp+4763], 17
  094b1	c6 84 24 fc 12
	00 00 49	 mov	 BYTE PTR $T5[rsp+4764], 73 ; 00000049H
  094b9	c6 84 24 fd 12
	00 00 f0	 mov	 BYTE PTR $T5[rsp+4765], 240 ; 000000f0H
  094c1	c6 84 24 fe 12
	00 00 48	 mov	 BYTE PTR $T5[rsp+4766], 72 ; 00000048H
  094c9	c6 84 24 ff 12
	00 00 83	 mov	 BYTE PTR $T5[rsp+4767], 131 ; 00000083H
  094d1	c6 84 24 00 13
	00 00 ea	 mov	 BYTE PTR $T5[rsp+4768], 234 ; 000000eaH
  094d9	c6 84 24 01 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4769], 1
  094e1	c6 84 24 02 13
	00 00 75	 mov	 BYTE PTR $T5[rsp+4770], 117 ; 00000075H
  094e9	c6 84 24 03 13
	00 00 ad	 mov	 BYTE PTR $T5[rsp+4771], 173 ; 000000adH
  094f1	c6 84 24 04 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4772], 15
  094f9	c6 84 24 05 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4773], 16
  09501	c6 84 24 06 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4774], 0
  09509	c6 84 24 07 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4775], 72 ; 00000048H
  09511	c6 84 24 08 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4776], 141 ; 0000008dH
  09519	c6 84 24 09 13
	00 00 54	 mov	 BYTE PTR $T5[rsp+4777], 84 ; 00000054H
  09521	c6 84 24 0a 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4778], 36 ; 00000024H
  09529	c6 84 24 0b 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4779], 120 ; 00000078H
  09531	c6 84 24 0c 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4780], 15
  09539	c6 84 24 0d 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4781], 16
  09541	c6 84 24 0e 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4782], 72 ; 00000048H
  09549	c6 84 24 0f 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4783], 16
  09551	c6 84 24 10 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4784], 72 ; 00000048H
  09559	c6 84 24 11 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4785], 139 ; 0000008bH
  09561	c6 84 24 12 13
	00 00 40	 mov	 BYTE PTR $T5[rsp+4786], 64 ; 00000040H
  09569	c6 84 24 13 13
	00 00 20	 mov	 BYTE PTR $T5[rsp+4787], 32 ; 00000020H
  09571	c6 84 24 14 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4788], 15
  09579	c6 84 24 15 13
	00 00 11	 mov	 BYTE PTR $T5[rsp+4789], 17
  09581	c6 84 24 16 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4790], 1
  09589	c6 84 24 17 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4791], 15
  09591	c6 84 24 18 13
	00 00 11	 mov	 BYTE PTR $T5[rsp+4792], 17
  09599	c6 84 24 19 13
	00 00 49	 mov	 BYTE PTR $T5[rsp+4793], 73 ; 00000049H
  095a1	c6 84 24 1a 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4794], 16
  095a9	c6 84 24 1b 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4795], 72 ; 00000048H
  095b1	c6 84 24 1c 13
	00 00 89	 mov	 BYTE PTR $T5[rsp+4796], 137 ; 00000089H
  095b9	c6 84 24 1d 13
	00 00 41	 mov	 BYTE PTR $T5[rsp+4797], 65 ; 00000041H
  095c1	c6 84 24 1e 13
	00 00 20	 mov	 BYTE PTR $T5[rsp+4798], 32 ; 00000020H
  095c9	c6 84 24 1f 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4799], 72 ; 00000048H
  095d1	c6 84 24 20 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4800], 141 ; 0000008dH
  095d9	c6 84 24 21 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4801], 76 ; 0000004cH
  095e1	c6 84 24 22 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4802], 36 ; 00000024H
  095e9	c6 84 24 23 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4803], 120 ; 00000078H
  095f1	c6 84 24 24 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4804], 72 ; 00000048H
  095f9	c6 84 24 25 13
	00 00 c7	 mov	 BYTE PTR $T5[rsp+4805], 199 ; 000000c7H
  09601	c6 84 24 26 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4806], 192 ; 000000c0H
  09609	c6 84 24 27 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4807], 255 ; 000000ffH
  09611	c6 84 24 28 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4808], 255 ; 000000ffH
  09619	c6 84 24 29 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4809], 255 ; 000000ffH
  09621	c6 84 24 2a 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4810], 255 ; 000000ffH
  09629	c6 84 24 2b 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4811], 15
  09631	c6 84 24 2c 13
	00 00 1f	 mov	 BYTE PTR $T5[rsp+4812], 31
  09639	c6 84 24 2d 13
	00 00 44	 mov	 BYTE PTR $T5[rsp+4813], 68 ; 00000044H
  09641	c6 84 24 2e 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4814], 0
  09649	c6 84 24 2f 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4815], 0
  09651	c6 84 24 30 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4816], 72 ; 00000048H
  09659	c6 84 24 31 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4817], 255 ; 000000ffH
  09661	c6 84 24 32 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4818], 192 ; 000000c0H
  09669	c6 84 24 33 13
	00 00 80	 mov	 BYTE PTR $T5[rsp+4819], 128 ; 00000080H
  09671	c6 84 24 34 13
	00 00 3c	 mov	 BYTE PTR $T5[rsp+4820], 60 ; 0000003cH
  09679	c6 84 24 35 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4821], 1
  09681	c6 84 24 36 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4822], 0
  09689	c6 84 24 37 13
	00 00 75	 mov	 BYTE PTR $T5[rsp+4823], 117 ; 00000075H
  09691	c6 84 24 38 13
	00 00 f7	 mov	 BYTE PTR $T5[rsp+4824], 247 ; 000000f7H
  09699	c6 84 24 39 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4825], 72 ; 00000048H
  096a1	c6 84 24 3a 13
	00 00 85	 mov	 BYTE PTR $T5[rsp+4826], 133 ; 00000085H
  096a9	c6 84 24 3b 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4827], 192 ; 000000c0H
  096b1	c6 84 24 3c 13
	00 00 74	 mov	 BYTE PTR $T5[rsp+4828], 116 ; 00000074H
  096b9	c6 84 24 3d 13
	00 00 62	 mov	 BYTE PTR $T5[rsp+4829], 98 ; 00000062H
  096c1	c6 84 24 3e 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4830], 15
  096c9	c6 84 24 3f 13
	00 00 b6	 mov	 BYTE PTR $T5[rsp+4831], 182 ; 000000b6H
  096d1	c6 84 24 40 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4832], 76 ; 0000004cH
  096d9	c6 84 24 41 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4833], 36 ; 00000024H
  096e1	c6 84 24 42 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4834], 120 ; 00000078H
  096e9	c6 84 24 43 13
	00 00 b8	 mov	 BYTE PTR $T5[rsp+4835], 184 ; 000000b8H
  096f1	c6 84 24 44 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4836], 255 ; 000000ffH
  096f9	c6 84 24 45 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4837], 255 ; 000000ffH
  09701	c6 84 24 46 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4838], 255 ; 000000ffH
  09709	c6 84 24 47 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4839], 255 ; 000000ffH
  09711	c6 84 24 48 13
	00 00 84	 mov	 BYTE PTR $T5[rsp+4840], 132 ; 00000084H
  09719	c6 84 24 49 13
	00 00 c9	 mov	 BYTE PTR $T5[rsp+4841], 201 ; 000000c9H
  09721	c6 84 24 4a 13
	00 00 74	 mov	 BYTE PTR $T5[rsp+4842], 116 ; 00000074H
  09729	c6 84 24 4b 13
	00 00 2e	 mov	 BYTE PTR $T5[rsp+4843], 46 ; 0000002eH
  09731	c6 84 24 4c 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4844], 15
  09739	c6 84 24 4d 13
	00 00 1f	 mov	 BYTE PTR $T5[rsp+4845], 31
  09741	c6 84 24 4e 13
	00 00 40	 mov	 BYTE PTR $T5[rsp+4846], 64 ; 00000040H
  09749	c6 84 24 4f 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4847], 0
  09751	c6 84 24 50 13
	00 00 80	 mov	 BYTE PTR $T5[rsp+4848], 128 ; 00000080H
  09759	c6 84 24 51 13
	00 00 f9	 mov	 BYTE PTR $T5[rsp+4849], 249 ; 000000f9H
  09761	c6 84 24 52 13
	00 00 5c	 mov	 BYTE PTR $T5[rsp+4850], 92 ; 0000005cH
  09769	c6 84 24 53 13
	00 00 75	 mov	 BYTE PTR $T5[rsp+4851], 117 ; 00000075H
  09771	c6 84 24 54 13
	00 00 0b	 mov	 BYTE PTR $T5[rsp+4852], 11
  09779	c6 84 24 55 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4853], 72 ; 00000048H
  09781	c6 84 24 56 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4854], 141 ; 0000008dH
  09789	c6 84 24 57 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4855], 76 ; 0000004cH
  09791	c6 84 24 58 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4856], 36 ; 00000024H
  09799	c6 84 24 59 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4857], 120 ; 00000078H
  097a1	c6 84 24 5a 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4858], 139 ; 0000008bH
  097a9	c6 84 24 5b 13
	00 00 c2	 mov	 BYTE PTR $T5[rsp+4859], 194 ; 000000c2H
  097b1	c6 84 24 5c 13
	00 00 2b	 mov	 BYTE PTR $T5[rsp+4860], 43 ; 0000002bH
  097b9	c6 84 24 5d 13
	00 00 c1	 mov	 BYTE PTR $T5[rsp+4861], 193 ; 000000c1H
  097c1	c6 84 24 5e 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4862], 255 ; 000000ffH
  097c9	c6 84 24 5f 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4863], 192 ; 000000c0H
  097d1	c6 84 24 60 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4864], 15
  097d9	c6 84 24 61 13
	00 00 b6	 mov	 BYTE PTR $T5[rsp+4865], 182 ; 000000b6H
  097e1	c6 84 24 62 13
	00 00 4a	 mov	 BYTE PTR $T5[rsp+4866], 74 ; 0000004aH
  097e9	c6 84 24 63 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4867], 1
  097f1	c6 84 24 64 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4868], 72 ; 00000048H
  097f9	c6 84 24 65 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4869], 255 ; 000000ffH
  09801	c6 84 24 66 13
	00 00 c2	 mov	 BYTE PTR $T5[rsp+4870], 194 ; 000000c2H
  09809	c6 84 24 67 13
	00 00 84	 mov	 BYTE PTR $T5[rsp+4871], 132 ; 00000084H
  09811	c6 84 24 68 13
	00 00 c9	 mov	 BYTE PTR $T5[rsp+4872], 201 ; 000000c9H
  09819	c6 84 24 69 13
	00 00 75	 mov	 BYTE PTR $T5[rsp+4873], 117 ; 00000075H
  09821	c6 84 24 6a 13
	00 00 e5	 mov	 BYTE PTR $T5[rsp+4874], 229 ; 000000e5H
  09829	c6 84 24 6b 13
	00 00 85	 mov	 BYTE PTR $T5[rsp+4875], 133 ; 00000085H
  09831	c6 84 24 6c 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4876], 192 ; 000000c0H
  09839	c6 84 24 6d 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4877], 120 ; 00000078H
  09841	c6 84 24 6e 13
	00 00 0b	 mov	 BYTE PTR $T5[rsp+4878], 11
  09849	c6 84 24 6f 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4879], 72 ; 00000048H
  09851	c6 84 24 70 13
	00 00 63	 mov	 BYTE PTR $T5[rsp+4880], 99 ; 00000063H
  09859	c6 84 24 71 13
	00 00 c8	 mov	 BYTE PTR $T5[rsp+4881], 200 ; 000000c8H
  09861	c6 84 24 72 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4882], 72 ; 00000048H
  09869	c6 84 24 73 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4883], 141 ; 0000008dH
  09871	c6 84 24 74 13
	00 00 54	 mov	 BYTE PTR $T5[rsp+4884], 84 ; 00000054H
  09879	c6 84 24 75 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4885], 36 ; 00000024H
  09881	c6 84 24 76 13
	00 00 78	 mov	 BYTE PTR $T5[rsp+4886], 120 ; 00000078H
  09889	c6 84 24 77 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4887], 72 ; 00000048H
  09891	c6 84 24 78 13
	00 00 03	 mov	 BYTE PTR $T5[rsp+4888], 3
  09899	c6 84 24 79 13
	00 00 d1	 mov	 BYTE PTR $T5[rsp+4889], 209 ; 000000d1H
  098a1	c6 84 24 7a 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4890], 72 ; 00000048H
  098a9	c6 84 24 7b 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4891], 141 ; 0000008dH
  098b1	c6 84 24 7c 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4892], 76 ; 0000004cH
  098b9	c6 84 24 7d 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4893], 36 ; 00000024H
  098c1	c6 84 24 7e 13
	00 00 40	 mov	 BYTE PTR $T5[rsp+4894], 64 ; 00000040H
  098c9	c6 84 24 7f 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4895], 255 ; 000000ffH
  098d1	c6 84 24 80 13
	00 00 15	 mov	 BYTE PTR $T5[rsp+4896], 21
  098d9	c6 84 24 81 13
	00 00 db	 mov	 BYTE PTR $T5[rsp+4897], 219 ; 000000dbH
  098e1	c6 84 24 82 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4898], 16
  098e9	c6 84 24 83 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4899], 0
  098f1	c6 84 24 84 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4900], 0
  098f9	c6 84 24 85 13
	00 00 41	 mov	 BYTE PTR $T5[rsp+4901], 65 ; 00000041H
  09901	c6 84 24 86 13
	00 00 b0	 mov	 BYTE PTR $T5[rsp+4902], 176 ; 000000b0H
  09909	c6 84 24 87 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4903], 1
  09911	c6 84 24 88 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4904], 72 ; 00000048H
  09919	c6 84 24 89 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4905], 141 ; 0000008dH
  09921	c6 84 24 8a 13
	00 00 54	 mov	 BYTE PTR $T5[rsp+4906], 84 ; 00000054H
  09929	c6 84 24 8b 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4907], 36 ; 00000024H
  09931	c6 84 24 8c 13
	00 00 20	 mov	 BYTE PTR $T5[rsp+4908], 32 ; 00000020H
  09939	c6 84 24 8d 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4909], 72 ; 00000048H
  09941	c6 84 24 8e 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4910], 141 ; 0000008dH
  09949	c6 84 24 8f 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4911], 76 ; 0000004cH
  09951	c6 84 24 90 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4912], 36 ; 00000024H
  09959	c6 84 24 91 13
	00 00 40	 mov	 BYTE PTR $T5[rsp+4913], 64 ; 00000040H
  09961	c6 84 24 92 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4914], 255 ; 000000ffH
  09969	c6 84 24 93 13
	00 00 15	 mov	 BYTE PTR $T5[rsp+4915], 21
  09971	c6 84 24 94 13
	00 00 60	 mov	 BYTE PTR $T5[rsp+4916], 96 ; 00000060H
  09979	c6 84 24 95 13
	00 00 11	 mov	 BYTE PTR $T5[rsp+4917], 17
  09981	c6 84 24 96 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4918], 0
  09989	c6 84 24 97 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4919], 0
  09991	c6 84 24 98 13
	00 00 84	 mov	 BYTE PTR $T5[rsp+4920], 132 ; 00000084H
  09999	c6 84 24 99 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+4921], 192 ; 000000c0H
  099a1	c6 84 24 9a 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4922], 72 ; 00000048H
  099a9	c6 84 24 9b 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4923], 15
  099b1	c6 84 24 9c 13
	00 00 45	 mov	 BYTE PTR $T5[rsp+4924], 69 ; 00000045H
  099b9	c6 84 24 9d 13
	00 00 7c	 mov	 BYTE PTR $T5[rsp+4925], 124 ; 0000007cH
  099c1	c6 84 24 9e 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4926], 36 ; 00000024H
  099c9	c6 84 24 9f 13
	00 00 60	 mov	 BYTE PTR $T5[rsp+4927], 96 ; 00000060H
  099d1	c6 84 24 a0 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4928], 255 ; 000000ffH
  099d9	c6 84 24 a1 13
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4929], 195 ; 000000c3H
  099e1	c6 84 24 a2 13
	00 00 3b	 mov	 BYTE PTR $T5[rsp+4930], 59 ; 0000003bH
  099e9	c6 84 24 a3 13
	00 00 1e	 mov	 BYTE PTR $T5[rsp+4931], 30
  099f1	c6 84 24 a4 13
	00 00 0f	 mov	 BYTE PTR $T5[rsp+4932], 15
  099f9	c6 84 24 a5 13
	00 00 82	 mov	 BYTE PTR $T5[rsp+4933], 130 ; 00000082H
  09a01	c6 84 24 a6 13
	00 00 e6	 mov	 BYTE PTR $T5[rsp+4934], 230 ; 000000e6H
  09a09	c6 84 24 a7 13
	00 00 fe	 mov	 BYTE PTR $T5[rsp+4935], 254 ; 000000feH
  09a11	c6 84 24 a8 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4936], 255 ; 000000ffH
  09a19	c6 84 24 a9 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4937], 255 ; 000000ffH
  09a21	c6 84 24 aa 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4938], 72 ; 00000048H
  09a29	c6 84 24 ab 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4939], 141 ; 0000008dH
  09a31	c6 84 24 ac 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4940], 76 ; 0000004cH
  09a39	c6 84 24 ad 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4941], 36 ; 00000024H
  09a41	c6 84 24 ae 13
	00 00 20	 mov	 BYTE PTR $T5[rsp+4942], 32 ; 00000020H
  09a49	c6 84 24 af 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4943], 255 ; 000000ffH
  09a51	c6 84 24 b0 13
	00 00 15	 mov	 BYTE PTR $T5[rsp+4944], 21
  09a59	c6 84 24 b1 13
	00 00 2b	 mov	 BYTE PTR $T5[rsp+4945], 43 ; 0000002bH
  09a61	c6 84 24 b2 13
	00 00 11	 mov	 BYTE PTR $T5[rsp+4946], 17
  09a69	c6 84 24 b3 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4947], 0
  09a71	c6 84 24 b4 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4948], 0
  09a79	c6 84 24 b5 13
	00 00 33	 mov	 BYTE PTR $T5[rsp+4949], 51 ; 00000033H
  09a81	c6 84 24 b6 13
	00 00 d2	 mov	 BYTE PTR $T5[rsp+4950], 210 ; 000000d2H
  09a89	c6 84 24 b7 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4951], 72 ; 00000048H
  09a91	c6 84 24 b8 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4952], 139 ; 0000008bH
  09a99	c6 84 24 b9 13
	00 00 ce	 mov	 BYTE PTR $T5[rsp+4953], 206 ; 000000ceH
  09aa1	c6 84 24 ba 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4954], 255 ; 000000ffH
  09aa9	c6 84 24 bb 13
	00 00 15	 mov	 BYTE PTR $T5[rsp+4955], 21
  09ab1	c6 84 24 bc 13
	00 00 30	 mov	 BYTE PTR $T5[rsp+4956], 48 ; 00000030H
  09ab9	c6 84 24 bd 13
	00 00 11	 mov	 BYTE PTR $T5[rsp+4957], 17
  09ac1	c6 84 24 be 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4958], 0
  09ac9	c6 84 24 bf 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4959], 0
  09ad1	c6 84 24 c0 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4960], 72 ; 00000048H
  09ad9	c6 84 24 c1 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4961], 139 ; 0000008bH
  09ae1	c6 84 24 c2 13
	00 00 9c	 mov	 BYTE PTR $T5[rsp+4962], 156 ; 0000009cH
  09ae9	c6 84 24 c3 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4963], 36 ; 00000024H
  09af1	c6 84 24 c4 13
	00 00 90	 mov	 BYTE PTR $T5[rsp+4964], 144 ; 00000090H
  09af9	c6 84 24 c5 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4965], 1
  09b01	c6 84 24 c6 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4966], 0
  09b09	c6 84 24 c7 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4967], 0
  09b11	c6 84 24 c8 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4968], 72 ; 00000048H
  09b19	c6 84 24 c9 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4969], 139 ; 0000008bH
  09b21	c6 84 24 ca 13
	00 00 c7	 mov	 BYTE PTR $T5[rsp+4970], 199 ; 000000c7H
  09b29	c6 84 24 cb 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4971], 72 ; 00000048H
  09b31	c6 84 24 cc 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+4972], 139 ; 0000008bH
  09b39	c6 84 24 cd 13
	00 00 b4	 mov	 BYTE PTR $T5[rsp+4973], 180 ; 000000b4H
  09b41	c6 84 24 ce 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4974], 36 ; 00000024H
  09b49	c6 84 24 cf 13
	00 00 a0	 mov	 BYTE PTR $T5[rsp+4975], 160 ; 000000a0H
  09b51	c6 84 24 d0 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4976], 1
  09b59	c6 84 24 d1 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4977], 0
  09b61	c6 84 24 d2 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4978], 0
  09b69	c6 84 24 d3 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4979], 72 ; 00000048H
  09b71	c6 84 24 d4 13
	00 00 81	 mov	 BYTE PTR $T5[rsp+4980], 129 ; 00000081H
  09b79	c6 84 24 d5 13
	00 00 c4	 mov	 BYTE PTR $T5[rsp+4981], 196 ; 000000c4H
  09b81	c6 84 24 d6 13
	00 00 80	 mov	 BYTE PTR $T5[rsp+4982], 128 ; 00000080H
  09b89	c6 84 24 d7 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+4983], 1
  09b91	c6 84 24 d8 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4984], 0
  09b99	c6 84 24 d9 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4985], 0
  09ba1	c6 84 24 da 13
	00 00 5f	 mov	 BYTE PTR $T5[rsp+4986], 95 ; 0000005fH
  09ba9	c6 84 24 db 13
	00 00 c3	 mov	 BYTE PTR $T5[rsp+4987], 195 ; 000000c3H
  09bb1	c6 84 24 dc 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4988], 72 ; 00000048H
  09bb9	c6 84 24 dd 13
	00 00 8d	 mov	 BYTE PTR $T5[rsp+4989], 141 ; 0000008dH
  09bc1	c6 84 24 de 13
	00 00 4c	 mov	 BYTE PTR $T5[rsp+4990], 76 ; 0000004cH
  09bc9	c6 84 24 df 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+4991], 36 ; 00000024H
  09bd1	c6 84 24 e0 13
	00 00 20	 mov	 BYTE PTR $T5[rsp+4992], 32 ; 00000020H
  09bd9	c6 84 24 e1 13
	00 00 ff	 mov	 BYTE PTR $T5[rsp+4993], 255 ; 000000ffH
  09be1	c6 84 24 e2 13
	00 00 15	 mov	 BYTE PTR $T5[rsp+4994], 21
  09be9	c6 84 24 e3 13
	00 00 f9	 mov	 BYTE PTR $T5[rsp+4995], 249 ; 000000f9H
  09bf1	c6 84 24 e4 13
	00 00 10	 mov	 BYTE PTR $T5[rsp+4996], 16
  09bf9	c6 84 24 e5 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4997], 0
  09c01	c6 84 24 e6 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+4998], 0
  09c09	c6 84 24 e7 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+4999], 72 ; 00000048H
  09c11	c6 84 24 e8 13
	00 00 8b	 mov	 BYTE PTR $T5[rsp+5000], 139 ; 0000008bH
  09c19	c6 84 24 e9 13
	00 00 b4	 mov	 BYTE PTR $T5[rsp+5001], 180 ; 000000b4H
  09c21	c6 84 24 ea 13
	00 00 24	 mov	 BYTE PTR $T5[rsp+5002], 36 ; 00000024H
  09c29	c6 84 24 eb 13
	00 00 a0	 mov	 BYTE PTR $T5[rsp+5003], 160 ; 000000a0H
  09c31	c6 84 24 ec 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+5004], 1
  09c39	c6 84 24 ed 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+5005], 0
  09c41	c6 84 24 ee 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+5006], 0
  09c49	c6 84 24 ef 13
	00 00 33	 mov	 BYTE PTR $T5[rsp+5007], 51 ; 00000033H
  09c51	c6 84 24 f0 13
	00 00 c0	 mov	 BYTE PTR $T5[rsp+5008], 192 ; 000000c0H
  09c59	c6 84 24 f1 13
	00 00 48	 mov	 BYTE PTR $T5[rsp+5009], 72 ; 00000048H
  09c61	c6 84 24 f2 13
	00 00 81	 mov	 BYTE PTR $T5[rsp+5010], 129 ; 00000081H
  09c69	c6 84 24 f3 13
	00 00 c4	 mov	 BYTE PTR $T5[rsp+5011], 196 ; 000000c4H
  09c71	c6 84 24 f4 13
	00 00 80	 mov	 BYTE PTR $T5[rsp+5012], 128 ; 00000080H
  09c79	c6 84 24 f5 13
	00 00 01	 mov	 BYTE PTR $T5[rsp+5013], 1
  09c81	c6 84 24 f6 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+5014], 0
  09c89	c6 84 24 f7 13
	00 00 00	 mov	 BYTE PTR $T5[rsp+5015], 0
  09c91	c6 84 24 f8 13
	00 00 5f	 mov	 BYTE PTR $T5[rsp+5016], 95 ; 0000005fH
  09c99	c6 84 24 f9 13
	00 00 c3	 mov	 BYTE PTR $T5[rsp+5017], 195 ; 000000c3H
  09ca1	c6 84 24 fa 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5018], 204 ; 000000ccH
  09ca9	c6 84 24 fb 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5019], 204 ; 000000ccH
  09cb1	c6 84 24 fc 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5020], 204 ; 000000ccH
  09cb9	c6 84 24 fd 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5021], 204 ; 000000ccH
  09cc1	c6 84 24 fe 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5022], 204 ; 000000ccH
  09cc9	c6 84 24 ff 13
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5023], 204 ; 000000ccH
  09cd1	c6 84 24 00 14
	00 00 c2	 mov	 BYTE PTR $T5[rsp+5024], 194 ; 000000c2H
  09cd9	c6 84 24 01 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5025], 0
  09ce1	c6 84 24 02 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5026], 0
  09ce9	c6 84 24 03 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5027], 204 ; 000000ccH
  09cf1	c6 84 24 04 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5028], 204 ; 000000ccH
  09cf9	c6 84 24 05 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5029], 204 ; 000000ccH
  09d01	c6 84 24 06 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5030], 204 ; 000000ccH
  09d09	c6 84 24 07 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5031], 204 ; 000000ccH
  09d11	c6 84 24 08 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5032], 204 ; 000000ccH
  09d19	c6 84 24 09 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5033], 204 ; 000000ccH
  09d21	c6 84 24 0a 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5034], 204 ; 000000ccH
  09d29	c6 84 24 0b 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5035], 204 ; 000000ccH
  09d31	c6 84 24 0c 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5036], 204 ; 000000ccH
  09d39	c6 84 24 0d 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5037], 204 ; 000000ccH
  09d41	c6 84 24 0e 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5038], 204 ; 000000ccH
  09d49	c6 84 24 0f 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5039], 204 ; 000000ccH
  09d51	c6 84 24 10 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5040], 255 ; 000000ffH
  09d59	c6 84 24 11 14
	00 00 25	 mov	 BYTE PTR $T5[rsp+5041], 37 ; 00000025H
  09d61	c6 84 24 12 14
	00 00 82	 mov	 BYTE PTR $T5[rsp+5042], 130 ; 00000082H
  09d69	c6 84 24 13 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5043], 16
  09d71	c6 84 24 14 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5044], 0
  09d79	c6 84 24 15 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5045], 0
  09d81	c6 84 24 16 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5046], 255 ; 000000ffH
  09d89	c6 84 24 17 14
	00 00 25	 mov	 BYTE PTR $T5[rsp+5047], 37 ; 00000025H
  09d91	c6 84 24 18 14
	00 00 84	 mov	 BYTE PTR $T5[rsp+5048], 132 ; 00000084H
  09d99	c6 84 24 19 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5049], 16
  09da1	c6 84 24 1a 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5050], 0
  09da9	c6 84 24 1b 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5051], 0
  09db1	c6 84 24 1c 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5052], 255 ; 000000ffH
  09db9	c6 84 24 1d 14
	00 00 25	 mov	 BYTE PTR $T5[rsp+5053], 37 ; 00000025H
  09dc1	c6 84 24 1e 14
	00 00 86	 mov	 BYTE PTR $T5[rsp+5054], 134 ; 00000086H
  09dc9	c6 84 24 1f 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5055], 16
  09dd1	c6 84 24 20 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5056], 0
  09dd9	c6 84 24 21 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5057], 0
  09de1	c6 84 24 22 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5058], 255 ; 000000ffH
  09de9	c6 84 24 23 14
	00 00 25	 mov	 BYTE PTR $T5[rsp+5059], 37 ; 00000025H
  09df1	c6 84 24 24 14
	00 00 a0	 mov	 BYTE PTR $T5[rsp+5060], 160 ; 000000a0H
  09df9	c6 84 24 25 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5061], 16
  09e01	c6 84 24 26 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5062], 0
  09e09	c6 84 24 27 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5063], 0
  09e11	c6 84 24 28 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5064], 255 ; 000000ffH
  09e19	c6 84 24 29 14
	00 00 25	 mov	 BYTE PTR $T5[rsp+5065], 37 ; 00000025H
  09e21	c6 84 24 2a 14
	00 00 d2	 mov	 BYTE PTR $T5[rsp+5066], 210 ; 000000d2H
  09e29	c6 84 24 2b 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5067], 16
  09e31	c6 84 24 2c 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5068], 0
  09e39	c6 84 24 2d 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5069], 0
  09e41	c6 84 24 2e 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5070], 204 ; 000000ccH
  09e49	c6 84 24 2f 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5071], 204 ; 000000ccH
  09e51	c6 84 24 30 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5072], 204 ; 000000ccH
  09e59	c6 84 24 31 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5073], 204 ; 000000ccH
  09e61	c6 84 24 32 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5074], 204 ; 000000ccH
  09e69	c6 84 24 33 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5075], 204 ; 000000ccH
  09e71	c6 84 24 34 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5076], 204 ; 000000ccH
  09e79	c6 84 24 35 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5077], 204 ; 000000ccH
  09e81	c6 84 24 36 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5078], 102 ; 00000066H
  09e89	c6 84 24 37 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5079], 102 ; 00000066H
  09e91	c6 84 24 38 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5080], 15
  09e99	c6 84 24 39 14
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5081], 31
  09ea1	c6 84 24 3a 14
	00 00 84	 mov	 BYTE PTR $T5[rsp+5082], 132 ; 00000084H
  09ea9	c6 84 24 3b 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5083], 0
  09eb1	c6 84 24 3c 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5084], 0
  09eb9	c6 84 24 3d 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5085], 0
  09ec1	c6 84 24 3e 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5086], 0
  09ec9	c6 84 24 3f 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5087], 0
  09ed1	c6 84 24 40 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5088], 255 ; 000000ffH
  09ed9	c6 84 24 41 14
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5089], 224 ; 000000e0H
  09ee1	c6 84 24 42 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5090], 204 ; 000000ccH
  09ee9	c6 84 24 43 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5091], 204 ; 000000ccH
  09ef1	c6 84 24 44 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5092], 204 ; 000000ccH
  09ef9	c6 84 24 45 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5093], 204 ; 000000ccH
  09f01	c6 84 24 46 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5094], 204 ; 000000ccH
  09f09	c6 84 24 47 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5095], 204 ; 000000ccH
  09f11	c6 84 24 48 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5096], 204 ; 000000ccH
  09f19	c6 84 24 49 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5097], 204 ; 000000ccH
  09f21	c6 84 24 4a 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5098], 204 ; 000000ccH
  09f29	c6 84 24 4b 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5099], 204 ; 000000ccH
  09f31	c6 84 24 4c 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5100], 204 ; 000000ccH
  09f39	c6 84 24 4d 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5101], 204 ; 000000ccH
  09f41	c6 84 24 4e 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5102], 204 ; 000000ccH
  09f49	c6 84 24 4f 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5103], 204 ; 000000ccH
  09f51	c6 84 24 50 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5104], 204 ; 000000ccH
  09f59	c6 84 24 51 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5105], 204 ; 000000ccH
  09f61	c6 84 24 52 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5106], 204 ; 000000ccH
  09f69	c6 84 24 53 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5107], 204 ; 000000ccH
  09f71	c6 84 24 54 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5108], 204 ; 000000ccH
  09f79	c6 84 24 55 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5109], 204 ; 000000ccH
  09f81	c6 84 24 56 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5110], 204 ; 000000ccH
  09f89	c6 84 24 57 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5111], 204 ; 000000ccH
  09f91	c6 84 24 58 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5112], 204 ; 000000ccH
  09f99	c6 84 24 59 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5113], 204 ; 000000ccH
  09fa1	c6 84 24 5a 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5114], 204 ; 000000ccH
  09fa9	c6 84 24 5b 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5115], 204 ; 000000ccH
  09fb1	c6 84 24 5c 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5116], 204 ; 000000ccH
  09fb9	c6 84 24 5d 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5117], 204 ; 000000ccH
  09fc1	c6 84 24 5e 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5118], 204 ; 000000ccH
  09fc9	c6 84 24 5f 14
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5119], 204 ; 000000ccH
  09fd1	c6 84 24 60 14
	00 00 48	 mov	 BYTE PTR $T5[rsp+5120], 72 ; 00000048H
  09fd9	c6 84 24 61 14
	00 00 8b	 mov	 BYTE PTR $T5[rsp+5121], 139 ; 0000008bH
  09fe1	c6 84 24 62 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5122], 193 ; 000000c1H
  09fe9	c6 84 24 63 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5123], 73 ; 00000049H
  09ff1	c6 84 24 64 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5124], 131 ; 00000083H
  09ff9	c6 84 24 65 14
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5125], 248 ; 000000f8H
  0a001	c6 84 24 66 14
	00 00 08	 mov	 BYTE PTR $T5[rsp+5126], 8
  0a009	c6 84 24 67 14
	00 00 72	 mov	 BYTE PTR $T5[rsp+5127], 114 ; 00000072H
  0a011	c6 84 24 68 14
	00 00 47	 mov	 BYTE PTR $T5[rsp+5128], 71 ; 00000047H
  0a019	c6 84 24 69 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5129], 15
  0a021	c6 84 24 6a 14
	00 00 b6	 mov	 BYTE PTR $T5[rsp+5130], 182 ; 000000b6H
  0a029	c6 84 24 6b 14
	00 00 d2	 mov	 BYTE PTR $T5[rsp+5131], 210 ; 000000d2H
  0a031	c6 84 24 6c 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5132], 73 ; 00000049H
  0a039	c6 84 24 6d 14
	00 00 b9	 mov	 BYTE PTR $T5[rsp+5133], 185 ; 000000b9H
  0a041	c6 84 24 6e 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5134], 1
  0a049	c6 84 24 6f 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5135], 1
  0a051	c6 84 24 70 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5136], 1
  0a059	c6 84 24 71 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5137], 1
  0a061	c6 84 24 72 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5138], 1
  0a069	c6 84 24 73 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5139], 1
  0a071	c6 84 24 74 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5140], 1
  0a079	c6 84 24 75 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5141], 1
  0a081	c6 84 24 76 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5142], 73 ; 00000049H
  0a089	c6 84 24 77 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5143], 15
  0a091	c6 84 24 78 14
	00 00 af	 mov	 BYTE PTR $T5[rsp+5144], 175 ; 000000afH
  0a099	c6 84 24 79 14
	00 00 d1	 mov	 BYTE PTR $T5[rsp+5145], 209 ; 000000d1H
  0a0a1	c6 84 24 7a 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5146], 73 ; 00000049H
  0a0a9	c6 84 24 7b 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5147], 131 ; 00000083H
  0a0b1	c6 84 24 7c 14
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5148], 248 ; 000000f8H
  0a0b9	c6 84 24 7d 14
	00 00 4f	 mov	 BYTE PTR $T5[rsp+5149], 79 ; 0000004fH
  0a0c1	c6 84 24 7e 14
	00 00 73	 mov	 BYTE PTR $T5[rsp+5150], 115 ; 00000073H
  0a0c9	c6 84 24 7f 14
	00 00 50	 mov	 BYTE PTR $T5[rsp+5151], 80 ; 00000050H
  0a0d1	c6 84 24 80 14
	00 00 4d	 mov	 BYTE PTR $T5[rsp+5152], 77 ; 0000004dH
  0a0d9	c6 84 24 81 14
	00 00 8b	 mov	 BYTE PTR $T5[rsp+5153], 139 ; 0000008bH
  0a0e1	c6 84 24 82 14
	00 00 c8	 mov	 BYTE PTR $T5[rsp+5154], 200 ; 000000c8H
  0a0e9	c6 84 24 83 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5155], 73 ; 00000049H
  0a0f1	c6 84 24 84 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5156], 131 ; 00000083H
  0a0f9	c6 84 24 85 14
	00 00 e1	 mov	 BYTE PTR $T5[rsp+5157], 225 ; 000000e1H
  0a101	c6 84 24 86 14
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5158], 248 ; 000000f8H
  0a109	c6 84 24 87 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5159], 73 ; 00000049H
  0a111	c6 84 24 88 14
	00 00 03	 mov	 BYTE PTR $T5[rsp+5160], 3
  0a119	c6 84 24 89 14
	00 00 c9	 mov	 BYTE PTR $T5[rsp+5161], 201 ; 000000c9H
  0a121	c6 84 24 8a 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5162], 102 ; 00000066H
  0a129	c6 84 24 8b 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5163], 15
  0a131	c6 84 24 8c 14
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5164], 31
  0a139	c6 84 24 8d 14
	00 00 44	 mov	 BYTE PTR $T5[rsp+5165], 68 ; 00000044H
  0a141	c6 84 24 8e 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5166], 0
  0a149	c6 84 24 8f 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5167], 0
  0a151	c6 84 24 90 14
	00 00 4a	 mov	 BYTE PTR $T5[rsp+5168], 74 ; 0000004aH
  0a159	c6 84 24 91 14
	00 00 89	 mov	 BYTE PTR $T5[rsp+5169], 137 ; 00000089H
  0a161	c6 84 24 92 14
	00 00 54	 mov	 BYTE PTR $T5[rsp+5170], 84 ; 00000054H
  0a169	c6 84 24 93 14
	00 00 08	 mov	 BYTE PTR $T5[rsp+5171], 8
  0a171	c6 84 24 94 14
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5172], 248 ; 000000f8H
  0a179	c6 84 24 95 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5173], 73 ; 00000049H
  0a181	c6 84 24 96 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5174], 131 ; 00000083H
  0a189	c6 84 24 97 14
	00 00 e9	 mov	 BYTE PTR $T5[rsp+5175], 233 ; 000000e9H
  0a191	c6 84 24 98 14
	00 00 08	 mov	 BYTE PTR $T5[rsp+5176], 8
  0a199	c6 84 24 99 14
	00 00 75	 mov	 BYTE PTR $T5[rsp+5177], 117 ; 00000075H
  0a1a1	c6 84 24 9a 14
	00 00 f5	 mov	 BYTE PTR $T5[rsp+5178], 245 ; 000000f5H
  0a1a9	c6 84 24 9b 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5179], 73 ; 00000049H
  0a1b1	c6 84 24 9c 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5180], 131 ; 00000083H
  0a1b9	c6 84 24 9d 14
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5181], 224 ; 000000e0H
  0a1c1	c6 84 24 9e 14
	00 00 07	 mov	 BYTE PTR $T5[rsp+5182], 7
  0a1c9	c6 84 24 9f 14
	00 00 74	 mov	 BYTE PTR $T5[rsp+5183], 116 ; 00000074H
  0a1d1	c6 84 24 a0 14
	00 00 05	 mov	 BYTE PTR $T5[rsp+5184], 5
  0a1d9	c6 84 24 a1 14
	00 00 4a	 mov	 BYTE PTR $T5[rsp+5185], 74 ; 0000004aH
  0a1e1	c6 84 24 a2 14
	00 00 89	 mov	 BYTE PTR $T5[rsp+5186], 137 ; 00000089H
  0a1e9	c6 84 24 a3 14
	00 00 54	 mov	 BYTE PTR $T5[rsp+5187], 84 ; 00000054H
  0a1f1	c6 84 24 a4 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5188], 1
  0a1f9	c6 84 24 a5 14
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5189], 248 ; 000000f8H
  0a201	c6 84 24 a6 14
	00 00 c3	 mov	 BYTE PTR $T5[rsp+5190], 195 ; 000000c3H
  0a209	c6 84 24 a7 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5191], 102 ; 00000066H
  0a211	c6 84 24 a8 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5192], 15
  0a219	c6 84 24 a9 14
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5193], 31
  0a221	c6 84 24 aa 14
	00 00 84	 mov	 BYTE PTR $T5[rsp+5194], 132 ; 00000084H
  0a229	c6 84 24 ab 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5195], 0
  0a231	c6 84 24 ac 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5196], 0
  0a239	c6 84 24 ad 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5197], 0
  0a241	c6 84 24 ae 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5198], 0
  0a249	c6 84 24 af 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5199], 0
  0a251	c6 84 24 b0 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5200], 73 ; 00000049H
  0a259	c6 84 24 b1 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5201], 131 ; 00000083H
  0a261	c6 84 24 b2 14
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5202], 224 ; 000000e0H
  0a269	c6 84 24 b3 14
	00 00 07	 mov	 BYTE PTR $T5[rsp+5203], 7
  0a271	c6 84 24 b4 14
	00 00 74	 mov	 BYTE PTR $T5[rsp+5204], 116 ; 00000074H
  0a279	c6 84 24 b5 14
	00 00 0a	 mov	 BYTE PTR $T5[rsp+5205], 10
  0a281	c6 84 24 b6 14
	00 00 42	 mov	 BYTE PTR $T5[rsp+5206], 66 ; 00000042H
  0a289	c6 84 24 b7 14
	00 00 88	 mov	 BYTE PTR $T5[rsp+5207], 136 ; 00000088H
  0a291	c6 84 24 b8 14
	00 00 54	 mov	 BYTE PTR $T5[rsp+5208], 84 ; 00000054H
  0a299	c6 84 24 b9 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5209], 0
  0a2a1	c6 84 24 ba 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5210], 255 ; 000000ffH
  0a2a9	c6 84 24 bb 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5211], 73 ; 00000049H
  0a2b1	c6 84 24 bc 14
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5212], 255 ; 000000ffH
  0a2b9	c6 84 24 bd 14
	00 00 c8	 mov	 BYTE PTR $T5[rsp+5213], 200 ; 000000c8H
  0a2c1	c6 84 24 be 14
	00 00 75	 mov	 BYTE PTR $T5[rsp+5214], 117 ; 00000075H
  0a2c9	c6 84 24 bf 14
	00 00 f6	 mov	 BYTE PTR $T5[rsp+5215], 246 ; 000000f6H
  0a2d1	c6 84 24 c0 14
	00 00 c3	 mov	 BYTE PTR $T5[rsp+5216], 195 ; 000000c3H
  0a2d9	c6 84 24 c1 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5217], 102 ; 00000066H
  0a2e1	c6 84 24 c2 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5218], 102 ; 00000066H
  0a2e9	c6 84 24 c3 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5219], 102 ; 00000066H
  0a2f1	c6 84 24 c4 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5220], 102 ; 00000066H
  0a2f9	c6 84 24 c5 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5221], 102 ; 00000066H
  0a301	c6 84 24 c6 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5222], 102 ; 00000066H
  0a309	c6 84 24 c7 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5223], 102 ; 00000066H
  0a311	c6 84 24 c8 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5224], 15
  0a319	c6 84 24 c9 14
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5225], 31
  0a321	c6 84 24 ca 14
	00 00 84	 mov	 BYTE PTR $T5[rsp+5226], 132 ; 00000084H
  0a329	c6 84 24 cb 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5227], 0
  0a331	c6 84 24 cc 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5228], 0
  0a339	c6 84 24 cd 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5229], 0
  0a341	c6 84 24 ce 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5230], 0
  0a349	c6 84 24 cf 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5231], 0
  0a351	c6 84 24 d0 14
	00 00 66	 mov	 BYTE PTR $T5[rsp+5232], 102 ; 00000066H
  0a359	c6 84 24 d1 14
	00 00 48	 mov	 BYTE PTR $T5[rsp+5233], 72 ; 00000048H
  0a361	c6 84 24 d2 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5234], 15
  0a369	c6 84 24 d3 14
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5235], 110 ; 0000006eH
  0a371	c6 84 24 d4 14
	00 00 c2	 mov	 BYTE PTR $T5[rsp+5236], 194 ; 000000c2H
  0a379	c6 84 24 d5 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5237], 15
  0a381	c6 84 24 d6 14
	00 00 16	 mov	 BYTE PTR $T5[rsp+5238], 22
  0a389	c6 84 24 d7 14
	00 00 c0	 mov	 BYTE PTR $T5[rsp+5239], 192 ; 000000c0H
  0a391	c6 84 24 d8 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5240], 15
  0a399	c6 84 24 d9 14
	00 00 11	 mov	 BYTE PTR $T5[rsp+5241], 17
  0a3a1	c6 84 24 da 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5242], 1
  0a3a9	c6 84 24 db 14
	00 00 4c	 mov	 BYTE PTR $T5[rsp+5243], 76 ; 0000004cH
  0a3b1	c6 84 24 dc 14
	00 00 03	 mov	 BYTE PTR $T5[rsp+5244], 3
  0a3b9	c6 84 24 dd 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5245], 193 ; 000000c1H
  0a3c1	c6 84 24 de 14
	00 00 48	 mov	 BYTE PTR $T5[rsp+5246], 72 ; 00000048H
  0a3c9	c6 84 24 df 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5247], 131 ; 00000083H
  0a3d1	c6 84 24 e0 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5248], 193 ; 000000c1H
  0a3d9	c6 84 24 e1 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5249], 16
  0a3e1	c6 84 24 e2 14
	00 00 48	 mov	 BYTE PTR $T5[rsp+5250], 72 ; 00000048H
  0a3e9	c6 84 24 e3 14
	00 00 83	 mov	 BYTE PTR $T5[rsp+5251], 131 ; 00000083H
  0a3f1	c6 84 24 e4 14
	00 00 e1	 mov	 BYTE PTR $T5[rsp+5252], 225 ; 000000e1H
  0a3f9	c6 84 24 e5 14
	00 00 f0	 mov	 BYTE PTR $T5[rsp+5253], 240 ; 000000f0H
  0a401	c6 84 24 e6 14
	00 00 4c	 mov	 BYTE PTR $T5[rsp+5254], 76 ; 0000004cH
  0a409	c6 84 24 e7 14
	00 00 2b	 mov	 BYTE PTR $T5[rsp+5255], 43 ; 0000002bH
  0a411	c6 84 24 e8 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5256], 193 ; 000000c1H
  0a419	c6 84 24 e9 14
	00 00 4d	 mov	 BYTE PTR $T5[rsp+5257], 77 ; 0000004dH
  0a421	c6 84 24 ea 14
	00 00 8b	 mov	 BYTE PTR $T5[rsp+5258], 139 ; 0000008bH
  0a429	c6 84 24 eb 14
	00 00 c8	 mov	 BYTE PTR $T5[rsp+5259], 200 ; 000000c8H
  0a431	c6 84 24 ec 14
	00 00 49	 mov	 BYTE PTR $T5[rsp+5260], 73 ; 00000049H
  0a439	c6 84 24 ed 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5261], 193 ; 000000c1H
  0a441	c6 84 24 ee 14
	00 00 e9	 mov	 BYTE PTR $T5[rsp+5262], 233 ; 000000e9H
  0a449	c6 84 24 ef 14
	00 00 07	 mov	 BYTE PTR $T5[rsp+5263], 7
  0a451	c6 84 24 f0 14
	00 00 74	 mov	 BYTE PTR $T5[rsp+5264], 116 ; 00000074H
  0a459	c6 84 24 f1 14
	00 00 2f	 mov	 BYTE PTR $T5[rsp+5265], 47 ; 0000002fH
  0a461	c6 84 24 f2 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5266], 15
  0a469	c6 84 24 f3 14
	00 00 29	 mov	 BYTE PTR $T5[rsp+5267], 41 ; 00000029H
  0a471	c6 84 24 f4 14
	00 00 01	 mov	 BYTE PTR $T5[rsp+5268], 1
  0a479	c6 84 24 f5 14
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5269], 15
  0a481	c6 84 24 f6 14
	00 00 29	 mov	 BYTE PTR $T5[rsp+5270], 41 ; 00000029H
  0a489	c6 84 24 f7 14
	00 00 41	 mov	 BYTE PTR $T5[rsp+5271], 65 ; 00000041H
  0a491	c6 84 24 f8 14
	00 00 10	 mov	 BYTE PTR $T5[rsp+5272], 16
  0a499	c6 84 24 f9 14
	00 00 48	 mov	 BYTE PTR $T5[rsp+5273], 72 ; 00000048H
  0a4a1	c6 84 24 fa 14
	00 00 81	 mov	 BYTE PTR $T5[rsp+5274], 129 ; 00000081H
  0a4a9	c6 84 24 fb 14
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5275], 193 ; 000000c1H
  0a4b1	c6 84 24 fc 14
	00 00 80	 mov	 BYTE PTR $T5[rsp+5276], 128 ; 00000080H
  0a4b9	c6 84 24 fd 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5277], 0
  0a4c1	c6 84 24 fe 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5278], 0
  0a4c9	c6 84 24 ff 14
	00 00 00	 mov	 BYTE PTR $T5[rsp+5279], 0
  0a4d1	c6 84 24 00 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5280], 15
  0a4d9	c6 84 24 01 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5281], 41 ; 00000029H
  0a4e1	c6 84 24 02 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5282], 65 ; 00000041H
  0a4e9	c6 84 24 03 15
	00 00 a0	 mov	 BYTE PTR $T5[rsp+5283], 160 ; 000000a0H
  0a4f1	c6 84 24 04 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5284], 15
  0a4f9	c6 84 24 05 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5285], 41 ; 00000029H
  0a501	c6 84 24 06 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5286], 65 ; 00000041H
  0a509	c6 84 24 07 15
	00 00 b0	 mov	 BYTE PTR $T5[rsp+5287], 176 ; 000000b0H
  0a511	c6 84 24 08 15
	00 00 49	 mov	 BYTE PTR $T5[rsp+5288], 73 ; 00000049H
  0a519	c6 84 24 09 15
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5289], 255 ; 000000ffH
  0a521	c6 84 24 0a 15
	00 00 c9	 mov	 BYTE PTR $T5[rsp+5290], 201 ; 000000c9H
  0a529	c6 84 24 0b 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5291], 15
  0a531	c6 84 24 0c 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5292], 41 ; 00000029H
  0a539	c6 84 24 0d 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5293], 65 ; 00000041H
  0a541	c6 84 24 0e 15
	00 00 c0	 mov	 BYTE PTR $T5[rsp+5294], 192 ; 000000c0H
  0a549	c6 84 24 0f 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5295], 15
  0a551	c6 84 24 10 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5296], 41 ; 00000029H
  0a559	c6 84 24 11 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5297], 65 ; 00000041H
  0a561	c6 84 24 12 15
	00 00 d0	 mov	 BYTE PTR $T5[rsp+5298], 208 ; 000000d0H
  0a569	c6 84 24 13 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5299], 15
  0a571	c6 84 24 14 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5300], 41 ; 00000029H
  0a579	c6 84 24 15 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5301], 65 ; 00000041H
  0a581	c6 84 24 16 15
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5302], 224 ; 000000e0H
  0a589	c6 84 24 17 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5303], 15
  0a591	c6 84 24 18 15
	00 00 29	 mov	 BYTE PTR $T5[rsp+5304], 41 ; 00000029H
  0a599	c6 84 24 19 15
	00 00 41	 mov	 BYTE PTR $T5[rsp+5305], 65 ; 00000041H
  0a5a1	c6 84 24 1a 15
	00 00 f0	 mov	 BYTE PTR $T5[rsp+5306], 240 ; 000000f0H
  0a5a9	c6 84 24 1b 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5307], 117 ; 00000075H
  0a5b1	c6 84 24 1c 15
	00 00 d5	 mov	 BYTE PTR $T5[rsp+5308], 213 ; 000000d5H
  0a5b9	c6 84 24 1d 15
	00 00 49	 mov	 BYTE PTR $T5[rsp+5309], 73 ; 00000049H
  0a5c1	c6 84 24 1e 15
	00 00 83	 mov	 BYTE PTR $T5[rsp+5310], 131 ; 00000083H
  0a5c9	c6 84 24 1f 15
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5311], 224 ; 000000e0H
  0a5d1	c6 84 24 20 15
	00 00 7f	 mov	 BYTE PTR $T5[rsp+5312], 127 ; 0000007fH
  0a5d9	c6 84 24 21 15
	00 00 4d	 mov	 BYTE PTR $T5[rsp+5313], 77 ; 0000004dH
  0a5e1	c6 84 24 22 15
	00 00 8b	 mov	 BYTE PTR $T5[rsp+5314], 139 ; 0000008bH
  0a5e9	c6 84 24 23 15
	00 00 c8	 mov	 BYTE PTR $T5[rsp+5315], 200 ; 000000c8H
  0a5f1	c6 84 24 24 15
	00 00 49	 mov	 BYTE PTR $T5[rsp+5316], 73 ; 00000049H
  0a5f9	c6 84 24 25 15
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5317], 193 ; 000000c1H
  0a601	c6 84 24 26 15
	00 00 e9	 mov	 BYTE PTR $T5[rsp+5318], 233 ; 000000e9H
  0a609	c6 84 24 27 15
	00 00 04	 mov	 BYTE PTR $T5[rsp+5319], 4
  0a611	c6 84 24 28 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5320], 116 ; 00000074H
  0a619	c6 84 24 29 15
	00 00 12	 mov	 BYTE PTR $T5[rsp+5321], 18
  0a621	c6 84 24 2a 15
	00 00 66	 mov	 BYTE PTR $T5[rsp+5322], 102 ; 00000066H
  0a629	c6 84 24 2b 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5323], 15
  0a631	c6 84 24 2c 15
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5324], 31
  0a639	c6 84 24 2d 15
	00 00 44	 mov	 BYTE PTR $T5[rsp+5325], 68 ; 00000044H
  0a641	c6 84 24 2e 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5326], 0
  0a649	c6 84 24 2f 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5327], 0
  0a651	c6 84 24 30 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5328], 15
  0a659	c6 84 24 31 15
	00 00 11	 mov	 BYTE PTR $T5[rsp+5329], 17
  0a661	c6 84 24 32 15
	00 00 01	 mov	 BYTE PTR $T5[rsp+5330], 1
  0a669	c6 84 24 33 15
	00 00 48	 mov	 BYTE PTR $T5[rsp+5331], 72 ; 00000048H
  0a671	c6 84 24 34 15
	00 00 83	 mov	 BYTE PTR $T5[rsp+5332], 131 ; 00000083H
  0a679	c6 84 24 35 15
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5333], 193 ; 000000c1H
  0a681	c6 84 24 36 15
	00 00 10	 mov	 BYTE PTR $T5[rsp+5334], 16
  0a689	c6 84 24 37 15
	00 00 49	 mov	 BYTE PTR $T5[rsp+5335], 73 ; 00000049H
  0a691	c6 84 24 38 15
	00 00 ff	 mov	 BYTE PTR $T5[rsp+5336], 255 ; 000000ffH
  0a699	c6 84 24 39 15
	00 00 c9	 mov	 BYTE PTR $T5[rsp+5337], 201 ; 000000c9H
  0a6a1	c6 84 24 3a 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5338], 117 ; 00000075H
  0a6a9	c6 84 24 3b 15
	00 00 f4	 mov	 BYTE PTR $T5[rsp+5339], 244 ; 000000f4H
  0a6b1	c6 84 24 3c 15
	00 00 49	 mov	 BYTE PTR $T5[rsp+5340], 73 ; 00000049H
  0a6b9	c6 84 24 3d 15
	00 00 83	 mov	 BYTE PTR $T5[rsp+5341], 131 ; 00000083H
  0a6c1	c6 84 24 3e 15
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5342], 224 ; 000000e0H
  0a6c9	c6 84 24 3f 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5343], 15
  0a6d1	c6 84 24 40 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5344], 116 ; 00000074H
  0a6d9	c6 84 24 41 15
	00 00 06	 mov	 BYTE PTR $T5[rsp+5345], 6
  0a6e1	c6 84 24 42 15
	00 00 42	 mov	 BYTE PTR $T5[rsp+5346], 66 ; 00000042H
  0a6e9	c6 84 24 43 15
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5347], 15
  0a6f1	c6 84 24 44 15
	00 00 11	 mov	 BYTE PTR $T5[rsp+5348], 17
  0a6f9	c6 84 24 45 15
	00 00 44	 mov	 BYTE PTR $T5[rsp+5349], 68 ; 00000044H
  0a701	c6 84 24 46 15
	00 00 01	 mov	 BYTE PTR $T5[rsp+5350], 1
  0a709	c6 84 24 47 15
	00 00 f0	 mov	 BYTE PTR $T5[rsp+5351], 240 ; 000000f0H
  0a711	c6 84 24 48 15
	00 00 c3	 mov	 BYTE PTR $T5[rsp+5352], 195 ; 000000c3H
  0a719	c6 84 24 49 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5353], 204 ; 000000ccH
  0a721	c6 84 24 4a 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5354], 204 ; 000000ccH
  0a729	c6 84 24 4b 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5355], 204 ; 000000ccH
  0a731	c6 84 24 4c 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5356], 204 ; 000000ccH
  0a739	c6 84 24 4d 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5357], 204 ; 000000ccH
  0a741	c6 84 24 4e 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5358], 204 ; 000000ccH
  0a749	c6 84 24 4f 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5359], 204 ; 000000ccH
  0a751	c6 84 24 50 15
	00 00 77	 mov	 BYTE PTR $T5[rsp+5360], 119 ; 00000077H
  0a759	c6 84 24 51 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5361], 105 ; 00000069H
  0a761	c6 84 24 52 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5362], 110 ; 0000006eH
  0a769	c6 84 24 53 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5363], 108 ; 0000006cH
  0a771	c6 84 24 54 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5364], 111 ; 0000006fH
  0a779	c6 84 24 55 15
	00 00 67	 mov	 BYTE PTR $T5[rsp+5365], 103 ; 00000067H
  0a781	c6 84 24 56 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5366], 111 ; 0000006fH
  0a789	c6 84 24 57 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5367], 110 ; 0000006eH
  0a791	c6 84 24 58 15
	00 00 2e	 mov	 BYTE PTR $T5[rsp+5368], 46 ; 0000002eH
  0a799	c6 84 24 59 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5369], 101 ; 00000065H
  0a7a1	c6 84 24 5a 15
	00 00 78	 mov	 BYTE PTR $T5[rsp+5370], 120 ; 00000078H
  0a7a9	c6 84 24 5b 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5371], 101 ; 00000065H
  0a7b1	c6 84 24 5c 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5372], 0
  0a7b9	c6 84 24 5d 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5373], 204 ; 000000ccH
  0a7c1	c6 84 24 5e 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5374], 204 ; 000000ccH
  0a7c9	c6 84 24 5f 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5375], 204 ; 000000ccH
  0a7d1	c6 84 24 60 15
	00 00 77	 mov	 BYTE PTR $T5[rsp+5376], 119 ; 00000077H
  0a7d9	c6 84 24 61 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5377], 105 ; 00000069H
  0a7e1	c6 84 24 62 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5378], 110 ; 0000006eH
  0a7e9	c6 84 24 63 15
	00 00 33	 mov	 BYTE PTR $T5[rsp+5379], 51 ; 00000033H
  0a7f1	c6 84 24 64 15
	00 00 32	 mov	 BYTE PTR $T5[rsp+5380], 50 ; 00000032H
  0a7f9	c6 84 24 65 15
	00 00 6b	 mov	 BYTE PTR $T5[rsp+5381], 107 ; 0000006bH
  0a801	c6 84 24 66 15
	00 00 2e	 mov	 BYTE PTR $T5[rsp+5382], 46 ; 0000002eH
  0a809	c6 84 24 67 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5383], 115 ; 00000073H
  0a811	c6 84 24 68 15
	00 00 79	 mov	 BYTE PTR $T5[rsp+5384], 121 ; 00000079H
  0a819	c6 84 24 69 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5385], 115 ; 00000073H
  0a821	c6 84 24 6a 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5386], 32 ; 00000020H
  0a829	c6 84 24 6b 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5387], 110 ; 0000006eH
  0a831	c6 84 24 6c 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5388], 111 ; 0000006fH
  0a839	c6 84 24 6d 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5389], 116 ; 00000074H
  0a841	c6 84 24 6e 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5390], 32 ; 00000020H
  0a849	c6 84 24 6f 15
	00 00 66	 mov	 BYTE PTR $T5[rsp+5391], 102 ; 00000066H
  0a851	c6 84 24 70 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5392], 111 ; 0000006fH
  0a859	c6 84 24 71 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5393], 117 ; 00000075H
  0a861	c6 84 24 72 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5394], 110 ; 0000006eH
  0a869	c6 84 24 73 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5395], 100 ; 00000064H
  0a871	c6 84 24 74 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5396], 32 ; 00000020H
  0a879	c6 84 24 75 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5397], 105 ; 00000069H
  0a881	c6 84 24 76 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5398], 110 ; 0000006eH
  0a889	c6 84 24 77 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5399], 32 ; 00000020H
  0a891	c6 84 24 78 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5400], 115 ; 00000073H
  0a899	c6 84 24 79 15
	00 00 79	 mov	 BYTE PTR $T5[rsp+5401], 121 ; 00000079H
  0a8a1	c6 84 24 7a 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5402], 115 ; 00000073H
  0a8a9	c6 84 24 7b 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5403], 116 ; 00000074H
  0a8b1	c6 84 24 7c 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5404], 101 ; 00000065H
  0a8b9	c6 84 24 7d 15
	00 00 6d	 mov	 BYTE PTR $T5[rsp+5405], 109 ; 0000006dH
  0a8c1	c6 84 24 7e 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5406], 32 ; 00000020H
  0a8c9	c6 84 24 7f 15
	00 00 6d	 mov	 BYTE PTR $T5[rsp+5407], 109 ; 0000006dH
  0a8d1	c6 84 24 80 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5408], 111 ; 0000006fH
  0a8d9	c6 84 24 81 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5409], 100 ; 00000064H
  0a8e1	c6 84 24 82 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5410], 117 ; 00000075H
  0a8e9	c6 84 24 83 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5411], 108 ; 0000006cH
  0a8f1	c6 84 24 84 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5412], 101 ; 00000065H
  0a8f9	c6 84 24 85 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5413], 115 ; 00000073H
  0a901	c6 84 24 86 15
	00 00 2c	 mov	 BYTE PTR $T5[rsp+5414], 44 ; 0000002cH
  0a909	c6 84 24 87 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5415], 32 ; 00000020H
  0a911	c6 84 24 88 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5416], 117 ; 00000075H
  0a919	c6 84 24 89 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5417], 110 ; 0000006eH
  0a921	c6 84 24 8a 15
	00 00 61	 mov	 BYTE PTR $T5[rsp+5418], 97 ; 00000061H
  0a929	c6 84 24 8b 15
	00 00 62	 mov	 BYTE PTR $T5[rsp+5419], 98 ; 00000062H
  0a931	c6 84 24 8c 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5420], 108 ; 0000006cH
  0a939	c6 84 24 8d 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5421], 101 ; 00000065H
  0a941	c6 84 24 8e 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5422], 32 ; 00000020H
  0a949	c6 84 24 8f 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5423], 116 ; 00000074H
  0a951	c6 84 24 90 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5424], 111 ; 0000006fH
  0a959	c6 84 24 91 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5425], 32 ; 00000020H
  0a961	c6 84 24 92 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5426], 108 ; 0000006cH
  0a969	c6 84 24 93 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5427], 111 ; 0000006fH
  0a971	c6 84 24 94 15
	00 00 61	 mov	 BYTE PTR $T5[rsp+5428], 97 ; 00000061H
  0a979	c6 84 24 95 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5429], 100 ; 00000064H
  0a981	c6 84 24 96 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5430], 32 ; 00000020H
  0a989	c6 84 24 97 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5431], 100 ; 00000064H
  0a991	c6 84 24 98 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5432], 114 ; 00000072H
  0a999	c6 84 24 99 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5433], 105 ; 00000069H
  0a9a1	c6 84 24 9a 15
	00 00 76	 mov	 BYTE PTR $T5[rsp+5434], 118 ; 00000076H
  0a9a9	c6 84 24 9b 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5435], 101 ; 00000065H
  0a9b1	c6 84 24 9c 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5436], 114 ; 00000072H
  0a9b9	c6 84 24 9d 15
	00 00 2e	 mov	 BYTE PTR $T5[rsp+5437], 46 ; 0000002eH
  0a9c1	c6 84 24 9e 15
	00 00 0a	 mov	 BYTE PTR $T5[rsp+5438], 10
  0a9c9	c6 84 24 9f 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5439], 0
  0a9d1	c6 84 24 a0 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5440], 117 ; 00000075H
  0a9d9	c6 84 24 a1 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5441], 110 ; 0000006eH
  0a9e1	c6 84 24 a2 15
	00 00 61	 mov	 BYTE PTR $T5[rsp+5442], 97 ; 00000061H
  0a9e9	c6 84 24 a3 15
	00 00 62	 mov	 BYTE PTR $T5[rsp+5443], 98 ; 00000062H
  0a9f1	c6 84 24 a4 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5444], 108 ; 0000006cH
  0a9f9	c6 84 24 a5 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5445], 101 ; 00000065H
  0aa01	c6 84 24 a6 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5446], 32 ; 00000020H
  0aa09	c6 84 24 a7 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5447], 116 ; 00000074H
  0aa11	c6 84 24 a8 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5448], 111 ; 0000006fH
  0aa19	c6 84 24 a9 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5449], 32 ; 00000020H
  0aa21	c6 84 24 aa 15
	00 00 66	 mov	 BYTE PTR $T5[rsp+5450], 102 ; 00000066H
  0aa29	c6 84 24 ab 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5451], 105 ; 00000069H
  0aa31	c6 84 24 ac 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5452], 110 ; 0000006eH
  0aa39	c6 84 24 ad 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5453], 100 ; 00000064H
  0aa41	c6 84 24 ae 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5454], 32 ; 00000020H
  0aa49	c6 84 24 af 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5455], 116 ; 00000074H
  0aa51	c6 84 24 b0 15
	00 00 61	 mov	 BYTE PTR $T5[rsp+5456], 97 ; 00000061H
  0aa59	c6 84 24 b1 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5457], 114 ; 00000072H
  0aa61	c6 84 24 b2 15
	00 00 67	 mov	 BYTE PTR $T5[rsp+5458], 103 ; 00000067H
  0aa69	c6 84 24 b3 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5459], 101 ; 00000065H
  0aa71	c6 84 24 b4 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5460], 116 ; 00000074H
  0aa79	c6 84 24 b5 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5461], 32 ; 00000020H
  0aa81	c6 84 24 b6 15
	00 00 66	 mov	 BYTE PTR $T5[rsp+5462], 102 ; 00000066H
  0aa89	c6 84 24 b7 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5463], 117 ; 00000075H
  0aa91	c6 84 24 b8 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5464], 110 ; 0000006eH
  0aa99	c6 84 24 b9 15
	00 00 63	 mov	 BYTE PTR $T5[rsp+5465], 99 ; 00000063H
  0aaa1	c6 84 24 ba 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5466], 116 ; 00000074H
  0aaa9	c6 84 24 bb 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5467], 105 ; 00000069H
  0aab1	c6 84 24 bc 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5468], 111 ; 0000006fH
  0aab9	c6 84 24 bd 15
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5469], 110 ; 0000006eH
  0aac1	c6 84 24 be 15
	00 00 2e	 mov	 BYTE PTR $T5[rsp+5470], 46 ; 0000002eH
  0aac9	c6 84 24 bf 15
	00 00 0a	 mov	 BYTE PTR $T5[rsp+5471], 10
  0aad1	c6 84 24 c0 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5472], 0
  0aad9	c6 84 24 c1 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5473], 204 ; 000000ccH
  0aae1	c6 84 24 c2 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5474], 204 ; 000000ccH
  0aae9	c6 84 24 c3 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5475], 204 ; 000000ccH
  0aaf1	c6 84 24 c4 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5476], 204 ; 000000ccH
  0aaf9	c6 84 24 c5 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5477], 204 ; 000000ccH
  0ab01	c6 84 24 c6 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5478], 204 ; 000000ccH
  0ab09	c6 84 24 c7 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5479], 204 ; 000000ccH
  0ab11	c6 84 24 c8 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5480], 204 ; 000000ccH
  0ab19	c6 84 24 c9 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5481], 204 ; 000000ccH
  0ab21	c6 84 24 ca 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5482], 204 ; 000000ccH
  0ab29	c6 84 24 cb 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5483], 204 ; 000000ccH
  0ab31	c6 84 24 cc 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5484], 204 ; 000000ccH
  0ab39	c6 84 24 cd 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5485], 204 ; 000000ccH
  0ab41	c6 84 24 ce 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5486], 204 ; 000000ccH
  0ab49	c6 84 24 cf 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5487], 204 ; 000000ccH
  0ab51	c6 84 24 d0 15
	00 00 4e	 mov	 BYTE PTR $T5[rsp+5488], 78 ; 0000004eH
  0ab59	c6 84 24 d1 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5489], 116 ; 00000074H
  0ab61	c6 84 24 d2 15
	00 00 55	 mov	 BYTE PTR $T5[rsp+5490], 85 ; 00000055H
  0ab69	c6 84 24 d3 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5491], 115 ; 00000073H
  0ab71	c6 84 24 d4 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5492], 101 ; 00000065H
  0ab79	c6 84 24 d5 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5493], 114 ; 00000072H
  0ab81	c6 84 24 d6 15
	00 00 47	 mov	 BYTE PTR $T5[rsp+5494], 71 ; 00000047H
  0ab89	c6 84 24 d7 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5495], 101 ; 00000065H
  0ab91	c6 84 24 d8 15
	00 00 74	 mov	 BYTE PTR $T5[rsp+5496], 116 ; 00000074H
  0ab99	c6 84 24 d9 15
	00 00 47	 mov	 BYTE PTR $T5[rsp+5497], 71 ; 00000047H
  0aba1	c6 84 24 da 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5498], 117 ; 00000075H
  0aba9	c6 84 24 db 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5499], 105 ; 00000069H
  0abb1	c6 84 24 dc 15
	00 00 52	 mov	 BYTE PTR $T5[rsp+5500], 82 ; 00000052H
  0abb9	c6 84 24 dd 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5501], 101 ; 00000065H
  0abc1	c6 84 24 de 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5502], 115 ; 00000073H
  0abc9	c6 84 24 df 15
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5503], 111 ; 0000006fH
  0abd1	c6 84 24 e0 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5504], 117 ; 00000075H
  0abd9	c6 84 24 e1 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5505], 114 ; 00000072H
  0abe1	c6 84 24 e2 15
	00 00 63	 mov	 BYTE PTR $T5[rsp+5506], 99 ; 00000063H
  0abe9	c6 84 24 e3 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5507], 101 ; 00000065H
  0abf1	c6 84 24 e4 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5508], 115 ; 00000073H
  0abf9	c6 84 24 e5 15
	00 00 3a	 mov	 BYTE PTR $T5[rsp+5509], 58 ; 0000003aH
  0ac01	c6 84 24 e6 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5510], 32 ; 00000020H
  0ac09	c6 84 24 e7 15
	00 00 30	 mov	 BYTE PTR $T5[rsp+5511], 48 ; 00000030H
  0ac11	c6 84 24 e8 15
	00 00 78	 mov	 BYTE PTR $T5[rsp+5512], 120 ; 00000078H
  0ac19	c6 84 24 e9 15
	00 00 25	 mov	 BYTE PTR $T5[rsp+5513], 37 ; 00000025H
  0ac21	c6 84 24 ea 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5514], 108 ; 0000006cH
  0ac29	c6 84 24 eb 15
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5515], 108 ; 0000006cH
  0ac31	c6 84 24 ec 15
	00 00 78	 mov	 BYTE PTR $T5[rsp+5516], 120 ; 00000078H
  0ac39	c6 84 24 ed 15
	00 00 0a	 mov	 BYTE PTR $T5[rsp+5517], 10
  0ac41	c6 84 24 ee 15
	00 00 00	 mov	 BYTE PTR $T5[rsp+5518], 0
  0ac49	c6 84 24 ef 15
	00 00 cc	 mov	 BYTE PTR $T5[rsp+5519], 204 ; 000000ccH
  0ac51	c6 84 24 f0 15
	00 00 64	 mov	 BYTE PTR $T5[rsp+5520], 100 ; 00000064H
  0ac59	c6 84 24 f1 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5521], 114 ; 00000072H
  0ac61	c6 84 24 f2 15
	00 00 69	 mov	 BYTE PTR $T5[rsp+5522], 105 ; 00000069H
  0ac69	c6 84 24 f3 15
	00 00 76	 mov	 BYTE PTR $T5[rsp+5523], 118 ; 00000076H
  0ac71	c6 84 24 f4 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5524], 101 ; 00000065H
  0ac79	c6 84 24 f5 15
	00 00 72	 mov	 BYTE PTR $T5[rsp+5525], 114 ; 00000072H
  0ac81	c6 84 24 f6 15
	00 00 20	 mov	 BYTE PTR $T5[rsp+5526], 32 ; 00000020H
  0ac89	c6 84 24 f7 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5527], 115 ; 00000073H
  0ac91	c6 84 24 f8 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5528], 117 ; 00000075H
  0ac99	c6 84 24 f9 15
	00 00 63	 mov	 BYTE PTR $T5[rsp+5529], 99 ; 00000063H
  0aca1	c6 84 24 fa 15
	00 00 63	 mov	 BYTE PTR $T5[rsp+5530], 99 ; 00000063H
  0aca9	c6 84 24 fb 15
	00 00 65	 mov	 BYTE PTR $T5[rsp+5531], 101 ; 00000065H
  0acb1	c6 84 24 fc 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5532], 115 ; 00000073H
  0acb9	c6 84 24 fd 15
	00 00 73	 mov	 BYTE PTR $T5[rsp+5533], 115 ; 00000073H
  0acc1	c6 84 24 fe 15
	00 00 66	 mov	 BYTE PTR $T5[rsp+5534], 102 ; 00000066H
  0acc9	c6 84 24 ff 15
	00 00 75	 mov	 BYTE PTR $T5[rsp+5535], 117 ; 00000075H
  0acd1	c6 84 24 00 16
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5536], 108 ; 0000006cH
  0acd9	c6 84 24 01 16
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5537], 108 ; 0000006cH
  0ace1	c6 84 24 02 16
	00 00 79	 mov	 BYTE PTR $T5[rsp+5538], 121 ; 00000079H
  0ace9	c6 84 24 03 16
	00 00 20	 mov	 BYTE PTR $T5[rsp+5539], 32 ; 00000020H
  0acf1	c6 84 24 04 16
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5540], 108 ; 0000006cH
  0acf9	c6 84 24 05 16
	00 00 6f	 mov	 BYTE PTR $T5[rsp+5541], 111 ; 0000006fH
  0ad01	c6 84 24 06 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5542], 97 ; 00000061H
  0ad09	c6 84 24 07 16
	00 00 64	 mov	 BYTE PTR $T5[rsp+5543], 100 ; 00000064H
  0ad11	c6 84 24 08 16
	00 00 65	 mov	 BYTE PTR $T5[rsp+5544], 101 ; 00000065H
  0ad19	c6 84 24 09 16
	00 00 64	 mov	 BYTE PTR $T5[rsp+5545], 100 ; 00000064H
  0ad21	c6 84 24 0a 16
	00 00 2e	 mov	 BYTE PTR $T5[rsp+5546], 46 ; 0000002eH
  0ad29	c6 84 24 0b 16
	00 00 0a	 mov	 BYTE PTR $T5[rsp+5547], 10
  0ad31	c6 84 24 0c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5548], 0
  0ad39	c6 84 24 0d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5549], 0
  0ad41	c6 84 24 0e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5550], 0
  0ad49	c6 84 24 0f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5551], 0
  0ad51	c6 84 24 10 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5552], 0
  0ad59	c6 84 24 11 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5553], 0
  0ad61	c6 84 24 12 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5554], 0
  0ad69	c6 84 24 13 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5555], 0
  0ad71	c6 84 24 14 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5556], 0
  0ad79	c6 84 24 15 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5557], 0
  0ad81	c6 84 24 16 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5558], 0
  0ad89	c6 84 24 17 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5559], 0
  0ad91	c6 84 24 18 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5560], 0
  0ad99	c6 84 24 19 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5561], 0
  0ada1	c6 84 24 1a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5562], 0
  0ada9	c6 84 24 1b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5563], 0
  0adb1	c6 84 24 1c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5564], 0
  0adb9	c6 84 24 1d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5565], 0
  0adc1	c6 84 24 1e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5566], 0
  0adc9	c6 84 24 1f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5567], 0
  0add1	c6 84 24 20 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5568], 0
  0add9	c6 84 24 21 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5569], 0
  0ade1	c6 84 24 22 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5570], 0
  0ade9	c6 84 24 23 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5571], 0
  0adf1	c6 84 24 24 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5572], 0
  0adf9	c6 84 24 25 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5573], 0
  0ae01	c6 84 24 26 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5574], 0
  0ae09	c6 84 24 27 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5575], 0
  0ae11	c6 84 24 28 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5576], 0
  0ae19	c6 84 24 29 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5577], 0
  0ae21	c6 84 24 2a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5578], 0
  0ae29	c6 84 24 2b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5579], 0
  0ae31	c6 84 24 2c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5580], 0
  0ae39	c6 84 24 2d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5581], 0
  0ae41	c6 84 24 2e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5582], 0
  0ae49	c6 84 24 2f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5583], 0
  0ae51	c6 84 24 30 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5584], 0
  0ae59	c6 84 24 31 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5585], 0
  0ae61	c6 84 24 32 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5586], 0
  0ae69	c6 84 24 33 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5587], 0
  0ae71	c6 84 24 34 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5588], 0
  0ae79	c6 84 24 35 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5589], 0
  0ae81	c6 84 24 36 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5590], 0
  0ae89	c6 84 24 37 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5591], 0
  0ae91	c6 84 24 38 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5592], 0
  0ae99	c6 84 24 39 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5593], 0
  0aea1	c6 84 24 3a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5594], 0
  0aea9	c6 84 24 3b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5595], 0
  0aeb1	c6 84 24 3c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5596], 0
  0aeb9	c6 84 24 3d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5597], 0
  0aec1	c6 84 24 3e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5598], 0
  0aec9	c6 84 24 3f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5599], 0
  0aed1	c6 84 24 40 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5600], 0
  0aed9	c6 84 24 41 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5601], 0
  0aee1	c6 84 24 42 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5602], 0
  0aee9	c6 84 24 43 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5603], 0
  0aef1	c6 84 24 44 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5604], 0
  0aef9	c6 84 24 45 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5605], 0
  0af01	c6 84 24 46 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5606], 0
  0af09	c6 84 24 47 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5607], 0
  0af11	c6 84 24 48 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5608], 0
  0af19	c6 84 24 49 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5609], 0
  0af21	c6 84 24 4a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5610], 0
  0af29	c6 84 24 4b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5611], 0
  0af31	c6 84 24 4c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5612], 0
  0af39	c6 84 24 4d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5613], 0
  0af41	c6 84 24 4e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5614], 0
  0af49	c6 84 24 4f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5615], 0
  0af51	c6 84 24 50 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5616], 0
  0af59	c6 84 24 51 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5617], 0
  0af61	c6 84 24 52 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5618], 0
  0af69	c6 84 24 53 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5619], 0
  0af71	c6 84 24 54 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5620], 0
  0af79	c6 84 24 55 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5621], 0
  0af81	c6 84 24 56 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5622], 0
  0af89	c6 84 24 57 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5623], 0
  0af91	c6 84 24 58 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5624], 0
  0af99	c6 84 24 59 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5625], 0
  0afa1	c6 84 24 5a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5626], 0
  0afa9	c6 84 24 5b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5627], 0
  0afb1	c6 84 24 5c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5628], 0
  0afb9	c6 84 24 5d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5629], 0
  0afc1	c6 84 24 5e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5630], 0
  0afc9	c6 84 24 5f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5631], 0
  0afd1	c6 84 24 60 16
	00 00 d8	 mov	 BYTE PTR $T5[rsp+5632], 216 ; 000000d8H
  0afd9	c6 84 24 61 16
	00 00 60	 mov	 BYTE PTR $T5[rsp+5633], 96 ; 00000060H
  0afe1	c6 84 24 62 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5634], 0
  0afe9	c6 84 24 63 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5635], 0
  0aff1	c6 84 24 64 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5636], 0
  0aff9	c6 84 24 65 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5637], 0
  0b001	c6 84 24 66 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5638], 0
  0b009	c6 84 24 67 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5639], 0
  0b011	c6 84 24 68 16
	00 00 ec	 mov	 BYTE PTR $T5[rsp+5640], 236 ; 000000ecH
  0b019	c6 84 24 69 16
	00 00 60	 mov	 BYTE PTR $T5[rsp+5641], 96 ; 00000060H
  0b021	c6 84 24 6a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5642], 0
  0b029	c6 84 24 6b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5643], 0
  0b031	c6 84 24 6c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5644], 0
  0b039	c6 84 24 6d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5645], 0
  0b041	c6 84 24 6e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5646], 0
  0b049	c6 84 24 6f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5647], 0
  0b051	c6 84 24 70 16
	00 00 0c	 mov	 BYTE PTR $T5[rsp+5648], 12
  0b059	c6 84 24 71 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5649], 97 ; 00000061H
  0b061	c6 84 24 72 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5650], 0
  0b069	c6 84 24 73 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5651], 0
  0b071	c6 84 24 74 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5652], 0
  0b079	c6 84 24 75 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5653], 0
  0b081	c6 84 24 76 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5654], 0
  0b089	c6 84 24 77 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5655], 0
  0b091	c6 84 24 78 16
	00 00 26	 mov	 BYTE PTR $T5[rsp+5656], 38 ; 00000026H
  0b099	c6 84 24 79 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5657], 97 ; 00000061H
  0b0a1	c6 84 24 7a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5658], 0
  0b0a9	c6 84 24 7b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5659], 0
  0b0b1	c6 84 24 7c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5660], 0
  0b0b9	c6 84 24 7d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5661], 0
  0b0c1	c6 84 24 7e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5662], 0
  0b0c9	c6 84 24 7f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5663], 0
  0b0d1	c6 84 24 80 16
	00 00 3e	 mov	 BYTE PTR $T5[rsp+5664], 62 ; 0000003eH
  0b0d9	c6 84 24 81 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5665], 97 ; 00000061H
  0b0e1	c6 84 24 82 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5666], 0
  0b0e9	c6 84 24 83 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5667], 0
  0b0f1	c6 84 24 84 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5668], 0
  0b0f9	c6 84 24 85 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5669], 0
  0b101	c6 84 24 86 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5670], 0
  0b109	c6 84 24 87 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5671], 0
  0b111	c6 84 24 88 16
	00 00 52	 mov	 BYTE PTR $T5[rsp+5672], 82 ; 00000052H
  0b119	c6 84 24 89 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5673], 97 ; 00000061H
  0b121	c6 84 24 8a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5674], 0
  0b129	c6 84 24 8b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5675], 0
  0b131	c6 84 24 8c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5676], 0
  0b139	c6 84 24 8d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5677], 0
  0b141	c6 84 24 8e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5678], 0
  0b149	c6 84 24 8f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5679], 0
  0b151	c6 84 24 90 16
	00 00 6a	 mov	 BYTE PTR $T5[rsp+5680], 106 ; 0000006aH
  0b159	c6 84 24 91 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5681], 97 ; 00000061H
  0b161	c6 84 24 92 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5682], 0
  0b169	c6 84 24 93 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5683], 0
  0b171	c6 84 24 94 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5684], 0
  0b179	c6 84 24 95 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5685], 0
  0b181	c6 84 24 96 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5686], 0
  0b189	c6 84 24 97 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5687], 0
  0b191	c6 84 24 98 16
	00 00 88	 mov	 BYTE PTR $T5[rsp+5688], 136 ; 00000088H
  0b199	c6 84 24 99 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5689], 97 ; 00000061H
  0b1a1	c6 84 24 9a 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5690], 0
  0b1a9	c6 84 24 9b 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5691], 0
  0b1b1	c6 84 24 9c 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5692], 0
  0b1b9	c6 84 24 9d 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5693], 0
  0b1c1	c6 84 24 9e 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5694], 0
  0b1c9	c6 84 24 9f 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5695], 0
  0b1d1	c6 84 24 a0 16
	00 00 9a	 mov	 BYTE PTR $T5[rsp+5696], 154 ; 0000009aH
  0b1d9	c6 84 24 a1 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5697], 97 ; 00000061H
  0b1e1	c6 84 24 a2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5698], 0
  0b1e9	c6 84 24 a3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5699], 0
  0b1f1	c6 84 24 a4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5700], 0
  0b1f9	c6 84 24 a5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5701], 0
  0b201	c6 84 24 a6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5702], 0
  0b209	c6 84 24 a7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5703], 0
  0b211	c6 84 24 a8 16
	00 00 bc	 mov	 BYTE PTR $T5[rsp+5704], 188 ; 000000bcH
  0b219	c6 84 24 a9 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5705], 97 ; 00000061H
  0b221	c6 84 24 aa 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5706], 0
  0b229	c6 84 24 ab 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5707], 0
  0b231	c6 84 24 ac 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5708], 0
  0b239	c6 84 24 ad 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5709], 0
  0b241	c6 84 24 ae 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5710], 0
  0b249	c6 84 24 af 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5711], 0
  0b251	c6 84 24 b0 16
	00 00 c6	 mov	 BYTE PTR $T5[rsp+5712], 198 ; 000000c6H
  0b259	c6 84 24 b1 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5713], 97 ; 00000061H
  0b261	c6 84 24 b2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5714], 0
  0b269	c6 84 24 b3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5715], 0
  0b271	c6 84 24 b4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5716], 0
  0b279	c6 84 24 b5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5717], 0
  0b281	c6 84 24 b6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5718], 0
  0b289	c6 84 24 b7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5719], 0
  0b291	c6 84 24 b8 16
	00 00 d4	 mov	 BYTE PTR $T5[rsp+5720], 212 ; 000000d4H
  0b299	c6 84 24 b9 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5721], 97 ; 00000061H
  0b2a1	c6 84 24 ba 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5722], 0
  0b2a9	c6 84 24 bb 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5723], 0
  0b2b1	c6 84 24 bc 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5724], 0
  0b2b9	c6 84 24 bd 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5725], 0
  0b2c1	c6 84 24 be 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5726], 0
  0b2c9	c6 84 24 bf 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5727], 0
  0b2d1	c6 84 24 c0 16
	00 00 e2	 mov	 BYTE PTR $T5[rsp+5728], 226 ; 000000e2H
  0b2d9	c6 84 24 c1 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5729], 97 ; 00000061H
  0b2e1	c6 84 24 c2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5730], 0
  0b2e9	c6 84 24 c3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5731], 0
  0b2f1	c6 84 24 c4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5732], 0
  0b2f9	c6 84 24 c5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5733], 0
  0b301	c6 84 24 c6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5734], 0
  0b309	c6 84 24 c7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5735], 0
  0b311	c6 84 24 c8 16
	00 00 fc	 mov	 BYTE PTR $T5[rsp+5736], 252 ; 000000fcH
  0b319	c6 84 24 c9 16
	00 00 61	 mov	 BYTE PTR $T5[rsp+5737], 97 ; 00000061H
  0b321	c6 84 24 ca 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5738], 0
  0b329	c6 84 24 cb 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5739], 0
  0b331	c6 84 24 cc 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5740], 0
  0b339	c6 84 24 cd 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5741], 0
  0b341	c6 84 24 ce 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5742], 0
  0b349	c6 84 24 cf 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5743], 0
  0b351	c6 84 24 d0 16
	00 00 12	 mov	 BYTE PTR $T5[rsp+5744], 18
  0b359	c6 84 24 d1 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5745], 98 ; 00000062H
  0b361	c6 84 24 d2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5746], 0
  0b369	c6 84 24 d3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5747], 0
  0b371	c6 84 24 d4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5748], 0
  0b379	c6 84 24 d5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5749], 0
  0b381	c6 84 24 d6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5750], 0
  0b389	c6 84 24 d7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5751], 0
  0b391	c6 84 24 d8 16
	00 00 2a	 mov	 BYTE PTR $T5[rsp+5752], 42 ; 0000002aH
  0b399	c6 84 24 d9 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5753], 98 ; 00000062H
  0b3a1	c6 84 24 da 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5754], 0
  0b3a9	c6 84 24 db 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5755], 0
  0b3b1	c6 84 24 dc 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5756], 0
  0b3b9	c6 84 24 dd 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5757], 0
  0b3c1	c6 84 24 de 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5758], 0
  0b3c9	c6 84 24 df 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5759], 0
  0b3d1	c6 84 24 e0 16
	00 00 4a	 mov	 BYTE PTR $T5[rsp+5760], 74 ; 0000004aH
  0b3d9	c6 84 24 e1 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5761], 98 ; 00000062H
  0b3e1	c6 84 24 e2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5762], 0
  0b3e9	c6 84 24 e3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5763], 0
  0b3f1	c6 84 24 e4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5764], 0
  0b3f9	c6 84 24 e5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5765], 0
  0b401	c6 84 24 e6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5766], 0
  0b409	c6 84 24 e7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5767], 0
  0b411	c6 84 24 e8 16
	00 00 5e	 mov	 BYTE PTR $T5[rsp+5768], 94 ; 0000005eH
  0b419	c6 84 24 e9 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5769], 98 ; 00000062H
  0b421	c6 84 24 ea 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5770], 0
  0b429	c6 84 24 eb 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5771], 0
  0b431	c6 84 24 ec 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5772], 0
  0b439	c6 84 24 ed 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5773], 0
  0b441	c6 84 24 ee 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5774], 0
  0b449	c6 84 24 ef 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5775], 0
  0b451	c6 84 24 f0 16
	00 00 70	 mov	 BYTE PTR $T5[rsp+5776], 112 ; 00000070H
  0b459	c6 84 24 f1 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5777], 98 ; 00000062H
  0b461	c6 84 24 f2 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5778], 0
  0b469	c6 84 24 f3 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5779], 0
  0b471	c6 84 24 f4 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5780], 0
  0b479	c6 84 24 f5 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5781], 0
  0b481	c6 84 24 f6 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5782], 0
  0b489	c6 84 24 f7 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5783], 0
  0b491	c6 84 24 f8 16
	00 00 84	 mov	 BYTE PTR $T5[rsp+5784], 132 ; 00000084H
  0b499	c6 84 24 f9 16
	00 00 62	 mov	 BYTE PTR $T5[rsp+5785], 98 ; 00000062H
  0b4a1	c6 84 24 fa 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5786], 0
  0b4a9	c6 84 24 fb 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5787], 0
  0b4b1	c6 84 24 fc 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5788], 0
  0b4b9	c6 84 24 fd 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5789], 0
  0b4c1	c6 84 24 fe 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5790], 0
  0b4c9	c6 84 24 ff 16
	00 00 00	 mov	 BYTE PTR $T5[rsp+5791], 0
  0b4d1	c6 84 24 00 17
	00 00 96	 mov	 BYTE PTR $T5[rsp+5792], 150 ; 00000096H
  0b4d9	c6 84 24 01 17
	00 00 62	 mov	 BYTE PTR $T5[rsp+5793], 98 ; 00000062H
  0b4e1	c6 84 24 02 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5794], 0
  0b4e9	c6 84 24 03 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5795], 0
  0b4f1	c6 84 24 04 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5796], 0
  0b4f9	c6 84 24 05 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5797], 0
  0b501	c6 84 24 06 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5798], 0
  0b509	c6 84 24 07 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5799], 0
  0b511	c6 84 24 08 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5800], 0
  0b519	c6 84 24 09 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5801], 0
  0b521	c6 84 24 0a 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5802], 0
  0b529	c6 84 24 0b 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5803], 0
  0b531	c6 84 24 0c 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5804], 0
  0b539	c6 84 24 0d 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5805], 0
  0b541	c6 84 24 0e 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5806], 0
  0b549	c6 84 24 0f 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5807], 0
  0b551	c6 84 24 10 17
	00 00 a0	 mov	 BYTE PTR $T5[rsp+5808], 160 ; 000000a0H
  0b559	c6 84 24 11 17
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5809], 31
  0b561	c6 84 24 12 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5810], 0
  0b569	c6 84 24 13 17
	00 00 40	 mov	 BYTE PTR $T5[rsp+5811], 64 ; 00000040H
  0b571	c6 84 24 14 17
	00 00 01	 mov	 BYTE PTR $T5[rsp+5812], 1
  0b579	c6 84 24 15 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5813], 0
  0b581	c6 84 24 16 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5814], 0
  0b589	c6 84 24 17 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5815], 0
  0b591	c6 84 24 18 17
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5816], 224 ; 000000e0H
  0b599	c6 84 24 19 17
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5817], 31
  0b5a1	c6 84 24 1a 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5818], 0
  0b5a9	c6 84 24 1b 17
	00 00 40	 mov	 BYTE PTR $T5[rsp+5819], 64 ; 00000040H
  0b5b1	c6 84 24 1c 17
	00 00 01	 mov	 BYTE PTR $T5[rsp+5820], 1
  0b5b9	c6 84 24 1d 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5821], 0
  0b5c1	c6 84 24 1e 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5822], 0
  0b5c9	c6 84 24 1f 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5823], 0
  0b5d1	c6 84 24 20 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5824], 0
  0b5d9	c6 84 24 21 17
	00 00 10	 mov	 BYTE PTR $T5[rsp+5825], 16
  0b5e1	c6 84 24 22 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5826], 0
  0b5e9	c6 84 24 23 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5827], 0
  0b5f1	c6 84 24 24 17
	00 00 50	 mov	 BYTE PTR $T5[rsp+5828], 80 ; 00000050H
  0b5f9	c6 84 24 25 17
	00 00 13	 mov	 BYTE PTR $T5[rsp+5829], 19
  0b601	c6 84 24 26 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5830], 0
  0b609	c6 84 24 27 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5831], 0
  0b611	c6 84 24 28 17
	00 00 a0	 mov	 BYTE PTR $T5[rsp+5832], 160 ; 000000a0H
  0b619	c6 84 24 29 17
	00 00 1f	 mov	 BYTE PTR $T5[rsp+5833], 31
  0b621	c6 84 24 2a 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5834], 0
  0b629	c6 84 24 2b 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5835], 0
  0b631	c6 84 24 2c 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5836], 0
  0b639	c6 84 24 2d 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5837], 0
  0b641	c6 84 24 2e 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5838], 0
  0b649	c6 84 24 2f 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5839], 0
  0b651	c6 84 24 30 17
	00 00 4e	 mov	 BYTE PTR $T5[rsp+5840], 78 ; 0000004eH
  0b659	c6 84 24 31 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5841], 0
  0b661	c6 84 24 32 17
	00 00 53	 mov	 BYTE PTR $T5[rsp+5842], 83 ; 00000053H
  0b669	c6 84 24 33 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5843], 0
  0b671	c6 84 24 34 17
	00 00 55	 mov	 BYTE PTR $T5[rsp+5844], 85 ; 00000055H
  0b679	c6 84 24 35 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5845], 0
  0b681	c6 84 24 36 17
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5846], 15
  0b689	c6 84 24 37 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5847], 0
  0b691	c6 84 24 38 17
	00 00 0f	 mov	 BYTE PTR $T5[rsp+5848], 15
  0b699	c6 84 24 39 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5849], 0
  0b6a1	c6 84 24 3a 17
	00 00 55	 mov	 BYTE PTR $T5[rsp+5850], 85 ; 00000055H
  0b6a9	c6 84 24 3b 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5851], 0
  0b6b1	c6 84 24 3c 17
	00 00 11	 mov	 BYTE PTR $T5[rsp+5852], 17
  0b6b9	c6 84 24 3d 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5853], 0
  0b6c1	c6 84 24 3e 17
	00 00 33	 mov	 BYTE PTR $T5[rsp+5854], 51 ; 00000033H
  0b6c9	c6 84 24 3f 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5855], 0
  0b6d1	c6 84 24 40 17
	00 00 38	 mov	 BYTE PTR $T5[rsp+5856], 56 ; 00000038H
  0b6d9	c6 84 24 41 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5857], 0
  0b6e1	c6 84 24 42 17
	00 00 31	 mov	 BYTE PTR $T5[rsp+5858], 49 ; 00000031H
  0b6e9	c6 84 24 43 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5859], 0
  0b6f1	c6 84 24 44 17
	00 00 43	 mov	 BYTE PTR $T5[rsp+5860], 67 ; 00000043H
  0b6f9	c6 84 24 45 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5861], 0
  0b701	c6 84 24 46 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5862], 0
  0b709	c6 84 24 47 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5863], 0
  0b711	c6 84 24 48 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5864], 0
  0b719	c6 84 24 49 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5865], 0
  0b721	c6 84 24 4a 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5866], 0
  0b729	c6 84 24 4b 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5867], 0
  0b731	c6 84 24 4c 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5868], 0
  0b739	c6 84 24 4d 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5869], 0
  0b741	c6 84 24 4e 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5870], 0
  0b749	c6 84 24 4f 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5871], 0
  0b751	c6 84 24 50 17
	00 00 71	 mov	 BYTE PTR $T5[rsp+5872], 113 ; 00000071H
  0b759	c6 84 24 51 17
	00 00 b1	 mov	 BYTE PTR $T5[rsp+5873], 177 ; 000000b1H
  0b761	c6 84 24 52 17
	00 00 3e	 mov	 BYTE PTR $T5[rsp+5874], 62 ; 0000003eH
  0b769	c6 84 24 53 17
	00 00 3c	 mov	 BYTE PTR $T5[rsp+5875], 60 ; 0000003cH
  0b771	c6 84 24 54 17
	00 00 3d	 mov	 BYTE PTR $T5[rsp+5876], 61 ; 0000003dH
  0b779	c6 84 24 55 17
	00 00 3e	 mov	 BYTE PTR $T5[rsp+5877], 62 ; 0000003eH
  0b781	c6 84 24 56 17
	00 00 3f	 mov	 BYTE PTR $T5[rsp+5878], 63 ; 0000003fH
  0b789	c6 84 24 57 17
	00 00 08	 mov	 BYTE PTR $T5[rsp+5879], 8
  0b791	c6 84 24 58 17
	00 00 c4	 mov	 BYTE PTR $T5[rsp+5880], 196 ; 000000c4H
  0b799	c6 84 24 59 17
	00 00 82	 mov	 BYTE PTR $T5[rsp+5881], 130 ; 00000082H
  0b7a1	c6 84 24 5a 17
	00 00 37	 mov	 BYTE PTR $T5[rsp+5882], 55 ; 00000037H
  0b7a9	c6 84 24 5b 17
	00 00 42	 mov	 BYTE PTR $T5[rsp+5883], 66 ; 00000042H
  0b7b1	c6 84 24 5c 17
	00 00 ba	 mov	 BYTE PTR $T5[rsp+5884], 186 ; 000000baH
  0b7b9	c6 84 24 5d 17
	00 00 53	 mov	 BYTE PTR $T5[rsp+5885], 83 ; 00000053H
  0b7c1	c6 84 24 5e 17
	00 00 47	 mov	 BYTE PTR $T5[rsp+5886], 71 ; 00000047H
  0b7c9	c6 84 24 5f 17
	00 00 48	 mov	 BYTE PTR $T5[rsp+5887], 72 ; 00000048H
  0b7d1	c6 84 24 60 17
	00 00 49	 mov	 BYTE PTR $T5[rsp+5888], 73 ; 00000049H
  0b7d9	c6 84 24 61 17
	00 00 4a	 mov	 BYTE PTR $T5[rsp+5889], 74 ; 0000004aH
  0b7e1	c6 84 24 62 17
	00 00 03	 mov	 BYTE PTR $T5[rsp+5890], 3
  0b7e9	c6 84 24 63 17
	00 00 cf	 mov	 BYTE PTR $T5[rsp+5891], 207 ; 000000cfH
  0b7f1	c6 84 24 64 17
	00 00 89	 mov	 BYTE PTR $T5[rsp+5892], 137 ; 00000089H
  0b7f9	c6 84 24 65 17
	00 00 66	 mov	 BYTE PTR $T5[rsp+5893], 102 ; 00000066H
  0b801	c6 84 24 66 17
	00 00 8c	 mov	 BYTE PTR $T5[rsp+5894], 140 ; 0000008cH
  0b809	c6 84 24 67 17
	00 00 9c	 mov	 BYTE PTR $T5[rsp+5895], 156 ; 0000009cH
  0b811	c6 84 24 68 17
	00 00 9d	 mov	 BYTE PTR $T5[rsp+5896], 157 ; 0000009dH
  0b819	c6 84 24 69 17
	00 00 9e	 mov	 BYTE PTR $T5[rsp+5897], 158 ; 0000009eH
  0b821	c6 84 24 6a 17
	00 00 9f	 mov	 BYTE PTR $T5[rsp+5898], 159 ; 0000009fH
  0b829	c6 84 24 6b 17
	00 00 98	 mov	 BYTE PTR $T5[rsp+5899], 152 ; 00000098H
  0b831	c6 84 24 6c 17
	00 00 99	 mov	 BYTE PTR $T5[rsp+5900], 153 ; 00000099H
  0b839	c6 84 24 6d 17
	00 00 9a	 mov	 BYTE PTR $T5[rsp+5901], 154 ; 0000009aH
  0b841	c6 84 24 6e 17
	00 00 9b	 mov	 BYTE PTR $T5[rsp+5902], 155 ; 0000009bH
  0b849	c6 84 24 6f 17
	00 00 94	 mov	 BYTE PTR $T5[rsp+5903], 148 ; 00000094H
  0b851	c6 84 24 70 17
	00 00 11	 mov	 BYTE PTR $T5[rsp+5904], 17
  0b859	c6 84 24 71 17
	00 00 d9	 mov	 BYTE PTR $T5[rsp+5905], 217 ; 000000d9H
  0b861	c6 84 24 72 17
	00 00 b7	 mov	 BYTE PTR $T5[rsp+5906], 183 ; 000000b7H
  0b869	c6 84 24 73 17
	00 00 74	 mov	 BYTE PTR $T5[rsp+5907], 116 ; 00000074H
  0b871	c6 84 24 74 17
	00 00 15	 mov	 BYTE PTR $T5[rsp+5908], 21
  0b879	c6 84 24 75 17
	00 00 d5	 mov	 BYTE PTR $T5[rsp+5909], 213 ; 000000d5H
  0b881	c6 84 24 76 17
	00 00 5a	 mov	 BYTE PTR $T5[rsp+5910], 90 ; 0000005aH
  0b889	c6 84 24 77 17
	00 00 60	 mov	 BYTE PTR $T5[rsp+5911], 96 ; 00000060H
  0b891	c6 84 24 78 17
	00 00 61	 mov	 BYTE PTR $T5[rsp+5912], 97 ; 00000061H
  0b899	c6 84 24 79 17
	00 00 62	 mov	 BYTE PTR $T5[rsp+5913], 98 ; 00000062H
  0b8a1	c6 84 24 7a 17
	00 00 63	 mov	 BYTE PTR $T5[rsp+5914], 99 ; 00000063H
  0b8a9	c6 84 24 7b 17
	00 00 2c	 mov	 BYTE PTR $T5[rsp+5915], 44 ; 0000002cH
  0b8b1	c6 84 24 7c 17
	00 00 e0	 mov	 BYTE PTR $T5[rsp+5916], 224 ; 000000e0H
  0b8b9	c6 84 24 7d 17
	00 00 a6	 mov	 BYTE PTR $T5[rsp+5917], 166 ; 000000a6H
  0b8c1	c6 84 24 7e 17
	00 00 13	 mov	 BYTE PTR $T5[rsp+5918], 19
  0b8c9	c6 84 24 7f 17
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5919], 110 ; 0000006eH
  0b8d1	c6 84 24 80 17
	00 00 96	 mov	 BYTE PTR $T5[rsp+5920], 150 ; 00000096H
  0b8d9	c6 84 24 81 17
	00 00 7f	 mov	 BYTE PTR $T5[rsp+5921], 127 ; 0000007fH
  0b8e1	c6 84 24 82 17
	00 00 6b	 mov	 BYTE PTR $T5[rsp+5922], 107 ; 0000006bH
  0b8e9	c6 84 24 83 17
	00 00 6c	 mov	 BYTE PTR $T5[rsp+5923], 108 ; 0000006cH
  0b8f1	c6 84 24 84 17
	00 00 6d	 mov	 BYTE PTR $T5[rsp+5924], 109 ; 0000006dH
  0b8f9	c6 84 24 85 17
	00 00 6e	 mov	 BYTE PTR $T5[rsp+5925], 110 ; 0000006eH
  0b901	c6 84 24 86 17
	00 00 27	 mov	 BYTE PTR $T5[rsp+5926], 39 ; 00000027H
  0b909	c6 84 24 87 17
	00 00 f3	 mov	 BYTE PTR $T5[rsp+5927], 243 ; 000000f3H
  0b911	c6 84 24 88 17
	00 00 fd	 mov	 BYTE PTR $T5[rsp+5928], 253 ; 000000fdH
  0b919	c6 84 24 89 17
	00 00 12	 mov	 BYTE PTR $T5[rsp+5929], 18
  0b921	c6 84 24 8a 17
	00 00 f8	 mov	 BYTE PTR $T5[rsp+5930], 248 ; 000000f8H
  0b929	c6 84 24 8b 17
	00 00 f0	 mov	 BYTE PTR $T5[rsp+5931], 240 ; 000000f0H
  0b931	c6 84 24 8c 17
	00 00 f1	 mov	 BYTE PTR $T5[rsp+5932], 241 ; 000000f1H
  0b939	c6 84 24 8d 17
	00 00 f2	 mov	 BYTE PTR $T5[rsp+5933], 242 ; 000000f2H
  0b941	c6 84 24 8e 17
	00 00 f3	 mov	 BYTE PTR $T5[rsp+5934], 243 ; 000000f3H
  0b949	c6 84 24 8f 17
	00 00 8c	 mov	 BYTE PTR $T5[rsp+5935], 140 ; 0000008cH
  0b951	c6 84 24 90 17
	00 00 8d	 mov	 BYTE PTR $T5[rsp+5936], 141 ; 0000008dH
  0b959	c6 84 24 91 17
	00 00 8e	 mov	 BYTE PTR $T5[rsp+5937], 142 ; 0000008eH
  0b961	c6 84 24 92 17
	00 00 8f	 mov	 BYTE PTR $T5[rsp+5938], 143 ; 0000008fH
  0b969	c6 84 24 93 17
	00 00 88	 mov	 BYTE PTR $T5[rsp+5939], 136 ; 00000088H
  0b971	c6 84 24 94 17
	00 00 0d	 mov	 BYTE PTR $T5[rsp+5940], 13
  0b979	c6 84 24 95 17
	00 00 c5	 mov	 BYTE PTR $T5[rsp+5941], 197 ; 000000c5H
  0b981	c6 84 24 96 17
	00 00 ab	 mov	 BYTE PTR $T5[rsp+5942], 171 ; 000000abH
  0b989	c6 84 24 97 17
	00 00 70	 mov	 BYTE PTR $T5[rsp+5943], 112 ; 00000070H
  0b991	c6 84 24 98 17
	00 00 01	 mov	 BYTE PTR $T5[rsp+5944], 1
  0b999	c6 84 24 99 17
	00 00 c1	 mov	 BYTE PTR $T5[rsp+5945], 193 ; 000000c1H
  0b9a1	c6 84 24 9a 17
	00 00 4e	 mov	 BYTE PTR $T5[rsp+5946], 78 ; 0000004eH
  0b9a9	c6 84 24 9b 17
	00 00 4c	 mov	 BYTE PTR $T5[rsp+5947], 76 ; 0000004cH
  0b9b1	c6 84 24 9c 17
	00 00 4d	 mov	 BYTE PTR $T5[rsp+5948], 77 ; 0000004dH
  0b9b9	c6 84 24 9d 17
	00 00 4e	 mov	 BYTE PTR $T5[rsp+5949], 78 ; 0000004eH
  0b9c1	c6 84 24 9e 17
	00 00 4f	 mov	 BYTE PTR $T5[rsp+5950], 79 ; 0000004fH
  0b9c9	c6 84 24 9f 17
	00 00 18	 mov	 BYTE PTR $T5[rsp+5951], 24
  0b9d1	c6 84 24 a0 17
	00 00 d4	 mov	 BYTE PTR $T5[rsp+5952], 212 ; 000000d4H
  0b9d9	c6 84 24 a1 17
	00 00 92	 mov	 BYTE PTR $T5[rsp+5953], 146 ; 00000092H
  0b9e1	c6 84 24 a2 17
	00 00 27	 mov	 BYTE PTR $T5[rsp+5954], 39 ; 00000027H
  0b9e9	c6 84 24 a3 17
	00 00 52	 mov	 BYTE PTR $T5[rsp+5955], 82 ; 00000052H
  0b9f1	c6 84 24 a4 17
	00 00 aa	 mov	 BYTE PTR $T5[rsp+5956], 170 ; 000000aaH
  0b9f9	c6 84 24 a5 17
	00 00 43	 mov	 BYTE PTR $T5[rsp+5957], 67 ; 00000043H
  0ba01	c6 84 24 a6 17
	00 00 57	 mov	 BYTE PTR $T5[rsp+5958], 87 ; 00000057H
  0ba09	c6 84 24 a7 17
	00 00 58	 mov	 BYTE PTR $T5[rsp+5959], 88 ; 00000058H
  0ba11	c6 84 24 a8 17
	00 00 59	 mov	 BYTE PTR $T5[rsp+5960], 89 ; 00000059H
  0ba19	c6 84 24 a9 17
	00 00 5a	 mov	 BYTE PTR $T5[rsp+5961], 90 ; 0000005aH
  0ba21	c6 84 24 aa 17
	00 00 13	 mov	 BYTE PTR $T5[rsp+5962], 19
  0ba29	c6 84 24 ab 17
	00 00 df	 mov	 BYTE PTR $T5[rsp+5963], 223 ; 000000dfH
  0ba31	c6 84 24 ac 17
	00 00 99	 mov	 BYTE PTR $T5[rsp+5964], 153 ; 00000099H
  0ba39	c6 84 24 ad 17
	00 00 66	 mov	 BYTE PTR $T5[rsp+5965], 102 ; 00000066H
  0ba41	c6 84 24 ae 17
	00 00 9c	 mov	 BYTE PTR $T5[rsp+5966], 156 ; 0000009cH
  0ba49	c6 84 24 af 17
	00 00 ac	 mov	 BYTE PTR $T5[rsp+5967], 172 ; 000000acH
  0ba51	c6 84 24 b0 17
	00 00 ad	 mov	 BYTE PTR $T5[rsp+5968], 173 ; 000000adH
  0ba59	c6 84 24 b1 17
	00 00 ae	 mov	 BYTE PTR $T5[rsp+5969], 174 ; 000000aeH
  0ba61	c6 84 24 b2 17
	00 00 af	 mov	 BYTE PTR $T5[rsp+5970], 175 ; 000000afH
  0ba69	c6 84 24 b3 17
	00 00 a8	 mov	 BYTE PTR $T5[rsp+5971], 168 ; 000000a8H
  0ba71	c6 84 24 b4 17
	00 00 a9	 mov	 BYTE PTR $T5[rsp+5972], 169 ; 000000a9H
  0ba79	c6 84 24 b5 17
	00 00 aa	 mov	 BYTE PTR $T5[rsp+5973], 170 ; 000000aaH
  0ba81	c6 84 24 b6 17
	00 00 ab	 mov	 BYTE PTR $T5[rsp+5974], 171 ; 000000abH
  0ba89	c6 84 24 b7 17
	00 00 a4	 mov	 BYTE PTR $T5[rsp+5975], 164 ; 000000a4H
  0ba91	c6 84 24 b8 17
	00 00 21	 mov	 BYTE PTR $T5[rsp+5976], 33 ; 00000021H
  0ba99	c6 84 24 b9 17
	00 00 e9	 mov	 BYTE PTR $T5[rsp+5977], 233 ; 000000e9H
  0baa1	c6 84 24 ba 17
	00 00 87	 mov	 BYTE PTR $T5[rsp+5978], 135 ; 00000087H
  0baa9	c6 84 24 bb 17
	00 00 24	 mov	 BYTE PTR $T5[rsp+5979], 36 ; 00000024H
  0bab1	c6 84 24 bc 17
	00 00 6d	 mov	 BYTE PTR $T5[rsp+5980], 109 ; 0000006dH
  0bab9	c6 84 24 bd 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5981], 0
  0bac1	c6 84 24 be 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5982], 0
  0bac9	c6 84 24 bf 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5983], 0
  0bad1	c6 84 24 c0 17
	00 00 41	 mov	 BYTE PTR $T5[rsp+5984], 65 ; 00000041H
  0bad9	c6 84 24 c1 17
	00 00 42	 mov	 BYTE PTR $T5[rsp+5985], 66 ; 00000042H
  0bae1	c6 84 24 c2 17
	00 00 43	 mov	 BYTE PTR $T5[rsp+5986], 67 ; 00000043H
  0bae9	c6 84 24 c3 17
	00 00 03	 mov	 BYTE PTR $T5[rsp+5987], 3
  0baf1	c6 84 24 c4 17
	00 00 02	 mov	 BYTE PTR $T5[rsp+5988], 2
  0baf9	c6 84 24 c5 17
	00 00 01	 mov	 BYTE PTR $T5[rsp+5989], 1
  0bb01	c6 84 24 c6 17
	00 00 00	 mov	 BYTE PTR $T5[rsp+5990], 0
  0bb09	c6 84 24 c7 17
	00 00 38	 mov	 BYTE PTR $T5[rsp+5991], 56 ; 00000038H
  0bb11	c6 84 24 c8 17
	00 00 39	 mov	 BYTE PTR $T5[rsp+5992], 57 ; 00000039H
  0bb19	c6 84 24 c9 17
	00 00 3a	 mov	 BYTE PTR $T5[rsp+5993], 58 ; 0000003aH
  0bb21	c6 84 24 ca 17
	00 00 3b	 mov	 BYTE PTR $T5[rsp+5994], 59 ; 0000003bH
  0bb29	c6 84 24 cb 17
	00 00 3c	 mov	 BYTE PTR $T5[rsp+5995], 60 ; 0000003cH
  0bb31	c6 84 24 cc 17
	00 00 3d	 mov	 BYTE PTR $T5[rsp+5996], 61 ; 0000003dH
  0bb39	c6 84 24 cd 17
	00 00 3e	 mov	 BYTE PTR $T5[rsp+5997], 62 ; 0000003eH
  0bb41	c6 84 24 ce 17
	00 00 78	 mov	 BYTE PTR $T5[rsp+5998], 120 ; 00000078H
  0bb49	c6 84 24 cf 17
	00 00 77	 mov	 BYTE PTR $T5[rsp+5999], 119 ; 00000077H
  0bb51	c6 84 24 d0 17
	00 00 76	 mov	 BYTE PTR $T5[rsp+6000], 118 ; 00000076H
  0bb59	c6 84 24 d1 17
	00 00 75	 mov	 BYTE PTR $T5[rsp+6001], 117 ; 00000075H
  0bb61	c6 84 24 d2 17
	00 00 33	 mov	 BYTE PTR $T5[rsp+6002], 51 ; 00000033H
  0bb69	c6 84 24 d3 17
	00 00 34	 mov	 BYTE PTR $T5[rsp+6003], 52 ; 00000034H
  0bb71	c6 84 24 d4 17
	00 00 35	 mov	 BYTE PTR $T5[rsp+6004], 53 ; 00000035H
  0bb79	c6 84 24 d5 17
	00 00 36	 mov	 BYTE PTR $T5[rsp+6005], 54 ; 00000036H
  0bb81	c6 84 24 d6 17
	00 00 37	 mov	 BYTE PTR $T5[rsp+6006], 55 ; 00000037H
  0bb89	c6 84 24 d7 17
	00 00 28	 mov	 BYTE PTR $T5[rsp+6007], 40 ; 00000028H
  0bb91	c6 84 24 d8 17
	00 00 29	 mov	 BYTE PTR $T5[rsp+6008], 41 ; 00000029H
  0bb99	c6 84 24 d9 17
	00 00 2a	 mov	 BYTE PTR $T5[rsp+6009], 42 ; 0000002aH
  0bba1	c6 84 24 da 17
	00 00 2b	 mov	 BYTE PTR $T5[rsp+6010], 43 ; 0000002bH
  0bba9	c6 84 24 db 17
	00 00 2c	 mov	 BYTE PTR $T5[rsp+6011], 44 ; 0000002cH
  0bbb1	c6 84 24 dc 17
	00 00 2d	 mov	 BYTE PTR $T5[rsp+6012], 45 ; 0000002dH
  0bbb9	c6 84 24 dd 17
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6013], 46 ; 0000002eH
  0bbc1	c6 84 24 de 17
	00 00 2f	 mov	 BYTE PTR $T5[rsp+6014], 47 ; 0000002fH
  0bbc9	c6 84 24 df 17
	00 00 20	 mov	 BYTE PTR $T5[rsp+6015], 32 ; 00000020H
  0bbd1	c6 84 24 e0 17
	00 00 21	 mov	 BYTE PTR $T5[rsp+6016], 33 ; 00000021H
  0bbd9	c6 84 24 e1 17
	00 00 22	 mov	 BYTE PTR $T5[rsp+6017], 34 ; 00000022H
  0bbe1	c6 84 24 e2 17
	00 00 23	 mov	 BYTE PTR $T5[rsp+6018], 35 ; 00000023H
  0bbe9	c6 84 24 e3 17
	00 00 24	 mov	 BYTE PTR $T5[rsp+6019], 36 ; 00000024H
  0bbf1	c6 84 24 e4 17
	00 00 25	 mov	 BYTE PTR $T5[rsp+6020], 37 ; 00000025H
  0bbf9	c6 84 24 e5 17
	00 00 26	 mov	 BYTE PTR $T5[rsp+6021], 38 ; 00000026H
  0bc01	c6 84 24 e6 17
	00 00 27	 mov	 BYTE PTR $T5[rsp+6022], 39 ; 00000027H
  0bc09	c6 84 24 e7 17
	00 00 5f	 mov	 BYTE PTR $T5[rsp+6023], 95 ; 0000005fH
  0bc11	c6 84 24 e8 17
	00 00 5e	 mov	 BYTE PTR $T5[rsp+6024], 94 ; 0000005eH
  0bc19	c6 84 24 e9 17
	00 00 5d	 mov	 BYTE PTR $T5[rsp+6025], 93 ; 0000005dH
  0bc21	c6 84 24 ea 17
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6026], 92 ; 0000005cH
  0bc29	c6 84 24 eb 17
	00 00 1c	 mov	 BYTE PTR $T5[rsp+6027], 28
  0bc31	c6 84 24 ec 17
	00 00 1d	 mov	 BYTE PTR $T5[rsp+6028], 29
  0bc39	c6 84 24 ed 17
	00 00 1e	 mov	 BYTE PTR $T5[rsp+6029], 30
  0bc41	c6 84 24 ee 17
	00 00 1f	 mov	 BYTE PTR $T5[rsp+6030], 31
  0bc49	c6 84 24 ef 17
	00 00 10	 mov	 BYTE PTR $T5[rsp+6031], 16
  0bc51	c6 84 24 f0 17
	00 00 11	 mov	 BYTE PTR $T5[rsp+6032], 17
  0bc59	c6 84 24 f1 17
	00 00 12	 mov	 BYTE PTR $T5[rsp+6033], 18
  0bc61	c6 84 24 f2 17
	00 00 54	 mov	 BYTE PTR $T5[rsp+6034], 84 ; 00000054H
  0bc69	c6 84 24 f3 17
	00 00 53	 mov	 BYTE PTR $T5[rsp+6035], 83 ; 00000053H
  0bc71	c6 84 24 f4 17
	00 00 52	 mov	 BYTE PTR $T5[rsp+6036], 82 ; 00000052H
  0bc79	c6 84 24 f5 17
	00 00 51	 mov	 BYTE PTR $T5[rsp+6037], 81 ; 00000051H
  0bc81	c6 84 24 f6 17
	00 00 17	 mov	 BYTE PTR $T5[rsp+6038], 23
  0bc89	c6 84 24 f7 17
	00 00 08	 mov	 BYTE PTR $T5[rsp+6039], 8
  0bc91	c6 84 24 f8 17
	00 00 41	 mov	 BYTE PTR $T5[rsp+6040], 65 ; 00000041H
  0bc99	c6 84 24 f9 17
	00 00 42	 mov	 BYTE PTR $T5[rsp+6041], 66 ; 00000042H
  0bca1	c6 84 24 fa 17
	00 00 43	 mov	 BYTE PTR $T5[rsp+6042], 67 ; 00000043H
  0bca9	c6 84 24 fb 17
	00 00 44	 mov	 BYTE PTR $T5[rsp+6043], 68 ; 00000044H
  0bcb1	c6 84 24 fc 17
	00 00 45	 mov	 BYTE PTR $T5[rsp+6044], 69 ; 00000045H
  0bcb9	c6 84 24 fd 17
	00 00 46	 mov	 BYTE PTR $T5[rsp+6045], 70 ; 00000046H
  0bcc1	c6 84 24 fe 17
	00 00 47	 mov	 BYTE PTR $T5[rsp+6046], 71 ; 00000047H
  0bcc9	c6 84 24 ff 17
	00 00 38	 mov	 BYTE PTR $T5[rsp+6047], 56 ; 00000038H
  0bcd1	c6 84 24 00 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6048], 57 ; 00000039H
  0bcd9	c6 84 24 01 18
	00 00 3a	 mov	 BYTE PTR $T5[rsp+6049], 58 ; 0000003aH
  0bce1	c6 84 24 02 18
	00 00 3b	 mov	 BYTE PTR $T5[rsp+6050], 59 ; 0000003bH
  0bce9	c6 84 24 03 18
	00 00 3c	 mov	 BYTE PTR $T5[rsp+6051], 60 ; 0000003cH
  0bcf1	c6 84 24 04 18
	00 00 3d	 mov	 BYTE PTR $T5[rsp+6052], 61 ; 0000003dH
  0bcf9	c6 84 24 05 18
	00 00 3e	 mov	 BYTE PTR $T5[rsp+6053], 62 ; 0000003eH
  0bd01	c6 84 24 06 18
	00 00 3f	 mov	 BYTE PTR $T5[rsp+6054], 63 ; 0000003fH
  0bd09	c6 84 24 07 18
	00 00 30	 mov	 BYTE PTR $T5[rsp+6055], 48 ; 00000030H
  0bd11	c6 84 24 08 18
	00 00 31	 mov	 BYTE PTR $T5[rsp+6056], 49 ; 00000031H
  0bd19	c6 84 24 09 18
	00 00 32	 mov	 BYTE PTR $T5[rsp+6057], 50 ; 00000032H
  0bd21	c6 84 24 0a 18
	00 00 33	 mov	 BYTE PTR $T5[rsp+6058], 51 ; 00000033H
  0bd29	c6 84 24 0b 18
	00 00 73	 mov	 BYTE PTR $T5[rsp+6059], 115 ; 00000073H
  0bd31	c6 84 24 0c 18
	00 00 72	 mov	 BYTE PTR $T5[rsp+6060], 114 ; 00000072H
  0bd39	c6 84 24 0d 18
	00 00 71	 mov	 BYTE PTR $T5[rsp+6061], 113 ; 00000071H
  0bd41	c6 84 24 0e 18
	00 00 70	 mov	 BYTE PTR $T5[rsp+6062], 112 ; 00000070H
  0bd49	c6 84 24 0f 18
	00 00 28	 mov	 BYTE PTR $T5[rsp+6063], 40 ; 00000028H
  0bd51	c6 84 24 10 18
	00 00 29	 mov	 BYTE PTR $T5[rsp+6064], 41 ; 00000029H
  0bd59	c6 84 24 11 18
	00 00 2a	 mov	 BYTE PTR $T5[rsp+6065], 42 ; 0000002aH
  0bd61	c6 84 24 12 18
	00 00 2b	 mov	 BYTE PTR $T5[rsp+6066], 43 ; 0000002bH
  0bd69	c6 84 24 13 18
	00 00 2c	 mov	 BYTE PTR $T5[rsp+6067], 44 ; 0000002cH
  0bd71	c6 84 24 14 18
	00 00 2d	 mov	 BYTE PTR $T5[rsp+6068], 45 ; 0000002dH
  0bd79	c6 84 24 15 18
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6069], 46 ; 0000002eH
  0bd81	c6 84 24 16 18
	00 00 68	 mov	 BYTE PTR $T5[rsp+6070], 104 ; 00000068H
  0bd89	c6 84 24 17 18
	00 00 67	 mov	 BYTE PTR $T5[rsp+6071], 103 ; 00000067H
  0bd91	c6 84 24 18 18
	00 00 66	 mov	 BYTE PTR $T5[rsp+6072], 102 ; 00000066H
  0bd99	c6 84 24 19 18
	00 00 65	 mov	 BYTE PTR $T5[rsp+6073], 101 ; 00000065H
  0bda1	c6 84 24 1a 18
	00 00 23	 mov	 BYTE PTR $T5[rsp+6074], 35 ; 00000023H
  0bda9	c6 84 24 1b 18
	00 00 24	 mov	 BYTE PTR $T5[rsp+6075], 36 ; 00000024H
  0bdb1	c6 84 24 1c 18
	00 00 25	 mov	 BYTE PTR $T5[rsp+6076], 37 ; 00000025H
  0bdb9	c6 84 24 1d 18
	00 00 26	 mov	 BYTE PTR $T5[rsp+6077], 38 ; 00000026H
  0bdc1	c6 84 24 1e 18
	00 00 27	 mov	 BYTE PTR $T5[rsp+6078], 39 ; 00000027H
  0bdc9	c6 84 24 1f 18
	00 00 18	 mov	 BYTE PTR $T5[rsp+6079], 24
  0bdd1	c6 84 24 20 18
	00 00 19	 mov	 BYTE PTR $T5[rsp+6080], 25
  0bdd9	c6 84 24 21 18
	00 00 1a	 mov	 BYTE PTR $T5[rsp+6081], 26
  0bde1	c6 84 24 22 18
	00 00 1b	 mov	 BYTE PTR $T5[rsp+6082], 27
  0bde9	c6 84 24 23 18
	00 00 1c	 mov	 BYTE PTR $T5[rsp+6083], 28
  0bdf1	c6 84 24 24 18
	00 00 1d	 mov	 BYTE PTR $T5[rsp+6084], 29
  0bdf9	c6 84 24 25 18
	00 00 1e	 mov	 BYTE PTR $T5[rsp+6085], 30
  0be01	c6 84 24 26 18
	00 00 1f	 mov	 BYTE PTR $T5[rsp+6086], 31
  0be09	c6 84 24 27 18
	00 00 10	 mov	 BYTE PTR $T5[rsp+6087], 16
  0be11	c6 84 24 28 18
	00 00 11	 mov	 BYTE PTR $T5[rsp+6088], 17
  0be19	c6 84 24 29 18
	00 00 12	 mov	 BYTE PTR $T5[rsp+6089], 18
  0be21	c6 84 24 2a 18
	00 00 13	 mov	 BYTE PTR $T5[rsp+6090], 19
  0be29	c6 84 24 2b 18
	00 00 14	 mov	 BYTE PTR $T5[rsp+6091], 20
  0be31	c6 84 24 2c 18
	00 00 6d	 mov	 BYTE PTR $T5[rsp+6092], 109 ; 0000006dH
  0be39	c6 84 24 2d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6093], 0
  0be41	c6 84 24 2e 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6094], 0
  0be49	c6 84 24 2f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6095], 0
  0be51	c6 84 24 30 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6096], 0
  0be59	c6 84 24 31 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6097], 0
  0be61	c6 84 24 32 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6098], 0
  0be69	c6 84 24 33 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6099], 0
  0be71	c6 84 24 34 18
	00 00 01	 mov	 BYTE PTR $T5[rsp+6100], 1
  0be79	c6 84 24 35 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6101], 0
  0be81	c6 84 24 36 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6102], 0
  0be89	c6 84 24 37 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6103], 0
  0be91	c6 84 24 38 18
	00 00 02	 mov	 BYTE PTR $T5[rsp+6104], 2
  0be99	c6 84 24 39 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6105], 0
  0bea1	c6 84 24 3a 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6106], 0
  0bea9	c6 84 24 3b 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6107], 0
  0beb1	c6 84 24 3c 18
	00 00 03	 mov	 BYTE PTR $T5[rsp+6108], 3
  0beb9	c6 84 24 3d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6109], 0
  0bec1	c6 84 24 3e 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6110], 0
  0bec9	c6 84 24 3f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6111], 0
  0bed1	c6 84 24 40 18
	00 00 38	 mov	 BYTE PTR $T5[rsp+6112], 56 ; 00000038H
  0bed9	c6 84 24 41 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6113], 0
  0bee1	c6 84 24 42 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6114], 0
  0bee9	c6 84 24 43 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6115], 0
  0bef1	c6 84 24 44 18
	00 00 38	 mov	 BYTE PTR $T5[rsp+6116], 56 ; 00000038H
  0bef9	c6 84 24 45 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6117], 0
  0bf01	c6 84 24 46 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6118], 0
  0bf09	c6 84 24 47 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6119], 0
  0bf11	c6 84 24 48 18
	00 00 38	 mov	 BYTE PTR $T5[rsp+6120], 56 ; 00000038H
  0bf19	c6 84 24 49 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6121], 0
  0bf21	c6 84 24 4a 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6122], 0
  0bf29	c6 84 24 4b 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6123], 0
  0bf31	c6 84 24 4c 18
	00 00 38	 mov	 BYTE PTR $T5[rsp+6124], 56 ; 00000038H
  0bf39	c6 84 24 4d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6125], 0
  0bf41	c6 84 24 4e 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6126], 0
  0bf49	c6 84 24 4f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6127], 0
  0bf51	c6 84 24 50 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6128], 255 ; 000000ffH
  0bf59	c6 84 24 51 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6129], 0
  0bf61	c6 84 24 52 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6130], 255 ; 000000ffH
  0bf69	c6 84 24 53 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6131], 0
  0bf71	c6 84 24 54 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6132], 255 ; 000000ffH
  0bf79	c6 84 24 55 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6133], 0
  0bf81	c6 84 24 56 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6134], 255 ; 000000ffH
  0bf89	c6 84 24 57 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6135], 0
  0bf91	c6 84 24 58 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6136], 255 ; 000000ffH
  0bf99	c6 84 24 59 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6137], 0
  0bfa1	c6 84 24 5a 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6138], 255 ; 000000ffH
  0bfa9	c6 84 24 5b 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6139], 0
  0bfb1	c6 84 24 5c 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6140], 255 ; 000000ffH
  0bfb9	c6 84 24 5d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6141], 0
  0bfc1	c6 84 24 5e 18
	00 00 ff	 mov	 BYTE PTR $T5[rsp+6142], 255 ; 000000ffH
  0bfc9	c6 84 24 5f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6143], 0
  0bfd1	c6 84 24 60 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6144], 57 ; 00000039H
  0bfd9	c6 84 24 61 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6145], 57 ; 00000039H
  0bfe1	c6 84 24 62 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6146], 57 ; 00000039H
  0bfe9	c6 84 24 63 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6147], 57 ; 00000039H
  0bff1	c6 84 24 64 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6148], 57 ; 00000039H
  0bff9	c6 84 24 65 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6149], 57 ; 00000039H
  0c001	c6 84 24 66 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6150], 57 ; 00000039H
  0c009	c6 84 24 67 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6151], 57 ; 00000039H
  0c011	c6 84 24 68 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6152], 57 ; 00000039H
  0c019	c6 84 24 69 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6153], 57 ; 00000039H
  0c021	c6 84 24 6a 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6154], 57 ; 00000039H
  0c029	c6 84 24 6b 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6155], 57 ; 00000039H
  0c031	c6 84 24 6c 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6156], 57 ; 00000039H
  0c039	c6 84 24 6d 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6157], 57 ; 00000039H
  0c041	c6 84 24 6e 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6158], 57 ; 00000039H
  0c049	c6 84 24 6f 18
	00 00 39	 mov	 BYTE PTR $T5[rsp+6159], 57 ; 00000039H
  0c051	c6 84 24 70 18
	00 00 93	 mov	 BYTE PTR $T5[rsp+6160], 147 ; 00000093H
  0c059	c6 84 24 71 18
	00 00 24	 mov	 BYTE PTR $T5[rsp+6161], 36 ; 00000024H
  0c061	c6 84 24 72 18
	00 00 49	 mov	 BYTE PTR $T5[rsp+6162], 73 ; 00000049H
  0c069	c6 84 24 73 18
	00 00 92	 mov	 BYTE PTR $T5[rsp+6163], 146 ; 00000092H
  0c071	c6 84 24 74 18
	00 00 93	 mov	 BYTE PTR $T5[rsp+6164], 147 ; 00000093H
  0c079	c6 84 24 75 18
	00 00 24	 mov	 BYTE PTR $T5[rsp+6165], 36 ; 00000024H
  0c081	c6 84 24 76 18
	00 00 49	 mov	 BYTE PTR $T5[rsp+6166], 73 ; 00000049H
  0c089	c6 84 24 77 18
	00 00 92	 mov	 BYTE PTR $T5[rsp+6167], 146 ; 00000092H
  0c091	c6 84 24 78 18
	00 00 93	 mov	 BYTE PTR $T5[rsp+6168], 147 ; 00000093H
  0c099	c6 84 24 79 18
	00 00 24	 mov	 BYTE PTR $T5[rsp+6169], 36 ; 00000024H
  0c0a1	c6 84 24 7a 18
	00 00 49	 mov	 BYTE PTR $T5[rsp+6170], 73 ; 00000049H
  0c0a9	c6 84 24 7b 18
	00 00 92	 mov	 BYTE PTR $T5[rsp+6171], 146 ; 00000092H
  0c0b1	c6 84 24 7c 18
	00 00 93	 mov	 BYTE PTR $T5[rsp+6172], 147 ; 00000093H
  0c0b9	c6 84 24 7d 18
	00 00 24	 mov	 BYTE PTR $T5[rsp+6173], 36 ; 00000024H
  0c0c1	c6 84 24 7e 18
	00 00 49	 mov	 BYTE PTR $T5[rsp+6174], 73 ; 00000049H
  0c0c9	c6 84 24 7f 18
	00 00 92	 mov	 BYTE PTR $T5[rsp+6175], 146 ; 00000092H
  0c0d1	c6 84 24 80 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6176], 0
  0c0d9	c6 84 24 81 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6177], 0
  0c0e1	c6 84 24 82 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6178], 0
  0c0e9	c6 84 24 83 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6179], 0
  0c0f1	c6 84 24 84 18
	00 00 4f	 mov	 BYTE PTR $T5[rsp+6180], 79 ; 0000004fH
  0c0f9	c6 84 24 85 18
	00 00 75	 mov	 BYTE PTR $T5[rsp+6181], 117 ; 00000075H
  0c101	c6 84 24 86 18
	00 00 cc	 mov	 BYTE PTR $T5[rsp+6182], 204 ; 000000ccH
  0c109	c6 84 24 87 18
	00 00 63	 mov	 BYTE PTR $T5[rsp+6183], 99 ; 00000063H
  0c111	c6 84 24 88 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6184], 0
  0c119	c6 84 24 89 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6185], 0
  0c121	c6 84 24 8a 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6186], 0
  0c129	c6 84 24 8b 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6187], 0
  0c131	c6 84 24 8c 18
	00 00 02	 mov	 BYTE PTR $T5[rsp+6188], 2
  0c139	c6 84 24 8d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6189], 0
  0c141	c6 84 24 8e 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6190], 0
  0c149	c6 84 24 8f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6191], 0
  0c151	c6 84 24 90 18
	00 00 73	 mov	 BYTE PTR $T5[rsp+6192], 115 ; 00000073H
  0c159	c6 84 24 91 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6193], 0
  0c161	c6 84 24 92 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6194], 0
  0c169	c6 84 24 93 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6195], 0
  0c171	c6 84 24 94 18
	00 00 98	 mov	 BYTE PTR $T5[rsp+6196], 152 ; 00000098H
  0c179	c6 84 24 95 18
	00 00 33	 mov	 BYTE PTR $T5[rsp+6197], 51 ; 00000033H
  0c181	c6 84 24 96 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6198], 0
  0c189	c6 84 24 97 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6199], 0
  0c191	c6 84 24 98 18
	00 00 98	 mov	 BYTE PTR $T5[rsp+6200], 152 ; 00000098H
  0c199	c6 84 24 99 18
	00 00 19	 mov	 BYTE PTR $T5[rsp+6201], 25
  0c1a1	c6 84 24 9a 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6202], 0
  0c1a9	c6 84 24 9b 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6203], 0
  0c1b1	c6 84 24 9c 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6204], 0
  0c1b9	c6 84 24 9d 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6205], 0
  0c1c1	c6 84 24 9e 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6206], 0
  0c1c9	c6 84 24 9f 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6207], 0
  0c1d1	c6 84 24 a0 18
	00 00 4f	 mov	 BYTE PTR $T5[rsp+6208], 79 ; 0000004fH
  0c1d9	c6 84 24 a1 18
	00 00 75	 mov	 BYTE PTR $T5[rsp+6209], 117 ; 00000075H
  0c1e1	c6 84 24 a2 18
	00 00 cc	 mov	 BYTE PTR $T5[rsp+6210], 204 ; 000000ccH
  0c1e9	c6 84 24 a3 18
	00 00 63	 mov	 BYTE PTR $T5[rsp+6211], 99 ; 00000063H
  0c1f1	c6 84 24 a4 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6212], 0
  0c1f9	c6 84 24 a5 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6213], 0
  0c201	c6 84 24 a6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6214], 0
  0c209	c6 84 24 a7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6215], 0
  0c211	c6 84 24 a8 18
	00 00 0c	 mov	 BYTE PTR $T5[rsp+6216], 12
  0c219	c6 84 24 a9 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6217], 0
  0c221	c6 84 24 aa 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6218], 0
  0c229	c6 84 24 ab 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6219], 0
  0c231	c6 84 24 ac 18
	00 00 14	 mov	 BYTE PTR $T5[rsp+6220], 20
  0c239	c6 84 24 ad 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6221], 0
  0c241	c6 84 24 ae 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6222], 0
  0c249	c6 84 24 af 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6223], 0
  0c251	c6 84 24 b0 18
	00 00 0c	 mov	 BYTE PTR $T5[rsp+6224], 12
  0c259	c6 84 24 b1 18
	00 00 34	 mov	 BYTE PTR $T5[rsp+6225], 52 ; 00000034H
  0c261	c6 84 24 b2 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6226], 0
  0c269	c6 84 24 b3 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6227], 0
  0c271	c6 84 24 b4 18
	00 00 0c	 mov	 BYTE PTR $T5[rsp+6228], 12
  0c279	c6 84 24 b5 18
	00 00 1a	 mov	 BYTE PTR $T5[rsp+6229], 26
  0c281	c6 84 24 b6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6230], 0
  0c289	c6 84 24 b7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6231], 0
  0c291	c6 84 24 b8 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6232], 0
  0c299	c6 84 24 b9 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6233], 0
  0c2a1	c6 84 24 ba 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6234], 0
  0c2a9	c6 84 24 bb 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6235], 0
  0c2b1	c6 84 24 bc 18
	00 00 4f	 mov	 BYTE PTR $T5[rsp+6236], 79 ; 0000004fH
  0c2b9	c6 84 24 bd 18
	00 00 75	 mov	 BYTE PTR $T5[rsp+6237], 117 ; 00000075H
  0c2c1	c6 84 24 be 18
	00 00 cc	 mov	 BYTE PTR $T5[rsp+6238], 204 ; 000000ccH
  0c2c9	c6 84 24 bf 18
	00 00 63	 mov	 BYTE PTR $T5[rsp+6239], 99 ; 00000063H
  0c2d1	c6 84 24 c0 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6240], 0
  0c2d9	c6 84 24 c1 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6241], 0
  0c2e1	c6 84 24 c2 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6242], 0
  0c2e9	c6 84 24 c3 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6243], 0
  0c2f1	c6 84 24 c4 18
	00 00 0d	 mov	 BYTE PTR $T5[rsp+6244], 13
  0c2f9	c6 84 24 c5 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6245], 0
  0c301	c6 84 24 c6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6246], 0
  0c309	c6 84 24 c7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6247], 0
  0c311	c6 84 24 c8 18
	00 00 3c	 mov	 BYTE PTR $T5[rsp+6248], 60 ; 0000003cH
  0c319	c6 84 24 c9 18
	00 00 01	 mov	 BYTE PTR $T5[rsp+6249], 1
  0c321	c6 84 24 ca 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6250], 0
  0c329	c6 84 24 cb 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6251], 0
  0c331	c6 84 24 cc 18
	00 00 20	 mov	 BYTE PTR $T5[rsp+6252], 32 ; 00000020H
  0c339	c6 84 24 cd 18
	00 00 34	 mov	 BYTE PTR $T5[rsp+6253], 52 ; 00000034H
  0c341	c6 84 24 ce 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6254], 0
  0c349	c6 84 24 cf 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6255], 0
  0c351	c6 84 24 d0 18
	00 00 20	 mov	 BYTE PTR $T5[rsp+6256], 32 ; 00000020H
  0c359	c6 84 24 d1 18
	00 00 1a	 mov	 BYTE PTR $T5[rsp+6257], 26
  0c361	c6 84 24 d2 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6258], 0
  0c369	c6 84 24 d3 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6259], 0
  0c371	c6 84 24 d4 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6260], 0
  0c379	c6 84 24 d5 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6261], 0
  0c381	c6 84 24 d6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6262], 0
  0c389	c6 84 24 d7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6263], 0
  0c391	c6 84 24 d8 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6264], 0
  0c399	c6 84 24 d9 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6265], 0
  0c3a1	c6 84 24 da 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6266], 0
  0c3a9	c6 84 24 db 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6267], 0
  0c3b1	c6 84 24 dc 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6268], 0
  0c3b9	c6 84 24 dd 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6269], 0
  0c3c1	c6 84 24 de 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6270], 0
  0c3c9	c6 84 24 df 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6271], 0
  0c3d1	c6 84 24 e0 18
	00 00 18	 mov	 BYTE PTR $T5[rsp+6272], 24
  0c3d9	c6 84 24 e1 18
	00 00 01	 mov	 BYTE PTR $T5[rsp+6273], 1
  0c3e1	c6 84 24 e2 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6274], 0
  0c3e9	c6 84 24 e3 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6275], 0
  0c3f1	c6 84 24 e4 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6276], 0
  0c3f9	c6 84 24 e5 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6277], 0
  0c401	c6 84 24 e6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6278], 0
  0c409	c6 84 24 e7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6279], 0
  0c411	c6 84 24 e8 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6280], 0
  0c419	c6 84 24 e9 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6281], 0
  0c421	c6 84 24 ea 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6282], 0
  0c429	c6 84 24 eb 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6283], 0
  0c431	c6 84 24 ec 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6284], 0
  0c439	c6 84 24 ed 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6285], 0
  0c441	c6 84 24 ee 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6286], 0
  0c449	c6 84 24 ef 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6287], 0
  0c451	c6 84 24 f0 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6288], 0
  0c459	c6 84 24 f1 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6289], 0
  0c461	c6 84 24 f2 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6290], 0
  0c469	c6 84 24 f3 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6291], 0
  0c471	c6 84 24 f4 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6292], 0
  0c479	c6 84 24 f5 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6293], 0
  0c481	c6 84 24 f6 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6294], 0
  0c489	c6 84 24 f7 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6295], 0
  0c491	c6 84 24 f8 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6296], 0
  0c499	c6 84 24 f9 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6297], 0
  0c4a1	c6 84 24 fa 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6298], 0
  0c4a9	c6 84 24 fb 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6299], 0
  0c4b1	c6 84 24 fc 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6300], 0
  0c4b9	c6 84 24 fd 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6301], 0
  0c4c1	c6 84 24 fe 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6302], 0
  0c4c9	c6 84 24 ff 18
	00 00 00	 mov	 BYTE PTR $T5[rsp+6303], 0
  0c4d1	c6 84 24 00 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6304], 0
  0c4d9	c6 84 24 01 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6305], 0
  0c4e1	c6 84 24 02 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6306], 0
  0c4e9	c6 84 24 03 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6307], 0
  0c4f1	c6 84 24 04 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6308], 0
  0c4f9	c6 84 24 05 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6309], 0
  0c501	c6 84 24 06 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6310], 0
  0c509	c6 84 24 07 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6311], 0
  0c511	c6 84 24 08 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6312], 0
  0c519	c6 84 24 09 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6313], 0
  0c521	c6 84 24 0a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6314], 0
  0c529	c6 84 24 0b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6315], 0
  0c531	c6 84 24 0c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6316], 0
  0c539	c6 84 24 0d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6317], 0
  0c541	c6 84 24 0e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6318], 0
  0c549	c6 84 24 0f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6319], 0
  0c551	c6 84 24 10 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6320], 0
  0c559	c6 84 24 11 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6321], 0
  0c561	c6 84 24 12 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6322], 0
  0c569	c6 84 24 13 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6323], 0
  0c571	c6 84 24 14 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6324], 0
  0c579	c6 84 24 15 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6325], 0
  0c581	c6 84 24 16 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6326], 0
  0c589	c6 84 24 17 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6327], 0
  0c591	c6 84 24 18 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6328], 0
  0c599	c6 84 24 19 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6329], 0
  0c5a1	c6 84 24 1a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6330], 0
  0c5a9	c6 84 24 1b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6331], 0
  0c5b1	c6 84 24 1c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6332], 0
  0c5b9	c6 84 24 1d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6333], 0
  0c5c1	c6 84 24 1e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6334], 0
  0c5c9	c6 84 24 1f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6335], 0
  0c5d1	c6 84 24 20 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6336], 0
  0c5d9	c6 84 24 21 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6337], 0
  0c5e1	c6 84 24 22 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6338], 0
  0c5e9	c6 84 24 23 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6339], 0
  0c5f1	c6 84 24 24 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6340], 0
  0c5f9	c6 84 24 25 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6341], 0
  0c601	c6 84 24 26 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6342], 0
  0c609	c6 84 24 27 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6343], 0
  0c611	c6 84 24 28 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6344], 0
  0c619	c6 84 24 29 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6345], 0
  0c621	c6 84 24 2a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6346], 0
  0c629	c6 84 24 2b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6347], 0
  0c631	c6 84 24 2c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6348], 0
  0c639	c6 84 24 2d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6349], 0
  0c641	c6 84 24 2e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6350], 0
  0c649	c6 84 24 2f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6351], 0
  0c651	c6 84 24 30 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6352], 0
  0c659	c6 84 24 31 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6353], 0
  0c661	c6 84 24 32 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6354], 0
  0c669	c6 84 24 33 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6355], 0
  0c671	c6 84 24 34 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6356], 0
  0c679	c6 84 24 35 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6357], 0
  0c681	c6 84 24 36 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6358], 0
  0c689	c6 84 24 37 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6359], 0
  0c691	c6 84 24 38 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6360], 0
  0c699	c6 84 24 39 19
	00 00 40	 mov	 BYTE PTR $T5[rsp+6361], 64 ; 00000040H
  0c6a1	c6 84 24 3a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6362], 0
  0c6a9	c6 84 24 3b 19
	00 00 40	 mov	 BYTE PTR $T5[rsp+6363], 64 ; 00000040H
  0c6b1	c6 84 24 3c 19
	00 00 01	 mov	 BYTE PTR $T5[rsp+6364], 1
  0c6b9	c6 84 24 3d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6365], 0
  0c6c1	c6 84 24 3e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6366], 0
  0c6c9	c6 84 24 3f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6367], 0
  0c6d1	c6 84 24 40 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6368], 0
  0c6d9	c6 84 24 41 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6369], 0
  0c6e1	c6 84 24 42 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6370], 0
  0c6e9	c6 84 24 43 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6371], 0
  0c6f1	c6 84 24 44 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6372], 0
  0c6f9	c6 84 24 45 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6373], 0
  0c701	c6 84 24 46 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6374], 0
  0c709	c6 84 24 47 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6375], 0
  0c711	c6 84 24 48 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6376], 0
  0c719	c6 84 24 49 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6377], 0
  0c721	c6 84 24 4a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6378], 0
  0c729	c6 84 24 4b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6379], 0
  0c731	c6 84 24 4c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6380], 0
  0c739	c6 84 24 4d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6381], 0
  0c741	c6 84 24 4e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6382], 0
  0c749	c6 84 24 4f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6383], 0
  0c751	c6 84 24 50 19
	00 00 b0	 mov	 BYTE PTR $T5[rsp+6384], 176 ; 000000b0H
  0c759	c6 84 24 51 19
	00 00 30	 mov	 BYTE PTR $T5[rsp+6385], 48 ; 00000030H
  0c761	c6 84 24 52 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6386], 0
  0c769	c6 84 24 53 19
	00 00 40	 mov	 BYTE PTR $T5[rsp+6387], 64 ; 00000040H
  0c771	c6 84 24 54 19
	00 00 01	 mov	 BYTE PTR $T5[rsp+6388], 1
  0c779	c6 84 24 55 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6389], 0
  0c781	c6 84 24 56 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6390], 0
  0c789	c6 84 24 57 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6391], 0
  0c791	c6 84 24 58 19
	00 00 b8	 mov	 BYTE PTR $T5[rsp+6392], 184 ; 000000b8H
  0c799	c6 84 24 59 19
	00 00 30	 mov	 BYTE PTR $T5[rsp+6393], 48 ; 00000030H
  0c7a1	c6 84 24 5a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6394], 0
  0c7a9	c6 84 24 5b 19
	00 00 40	 mov	 BYTE PTR $T5[rsp+6395], 64 ; 00000040H
  0c7b1	c6 84 24 5c 19
	00 00 01	 mov	 BYTE PTR $T5[rsp+6396], 1
  0c7b9	c6 84 24 5d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6397], 0
  0c7c1	c6 84 24 5e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6398], 0
  0c7c9	c6 84 24 5f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6399], 0
  0c7d1	c6 84 24 60 19
	00 00 c0	 mov	 BYTE PTR $T5[rsp+6400], 192 ; 000000c0H
  0c7d9	c6 84 24 61 19
	00 00 30	 mov	 BYTE PTR $T5[rsp+6401], 48 ; 00000030H
  0c7e1	c6 84 24 62 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6402], 0
  0c7e9	c6 84 24 63 19
	00 00 40	 mov	 BYTE PTR $T5[rsp+6403], 64 ; 00000040H
  0c7f1	c6 84 24 64 19
	00 00 01	 mov	 BYTE PTR $T5[rsp+6404], 1
  0c7f9	c6 84 24 65 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6405], 0
  0c801	c6 84 24 66 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6406], 0
  0c809	c6 84 24 67 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6407], 0
  0c811	c6 84 24 68 19
	00 00 03	 mov	 BYTE PTR $T5[rsp+6408], 3
  0c819	c6 84 24 69 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6409], 0
  0c821	c6 84 24 6a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6410], 0
  0c829	c6 84 24 6b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6411], 0
  0c831	c6 84 24 6c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6412], 0
  0c839	c6 84 24 6d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6413], 0
  0c841	c6 84 24 6e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6414], 0
  0c849	c6 84 24 6f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6415], 0
  0c851	c6 84 24 70 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6416], 0
  0c859	c6 84 24 71 19
	00 00 45	 mov	 BYTE PTR $T5[rsp+6417], 69 ; 00000045H
  0c861	c6 84 24 72 19
	00 00 01	 mov	 BYTE PTR $T5[rsp+6418], 1
  0c869	c6 84 24 73 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6419], 0
  0c871	c6 84 24 74 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6420], 0
  0c879	c6 84 24 75 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6421], 0
  0c881	c6 84 24 76 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6422], 0
  0c889	c6 84 24 77 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6423], 0
  0c891	c6 84 24 78 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6424], 0
  0c899	c6 84 24 79 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6425], 0
  0c8a1	c6 84 24 7a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6426], 0
  0c8a9	c6 84 24 7b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6427], 0
  0c8b1	c6 84 24 7c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6428], 0
  0c8b9	c6 84 24 7d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6429], 0
  0c8c1	c6 84 24 7e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6430], 0
  0c8c9	c6 84 24 7f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6431], 0
  0c8d1	c6 84 24 80 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6432], 0
  0c8d9	c6 84 24 81 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6433], 0
  0c8e1	c6 84 24 82 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6434], 0
  0c8e9	c6 84 24 83 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6435], 0
  0c8f1	c6 84 24 84 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6436], 0
  0c8f9	c6 84 24 85 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6437], 0
  0c901	c6 84 24 86 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6438], 0
  0c909	c6 84 24 87 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6439], 0
  0c911	c6 84 24 88 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6440], 0
  0c919	c6 84 24 89 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6441], 0
  0c921	c6 84 24 8a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6442], 0
  0c929	c6 84 24 8b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6443], 0
  0c931	c6 84 24 8c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6444], 0
  0c939	c6 84 24 8d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6445], 0
  0c941	c6 84 24 8e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6446], 0
  0c949	c6 84 24 8f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6447], 0
  0c951	c6 84 24 90 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6448], 0
  0c959	c6 84 24 91 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6449], 0
  0c961	c6 84 24 92 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6450], 0
  0c969	c6 84 24 93 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6451], 0
  0c971	c6 84 24 94 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6452], 0
  0c979	c6 84 24 95 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6453], 0
  0c981	c6 84 24 96 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6454], 0
  0c989	c6 84 24 97 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6455], 0
  0c991	c6 84 24 98 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6456], 0
  0c999	c6 84 24 99 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6457], 0
  0c9a1	c6 84 24 9a 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6458], 0
  0c9a9	c6 84 24 9b 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6459], 0
  0c9b1	c6 84 24 9c 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6460], 0
  0c9b9	c6 84 24 9d 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6461], 0
  0c9c1	c6 84 24 9e 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6462], 0
  0c9c9	c6 84 24 9f 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6463], 0
  0c9d1	c6 84 24 a0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6464], 0
  0c9d9	c6 84 24 a1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6465], 0
  0c9e1	c6 84 24 a2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6466], 0
  0c9e9	c6 84 24 a3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6467], 0
  0c9f1	c6 84 24 a4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6468], 0
  0c9f9	c6 84 24 a5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6469], 0
  0ca01	c6 84 24 a6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6470], 0
  0ca09	c6 84 24 a7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6471], 0
  0ca11	c6 84 24 a8 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6472], 0
  0ca19	c6 84 24 a9 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6473], 0
  0ca21	c6 84 24 aa 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6474], 0
  0ca29	c6 84 24 ab 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6475], 0
  0ca31	c6 84 24 ac 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6476], 0
  0ca39	c6 84 24 ad 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6477], 0
  0ca41	c6 84 24 ae 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6478], 0
  0ca49	c6 84 24 af 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6479], 0
  0ca51	c6 84 24 b0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6480], 0
  0ca59	c6 84 24 b1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6481], 0
  0ca61	c6 84 24 b2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6482], 0
  0ca69	c6 84 24 b3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6483], 0
  0ca71	c6 84 24 b4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6484], 0
  0ca79	c6 84 24 b5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6485], 0
  0ca81	c6 84 24 b6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6486], 0
  0ca89	c6 84 24 b7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6487], 0
  0ca91	c6 84 24 b8 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6488], 0
  0ca99	c6 84 24 b9 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6489], 0
  0caa1	c6 84 24 ba 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6490], 0
  0caa9	c6 84 24 bb 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6491], 0
  0cab1	c6 84 24 bc 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6492], 0
  0cab9	c6 84 24 bd 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6493], 0
  0cac1	c6 84 24 be 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6494], 0
  0cac9	c6 84 24 bf 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6495], 0
  0cad1	c6 84 24 c0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6496], 0
  0cad9	c6 84 24 c1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6497], 0
  0cae1	c6 84 24 c2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6498], 0
  0cae9	c6 84 24 c3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6499], 0
  0caf1	c6 84 24 c4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6500], 0
  0caf9	c6 84 24 c5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6501], 0
  0cb01	c6 84 24 c6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6502], 0
  0cb09	c6 84 24 c7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6503], 0
  0cb11	c6 84 24 c8 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6504], 0
  0cb19	c6 84 24 c9 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6505], 0
  0cb21	c6 84 24 ca 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6506], 0
  0cb29	c6 84 24 cb 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6507], 0
  0cb31	c6 84 24 cc 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6508], 0
  0cb39	c6 84 24 cd 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6509], 0
  0cb41	c6 84 24 ce 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6510], 0
  0cb49	c6 84 24 cf 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6511], 0
  0cb51	c6 84 24 d0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6512], 0
  0cb59	c6 84 24 d1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6513], 0
  0cb61	c6 84 24 d2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6514], 0
  0cb69	c6 84 24 d3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6515], 0
  0cb71	c6 84 24 d4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6516], 0
  0cb79	c6 84 24 d5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6517], 0
  0cb81	c6 84 24 d6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6518], 0
  0cb89	c6 84 24 d7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6519], 0
  0cb91	c6 84 24 d8 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6520], 0
  0cb99	c6 84 24 d9 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6521], 0
  0cba1	c6 84 24 da 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6522], 0
  0cba9	c6 84 24 db 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6523], 0
  0cbb1	c6 84 24 dc 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6524], 0
  0cbb9	c6 84 24 dd 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6525], 0
  0cbc1	c6 84 24 de 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6526], 0
  0cbc9	c6 84 24 df 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6527], 0
  0cbd1	c6 84 24 e0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6528], 0
  0cbd9	c6 84 24 e1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6529], 0
  0cbe1	c6 84 24 e2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6530], 0
  0cbe9	c6 84 24 e3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6531], 0
  0cbf1	c6 84 24 e4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6532], 0
  0cbf9	c6 84 24 e5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6533], 0
  0cc01	c6 84 24 e6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6534], 0
  0cc09	c6 84 24 e7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6535], 0
  0cc11	c6 84 24 e8 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6536], 0
  0cc19	c6 84 24 e9 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6537], 0
  0cc21	c6 84 24 ea 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6538], 0
  0cc29	c6 84 24 eb 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6539], 0
  0cc31	c6 84 24 ec 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6540], 0
  0cc39	c6 84 24 ed 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6541], 0
  0cc41	c6 84 24 ee 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6542], 0
  0cc49	c6 84 24 ef 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6543], 0
  0cc51	c6 84 24 f0 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6544], 0
  0cc59	c6 84 24 f1 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6545], 0
  0cc61	c6 84 24 f2 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6546], 0
  0cc69	c6 84 24 f3 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6547], 0
  0cc71	c6 84 24 f4 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6548], 0
  0cc79	c6 84 24 f5 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6549], 0
  0cc81	c6 84 24 f6 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6550], 0
  0cc89	c6 84 24 f7 19
	00 00 00	 mov	 BYTE PTR $T5[rsp+6551], 0
  0cc91	c6 84 24 f8 19
	00 00 52	 mov	 BYTE PTR $T5[rsp+6552], 82 ; 00000052H
  0cc99	c6 84 24 f9 19
	00 00 53	 mov	 BYTE PTR $T5[rsp+6553], 83 ; 00000053H
  0cca1	c6 84 24 fa 19
	00 00 44	 mov	 BYTE PTR $T5[rsp+6554], 68 ; 00000044H
  0cca9	c6 84 24 fb 19
	00 00 53	 mov	 BYTE PTR $T5[rsp+6555], 83 ; 00000053H
  0ccb1	c6 84 24 fc 19
	00 00 08	 mov	 BYTE PTR $T5[rsp+6556], 8
  0ccb9	c6 84 24 fd 19
	00 00 b4	 mov	 BYTE PTR $T5[rsp+6557], 180 ; 000000b4H
  0ccc1	c6 84 24 fe 19
	00 00 9c	 mov	 BYTE PTR $T5[rsp+6558], 156 ; 0000009cH
  0ccc9	c6 84 24 ff 19
	00 00 92	 mov	 BYTE PTR $T5[rsp+6559], 146 ; 00000092H
  0ccd1	c6 84 24 00 1a
	00 00 14	 mov	 BYTE PTR $T5[rsp+6560], 20
  0ccd9	c6 84 24 01 1a
	00 00 39	 mov	 BYTE PTR $T5[rsp+6561], 57 ; 00000039H
  0cce1	c6 84 24 02 1a
	00 00 13	 mov	 BYTE PTR $T5[rsp+6562], 19
  0cce9	c6 84 24 03 1a
	00 00 47	 mov	 BYTE PTR $T5[rsp+6563], 71 ; 00000047H
  0ccf1	c6 84 24 04 1a
	00 00 83	 mov	 BYTE PTR $T5[rsp+6564], 131 ; 00000083H
  0ccf9	c6 84 24 05 1a
	00 00 34	 mov	 BYTE PTR $T5[rsp+6565], 52 ; 00000034H
  0cd01	c6 84 24 06 1a
	00 00 46	 mov	 BYTE PTR $T5[rsp+6566], 70 ; 00000046H
  0cd09	c6 84 24 07 1a
	00 00 b5	 mov	 BYTE PTR $T5[rsp+6567], 181 ; 000000b5H
  0cd11	c6 84 24 08 1a
	00 00 5b	 mov	 BYTE PTR $T5[rsp+6568], 91 ; 0000005bH
  0cd19	c6 84 24 09 1a
	00 00 0d	 mov	 BYTE PTR $T5[rsp+6569], 13
  0cd21	c6 84 24 0a 1a
	00 00 c0	 mov	 BYTE PTR $T5[rsp+6570], 192 ; 000000c0H
  0cd29	c6 84 24 0b 1a
	00 00 da	 mov	 BYTE PTR $T5[rsp+6571], 218 ; 000000daH
  0cd31	c6 84 24 0c 1a
	00 00 04	 mov	 BYTE PTR $T5[rsp+6572], 4
  0cd39	c6 84 24 0d 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6573], 0
  0cd41	c6 84 24 0e 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6574], 0
  0cd49	c6 84 24 0f 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6575], 0
  0cd51	c6 84 24 10 1a
	00 00 43	 mov	 BYTE PTR $T5[rsp+6576], 67 ; 00000043H
  0cd59	c6 84 24 11 1a
	00 00 3a	 mov	 BYTE PTR $T5[rsp+6577], 58 ; 0000003aH
  0cd61	c6 84 24 12 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6578], 92 ; 0000005cH
  0cd69	c6 84 24 13 1a
	00 00 55	 mov	 BYTE PTR $T5[rsp+6579], 85 ; 00000055H
  0cd71	c6 84 24 14 1a
	00 00 73	 mov	 BYTE PTR $T5[rsp+6580], 115 ; 00000073H
  0cd79	c6 84 24 15 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6581], 101 ; 00000065H
  0cd81	c6 84 24 16 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6582], 114 ; 00000072H
  0cd89	c6 84 24 17 1a
	00 00 73	 mov	 BYTE PTR $T5[rsp+6583], 115 ; 00000073H
  0cd91	c6 84 24 18 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6584], 92 ; 0000005cH
  0cd99	c6 84 24 19 1a
	00 00 76	 mov	 BYTE PTR $T5[rsp+6585], 118 ; 00000076H
  0cda1	c6 84 24 1a 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6586], 105 ; 00000069H
  0cda9	c6 84 24 1b 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6587], 110 ; 0000006eH
  0cdb1	c6 84 24 1c 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6588], 110 ; 0000006eH
  0cdb9	c6 84 24 1d 1a
	00 00 79	 mov	 BYTE PTR $T5[rsp+6589], 121 ; 00000079H
  0cdc1	c6 84 24 1e 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6590], 92 ; 0000005cH
  0cdc9	c6 84 24 1f 1a
	00 00 44	 mov	 BYTE PTR $T5[rsp+6591], 68 ; 00000044H
  0cdd1	c6 84 24 20 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6592], 101 ; 00000065H
  0cdd9	c6 84 24 21 1a
	00 00 73	 mov	 BYTE PTR $T5[rsp+6593], 115 ; 00000073H
  0cde1	c6 84 24 22 1a
	00 00 6b	 mov	 BYTE PTR $T5[rsp+6594], 107 ; 0000006bH
  0cde9	c6 84 24 23 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6595], 116 ; 00000074H
  0cdf1	c6 84 24 24 1a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+6596], 111 ; 0000006fH
  0cdf9	c6 84 24 25 1a
	00 00 70	 mov	 BYTE PTR $T5[rsp+6597], 112 ; 00000070H
  0ce01	c6 84 24 26 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6598], 92 ; 0000005cH
  0ce09	c6 84 24 27 1a
	00 00 61	 mov	 BYTE PTR $T5[rsp+6599], 97 ; 00000061H
  0ce11	c6 84 24 28 1a
	00 00 70	 mov	 BYTE PTR $T5[rsp+6600], 112 ; 00000070H
  0ce19	c6 84 24 29 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6601], 101 ; 00000065H
  0ce21	c6 84 24 2a 1a
	00 00 78	 mov	 BYTE PTR $T5[rsp+6602], 120 ; 00000078H
  0ce29	c6 84 24 2b 1a
	00 00 20	 mov	 BYTE PTR $T5[rsp+6603], 32 ; 00000020H
  0ce31	c6 84 24 2c 1a
	00 00 66	 mov	 BYTE PTR $T5[rsp+6604], 102 ; 00000066H
  0ce39	c6 84 24 2d 1a
	00 00 75	 mov	 BYTE PTR $T5[rsp+6605], 117 ; 00000075H
  0ce41	c6 84 24 2e 1a
	00 00 6c	 mov	 BYTE PTR $T5[rsp+6606], 108 ; 0000006cH
  0ce49	c6 84 24 2f 1a
	00 00 6c	 mov	 BYTE PTR $T5[rsp+6607], 108 ; 0000006cH
  0ce51	c6 84 24 30 1a
	00 00 20	 mov	 BYTE PTR $T5[rsp+6608], 32 ; 00000020H
  0ce59	c6 84 24 31 1a
	00 00 66	 mov	 BYTE PTR $T5[rsp+6609], 102 ; 00000066H
  0ce61	c6 84 24 32 1a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+6610], 111 ; 0000006fH
  0ce69	c6 84 24 33 1a
	00 00 6c	 mov	 BYTE PTR $T5[rsp+6611], 108 ; 0000006cH
  0ce71	c6 84 24 34 1a
	00 00 64	 mov	 BYTE PTR $T5[rsp+6612], 100 ; 00000064H
  0ce79	c6 84 24 35 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6613], 101 ; 00000065H
  0ce81	c6 84 24 36 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6614], 114 ; 00000072H
  0ce89	c6 84 24 37 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6615], 92 ; 0000005cH
  0ce91	c6 84 24 38 1a
	00 00 64	 mov	 BYTE PTR $T5[rsp+6616], 100 ; 00000064H
  0ce99	c6 84 24 39 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6617], 114 ; 00000072H
  0cea1	c6 84 24 3a 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6618], 105 ; 00000069H
  0cea9	c6 84 24 3b 1a
	00 00 76	 mov	 BYTE PTR $T5[rsp+6619], 118 ; 00000076H
  0ceb1	c6 84 24 3c 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6620], 101 ; 00000065H
  0ceb9	c6 84 24 3d 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6621], 114 ; 00000072H
  0cec1	c6 84 24 3e 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6622], 92 ; 0000005cH
  0cec9	c6 84 24 3f 1a
	00 00 44	 mov	 BYTE PTR $T5[rsp+6623], 68 ; 00000044H
  0ced1	c6 84 24 40 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6624], 114 ; 00000072H
  0ced9	c6 84 24 41 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6625], 105 ; 00000069H
  0cee1	c6 84 24 42 1a
	00 00 76	 mov	 BYTE PTR $T5[rsp+6626], 118 ; 00000076H
  0cee9	c6 84 24 43 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6627], 101 ; 00000065H
  0cef1	c6 84 24 44 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6628], 114 ; 00000072H
  0cef9	c6 84 24 45 1a
	00 00 5f	 mov	 BYTE PTR $T5[rsp+6629], 95 ; 0000005fH
  0cf01	c6 84 24 46 1a
	00 00 53	 mov	 BYTE PTR $T5[rsp+6630], 83 ; 00000053H
  0cf09	c6 84 24 47 1a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+6631], 111 ; 0000006fH
  0cf11	c6 84 24 48 1a
	00 00 75	 mov	 BYTE PTR $T5[rsp+6632], 117 ; 00000075H
  0cf19	c6 84 24 49 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6633], 114 ; 00000072H
  0cf21	c6 84 24 4a 1a
	00 00 63	 mov	 BYTE PTR $T5[rsp+6634], 99 ; 00000063H
  0cf29	c6 84 24 4b 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6635], 101 ; 00000065H
  0cf31	c6 84 24 4c 1a
	00 00 33	 mov	 BYTE PTR $T5[rsp+6636], 51 ; 00000033H
  0cf39	c6 84 24 4d 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6637], 92 ; 0000005cH
  0cf41	c6 84 24 4e 1a
	00 00 44	 mov	 BYTE PTR $T5[rsp+6638], 68 ; 00000044H
  0cf49	c6 84 24 4f 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6639], 114 ; 00000072H
  0cf51	c6 84 24 50 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6640], 105 ; 00000069H
  0cf59	c6 84 24 51 1a
	00 00 76	 mov	 BYTE PTR $T5[rsp+6641], 118 ; 00000076H
  0cf61	c6 84 24 52 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6642], 101 ; 00000065H
  0cf69	c6 84 24 53 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6643], 114 ; 00000072H
  0cf71	c6 84 24 54 1a
	00 00 20	 mov	 BYTE PTR $T5[rsp+6644], 32 ; 00000020H
  0cf79	c6 84 24 55 1a
	00 00 53	 mov	 BYTE PTR $T5[rsp+6645], 83 ; 00000053H
  0cf81	c6 84 24 56 1a
	00 00 6f	 mov	 BYTE PTR $T5[rsp+6646], 111 ; 0000006fH
  0cf89	c6 84 24 57 1a
	00 00 75	 mov	 BYTE PTR $T5[rsp+6647], 117 ; 00000075H
  0cf91	c6 84 24 58 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6648], 114 ; 00000072H
  0cf99	c6 84 24 59 1a
	00 00 63	 mov	 BYTE PTR $T5[rsp+6649], 99 ; 00000063H
  0cfa1	c6 84 24 5a 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6650], 101 ; 00000065H
  0cfa9	c6 84 24 5b 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6651], 92 ; 0000005cH
  0cfb1	c6 84 24 5c 1a
	00 00 62	 mov	 BYTE PTR $T5[rsp+6652], 98 ; 00000062H
  0cfb9	c6 84 24 5d 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6653], 105 ; 00000069H
  0cfc1	c6 84 24 5e 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6654], 110 ; 0000006eH
  0cfc9	c6 84 24 5f 1a
	00 00 5c	 mov	 BYTE PTR $T5[rsp+6655], 92 ; 0000005cH
  0cfd1	c6 84 24 60 1a
	00 00 64	 mov	 BYTE PTR $T5[rsp+6656], 100 ; 00000064H
  0cfd9	c6 84 24 61 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6657], 114 ; 00000072H
  0cfe1	c6 84 24 62 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6658], 105 ; 00000069H
  0cfe9	c6 84 24 63 1a
	00 00 76	 mov	 BYTE PTR $T5[rsp+6659], 118 ; 00000076H
  0cff1	c6 84 24 64 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6660], 101 ; 00000065H
  0cff9	c6 84 24 65 1a
	00 00 72	 mov	 BYTE PTR $T5[rsp+6661], 114 ; 00000072H
  0d001	c6 84 24 66 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6662], 46 ; 0000002eH
  0d009	c6 84 24 67 1a
	00 00 70	 mov	 BYTE PTR $T5[rsp+6663], 112 ; 00000070H
  0d011	c6 84 24 68 1a
	00 00 64	 mov	 BYTE PTR $T5[rsp+6664], 100 ; 00000064H
  0d019	c6 84 24 69 1a
	00 00 62	 mov	 BYTE PTR $T5[rsp+6665], 98 ; 00000062H
  0d021	c6 84 24 6a 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6666], 0
  0d029	c6 84 24 6b 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6667], 0
  0d031	c6 84 24 6c 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6668], 0
  0d039	c6 84 24 6d 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6669], 0
  0d041	c6 84 24 6e 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6670], 0
  0d049	c6 84 24 6f 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6671], 0
  0d051	c6 84 24 70 1a
	00 00 08	 mov	 BYTE PTR $T5[rsp+6672], 8
  0d059	c6 84 24 71 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6673], 0
  0d061	c6 84 24 72 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6674], 0
  0d069	c6 84 24 73 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6675], 0
  0d071	c6 84 24 74 1a
	00 00 03	 mov	 BYTE PTR $T5[rsp+6676], 3
  0d079	c6 84 24 75 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6677], 0
  0d081	c6 84 24 76 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6678], 0
  0d089	c6 84 24 77 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6679], 0
  0d091	c6 84 24 78 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6680], 0
  0d099	c6 84 24 79 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6681], 0
  0d0a1	c6 84 24 7a 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6682], 0
  0d0a9	c6 84 24 7b 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6683], 0
  0d0b1	c6 84 24 7c 1a
	00 00 08	 mov	 BYTE PTR $T5[rsp+6684], 8
  0d0b9	c6 84 24 7d 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6685], 0
  0d0c1	c6 84 24 7e 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6686], 0
  0d0c9	c6 84 24 7f 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6687], 0
  0d0d1	c6 84 24 80 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6688], 0
  0d0d9	c6 84 24 81 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6689], 0
  0d0e1	c6 84 24 82 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6690], 0
  0d0e9	c6 84 24 83 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6691], 0
  0d0f1	c6 84 24 84 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6692], 0
  0d0f9	c6 84 24 85 1a
	00 00 10	 mov	 BYTE PTR $T5[rsp+6693], 16
  0d101	c6 84 24 86 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6694], 0
  0d109	c6 84 24 87 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6695], 0
  0d111	c6 84 24 88 1a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+6696], 208 ; 000000d0H
  0d119	c6 84 24 89 1a
	00 00 0f	 mov	 BYTE PTR $T5[rsp+6697], 15
  0d121	c6 84 24 8a 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6698], 0
  0d129	c6 84 24 8b 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6699], 0
  0d131	c6 84 24 8c 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6700], 46 ; 0000002eH
  0d139	c6 84 24 8d 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6701], 116 ; 00000074H
  0d141	c6 84 24 8e 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6702], 101 ; 00000065H
  0d149	c6 84 24 8f 1a
	00 00 78	 mov	 BYTE PTR $T5[rsp+6703], 120 ; 00000078H
  0d151	c6 84 24 90 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6704], 116 ; 00000074H
  0d159	c6 84 24 91 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6705], 36 ; 00000024H
  0d161	c6 84 24 92 1a
	00 00 6d	 mov	 BYTE PTR $T5[rsp+6706], 109 ; 0000006dH
  0d169	c6 84 24 93 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6707], 110 ; 0000006eH
  0d171	c6 84 24 94 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6708], 0
  0d179	c6 84 24 95 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6709], 0
  0d181	c6 84 24 96 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6710], 0
  0d189	c6 84 24 97 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6711], 0
  0d191	c6 84 24 98 1a
	00 00 d0	 mov	 BYTE PTR $T5[rsp+6712], 208 ; 000000d0H
  0d199	c6 84 24 99 1a
	00 00 1f	 mov	 BYTE PTR $T5[rsp+6713], 31
  0d1a1	c6 84 24 9a 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6714], 0
  0d1a9	c6 84 24 9b 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6715], 0
  0d1b1	c6 84 24 9c 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6716], 48 ; 00000030H
  0d1b9	c6 84 24 9d 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6717], 0
  0d1c1	c6 84 24 9e 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6718], 0
  0d1c9	c6 84 24 9f 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6719], 0
  0d1d1	c6 84 24 a0 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6720], 46 ; 0000002eH
  0d1d9	c6 84 24 a1 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6721], 116 ; 00000074H
  0d1e1	c6 84 24 a2 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6722], 101 ; 00000065H
  0d1e9	c6 84 24 a3 1a
	00 00 78	 mov	 BYTE PTR $T5[rsp+6723], 120 ; 00000078H
  0d1f1	c6 84 24 a4 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6724], 116 ; 00000074H
  0d1f9	c6 84 24 a5 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6725], 36 ; 00000024H
  0d201	c6 84 24 a6 1a
	00 00 6d	 mov	 BYTE PTR $T5[rsp+6726], 109 ; 0000006dH
  0d209	c6 84 24 a7 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6727], 110 ; 0000006eH
  0d211	c6 84 24 a8 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6728], 36 ; 00000024H
  0d219	c6 84 24 a9 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6729], 48 ; 00000030H
  0d221	c6 84 24 aa 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6730], 48 ; 00000030H
  0d229	c6 84 24 ab 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6731], 0
  0d231	c6 84 24 ac 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6732], 0
  0d239	c6 84 24 ad 1a
	00 00 20	 mov	 BYTE PTR $T5[rsp+6733], 32 ; 00000020H
  0d241	c6 84 24 ae 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6734], 0
  0d249	c6 84 24 af 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6735], 0
  0d251	c6 84 24 b0 1a
	00 00 f0	 mov	 BYTE PTR $T5[rsp+6736], 240 ; 000000f0H
  0d259	c6 84 24 b1 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6737], 0
  0d261	c6 84 24 b2 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6738], 0
  0d269	c6 84 24 b3 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6739], 0
  0d271	c6 84 24 b4 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6740], 46 ; 0000002eH
  0d279	c6 84 24 b5 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6741], 116 ; 00000074H
  0d281	c6 84 24 b6 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6742], 101 ; 00000065H
  0d289	c6 84 24 b7 1a
	00 00 78	 mov	 BYTE PTR $T5[rsp+6743], 120 ; 00000078H
  0d291	c6 84 24 b8 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6744], 116 ; 00000074H
  0d299	c6 84 24 b9 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6745], 36 ; 00000024H
  0d2a1	c6 84 24 ba 1a
	00 00 6d	 mov	 BYTE PTR $T5[rsp+6746], 109 ; 0000006dH
  0d2a9	c6 84 24 bb 1a
	00 00 6e	 mov	 BYTE PTR $T5[rsp+6747], 110 ; 0000006eH
  0d2b1	c6 84 24 bc 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6748], 36 ; 00000024H
  0d2b9	c6 84 24 bd 1a
	00 00 32	 mov	 BYTE PTR $T5[rsp+6749], 50 ; 00000032H
  0d2c1	c6 84 24 be 1a
	00 00 31	 mov	 BYTE PTR $T5[rsp+6750], 49 ; 00000031H
  0d2c9	c6 84 24 bf 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6751], 0
  0d2d1	c6 84 24 c0 1a
	00 00 f0	 mov	 BYTE PTR $T5[rsp+6752], 240 ; 000000f0H
  0d2d9	c6 84 24 c1 1a
	00 00 20	 mov	 BYTE PTR $T5[rsp+6753], 32 ; 00000020H
  0d2e1	c6 84 24 c2 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6754], 0
  0d2e9	c6 84 24 c3 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6755], 0
  0d2f1	c6 84 24 c4 1a
	00 00 bd	 mov	 BYTE PTR $T5[rsp+6756], 189 ; 000000bdH
  0d2f9	c6 84 24 c5 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6757], 0
  0d301	c6 84 24 c6 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6758], 0
  0d309	c6 84 24 c7 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6759], 0
  0d311	c6 84 24 c8 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6760], 46 ; 0000002eH
  0d319	c6 84 24 c9 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6761], 116 ; 00000074H
  0d321	c6 84 24 ca 1a
	00 00 65	 mov	 BYTE PTR $T5[rsp+6762], 101 ; 00000065H
  0d329	c6 84 24 cb 1a
	00 00 78	 mov	 BYTE PTR $T5[rsp+6763], 120 ; 00000078H
  0d331	c6 84 24 cc 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6764], 116 ; 00000074H
  0d339	c6 84 24 cd 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6765], 36 ; 00000024H
  0d341	c6 84 24 ce 1a
	00 00 73	 mov	 BYTE PTR $T5[rsp+6766], 115 ; 00000073H
  0d349	c6 84 24 cf 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6767], 0
  0d351	c6 84 24 d0 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6768], 0
  0d359	c6 84 24 d1 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6769], 48 ; 00000030H
  0d361	c6 84 24 d2 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6770], 0
  0d369	c6 84 24 d3 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6771], 0
  0d371	c6 84 24 d4 1a
	00 00 b0	 mov	 BYTE PTR $T5[rsp+6772], 176 ; 000000b0H
  0d379	c6 84 24 d5 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6773], 0
  0d381	c6 84 24 d6 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6774], 0
  0d389	c6 84 24 d7 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6775], 0
  0d391	c6 84 24 d8 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6776], 46 ; 0000002eH
  0d399	c6 84 24 d9 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6777], 105 ; 00000069H
  0d3a1	c6 84 24 da 1a
	00 00 64	 mov	 BYTE PTR $T5[rsp+6778], 100 ; 00000064H
  0d3a9	c6 84 24 db 1a
	00 00 61	 mov	 BYTE PTR $T5[rsp+6779], 97 ; 00000061H
  0d3b1	c6 84 24 dc 1a
	00 00 74	 mov	 BYTE PTR $T5[rsp+6780], 116 ; 00000074H
  0d3b9	c6 84 24 dd 1a
	00 00 61	 mov	 BYTE PTR $T5[rsp+6781], 97 ; 00000061H
  0d3c1	c6 84 24 de 1a
	00 00 24	 mov	 BYTE PTR $T5[rsp+6782], 36 ; 00000024H
  0d3c9	c6 84 24 df 1a
	00 00 35	 mov	 BYTE PTR $T5[rsp+6783], 53 ; 00000035H
  0d3d1	c6 84 24 e0 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6784], 0
  0d3d9	c6 84 24 e1 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6785], 0
  0d3e1	c6 84 24 e2 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6786], 0
  0d3e9	c6 84 24 e3 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6787], 0
  0d3f1	c6 84 24 e4 1a
	00 00 b0	 mov	 BYTE PTR $T5[rsp+6788], 176 ; 000000b0H
  0d3f9	c6 84 24 e5 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6789], 48 ; 00000030H
  0d401	c6 84 24 e6 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6790], 0
  0d409	c6 84 24 e7 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6791], 0
  0d411	c6 84 24 e8 1a
	00 00 10	 mov	 BYTE PTR $T5[rsp+6792], 16
  0d419	c6 84 24 e9 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6793], 0
  0d421	c6 84 24 ea 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6794], 0
  0d429	c6 84 24 eb 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6795], 0
  0d431	c6 84 24 ec 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6796], 46 ; 0000002eH
  0d439	c6 84 24 ed 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6797], 48 ; 00000030H
  0d441	c6 84 24 ee 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6798], 48 ; 00000030H
  0d449	c6 84 24 ef 1a
	00 00 63	 mov	 BYTE PTR $T5[rsp+6799], 99 ; 00000063H
  0d451	c6 84 24 f0 1a
	00 00 66	 mov	 BYTE PTR $T5[rsp+6800], 102 ; 00000066H
  0d459	c6 84 24 f1 1a
	00 00 67	 mov	 BYTE PTR $T5[rsp+6801], 103 ; 00000067H
  0d461	c6 84 24 f2 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6802], 0
  0d469	c6 84 24 f3 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6803], 0
  0d471	c6 84 24 f4 1a
	00 00 c0	 mov	 BYTE PTR $T5[rsp+6804], 192 ; 000000c0H
  0d479	c6 84 24 f5 1a
	00 00 30	 mov	 BYTE PTR $T5[rsp+6805], 48 ; 00000030H
  0d481	c6 84 24 f6 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6806], 0
  0d489	c6 84 24 f7 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6807], 0
  0d491	c6 84 24 f8 1a
	00 00 10	 mov	 BYTE PTR $T5[rsp+6808], 16
  0d499	c6 84 24 f9 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6809], 0
  0d4a1	c6 84 24 fa 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6810], 0
  0d4a9	c6 84 24 fb 1a
	00 00 00	 mov	 BYTE PTR $T5[rsp+6811], 0
  0d4b1	c6 84 24 fc 1a
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6812], 46 ; 0000002eH
  0d4b9	c6 84 24 fd 1a
	00 00 67	 mov	 BYTE PTR $T5[rsp+6813], 103 ; 00000067H
  0d4c1	c6 84 24 fe 1a
	00 00 66	 mov	 BYTE PTR $T5[rsp+6814], 102 ; 00000066H
  0d4c9	c6 84 24 ff 1a
	00 00 69	 mov	 BYTE PTR $T5[rsp+6815], 105 ; 00000069H
  0d4d1	c6 84 24 00 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6816], 100 ; 00000064H
  0d4d9	c6 84 24 01 1b
	00 00 73	 mov	 BYTE PTR $T5[rsp+6817], 115 ; 00000073H
  0d4e1	c6 84 24 02 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6818], 0
  0d4e9	c6 84 24 03 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6819], 0
  0d4f1	c6 84 24 04 1b
	00 00 d0	 mov	 BYTE PTR $T5[rsp+6820], 208 ; 000000d0H
  0d4f9	c6 84 24 05 1b
	00 00 30	 mov	 BYTE PTR $T5[rsp+6821], 48 ; 00000030H
  0d501	c6 84 24 06 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6822], 0
  0d509	c6 84 24 07 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6823], 0
  0d511	c6 84 24 08 1b
	00 00 c8	 mov	 BYTE PTR $T5[rsp+6824], 200 ; 000000c8H
  0d519	c6 84 24 09 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+6825], 2
  0d521	c6 84 24 0a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6826], 0
  0d529	c6 84 24 0b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6827], 0
  0d531	c6 84 24 0c 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6828], 46 ; 0000002eH
  0d539	c6 84 24 0d 1b
	00 00 72	 mov	 BYTE PTR $T5[rsp+6829], 114 ; 00000072H
  0d541	c6 84 24 0e 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6830], 100 ; 00000064H
  0d549	c6 84 24 0f 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6831], 97 ; 00000061H
  0d551	c6 84 24 10 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6832], 116 ; 00000074H
  0d559	c6 84 24 11 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6833], 97 ; 00000061H
  0d561	c6 84 24 12 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6834], 0
  0d569	c6 84 24 13 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6835], 0
  0d571	c6 84 24 14 1b
	00 00 98	 mov	 BYTE PTR $T5[rsp+6836], 152 ; 00000098H
  0d579	c6 84 24 15 1b
	00 00 33	 mov	 BYTE PTR $T5[rsp+6837], 51 ; 00000033H
  0d581	c6 84 24 16 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6838], 0
  0d589	c6 84 24 17 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6839], 0
  0d591	c6 84 24 18 1b
	00 00 c8	 mov	 BYTE PTR $T5[rsp+6840], 200 ; 000000c8H
  0d599	c6 84 24 19 1b
	00 00 01	 mov	 BYTE PTR $T5[rsp+6841], 1
  0d5a1	c6 84 24 1a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6842], 0
  0d5a9	c6 84 24 1b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6843], 0
  0d5b1	c6 84 24 1c 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6844], 46 ; 0000002eH
  0d5b9	c6 84 24 1d 1b
	00 00 72	 mov	 BYTE PTR $T5[rsp+6845], 114 ; 00000072H
  0d5c1	c6 84 24 1e 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6846], 100 ; 00000064H
  0d5c9	c6 84 24 1f 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6847], 97 ; 00000061H
  0d5d1	c6 84 24 20 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6848], 116 ; 00000074H
  0d5d9	c6 84 24 21 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6849], 97 ; 00000061H
  0d5e1	c6 84 24 22 1b
	00 00 24	 mov	 BYTE PTR $T5[rsp+6850], 36 ; 00000024H
  0d5e9	c6 84 24 23 1b
	00 00 7a	 mov	 BYTE PTR $T5[rsp+6851], 122 ; 0000007aH
  0d5f1	c6 84 24 24 1b
	00 00 7a	 mov	 BYTE PTR $T5[rsp+6852], 122 ; 0000007aH
  0d5f9	c6 84 24 25 1b
	00 00 7a	 mov	 BYTE PTR $T5[rsp+6853], 122 ; 0000007aH
  0d601	c6 84 24 26 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6854], 100 ; 00000064H
  0d609	c6 84 24 27 1b
	00 00 62	 mov	 BYTE PTR $T5[rsp+6855], 98 ; 00000062H
  0d611	c6 84 24 28 1b
	00 00 67	 mov	 BYTE PTR $T5[rsp+6856], 103 ; 00000067H
  0d619	c6 84 24 29 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6857], 0
  0d621	c6 84 24 2a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6858], 0
  0d629	c6 84 24 2b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6859], 0
  0d631	c6 84 24 2c 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+6860], 96 ; 00000060H
  0d639	c6 84 24 2d 1b
	00 00 35	 mov	 BYTE PTR $T5[rsp+6861], 53 ; 00000035H
  0d641	c6 84 24 2e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6862], 0
  0d649	c6 84 24 2f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6863], 0
  0d651	c6 84 24 30 1b
	00 00 0c	 mov	 BYTE PTR $T5[rsp+6864], 12
  0d659	c6 84 24 31 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+6865], 2
  0d661	c6 84 24 32 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6866], 0
  0d669	c6 84 24 33 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6867], 0
  0d671	c6 84 24 34 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6868], 46 ; 0000002eH
  0d679	c6 84 24 35 1b
	00 00 78	 mov	 BYTE PTR $T5[rsp+6869], 120 ; 00000078H
  0d681	c6 84 24 36 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6870], 100 ; 00000064H
  0d689	c6 84 24 37 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6871], 97 ; 00000061H
  0d691	c6 84 24 38 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6872], 116 ; 00000074H
  0d699	c6 84 24 39 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6873], 97 ; 00000061H
  0d6a1	c6 84 24 3a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6874], 0
  0d6a9	c6 84 24 3b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6875], 0
  0d6b1	c6 84 24 3c 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6876], 0
  0d6b9	c6 84 24 3d 1b
	00 00 40	 mov	 BYTE PTR $T5[rsp+6877], 64 ; 00000040H
  0d6c1	c6 84 24 3e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6878], 0
  0d6c9	c6 84 24 3f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6879], 0
  0d6d1	c6 84 24 40 1b
	00 00 08	 mov	 BYTE PTR $T5[rsp+6880], 8
  0d6d9	c6 84 24 41 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6881], 0
  0d6e1	c6 84 24 42 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6882], 0
  0d6e9	c6 84 24 43 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6883], 0
  0d6f1	c6 84 24 44 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6884], 46 ; 0000002eH
  0d6f9	c6 84 24 45 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6885], 100 ; 00000064H
  0d701	c6 84 24 46 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6886], 97 ; 00000061H
  0d709	c6 84 24 47 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6887], 116 ; 00000074H
  0d711	c6 84 24 48 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6888], 97 ; 00000061H
  0d719	c6 84 24 49 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6889], 0
  0d721	c6 84 24 4a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6890], 0
  0d729	c6 84 24 4b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6891], 0
  0d731	c6 84 24 4c 1b
	00 00 08	 mov	 BYTE PTR $T5[rsp+6892], 8
  0d739	c6 84 24 4d 1b
	00 00 40	 mov	 BYTE PTR $T5[rsp+6893], 64 ; 00000040H
  0d741	c6 84 24 4e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6894], 0
  0d749	c6 84 24 4f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6895], 0
  0d751	c6 84 24 50 1b
	00 00 1c	 mov	 BYTE PTR $T5[rsp+6896], 28
  0d759	c6 84 24 51 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6897], 0
  0d761	c6 84 24 52 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6898], 0
  0d769	c6 84 24 53 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6899], 0
  0d771	c6 84 24 54 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6900], 46 ; 0000002eH
  0d779	c6 84 24 55 1b
	00 00 62	 mov	 BYTE PTR $T5[rsp+6901], 98 ; 00000062H
  0d781	c6 84 24 56 1b
	00 00 73	 mov	 BYTE PTR $T5[rsp+6902], 115 ; 00000073H
  0d789	c6 84 24 57 1b
	00 00 73	 mov	 BYTE PTR $T5[rsp+6903], 115 ; 00000073H
  0d791	c6 84 24 58 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6904], 0
  0d799	c6 84 24 59 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6905], 0
  0d7a1	c6 84 24 5a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6906], 0
  0d7a9	c6 84 24 5b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6907], 0
  0d7b1	c6 84 24 5c 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6908], 0
  0d7b9	c6 84 24 5d 1b
	00 00 50	 mov	 BYTE PTR $T5[rsp+6909], 80 ; 00000050H
  0d7c1	c6 84 24 5e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6910], 0
  0d7c9	c6 84 24 5f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6911], 0
  0d7d1	c6 84 24 60 1b
	00 00 50	 mov	 BYTE PTR $T5[rsp+6912], 80 ; 00000050H
  0d7d9	c6 84 24 61 1b
	00 00 01	 mov	 BYTE PTR $T5[rsp+6913], 1
  0d7e1	c6 84 24 62 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6914], 0
  0d7e9	c6 84 24 63 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6915], 0
  0d7f1	c6 84 24 64 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6916], 46 ; 0000002eH
  0d7f9	c6 84 24 65 1b
	00 00 70	 mov	 BYTE PTR $T5[rsp+6917], 112 ; 00000070H
  0d801	c6 84 24 66 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6918], 100 ; 00000064H
  0d809	c6 84 24 67 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6919], 97 ; 00000061H
  0d811	c6 84 24 68 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6920], 116 ; 00000074H
  0d819	c6 84 24 69 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6921], 97 ; 00000061H
  0d821	c6 84 24 6a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6922], 0
  0d829	c6 84 24 6b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6923], 0
  0d831	c6 84 24 6c 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6924], 0
  0d839	c6 84 24 6d 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+6925], 96 ; 00000060H
  0d841	c6 84 24 6e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6926], 0
  0d849	c6 84 24 6f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6927], 0
  0d851	c6 84 24 70 1b
	00 00 14	 mov	 BYTE PTR $T5[rsp+6928], 20
  0d859	c6 84 24 71 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6929], 0
  0d861	c6 84 24 72 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6930], 0
  0d869	c6 84 24 73 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6931], 0
  0d871	c6 84 24 74 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6932], 46 ; 0000002eH
  0d879	c6 84 24 75 1b
	00 00 69	 mov	 BYTE PTR $T5[rsp+6933], 105 ; 00000069H
  0d881	c6 84 24 76 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6934], 100 ; 00000064H
  0d889	c6 84 24 77 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6935], 97 ; 00000061H
  0d891	c6 84 24 78 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6936], 116 ; 00000074H
  0d899	c6 84 24 79 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6937], 97 ; 00000061H
  0d8a1	c6 84 24 7a 1b
	00 00 24	 mov	 BYTE PTR $T5[rsp+6938], 36 ; 00000024H
  0d8a9	c6 84 24 7b 1b
	00 00 32	 mov	 BYTE PTR $T5[rsp+6939], 50 ; 00000032H
  0d8b1	c6 84 24 7c 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6940], 0
  0d8b9	c6 84 24 7d 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6941], 0
  0d8c1	c6 84 24 7e 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6942], 0
  0d8c9	c6 84 24 7f 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6943], 0
  0d8d1	c6 84 24 80 1b
	00 00 14	 mov	 BYTE PTR $T5[rsp+6944], 20
  0d8d9	c6 84 24 81 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+6945], 96 ; 00000060H
  0d8e1	c6 84 24 82 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6946], 0
  0d8e9	c6 84 24 83 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6947], 0
  0d8f1	c6 84 24 84 1b
	00 00 14	 mov	 BYTE PTR $T5[rsp+6948], 20
  0d8f9	c6 84 24 85 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6949], 0
  0d901	c6 84 24 86 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6950], 0
  0d909	c6 84 24 87 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6951], 0
  0d911	c6 84 24 88 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6952], 46 ; 0000002eH
  0d919	c6 84 24 89 1b
	00 00 69	 mov	 BYTE PTR $T5[rsp+6953], 105 ; 00000069H
  0d921	c6 84 24 8a 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6954], 100 ; 00000064H
  0d929	c6 84 24 8b 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6955], 97 ; 00000061H
  0d931	c6 84 24 8c 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6956], 116 ; 00000074H
  0d939	c6 84 24 8d 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6957], 97 ; 00000061H
  0d941	c6 84 24 8e 1b
	00 00 24	 mov	 BYTE PTR $T5[rsp+6958], 36 ; 00000024H
  0d949	c6 84 24 8f 1b
	00 00 33	 mov	 BYTE PTR $T5[rsp+6959], 51 ; 00000033H
  0d951	c6 84 24 90 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6960], 0
  0d959	c6 84 24 91 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6961], 0
  0d961	c6 84 24 92 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6962], 0
  0d969	c6 84 24 93 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6963], 0
  0d971	c6 84 24 94 1b
	00 00 28	 mov	 BYTE PTR $T5[rsp+6964], 40 ; 00000028H
  0d979	c6 84 24 95 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+6965], 96 ; 00000060H
  0d981	c6 84 24 96 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6966], 0
  0d989	c6 84 24 97 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6967], 0
  0d991	c6 84 24 98 1b
	00 00 b0	 mov	 BYTE PTR $T5[rsp+6968], 176 ; 000000b0H
  0d999	c6 84 24 99 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6969], 0
  0d9a1	c6 84 24 9a 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6970], 0
  0d9a9	c6 84 24 9b 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6971], 0
  0d9b1	c6 84 24 9c 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6972], 46 ; 0000002eH
  0d9b9	c6 84 24 9d 1b
	00 00 69	 mov	 BYTE PTR $T5[rsp+6973], 105 ; 00000069H
  0d9c1	c6 84 24 9e 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6974], 100 ; 00000064H
  0d9c9	c6 84 24 9f 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6975], 97 ; 00000061H
  0d9d1	c6 84 24 a0 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6976], 116 ; 00000074H
  0d9d9	c6 84 24 a1 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6977], 97 ; 00000061H
  0d9e1	c6 84 24 a2 1b
	00 00 24	 mov	 BYTE PTR $T5[rsp+6978], 36 ; 00000024H
  0d9e9	c6 84 24 a3 1b
	00 00 34	 mov	 BYTE PTR $T5[rsp+6979], 52 ; 00000034H
  0d9f1	c6 84 24 a4 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6980], 0
  0d9f9	c6 84 24 a5 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6981], 0
  0da01	c6 84 24 a6 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6982], 0
  0da09	c6 84 24 a7 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6983], 0
  0da11	c6 84 24 a8 1b
	00 00 d8	 mov	 BYTE PTR $T5[rsp+6984], 216 ; 000000d8H
  0da19	c6 84 24 a9 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+6985], 96 ; 00000060H
  0da21	c6 84 24 aa 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6986], 0
  0da29	c6 84 24 ab 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6987], 0
  0da31	c6 84 24 ac 1b
	00 00 e8	 mov	 BYTE PTR $T5[rsp+6988], 232 ; 000000e8H
  0da39	c6 84 24 ad 1b
	00 00 01	 mov	 BYTE PTR $T5[rsp+6989], 1
  0da41	c6 84 24 ae 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6990], 0
  0da49	c6 84 24 af 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+6991], 0
  0da51	c6 84 24 b0 1b
	00 00 2e	 mov	 BYTE PTR $T5[rsp+6992], 46 ; 0000002eH
  0da59	c6 84 24 b1 1b
	00 00 69	 mov	 BYTE PTR $T5[rsp+6993], 105 ; 00000069H
  0da61	c6 84 24 b2 1b
	00 00 64	 mov	 BYTE PTR $T5[rsp+6994], 100 ; 00000064H
  0da69	c6 84 24 b3 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6995], 97 ; 00000061H
  0da71	c6 84 24 b4 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+6996], 116 ; 00000074H
  0da79	c6 84 24 b5 1b
	00 00 61	 mov	 BYTE PTR $T5[rsp+6997], 97 ; 00000061H
  0da81	c6 84 24 b6 1b
	00 00 24	 mov	 BYTE PTR $T5[rsp+6998], 36 ; 00000024H
  0da89	c6 84 24 b7 1b
	00 00 36	 mov	 BYTE PTR $T5[rsp+6999], 54 ; 00000036H
  0da91	c6 84 24 b8 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7000], 0
  0da99	c6 84 24 b9 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7001], 0
  0daa1	c6 84 24 ba 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7002], 0
  0daa9	c6 84 24 bb 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7003], 0
  0dab1	c6 84 24 bc 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7004], 0
  0dab9	c6 84 24 bd 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7005], 0
  0dac1	c6 84 24 be 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7006], 0
  0dac9	c6 84 24 bf 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7007], 0
  0dad1	c6 84 24 c0 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+7008], 2
  0dad9	c6 84 24 c1 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7009], 6
  0dae1	c6 84 24 c2 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+7010], 2
  0dae9	c6 84 24 c3 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7011], 0
  0daf1	c6 84 24 c4 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7012], 6
  0daf9	c6 84 24 c5 1b
	00 00 d2	 mov	 BYTE PTR $T5[rsp+7013], 210 ; 000000d2H
  0db01	c6 84 24 c6 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+7014], 2
  0db09	c6 84 24 c7 1b
	00 00 30	 mov	 BYTE PTR $T5[rsp+7015], 48 ; 00000030H
  0db11	c6 84 24 c8 1b
	00 00 22	 mov	 BYTE PTR $T5[rsp+7016], 34 ; 00000022H
  0db19	c6 84 24 c9 1b
	00 00 0a	 mov	 BYTE PTR $T5[rsp+7017], 10
  0db21	c6 84 24 ca 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7018], 6
  0db29	c6 84 24 cb 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7019], 0
  0db31	c6 84 24 cc 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+7020], 2
  0db39	c6 84 24 cd 1b
	00 00 16	 mov	 BYTE PTR $T5[rsp+7021], 22
  0db41	c6 84 24 ce 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7022], 0
  0db49	c6 84 24 cf 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7023], 6
  0db51	c6 84 24 d0 1b
	00 00 0a	 mov	 BYTE PTR $T5[rsp+7024], 10
  0db59	c6 84 24 d1 1b
	00 00 c4	 mov	 BYTE PTR $T5[rsp+7025], 196 ; 000000c4H
  0db61	c6 84 24 d2 1b
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7026], 12
  0db69	c6 84 24 d3 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7027], 0
  0db71	c6 84 24 d4 1b
	00 00 05	 mov	 BYTE PTR $T5[rsp+7028], 5
  0db79	c6 84 24 d5 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+7029], 116 ; 00000074H
  0db81	c6 84 24 d6 1b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7030], 13
  0db89	c6 84 24 d7 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7031], 0
  0db91	c6 84 24 d8 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7032], 0
  0db99	c6 84 24 d9 1b
	00 00 10	 mov	 BYTE PTR $T5[rsp+7033], 16
  0dba1	c6 84 24 da 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7034], 0
  0dba9	c6 84 24 db 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7035], 0
  0dbb1	c6 84 24 dc 1b
	00 00 23	 mov	 BYTE PTR $T5[rsp+7036], 35 ; 00000023H
  0dbb9	c6 84 24 dd 1b
	00 00 10	 mov	 BYTE PTR $T5[rsp+7037], 16
  0dbc1	c6 84 24 de 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7038], 0
  0dbc9	c6 84 24 df 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7039], 0
  0dbd1	c6 84 24 e0 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+7040], 96 ; 00000060H
  0dbd9	c6 84 24 e1 1b
	00 00 35	 mov	 BYTE PTR $T5[rsp+7041], 53 ; 00000035H
  0dbe1	c6 84 24 e2 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7042], 0
  0dbe9	c6 84 24 e3 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7043], 0
  0dbf1	c6 84 24 e4 1b
	00 00 22	 mov	 BYTE PTR $T5[rsp+7044], 34 ; 00000022H
  0dbf9	c6 84 24 e5 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7045], 0
  0dc01	c6 84 24 e6 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7046], 6
  0dc09	c6 84 24 e7 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7047], 0
  0dc11	c6 84 24 e8 1b
	00 00 02	 mov	 BYTE PTR $T5[rsp+7048], 2
  0dc19	c6 84 24 e9 1b
	00 00 16	 mov	 BYTE PTR $T5[rsp+7049], 22
  0dc21	c6 84 24 ea 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7050], 0
  0dc29	c6 84 24 eb 1b
	00 00 06	 mov	 BYTE PTR $T5[rsp+7051], 6
  0dc31	c6 84 24 ec 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7052], 0
  0dc39	c6 84 24 ed 1b
	00 00 c4	 mov	 BYTE PTR $T5[rsp+7053], 196 ; 000000c4H
  0dc41	c6 84 24 ee 1b
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7054], 12
  0dc49	c6 84 24 ef 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7055], 0
  0dc51	c6 84 24 f0 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7056], 0
  0dc59	c6 84 24 f1 1b
	00 00 74	 mov	 BYTE PTR $T5[rsp+7057], 116 ; 00000074H
  0dc61	c6 84 24 f2 1b
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7058], 13
  0dc69	c6 84 24 f3 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7059], 0
  0dc71	c6 84 24 f4 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7060], 0
  0dc79	c6 84 24 f5 1b
	00 00 10	 mov	 BYTE PTR $T5[rsp+7061], 16
  0dc81	c6 84 24 f6 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7062], 0
  0dc89	c6 84 24 f7 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7063], 0
  0dc91	c6 84 24 f8 1b
	00 00 23	 mov	 BYTE PTR $T5[rsp+7064], 35 ; 00000023H
  0dc99	c6 84 24 f9 1b
	00 00 10	 mov	 BYTE PTR $T5[rsp+7065], 16
  0dca1	c6 84 24 fa 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7066], 0
  0dca9	c6 84 24 fb 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7067], 0
  0dcb1	c6 84 24 fc 1b
	00 00 60	 mov	 BYTE PTR $T5[rsp+7068], 96 ; 00000060H
  0dcb9	c6 84 24 fd 1b
	00 00 35	 mov	 BYTE PTR $T5[rsp+7069], 53 ; 00000035H
  0dcc1	c6 84 24 fe 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7070], 0
  0dcc9	c6 84 24 ff 1b
	00 00 00	 mov	 BYTE PTR $T5[rsp+7071], 0
  0dcd1	c6 84 24 00 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7072], 34 ; 00000022H
  0dcd9	c6 84 24 01 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7073], 0
  0dce1	c6 84 24 02 1c
	00 00 04	 mov	 BYTE PTR $T5[rsp+7074], 4
  0dce9	c6 84 24 03 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7075], 0
  0dcf1	c6 84 24 04 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7076], 0
  0dcf9	c6 84 24 05 1c
	00 00 c4	 mov	 BYTE PTR $T5[rsp+7077], 196 ; 000000c4H
  0dd01	c6 84 24 06 1c
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7078], 12
  0dd09	c6 84 24 07 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7079], 0
  0dd11	c6 84 24 08 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7080], 0
  0dd19	c6 84 24 09 1c
	00 00 74	 mov	 BYTE PTR $T5[rsp+7081], 116 ; 00000074H
  0dd21	c6 84 24 0a 1c
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7082], 13
  0dd29	c6 84 24 0b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7083], 0
  0dd31	c6 84 24 0c 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7084], 0
  0dd39	c6 84 24 0d 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7085], 16
  0dd41	c6 84 24 0e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7086], 0
  0dd49	c6 84 24 0f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7087], 0
  0dd51	c6 84 24 10 1c
	00 00 23	 mov	 BYTE PTR $T5[rsp+7088], 35 ; 00000023H
  0dd59	c6 84 24 11 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7089], 16
  0dd61	c6 84 24 12 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7090], 0
  0dd69	c6 84 24 13 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7091], 0
  0dd71	c6 84 24 14 1c
	00 00 60	 mov	 BYTE PTR $T5[rsp+7092], 96 ; 00000060H
  0dd79	c6 84 24 15 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7093], 53 ; 00000035H
  0dd81	c6 84 24 16 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7094], 0
  0dd89	c6 84 24 17 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7095], 0
  0dd91	c6 84 24 18 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7096], 34 ; 00000022H
  0dd99	c6 84 24 19 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7097], 17
  0dda1	c6 84 24 1a 1c
	00 00 04	 mov	 BYTE PTR $T5[rsp+7098], 4
  0dda9	c6 84 24 1b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7099], 0
  0ddb1	c6 84 24 1c 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7100], 17
  0ddb9	c6 84 24 1d 1c
	00 00 f4	 mov	 BYTE PTR $T5[rsp+7101], 244 ; 000000f4H
  0ddc1	c6 84 24 1e 1c
	00 00 0a	 mov	 BYTE PTR $T5[rsp+7102], 10
  0ddc9	c6 84 24 1f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7103], 0
  0ddd1	c6 84 24 20 1c
	00 00 05	 mov	 BYTE PTR $T5[rsp+7104], 5
  0ddd9	c6 84 24 21 1c
	00 00 e4	 mov	 BYTE PTR $T5[rsp+7105], 228 ; 000000e4H
  0dde1	c6 84 24 22 1c
	00 00 0b	 mov	 BYTE PTR $T5[rsp+7106], 11
  0dde9	c6 84 24 23 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7107], 0
  0ddf1	c6 84 24 24 1c
	00 00 ee	 mov	 BYTE PTR $T5[rsp+7108], 238 ; 000000eeH
  0ddf9	c6 84 24 25 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7109], 16
  0de01	c6 84 24 26 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7110], 0
  0de09	c6 84 24 27 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7111], 0
  0de11	c6 84 24 28 1c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+7112], 250 ; 000000faH
  0de19	c6 84 24 29 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7113], 16
  0de21	c6 84 24 2a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7114], 0
  0de29	c6 84 24 2b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7115], 0
  0de31	c6 84 24 2c 1c
	00 00 a0	 mov	 BYTE PTR $T5[rsp+7116], 160 ; 000000a0H
  0de39	c6 84 24 2d 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7117], 53 ; 00000035H
  0de41	c6 84 24 2e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7118], 0
  0de49	c6 84 24 2f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7119], 0
  0de51	c6 84 24 30 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7120], 34 ; 00000022H
  0de59	c6 84 24 31 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7121], 8
  0de61	c6 84 24 32 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7122], 2
  0de69	c6 84 24 33 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7123], 0
  0de71	c6 84 24 34 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7124], 8
  0de79	c6 84 24 35 1c
	00 00 54	 mov	 BYTE PTR $T5[rsp+7125], 84 ; 00000054H
  0de81	c6 84 24 36 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7126], 17
  0de89	c6 84 24 37 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7127], 0
  0de91	c6 84 24 38 1c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+7128], 250 ; 000000faH
  0de99	c6 84 24 39 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7129], 16
  0dea1	c6 84 24 3a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7130], 0
  0dea9	c6 84 24 3b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7131], 0
  0deb1	c6 84 24 3c 1c
	00 00 5d	 mov	 BYTE PTR $T5[rsp+7132], 93 ; 0000005dH
  0deb9	c6 84 24 3d 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7133], 17
  0dec1	c6 84 24 3e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7134], 0
  0dec9	c6 84 24 3f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7135], 0
  0ded1	c6 84 24 40 1c
	00 00 b8	 mov	 BYTE PTR $T5[rsp+7136], 184 ; 000000b8H
  0ded9	c6 84 24 41 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7137], 53 ; 00000035H
  0dee1	c6 84 24 42 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7138], 0
  0dee9	c6 84 24 43 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7139], 0
  0def1	c6 84 24 44 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7140], 34 ; 00000022H
  0def9	c6 84 24 45 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7141], 8
  0df01	c6 84 24 46 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7142], 2
  0df09	c6 84 24 47 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7143], 0
  0df11	c6 84 24 48 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7144], 8
  0df19	c6 84 24 49 1c
	00 00 64	 mov	 BYTE PTR $T5[rsp+7145], 100 ; 00000064H
  0df21	c6 84 24 4a 1c
	00 00 12	 mov	 BYTE PTR $T5[rsp+7146], 18
  0df29	c6 84 24 4b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7147], 0
  0df31	c6 84 24 4c 1c
	00 00 5d	 mov	 BYTE PTR $T5[rsp+7148], 93 ; 0000005dH
  0df39	c6 84 24 4d 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7149], 17
  0df41	c6 84 24 4e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7150], 0
  0df49	c6 84 24 4f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7151], 0
  0df51	c6 84 24 50 1c
	00 00 9f	 mov	 BYTE PTR $T5[rsp+7152], 159 ; 0000009fH
  0df59	c6 84 24 51 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7153], 17
  0df61	c6 84 24 52 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7154], 0
  0df69	c6 84 24 53 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7155], 0
  0df71	c6 84 24 54 1c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+7156], 208 ; 000000d0H
  0df79	c6 84 24 55 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7157], 53 ; 00000035H
  0df81	c6 84 24 56 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7158], 0
  0df89	c6 84 24 57 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7159], 0
  0df91	c6 84 24 58 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7160], 34 ; 00000022H
  0df99	c6 84 24 59 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7161], 0
  0dfa1	c6 84 24 5a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7162], 0
  0dfa9	c6 84 24 5b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7163], 0
  0dfb1	c6 84 24 5c 1c
	00 00 5d	 mov	 BYTE PTR $T5[rsp+7164], 93 ; 0000005dH
  0dfb9	c6 84 24 5d 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7165], 17
  0dfc1	c6 84 24 5e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7166], 0
  0dfc9	c6 84 24 5f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7167], 0
  0dfd1	c6 84 24 60 1c
	00 00 9f	 mov	 BYTE PTR $T5[rsp+7168], 159 ; 0000009fH
  0dfd9	c6 84 24 61 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7169], 17
  0dfe1	c6 84 24 62 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7170], 0
  0dfe9	c6 84 24 63 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7171], 0
  0dff1	c6 84 24 64 1c
	00 00 d0	 mov	 BYTE PTR $T5[rsp+7172], 208 ; 000000d0H
  0dff9	c6 84 24 65 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7173], 53 ; 00000035H
  0e001	c6 84 24 66 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7174], 0
  0e009	c6 84 24 67 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7175], 0
  0e011	c6 84 24 68 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7176], 34 ; 00000022H
  0e019	c6 84 24 69 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7177], 0
  0e021	c6 84 24 6a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7178], 0
  0e029	c6 84 24 6b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7179], 0
  0e031	c6 84 24 6c 1c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+7180], 250 ; 000000faH
  0e039	c6 84 24 6d 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7181], 16
  0e041	c6 84 24 6e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7182], 0
  0e049	c6 84 24 6f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7183], 0
  0e051	c6 84 24 70 1c
	00 00 5d	 mov	 BYTE PTR $T5[rsp+7184], 93 ; 0000005dH
  0e059	c6 84 24 71 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7185], 17
  0e061	c6 84 24 72 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7186], 0
  0e069	c6 84 24 73 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7187], 0
  0e071	c6 84 24 74 1c
	00 00 b8	 mov	 BYTE PTR $T5[rsp+7188], 184 ; 000000b8H
  0e079	c6 84 24 75 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7189], 53 ; 00000035H
  0e081	c6 84 24 76 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7190], 0
  0e089	c6 84 24 77 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7191], 0
  0e091	c6 84 24 78 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7192], 34 ; 00000022H
  0e099	c6 84 24 79 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7193], 0
  0e0a1	c6 84 24 7a 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7194], 2
  0e0a9	c6 84 24 7b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7195], 0
  0e0b1	c6 84 24 7c 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7196], 2
  0e0b9	c6 84 24 7d 1c
	00 00 16	 mov	 BYTE PTR $T5[rsp+7197], 22
  0e0c1	c6 84 24 7e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7198], 0
  0e0c9	c6 84 24 7f 1c
	00 00 06	 mov	 BYTE PTR $T5[rsp+7199], 6
  0e0d1	c6 84 24 80 1c
	00 00 ee	 mov	 BYTE PTR $T5[rsp+7200], 238 ; 000000eeH
  0e0d9	c6 84 24 81 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7201], 16
  0e0e1	c6 84 24 82 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7202], 0
  0e0e9	c6 84 24 83 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7203], 0
  0e0f1	c6 84 24 84 1c
	00 00 fa	 mov	 BYTE PTR $T5[rsp+7204], 250 ; 000000faH
  0e0f9	c6 84 24 85 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7205], 16
  0e101	c6 84 24 86 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7206], 0
  0e109	c6 84 24 87 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7207], 0
  0e111	c6 84 24 88 1c
	00 00 a0	 mov	 BYTE PTR $T5[rsp+7208], 160 ; 000000a0H
  0e119	c6 84 24 89 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7209], 53 ; 00000035H
  0e121	c6 84 24 8a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7210], 0
  0e129	c6 84 24 8b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7211], 0
  0e131	c6 84 24 8c 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7212], 34 ; 00000022H
  0e139	c6 84 24 8d 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7213], 0
  0e141	c6 84 24 8e 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7214], 2
  0e149	c6 84 24 8f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7215], 0
  0e151	c6 84 24 90 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7216], 8
  0e159	c6 84 24 91 1c
	00 00 16	 mov	 BYTE PTR $T5[rsp+7217], 22
  0e161	c6 84 24 92 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7218], 0
  0e169	c6 84 24 93 1c
	00 00 06	 mov	 BYTE PTR $T5[rsp+7219], 6
  0e171	c6 84 24 94 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7220], 0
  0e179	c6 84 24 95 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7221], 16
  0e181	c6 84 24 96 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7222], 0
  0e189	c6 84 24 97 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7223], 0
  0e191	c6 84 24 98 1c
	00 00 23	 mov	 BYTE PTR $T5[rsp+7224], 35 ; 00000023H
  0e199	c6 84 24 99 1c
	00 00 10	 mov	 BYTE PTR $T5[rsp+7225], 16
  0e1a1	c6 84 24 9a 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7226], 0
  0e1a9	c6 84 24 9b 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7227], 0
  0e1b1	c6 84 24 9c 1c
	00 00 60	 mov	 BYTE PTR $T5[rsp+7228], 96 ; 00000060H
  0e1b9	c6 84 24 9d 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7229], 53 ; 00000035H
  0e1c1	c6 84 24 9e 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7230], 0
  0e1c9	c6 84 24 9f 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7231], 0
  0e1d1	c6 84 24 a0 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7232], 2
  0e1d9	c6 84 24 a1 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7233], 17
  0e1e1	c6 84 24 a2 1c
	00 00 06	 mov	 BYTE PTR $T5[rsp+7234], 6
  0e1e9	c6 84 24 a3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7235], 0
  0e1f1	c6 84 24 a4 1c
	00 00 11	 mov	 BYTE PTR $T5[rsp+7236], 17
  0e1f9	c6 84 24 a5 1c
	00 00 01	 mov	 BYTE PTR $T5[rsp+7237], 1
  0e201	c6 84 24 a6 1c
	00 00 2f	 mov	 BYTE PTR $T5[rsp+7238], 47 ; 0000002fH
  0e209	c6 84 24 a7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7239], 0
  0e211	c6 84 24 a8 1c
	00 00 05	 mov	 BYTE PTR $T5[rsp+7240], 5
  0e219	c6 84 24 a9 1c
	00 00 70	 mov	 BYTE PTR $T5[rsp+7241], 112 ; 00000070H
  0e221	c6 84 24 aa 1c
	00 00 04	 mov	 BYTE PTR $T5[rsp+7242], 4
  0e229	c6 84 24 ab 1c
	00 00 60	 mov	 BYTE PTR $T5[rsp+7243], 96 ; 00000060H
  0e231	c6 84 24 ac 1c
	00 00 03	 mov	 BYTE PTR $T5[rsp+7244], 3
  0e239	c6 84 24 ad 1c
	00 00 30	 mov	 BYTE PTR $T5[rsp+7245], 48 ; 00000030H
  0e241	c6 84 24 ae 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7246], 2
  0e249	c6 84 24 af 1c
	00 00 50	 mov	 BYTE PTR $T5[rsp+7247], 80 ; 00000050H
  0e251	c6 84 24 b0 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7248], 34 ; 00000022H
  0e259	c6 84 24 b1 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7249], 8
  0e261	c6 84 24 b2 1c
	00 00 02	 mov	 BYTE PTR $T5[rsp+7250], 2
  0e269	c6 84 24 b3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7251], 0
  0e271	c6 84 24 b4 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7252], 8
  0e279	c6 84 24 b5 1c
	00 00 c4	 mov	 BYTE PTR $T5[rsp+7253], 196 ; 000000c4H
  0e281	c6 84 24 b6 1c
	00 00 34	 mov	 BYTE PTR $T5[rsp+7254], 52 ; 00000034H
  0e289	c6 84 24 b7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7255], 0
  0e291	c6 84 24 b8 1c
	00 00 50	 mov	 BYTE PTR $T5[rsp+7256], 80 ; 00000050H
  0e299	c6 84 24 b9 1c
	00 00 13	 mov	 BYTE PTR $T5[rsp+7257], 19
  0e2a1	c6 84 24 ba 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7258], 0
  0e2a9	c6 84 24 bb 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7259], 0
  0e2b1	c6 84 24 bc 1c
	00 00 b1	 mov	 BYTE PTR $T5[rsp+7260], 177 ; 000000b1H
  0e2b9	c6 84 24 bd 1c
	00 00 14	 mov	 BYTE PTR $T5[rsp+7261], 20
  0e2c1	c6 84 24 be 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7262], 0
  0e2c9	c6 84 24 bf 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7263], 0
  0e2d1	c6 84 24 c0 1c
	00 00 40	 mov	 BYTE PTR $T5[rsp+7264], 64 ; 00000040H
  0e2d9	c6 84 24 c1 1c
	00 00 36	 mov	 BYTE PTR $T5[rsp+7265], 54 ; 00000036H
  0e2e1	c6 84 24 c2 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7266], 0
  0e2e9	c6 84 24 c3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7267], 0
  0e2f1	c6 84 24 c4 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7268], 34 ; 00000022H
  0e2f9	c6 84 24 c5 1c
	00 00 25	 mov	 BYTE PTR $T5[rsp+7269], 37 ; 00000025H
  0e301	c6 84 24 c6 1c
	00 00 06	 mov	 BYTE PTR $T5[rsp+7270], 6
  0e309	c6 84 24 c7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7271], 0
  0e311	c6 84 24 c8 1c
	00 00 25	 mov	 BYTE PTR $T5[rsp+7272], 37 ; 00000025H
  0e319	c6 84 24 c9 1c
	00 00 f4	 mov	 BYTE PTR $T5[rsp+7273], 244 ; 000000f4H
  0e321	c6 84 24 ca 1c
	00 00 2e	 mov	 BYTE PTR $T5[rsp+7274], 46 ; 0000002eH
  0e329	c6 84 24 cb 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7275], 0
  0e331	c6 84 24 cc 1c
	00 00 14	 mov	 BYTE PTR $T5[rsp+7276], 20
  0e339	c6 84 24 cd 1c
	00 00 e4	 mov	 BYTE PTR $T5[rsp+7277], 228 ; 000000e4H
  0e341	c6 84 24 ce 1c
	00 00 37	 mov	 BYTE PTR $T5[rsp+7278], 55 ; 00000037H
  0e349	c6 84 24 cf 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7279], 0
  0e351	c6 84 24 d0 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7280], 8
  0e359	c6 84 24 d1 1c
	00 00 d4	 mov	 BYTE PTR $T5[rsp+7281], 212 ; 000000d4H
  0e361	c6 84 24 d2 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7282], 53 ; 00000035H
  0e369	c6 84 24 d3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7283], 0
  0e371	c6 84 24 d4 1c
	00 00 b1	 mov	 BYTE PTR $T5[rsp+7284], 177 ; 000000b1H
  0e379	c6 84 24 d5 1c
	00 00 14	 mov	 BYTE PTR $T5[rsp+7285], 20
  0e381	c6 84 24 d6 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7286], 0
  0e389	c6 84 24 d7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7287], 0
  0e391	c6 84 24 d8 1c
	00 00 04	 mov	 BYTE PTR $T5[rsp+7288], 4
  0e399	c6 84 24 d9 1c
	00 00 15	 mov	 BYTE PTR $T5[rsp+7289], 21
  0e3a1	c6 84 24 da 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7290], 0
  0e3a9	c6 84 24 db 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7291], 0
  0e3b1	c6 84 24 dc 1c
	00 00 50	 mov	 BYTE PTR $T5[rsp+7292], 80 ; 00000050H
  0e3b9	c6 84 24 dd 1c
	00 00 36	 mov	 BYTE PTR $T5[rsp+7293], 54 ; 00000036H
  0e3c1	c6 84 24 de 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7294], 0
  0e3c9	c6 84 24 df 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7295], 0
  0e3d1	c6 84 24 e0 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7296], 34 ; 00000022H
  0e3d9	c6 84 24 e1 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7297], 53 ; 00000035H
  0e3e1	c6 84 24 e2 1c
	00 00 06	 mov	 BYTE PTR $T5[rsp+7298], 6
  0e3e9	c6 84 24 e3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7299], 0
  0e3f1	c6 84 24 e4 1c
	00 00 35	 mov	 BYTE PTR $T5[rsp+7300], 53 ; 00000035H
  0e3f9	c6 84 24 e5 1c
	00 00 88	 mov	 BYTE PTR $T5[rsp+7301], 136 ; 00000088H
  0e401	c6 84 24 e6 1c
	00 00 14	 mov	 BYTE PTR $T5[rsp+7302], 20
  0e409	c6 84 24 e7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7303], 0
  0e411	c6 84 24 e8 1c
	00 00 27	 mov	 BYTE PTR $T5[rsp+7304], 39 ; 00000027H
  0e419	c6 84 24 e9 1c
	00 00 78	 mov	 BYTE PTR $T5[rsp+7305], 120 ; 00000078H
  0e421	c6 84 24 ea 1c
	00 00 15	 mov	 BYTE PTR $T5[rsp+7306], 21
  0e429	c6 84 24 eb 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7307], 0
  0e431	c6 84 24 ec 1c
	00 00 08	 mov	 BYTE PTR $T5[rsp+7308], 8
  0e439	c6 84 24 ed 1c
	00 00 68	 mov	 BYTE PTR $T5[rsp+7309], 104 ; 00000068H
  0e441	c6 84 24 ee 1c
	00 00 16	 mov	 BYTE PTR $T5[rsp+7310], 22
  0e449	c6 84 24 ef 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7311], 0
  0e451	c6 84 24 f0 1c
	00 00 04	 mov	 BYTE PTR $T5[rsp+7312], 4
  0e459	c6 84 24 f1 1c
	00 00 15	 mov	 BYTE PTR $T5[rsp+7313], 21
  0e461	c6 84 24 f2 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7314], 0
  0e469	c6 84 24 f3 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7315], 0
  0e471	c6 84 24 f4 1c
	00 00 54	 mov	 BYTE PTR $T5[rsp+7316], 84 ; 00000054H
  0e479	c6 84 24 f5 1c
	00 00 15	 mov	 BYTE PTR $T5[rsp+7317], 21
  0e481	c6 84 24 f6 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7318], 0
  0e489	c6 84 24 f7 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7319], 0
  0e491	c6 84 24 f8 1c
	00 00 64	 mov	 BYTE PTR $T5[rsp+7320], 100 ; 00000064H
  0e499	c6 84 24 f9 1c
	00 00 36	 mov	 BYTE PTR $T5[rsp+7321], 54 ; 00000036H
  0e4a1	c6 84 24 fa 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7322], 0
  0e4a9	c6 84 24 fb 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7323], 0
  0e4b1	c6 84 24 fc 1c
	00 00 22	 mov	 BYTE PTR $T5[rsp+7324], 34 ; 00000022H
  0e4b9	c6 84 24 fd 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7325], 0
  0e4c1	c6 84 24 fe 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7326], 0
  0e4c9	c6 84 24 ff 1c
	00 00 00	 mov	 BYTE PTR $T5[rsp+7327], 0
  0e4d1	c6 84 24 00 1d
	00 00 04	 mov	 BYTE PTR $T5[rsp+7328], 4
  0e4d9	c6 84 24 01 1d
	00 00 15	 mov	 BYTE PTR $T5[rsp+7329], 21
  0e4e1	c6 84 24 02 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7330], 0
  0e4e9	c6 84 24 03 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7331], 0
  0e4f1	c6 84 24 04 1d
	00 00 54	 mov	 BYTE PTR $T5[rsp+7332], 84 ; 00000054H
  0e4f9	c6 84 24 05 1d
	00 00 15	 mov	 BYTE PTR $T5[rsp+7333], 21
  0e501	c6 84 24 06 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7334], 0
  0e509	c6 84 24 07 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7335], 0
  0e511	c6 84 24 08 1d
	00 00 64	 mov	 BYTE PTR $T5[rsp+7336], 100 ; 00000064H
  0e519	c6 84 24 09 1d
	00 00 36	 mov	 BYTE PTR $T5[rsp+7337], 54 ; 00000036H
  0e521	c6 84 24 0a 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7338], 0
  0e529	c6 84 24 0b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7339], 0
  0e531	c6 84 24 0c 1d
	00 00 22	 mov	 BYTE PTR $T5[rsp+7340], 34 ; 00000022H
  0e539	c6 84 24 0d 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7341], 0
  0e541	c6 84 24 0e 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7342], 2
  0e549	c6 84 24 0f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7343], 0
  0e551	c6 84 24 10 1d
	00 00 05	 mov	 BYTE PTR $T5[rsp+7344], 5
  0e559	c6 84 24 11 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7345], 22
  0e561	c6 84 24 12 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7346], 0
  0e569	c6 84 24 13 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7347], 6
  0e571	c6 84 24 14 1d
	00 00 b1	 mov	 BYTE PTR $T5[rsp+7348], 177 ; 000000b1H
  0e579	c6 84 24 15 1d
	00 00 14	 mov	 BYTE PTR $T5[rsp+7349], 20
  0e581	c6 84 24 16 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7350], 0
  0e589	c6 84 24 17 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7351], 0
  0e591	c6 84 24 18 1d
	00 00 04	 mov	 BYTE PTR $T5[rsp+7352], 4
  0e599	c6 84 24 19 1d
	00 00 15	 mov	 BYTE PTR $T5[rsp+7353], 21
  0e5a1	c6 84 24 1a 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7354], 0
  0e5a9	c6 84 24 1b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7355], 0
  0e5b1	c6 84 24 1c 1d
	00 00 50	 mov	 BYTE PTR $T5[rsp+7356], 80 ; 00000050H
  0e5b9	c6 84 24 1d 1d
	00 00 36	 mov	 BYTE PTR $T5[rsp+7357], 54 ; 00000036H
  0e5c1	c6 84 24 1e 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7358], 0
  0e5c9	c6 84 24 1f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7359], 0
  0e5d1	c6 84 24 20 1d
	00 00 22	 mov	 BYTE PTR $T5[rsp+7360], 34 ; 00000022H
  0e5d9	c6 84 24 21 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7361], 0
  0e5e1	c6 84 24 22 1d
	00 00 08	 mov	 BYTE PTR $T5[rsp+7362], 8
  0e5e9	c6 84 24 23 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7363], 0
  0e5f1	c6 84 24 24 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7364], 0
  0e5f9	c6 84 24 25 1d
	00 00 f4	 mov	 BYTE PTR $T5[rsp+7365], 244 ; 000000f4H
  0e601	c6 84 24 26 1d
	00 00 2e	 mov	 BYTE PTR $T5[rsp+7366], 46 ; 0000002eH
  0e609	c6 84 24 27 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7367], 0
  0e611	c6 84 24 28 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7368], 0
  0e619	c6 84 24 29 1d
	00 00 e4	 mov	 BYTE PTR $T5[rsp+7369], 228 ; 000000e4H
  0e621	c6 84 24 2a 1d
	00 00 37	 mov	 BYTE PTR $T5[rsp+7370], 55 ; 00000037H
  0e629	c6 84 24 2b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7371], 0
  0e631	c6 84 24 2c 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7372], 0
  0e639	c6 84 24 2d 1d
	00 00 d4	 mov	 BYTE PTR $T5[rsp+7373], 212 ; 000000d4H
  0e641	c6 84 24 2e 1d
	00 00 35	 mov	 BYTE PTR $T5[rsp+7374], 53 ; 00000035H
  0e649	c6 84 24 2f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7375], 0
  0e651	c6 84 24 30 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7376], 0
  0e659	c6 84 24 31 1d
	00 00 c4	 mov	 BYTE PTR $T5[rsp+7377], 196 ; 000000c4H
  0e661	c6 84 24 32 1d
	00 00 34	 mov	 BYTE PTR $T5[rsp+7378], 52 ; 00000034H
  0e669	c6 84 24 33 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7379], 0
  0e671	c6 84 24 34 1d
	00 00 50	 mov	 BYTE PTR $T5[rsp+7380], 80 ; 00000050H
  0e679	c6 84 24 35 1d
	00 00 13	 mov	 BYTE PTR $T5[rsp+7381], 19
  0e681	c6 84 24 36 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7382], 0
  0e689	c6 84 24 37 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7383], 0
  0e691	c6 84 24 38 1d
	00 00 b1	 mov	 BYTE PTR $T5[rsp+7384], 177 ; 000000b1H
  0e699	c6 84 24 39 1d
	00 00 14	 mov	 BYTE PTR $T5[rsp+7385], 20
  0e6a1	c6 84 24 3a 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7386], 0
  0e6a9	c6 84 24 3b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7387], 0
  0e6b1	c6 84 24 3c 1d
	00 00 40	 mov	 BYTE PTR $T5[rsp+7388], 64 ; 00000040H
  0e6b9	c6 84 24 3d 1d
	00 00 36	 mov	 BYTE PTR $T5[rsp+7389], 54 ; 00000036H
  0e6c1	c6 84 24 3e 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7390], 0
  0e6c9	c6 84 24 3f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7391], 0
  0e6d1	c6 84 24 40 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7392], 2
  0e6d9	c6 84 24 41 1d
	00 00 18	 mov	 BYTE PTR $T5[rsp+7393], 24
  0e6e1	c6 84 24 42 1d
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7394], 12
  0e6e9	c6 84 24 43 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7395], 0
  0e6f1	c6 84 24 44 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7396], 6
  0e6f9	c6 84 24 45 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7397], 22
  0e701	c6 84 24 46 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7398], 0
  0e709	c6 84 24 47 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7399], 6
  0e711	c6 84 24 48 1d
	00 00 18	 mov	 BYTE PTR $T5[rsp+7400], 24
  0e719	c6 84 24 49 1d
	00 00 64	 mov	 BYTE PTR $T5[rsp+7401], 100 ; 00000064H
  0e721	c6 84 24 4a 1d
	00 00 10	 mov	 BYTE PTR $T5[rsp+7402], 16
  0e729	c6 84 24 4b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7403], 0
  0e731	c6 84 24 4c 1d
	00 00 18	 mov	 BYTE PTR $T5[rsp+7404], 24
  0e739	c6 84 24 4d 1d
	00 00 54	 mov	 BYTE PTR $T5[rsp+7405], 84 ; 00000054H
  0e741	c6 84 24 4e 1d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+7406], 15
  0e749	c6 84 24 4f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7407], 0
  0e751	c6 84 24 50 1d
	00 00 18	 mov	 BYTE PTR $T5[rsp+7408], 24
  0e759	c6 84 24 51 1d
	00 00 34	 mov	 BYTE PTR $T5[rsp+7409], 52 ; 00000034H
  0e761	c6 84 24 52 1d
	00 00 0e	 mov	 BYTE PTR $T5[rsp+7410], 14
  0e769	c6 84 24 53 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7411], 0
  0e771	c6 84 24 54 1d
	00 00 18	 mov	 BYTE PTR $T5[rsp+7412], 24
  0e779	c6 84 24 55 1d
	00 00 92	 mov	 BYTE PTR $T5[rsp+7413], 146 ; 00000092H
  0e781	c6 84 24 56 1d
	00 00 14	 mov	 BYTE PTR $T5[rsp+7414], 20
  0e789	c6 84 24 57 1d
	00 00 f0	 mov	 BYTE PTR $T5[rsp+7415], 240 ; 000000f0H
  0e791	c6 84 24 58 1d
	00 00 12	 mov	 BYTE PTR $T5[rsp+7416], 18
  0e799	c6 84 24 59 1d
	00 00 e0	 mov	 BYTE PTR $T5[rsp+7417], 224 ; 000000e0H
  0e7a1	c6 84 24 5a 1d
	00 00 10	 mov	 BYTE PTR $T5[rsp+7418], 16
  0e7a9	c6 84 24 5b 1d
	00 00 70	 mov	 BYTE PTR $T5[rsp+7419], 112 ; 00000070H
  0e7b1	c6 84 24 5c 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7420], 2
  0e7b9	c6 84 24 5d 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7421], 26
  0e7c1	c6 84 24 5e 1d
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7422], 12
  0e7c9	c6 84 24 5f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7423], 0
  0e7d1	c6 84 24 60 1d
	00 00 03	 mov	 BYTE PTR $T5[rsp+7424], 3
  0e7d9	c6 84 24 61 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7425], 22
  0e7e1	c6 84 24 62 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7426], 0
  0e7e9	c6 84 24 63 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7427], 6
  0e7f1	c6 84 24 64 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7428], 26
  0e7f9	c6 84 24 65 1d
	00 00 74	 mov	 BYTE PTR $T5[rsp+7429], 116 ; 00000074H
  0e801	c6 84 24 66 1d
	00 00 0f	 mov	 BYTE PTR $T5[rsp+7430], 15
  0e809	c6 84 24 67 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7431], 0
  0e811	c6 84 24 68 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7432], 26
  0e819	c6 84 24 69 1d
	00 00 64	 mov	 BYTE PTR $T5[rsp+7433], 100 ; 00000064H
  0e821	c6 84 24 6a 1d
	00 00 0e	 mov	 BYTE PTR $T5[rsp+7434], 14
  0e829	c6 84 24 6b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7435], 0
  0e831	c6 84 24 6c 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7436], 26
  0e839	c6 84 24 6d 1d
	00 00 54	 mov	 BYTE PTR $T5[rsp+7437], 84 ; 00000054H
  0e841	c6 84 24 6e 1d
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7438], 13
  0e849	c6 84 24 6f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7439], 0
  0e851	c6 84 24 70 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7440], 26
  0e859	c6 84 24 71 1d
	00 00 34	 mov	 BYTE PTR $T5[rsp+7441], 52 ; 00000034H
  0e861	c6 84 24 72 1d
	00 00 0c	 mov	 BYTE PTR $T5[rsp+7442], 12
  0e869	c6 84 24 73 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7443], 0
  0e871	c6 84 24 74 1d
	00 00 1a	 mov	 BYTE PTR $T5[rsp+7444], 26
  0e879	c6 84 24 75 1d
	00 00 92	 mov	 BYTE PTR $T5[rsp+7445], 146 ; 00000092H
  0e881	c6 84 24 76 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7446], 22
  0e889	c6 84 24 77 1d
	00 00 e0	 mov	 BYTE PTR $T5[rsp+7447], 224 ; 000000e0H
  0e891	c6 84 24 78 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7448], 2
  0e899	c6 84 24 79 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7449], 6
  0e8a1	c6 84 24 7a 1d
	00 00 04	 mov	 BYTE PTR $T5[rsp+7450], 4
  0e8a9	c6 84 24 7b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7451], 0
  0e8b1	c6 84 24 7c 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7452], 2
  0e8b9	c6 84 24 7d 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7453], 22
  0e8c1	c6 84 24 7e 1d
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7454], 13
  0e8c9	c6 84 24 7f 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7455], 6
  0e8d1	c6 84 24 80 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7456], 6
  0e8d9	c6 84 24 81 1d
	00 00 32	 mov	 BYTE PTR $T5[rsp+7457], 50 ; 00000032H
  0e8e1	c6 84 24 82 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7458], 2
  0e8e9	c6 84 24 83 1d
	00 00 30	 mov	 BYTE PTR $T5[rsp+7459], 48 ; 00000030H
  0e8f1	c6 84 24 84 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7460], 2
  0e8f9	c6 84 24 85 1d
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7461], 13
  0e901	c6 84 24 86 1d
	00 00 05	 mov	 BYTE PTR $T5[rsp+7462], 5
  0e909	c6 84 24 87 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7463], 0
  0e911	c6 84 24 88 1d
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7464], 13
  0e919	c6 84 24 89 1d
	00 00 64	 mov	 BYTE PTR $T5[rsp+7465], 100 ; 00000064H
  0e921	c6 84 24 8a 1d
	00 00 34	 mov	 BYTE PTR $T5[rsp+7466], 52 ; 00000034H
  0e929	c6 84 24 8b 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7467], 0
  0e931	c6 84 24 8c 1d
	00 00 0d	 mov	 BYTE PTR $T5[rsp+7468], 13
  0e939	c6 84 24 8d 1d
	00 00 01	 mov	 BYTE PTR $T5[rsp+7469], 1
  0e941	c6 84 24 8e 1d
	00 00 30	 mov	 BYTE PTR $T5[rsp+7470], 48 ; 00000030H
  0e949	c6 84 24 8f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7471], 0
  0e951	c6 84 24 90 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7472], 6
  0e959	c6 84 24 91 1d
	00 00 70	 mov	 BYTE PTR $T5[rsp+7473], 112 ; 00000070H
  0e961	c6 84 24 92 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7474], 0
  0e969	c6 84 24 93 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7475], 0
  0e971	c6 84 24 94 1d
	00 00 22	 mov	 BYTE PTR $T5[rsp+7476], 34 ; 00000022H
  0e979	c6 84 24 95 1d
	00 00 08	 mov	 BYTE PTR $T5[rsp+7477], 8
  0e981	c6 84 24 96 1d
	00 00 04	 mov	 BYTE PTR $T5[rsp+7478], 4
  0e989	c6 84 24 97 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7479], 0
  0e991	c6 84 24 98 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7480], 2
  0e999	c6 84 24 99 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7481], 22
  0e9a1	c6 84 24 9a 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7482], 0
  0e9a9	c6 84 24 9b 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7483], 6
  0e9b1	c6 84 24 9c 1d
	00 00 08	 mov	 BYTE PTR $T5[rsp+7484], 8
  0e9b9	c6 84 24 9d 1d
	00 00 34	 mov	 BYTE PTR $T5[rsp+7485], 52 ; 00000034H
  0e9c1	c6 84 24 9e 1d
	00 00 32	 mov	 BYTE PTR $T5[rsp+7486], 50 ; 00000032H
  0e9c9	c6 84 24 9f 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7487], 0
  0e9d1	c6 84 24 a0 1d
	00 00 60	 mov	 BYTE PTR $T5[rsp+7488], 96 ; 00000060H
  0e9d9	c6 84 24 a1 1d
	00 00 1d	 mov	 BYTE PTR $T5[rsp+7489], 29
  0e9e1	c6 84 24 a2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7490], 0
  0e9e9	c6 84 24 a3 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7491], 0
  0e9f1	c6 84 24 a4 1d
	00 00 1d	 mov	 BYTE PTR $T5[rsp+7492], 29
  0e9f9	c6 84 24 a5 1d
	00 00 1e	 mov	 BYTE PTR $T5[rsp+7493], 30
  0ea01	c6 84 24 a6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7494], 0
  0ea09	c6 84 24 a7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7495], 0
  0ea11	c6 84 24 a8 1d
	00 00 24	 mov	 BYTE PTR $T5[rsp+7496], 36 ; 00000024H
  0ea19	c6 84 24 a9 1d
	00 00 37	 mov	 BYTE PTR $T5[rsp+7497], 55 ; 00000037H
  0ea21	c6 84 24 aa 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7498], 0
  0ea29	c6 84 24 ab 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7499], 0
  0ea31	c6 84 24 ac 1d
	00 00 22	 mov	 BYTE PTR $T5[rsp+7500], 34 ; 00000022H
  0ea39	c6 84 24 ad 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7501], 0
  0ea41	c6 84 24 ae 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7502], 2
  0ea49	c6 84 24 af 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7503], 0
  0ea51	c6 84 24 b0 1d
	00 00 02	 mov	 BYTE PTR $T5[rsp+7504], 2
  0ea59	c6 84 24 b1 1d
	00 00 16	 mov	 BYTE PTR $T5[rsp+7505], 22
  0ea61	c6 84 24 b2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7506], 0
  0ea69	c6 84 24 b3 1d
	00 00 06	 mov	 BYTE PTR $T5[rsp+7507], 6
  0ea71	c6 84 24 b4 1d
	00 00 60	 mov	 BYTE PTR $T5[rsp+7508], 96 ; 00000060H
  0ea79	c6 84 24 b5 1d
	00 00 1d	 mov	 BYTE PTR $T5[rsp+7509], 29
  0ea81	c6 84 24 b6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7510], 0
  0ea89	c6 84 24 b7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7511], 0
  0ea91	c6 84 24 b8 1d
	00 00 1d	 mov	 BYTE PTR $T5[rsp+7512], 29
  0ea99	c6 84 24 b9 1d
	00 00 1e	 mov	 BYTE PTR $T5[rsp+7513], 30
  0eaa1	c6 84 24 ba 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7514], 0
  0eaa9	c6 84 24 bb 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7515], 0
  0eab1	c6 84 24 bc 1d
	00 00 24	 mov	 BYTE PTR $T5[rsp+7516], 36 ; 00000024H
  0eab9	c6 84 24 bd 1d
	00 00 37	 mov	 BYTE PTR $T5[rsp+7517], 55 ; 00000037H
  0eac1	c6 84 24 be 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7518], 0
  0eac9	c6 84 24 bf 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7519], 0
  0ead1	c6 84 24 c0 1d
	00 00 01	 mov	 BYTE PTR $T5[rsp+7520], 1
  0ead9	c6 84 24 c1 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7521], 0
  0eae1	c6 84 24 c2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7522], 0
  0eae9	c6 84 24 c3 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7523], 0
  0eaf1	c6 84 24 c4 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7524], 0
  0eaf9	c6 84 24 c5 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7525], 0
  0eb01	c6 84 24 c6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7526], 0
  0eb09	c6 84 24 c7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7527], 0
  0eb11	c6 84 24 c8 1d
	00 00 01	 mov	 BYTE PTR $T5[rsp+7528], 1
  0eb19	c6 84 24 c9 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7529], 0
  0eb21	c6 84 24 ca 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7530], 0
  0eb29	c6 84 24 cb 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7531], 0
  0eb31	c6 84 24 cc 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7532], 0
  0eb39	c6 84 24 cd 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7533], 0
  0eb41	c6 84 24 ce 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7534], 0
  0eb49	c6 84 24 cf 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7535], 0
  0eb51	c6 84 24 d0 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7536], 0
  0eb59	c6 84 24 d1 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7537], 0
  0eb61	c6 84 24 d2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7538], 0
  0eb69	c6 84 24 d3 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7539], 0
  0eb71	c6 84 24 d4 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7540], 0
  0eb79	c6 84 24 d5 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7541], 0
  0eb81	c6 84 24 d6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7542], 0
  0eb89	c6 84 24 d7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7543], 0
  0eb91	c6 84 24 d8 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7544], 0
  0eb99	c6 84 24 d9 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7545], 0
  0eba1	c6 84 24 da 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7546], 0
  0eba9	c6 84 24 db 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7547], 0
  0ebb1	c6 84 24 dc 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7548], 0
  0ebb9	c6 84 24 dd 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7549], 0
  0ebc1	c6 84 24 de 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7550], 0
  0ebc9	c6 84 24 df 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7551], 0
  0ebd1	c6 84 24 e0 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7552], 0
  0ebd9	c6 84 24 e1 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7553], 0
  0ebe1	c6 84 24 e2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7554], 0
  0ebe9	c6 84 24 e3 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7555], 0
  0ebf1	c6 84 24 e4 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7556], 0
  0ebf9	c6 84 24 e5 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7557], 0
  0ec01	c6 84 24 e6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7558], 0
  0ec09	c6 84 24 e7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7559], 0
  0ec11	c6 84 24 e8 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7560], 0
  0ec19	c6 84 24 e9 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7561], 0
  0ec21	c6 84 24 ea 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7562], 0
  0ec29	c6 84 24 eb 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7563], 0
  0ec31	c6 84 24 ec 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7564], 0
  0ec39	c6 84 24 ed 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7565], 0
  0ec41	c6 84 24 ee 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7566], 0
  0ec49	c6 84 24 ef 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7567], 0
  0ec51	c6 84 24 f0 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7568], 0
  0ec59	c6 84 24 f1 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7569], 0
  0ec61	c6 84 24 f2 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7570], 0
  0ec69	c6 84 24 f3 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7571], 0
  0ec71	c6 84 24 f4 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7572], 0
  0ec79	c6 84 24 f5 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7573], 0
  0ec81	c6 84 24 f6 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7574], 0
  0ec89	c6 84 24 f7 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7575], 0
  0ec91	c6 84 24 f8 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7576], 0
  0ec99	c6 84 24 f9 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7577], 0
  0eca1	c6 84 24 fa 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7578], 0
  0eca9	c6 84 24 fb 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7579], 0
  0ecb1	c6 84 24 fc 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7580], 0
  0ecb9	c6 84 24 fd 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7581], 0
  0ecc1	c6 84 24 fe 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7582], 0
  0ecc9	c6 84 24 ff 1d
	00 00 00	 mov	 BYTE PTR $T5[rsp+7583], 0
  0ecd1	c6 84 24 00 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7584], 0
  0ecd9	c6 84 24 01 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7585], 0
  0ece1	c6 84 24 02 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7586], 0
  0ece9	c6 84 24 03 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7587], 0
  0ecf1	c6 84 24 04 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7588], 0
  0ecf9	c6 84 24 05 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7589], 0
  0ed01	c6 84 24 06 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7590], 0
  0ed09	c6 84 24 07 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7591], 0
  0ed11	c6 84 24 08 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7592], 0
  0ed19	c6 84 24 09 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7593], 0
  0ed21	c6 84 24 0a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7594], 0
  0ed29	c6 84 24 0b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7595], 0
  0ed31	c6 84 24 0c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7596], 0
  0ed39	c6 84 24 0d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7597], 0
  0ed41	c6 84 24 0e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7598], 0
  0ed49	c6 84 24 0f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7599], 0
  0ed51	c6 84 24 10 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7600], 0
  0ed59	c6 84 24 11 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7601], 0
  0ed61	c6 84 24 12 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7602], 0
  0ed69	c6 84 24 13 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7603], 0
  0ed71	c6 84 24 14 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7604], 0
  0ed79	c6 84 24 15 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7605], 0
  0ed81	c6 84 24 16 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7606], 0
  0ed89	c6 84 24 17 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7607], 0
  0ed91	c6 84 24 18 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7608], 0
  0ed99	c6 84 24 19 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7609], 0
  0eda1	c6 84 24 1a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7610], 0
  0eda9	c6 84 24 1b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7611], 0
  0edb1	c6 84 24 1c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7612], 0
  0edb9	c6 84 24 1d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7613], 0
  0edc1	c6 84 24 1e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7614], 0
  0edc9	c6 84 24 1f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7615], 0
  0edd1	c6 84 24 20 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7616], 0
  0edd9	c6 84 24 21 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7617], 0
  0ede1	c6 84 24 22 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7618], 0
  0ede9	c6 84 24 23 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7619], 0
  0edf1	c6 84 24 24 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7620], 0
  0edf9	c6 84 24 25 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7621], 0
  0ee01	c6 84 24 26 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7622], 0
  0ee09	c6 84 24 27 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7623], 0
  0ee11	c6 84 24 28 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7624], 0
  0ee19	c6 84 24 29 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7625], 0
  0ee21	c6 84 24 2a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7626], 0
  0ee29	c6 84 24 2b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7627], 0
  0ee31	c6 84 24 2c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7628], 0
  0ee39	c6 84 24 2d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7629], 0
  0ee41	c6 84 24 2e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7630], 0
  0ee49	c6 84 24 2f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7631], 0
  0ee51	c6 84 24 30 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7632], 0
  0ee59	c6 84 24 31 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7633], 0
  0ee61	c6 84 24 32 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7634], 0
  0ee69	c6 84 24 33 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7635], 0
  0ee71	c6 84 24 34 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7636], 0
  0ee79	c6 84 24 35 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7637], 0
  0ee81	c6 84 24 36 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7638], 0
  0ee89	c6 84 24 37 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7639], 0
  0ee91	c6 84 24 38 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7640], 0
  0ee99	c6 84 24 39 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7641], 0
  0eea1	c6 84 24 3a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7642], 0
  0eea9	c6 84 24 3b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7643], 0
  0eeb1	c6 84 24 3c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7644], 0
  0eeb9	c6 84 24 3d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7645], 0
  0eec1	c6 84 24 3e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7646], 0
  0eec9	c6 84 24 3f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7647], 0
  0eed1	c6 84 24 40 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7648], 0
  0eed9	c6 84 24 41 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7649], 0
  0eee1	c6 84 24 42 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7650], 0
  0eee9	c6 84 24 43 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7651], 0
  0eef1	c6 84 24 44 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7652], 0
  0eef9	c6 84 24 45 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7653], 0
  0ef01	c6 84 24 46 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7654], 0
  0ef09	c6 84 24 47 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7655], 0
  0ef11	c6 84 24 48 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7656], 0
  0ef19	c6 84 24 49 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7657], 0
  0ef21	c6 84 24 4a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7658], 0
  0ef29	c6 84 24 4b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7659], 0
  0ef31	c6 84 24 4c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7660], 0
  0ef39	c6 84 24 4d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7661], 0
  0ef41	c6 84 24 4e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7662], 0
  0ef49	c6 84 24 4f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7663], 0
  0ef51	c6 84 24 50 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7664], 0
  0ef59	c6 84 24 51 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7665], 0
  0ef61	c6 84 24 52 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7666], 0
  0ef69	c6 84 24 53 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7667], 0
  0ef71	c6 84 24 54 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7668], 0
  0ef79	c6 84 24 55 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7669], 0
  0ef81	c6 84 24 56 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7670], 0
  0ef89	c6 84 24 57 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7671], 0
  0ef91	c6 84 24 58 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7672], 0
  0ef99	c6 84 24 59 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7673], 0
  0efa1	c6 84 24 5a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7674], 0
  0efa9	c6 84 24 5b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7675], 0
  0efb1	c6 84 24 5c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7676], 0
  0efb9	c6 84 24 5d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7677], 0
  0efc1	c6 84 24 5e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7678], 0
  0efc9	c6 84 24 5f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7679], 0
  0efd1	c6 84 24 60 1e
	00 00 32	 mov	 BYTE PTR $T5[rsp+7680], 50 ; 00000032H
  0efd9	c6 84 24 61 1e
	00 00 a2	 mov	 BYTE PTR $T5[rsp+7681], 162 ; 000000a2H
  0efe1	c6 84 24 62 1e
	00 00 df	 mov	 BYTE PTR $T5[rsp+7682], 223 ; 000000dfH
  0efe9	c6 84 24 63 1e
	00 00 2d	 mov	 BYTE PTR $T5[rsp+7683], 45 ; 0000002dH
  0eff1	c6 84 24 64 1e
	00 00 99	 mov	 BYTE PTR $T5[rsp+7684], 153 ; 00000099H
  0eff9	c6 84 24 65 1e
	00 00 2b	 mov	 BYTE PTR $T5[rsp+7685], 43 ; 0000002bH
  0f001	c6 84 24 66 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7686], 0
  0f009	c6 84 24 67 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7687], 0
  0f011	c6 84 24 68 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7688], 0
  0f019	c6 84 24 69 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7689], 0
  0f021	c6 84 24 6a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7690], 0
  0f029	c6 84 24 6b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7691], 0
  0f031	c6 84 24 6c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7692], 0
  0f039	c6 84 24 6d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7693], 0
  0f041	c6 84 24 6e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7694], 0
  0f049	c6 84 24 6f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7695], 0
  0f051	c6 84 24 70 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7696], 0
  0f059	c6 84 24 71 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7697], 0
  0f061	c6 84 24 72 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7698], 0
  0f069	c6 84 24 73 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7699], 0
  0f071	c6 84 24 74 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7700], 0
  0f079	c6 84 24 75 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7701], 0
  0f081	c6 84 24 76 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7702], 0
  0f089	c6 84 24 77 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7703], 0
  0f091	c6 84 24 78 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7704], 0
  0f099	c6 84 24 79 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7705], 0
  0f0a1	c6 84 24 7a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7706], 0
  0f0a9	c6 84 24 7b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7707], 0
  0f0b1	c6 84 24 7c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7708], 0
  0f0b9	c6 84 24 7d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7709], 0
  0f0c1	c6 84 24 7e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7710], 0
  0f0c9	c6 84 24 7f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7711], 0
  0f0d1	c6 84 24 80 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7712], 0
  0f0d9	c6 84 24 81 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7713], 0
  0f0e1	c6 84 24 82 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7714], 0
  0f0e9	c6 84 24 83 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7715], 0
  0f0f1	c6 84 24 84 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7716], 0
  0f0f9	c6 84 24 85 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7717], 0
  0f101	c6 84 24 86 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7718], 0
  0f109	c6 84 24 87 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7719], 0
  0f111	c6 84 24 88 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7720], 0
  0f119	c6 84 24 89 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7721], 0
  0f121	c6 84 24 8a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7722], 0
  0f129	c6 84 24 8b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7723], 0
  0f131	c6 84 24 8c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7724], 0
  0f139	c6 84 24 8d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7725], 0
  0f141	c6 84 24 8e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7726], 0
  0f149	c6 84 24 8f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7727], 0
  0f151	c6 84 24 90 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7728], 0
  0f159	c6 84 24 91 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7729], 0
  0f161	c6 84 24 92 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7730], 0
  0f169	c6 84 24 93 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7731], 0
  0f171	c6 84 24 94 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7732], 0
  0f179	c6 84 24 95 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7733], 0
  0f181	c6 84 24 96 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7734], 0
  0f189	c6 84 24 97 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7735], 0
  0f191	c6 84 24 98 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7736], 0
  0f199	c6 84 24 99 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7737], 0
  0f1a1	c6 84 24 9a 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7738], 0
  0f1a9	c6 84 24 9b 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7739], 0
  0f1b1	c6 84 24 9c 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7740], 0
  0f1b9	c6 84 24 9d 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7741], 0
  0f1c1	c6 84 24 9e 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7742], 0
  0f1c9	c6 84 24 9f 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7743], 0
  0f1d1	c6 84 24 a0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7744], 0
  0f1d9	c6 84 24 a1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7745], 0
  0f1e1	c6 84 24 a2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7746], 0
  0f1e9	c6 84 24 a3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7747], 0
  0f1f1	c6 84 24 a4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7748], 0
  0f1f9	c6 84 24 a5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7749], 0
  0f201	c6 84 24 a6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7750], 0
  0f209	c6 84 24 a7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7751], 0
  0f211	c6 84 24 a8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7752], 0
  0f219	c6 84 24 a9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7753], 0
  0f221	c6 84 24 aa 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7754], 0
  0f229	c6 84 24 ab 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7755], 0
  0f231	c6 84 24 ac 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7756], 0
  0f239	c6 84 24 ad 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7757], 0
  0f241	c6 84 24 ae 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7758], 0
  0f249	c6 84 24 af 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7759], 0
  0f251	c6 84 24 b0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7760], 0
  0f259	c6 84 24 b1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7761], 0
  0f261	c6 84 24 b2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7762], 0
  0f269	c6 84 24 b3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7763], 0
  0f271	c6 84 24 b4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7764], 0
  0f279	c6 84 24 b5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7765], 0
  0f281	c6 84 24 b6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7766], 0
  0f289	c6 84 24 b7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7767], 0
  0f291	c6 84 24 b8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7768], 0
  0f299	c6 84 24 b9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7769], 0
  0f2a1	c6 84 24 ba 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7770], 0
  0f2a9	c6 84 24 bb 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7771], 0
  0f2b1	c6 84 24 bc 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7772], 0
  0f2b9	c6 84 24 bd 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7773], 0
  0f2c1	c6 84 24 be 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7774], 0
  0f2c9	c6 84 24 bf 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7775], 0
  0f2d1	c6 84 24 c0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7776], 0
  0f2d9	c6 84 24 c1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7777], 0
  0f2e1	c6 84 24 c2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7778], 0
  0f2e9	c6 84 24 c3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7779], 0
  0f2f1	c6 84 24 c4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7780], 0
  0f2f9	c6 84 24 c5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7781], 0
  0f301	c6 84 24 c6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7782], 0
  0f309	c6 84 24 c7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7783], 0
  0f311	c6 84 24 c8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7784], 0
  0f319	c6 84 24 c9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7785], 0
  0f321	c6 84 24 ca 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7786], 0
  0f329	c6 84 24 cb 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7787], 0
  0f331	c6 84 24 cc 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7788], 0
  0f339	c6 84 24 cd 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7789], 0
  0f341	c6 84 24 ce 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7790], 0
  0f349	c6 84 24 cf 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7791], 0
  0f351	c6 84 24 d0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7792], 0
  0f359	c6 84 24 d1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7793], 0
  0f361	c6 84 24 d2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7794], 0
  0f369	c6 84 24 d3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7795], 0
  0f371	c6 84 24 d4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7796], 0
  0f379	c6 84 24 d5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7797], 0
  0f381	c6 84 24 d6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7798], 0
  0f389	c6 84 24 d7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7799], 0
  0f391	c6 84 24 d8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7800], 0
  0f399	c6 84 24 d9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7801], 0
  0f3a1	c6 84 24 da 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7802], 0
  0f3a9	c6 84 24 db 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7803], 0
  0f3b1	c6 84 24 dc 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7804], 0
  0f3b9	c6 84 24 dd 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7805], 0
  0f3c1	c6 84 24 de 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7806], 0
  0f3c9	c6 84 24 df 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7807], 0
  0f3d1	c6 84 24 e0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7808], 0
  0f3d9	c6 84 24 e1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7809], 0
  0f3e1	c6 84 24 e2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7810], 0
  0f3e9	c6 84 24 e3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7811], 0
  0f3f1	c6 84 24 e4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7812], 0
  0f3f9	c6 84 24 e5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7813], 0
  0f401	c6 84 24 e6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7814], 0
  0f409	c6 84 24 e7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7815], 0
  0f411	c6 84 24 e8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7816], 0
  0f419	c6 84 24 e9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7817], 0
  0f421	c6 84 24 ea 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7818], 0
  0f429	c6 84 24 eb 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7819], 0
  0f431	c6 84 24 ec 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7820], 0
  0f439	c6 84 24 ed 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7821], 0
  0f441	c6 84 24 ee 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7822], 0
  0f449	c6 84 24 ef 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7823], 0
  0f451	c6 84 24 f0 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7824], 0
  0f459	c6 84 24 f1 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7825], 0
  0f461	c6 84 24 f2 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7826], 0
  0f469	c6 84 24 f3 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7827], 0
  0f471	c6 84 24 f4 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7828], 0
  0f479	c6 84 24 f5 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7829], 0
  0f481	c6 84 24 f6 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7830], 0
  0f489	c6 84 24 f7 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7831], 0
  0f491	c6 84 24 f8 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7832], 0
  0f499	c6 84 24 f9 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7833], 0
  0f4a1	c6 84 24 fa 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7834], 0
  0f4a9	c6 84 24 fb 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7835], 0
  0f4b1	c6 84 24 fc 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7836], 0
  0f4b9	c6 84 24 fd 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7837], 0
  0f4c1	c6 84 24 fe 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7838], 0
  0f4c9	c6 84 24 ff 1e
	00 00 00	 mov	 BYTE PTR $T5[rsp+7839], 0
  0f4d1	c6 84 24 00 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7840], 0
  0f4d9	c6 84 24 01 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7841], 0
  0f4e1	c6 84 24 02 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7842], 0
  0f4e9	c6 84 24 03 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7843], 0
  0f4f1	c6 84 24 04 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7844], 0
  0f4f9	c6 84 24 05 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7845], 0
  0f501	c6 84 24 06 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7846], 0
  0f509	c6 84 24 07 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7847], 0
  0f511	c6 84 24 08 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7848], 0
  0f519	c6 84 24 09 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7849], 0
  0f521	c6 84 24 0a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7850], 0
  0f529	c6 84 24 0b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7851], 0
  0f531	c6 84 24 0c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7852], 0
  0f539	c6 84 24 0d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7853], 0
  0f541	c6 84 24 0e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7854], 0
  0f549	c6 84 24 0f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7855], 0
  0f551	c6 84 24 10 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7856], 0
  0f559	c6 84 24 11 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7857], 0
  0f561	c6 84 24 12 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7858], 0
  0f569	c6 84 24 13 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7859], 0
  0f571	c6 84 24 14 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7860], 0
  0f579	c6 84 24 15 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7861], 0
  0f581	c6 84 24 16 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7862], 0
  0f589	c6 84 24 17 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7863], 0
  0f591	c6 84 24 18 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7864], 0
  0f599	c6 84 24 19 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7865], 0
  0f5a1	c6 84 24 1a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7866], 0
  0f5a9	c6 84 24 1b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7867], 0
  0f5b1	c6 84 24 1c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7868], 0
  0f5b9	c6 84 24 1d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7869], 0
  0f5c1	c6 84 24 1e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7870], 0
  0f5c9	c6 84 24 1f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7871], 0
  0f5d1	c6 84 24 20 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7872], 0
  0f5d9	c6 84 24 21 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7873], 0
  0f5e1	c6 84 24 22 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7874], 0
  0f5e9	c6 84 24 23 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7875], 0
  0f5f1	c6 84 24 24 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7876], 0
  0f5f9	c6 84 24 25 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7877], 0
  0f601	c6 84 24 26 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7878], 0
  0f609	c6 84 24 27 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7879], 0
  0f611	c6 84 24 28 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7880], 0
  0f619	c6 84 24 29 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7881], 0
  0f621	c6 84 24 2a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7882], 0
  0f629	c6 84 24 2b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7883], 0
  0f631	c6 84 24 2c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7884], 0
  0f639	c6 84 24 2d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7885], 0
  0f641	c6 84 24 2e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7886], 0
  0f649	c6 84 24 2f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7887], 0
  0f651	c6 84 24 30 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7888], 0
  0f659	c6 84 24 31 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7889], 0
  0f661	c6 84 24 32 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7890], 0
  0f669	c6 84 24 33 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7891], 0
  0f671	c6 84 24 34 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7892], 0
  0f679	c6 84 24 35 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7893], 0
  0f681	c6 84 24 36 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7894], 0
  0f689	c6 84 24 37 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7895], 0
  0f691	c6 84 24 38 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7896], 0
  0f699	c6 84 24 39 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7897], 0
  0f6a1	c6 84 24 3a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7898], 0
  0f6a9	c6 84 24 3b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7899], 0
  0f6b1	c6 84 24 3c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7900], 0
  0f6b9	c6 84 24 3d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7901], 0
  0f6c1	c6 84 24 3e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7902], 0
  0f6c9	c6 84 24 3f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7903], 0
  0f6d1	c6 84 24 40 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7904], 0
  0f6d9	c6 84 24 41 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7905], 0
  0f6e1	c6 84 24 42 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7906], 0
  0f6e9	c6 84 24 43 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7907], 0
  0f6f1	c6 84 24 44 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7908], 0
  0f6f9	c6 84 24 45 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7909], 0
  0f701	c6 84 24 46 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7910], 0
  0f709	c6 84 24 47 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7911], 0
  0f711	c6 84 24 48 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7912], 0
  0f719	c6 84 24 49 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7913], 0
  0f721	c6 84 24 4a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7914], 0
  0f729	c6 84 24 4b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7915], 0
  0f731	c6 84 24 4c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7916], 0
  0f739	c6 84 24 4d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7917], 0
  0f741	c6 84 24 4e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7918], 0
  0f749	c6 84 24 4f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7919], 0
  0f751	c6 84 24 50 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7920], 0
  0f759	c6 84 24 51 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7921], 0
  0f761	c6 84 24 52 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7922], 0
  0f769	c6 84 24 53 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7923], 0
  0f771	c6 84 24 54 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7924], 0
  0f779	c6 84 24 55 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7925], 0
  0f781	c6 84 24 56 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7926], 0
  0f789	c6 84 24 57 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7927], 0
  0f791	c6 84 24 58 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7928], 0
  0f799	c6 84 24 59 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7929], 0
  0f7a1	c6 84 24 5a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7930], 0
  0f7a9	c6 84 24 5b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7931], 0
  0f7b1	c6 84 24 5c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7932], 0
  0f7b9	c6 84 24 5d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7933], 0
  0f7c1	c6 84 24 5e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7934], 0
  0f7c9	c6 84 24 5f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7935], 0
  0f7d1	c6 84 24 60 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7936], 0
  0f7d9	c6 84 24 61 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7937], 0
  0f7e1	c6 84 24 62 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7938], 0
  0f7e9	c6 84 24 63 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7939], 0
  0f7f1	c6 84 24 64 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7940], 0
  0f7f9	c6 84 24 65 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7941], 0
  0f801	c6 84 24 66 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7942], 0
  0f809	c6 84 24 67 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7943], 0
  0f811	c6 84 24 68 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7944], 0
  0f819	c6 84 24 69 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7945], 0
  0f821	c6 84 24 6a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7946], 0
  0f829	c6 84 24 6b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7947], 0
  0f831	c6 84 24 6c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7948], 0
  0f839	c6 84 24 6d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7949], 0
  0f841	c6 84 24 6e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7950], 0
  0f849	c6 84 24 6f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7951], 0
  0f851	c6 84 24 70 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7952], 0
  0f859	c6 84 24 71 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7953], 0
  0f861	c6 84 24 72 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7954], 0
  0f869	c6 84 24 73 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7955], 0
  0f871	c6 84 24 74 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7956], 0
  0f879	c6 84 24 75 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7957], 0
  0f881	c6 84 24 76 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7958], 0
  0f889	c6 84 24 77 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7959], 0
  0f891	c6 84 24 78 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7960], 0
  0f899	c6 84 24 79 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7961], 0
  0f8a1	c6 84 24 7a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7962], 0
  0f8a9	c6 84 24 7b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7963], 0
  0f8b1	c6 84 24 7c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7964], 0
  0f8b9	c6 84 24 7d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7965], 0
  0f8c1	c6 84 24 7e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7966], 0
  0f8c9	c6 84 24 7f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7967], 0
  0f8d1	c6 84 24 80 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7968], 0
  0f8d9	c6 84 24 81 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7969], 0
  0f8e1	c6 84 24 82 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7970], 0
  0f8e9	c6 84 24 83 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7971], 0
  0f8f1	c6 84 24 84 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7972], 0
  0f8f9	c6 84 24 85 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7973], 0
  0f901	c6 84 24 86 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7974], 0
  0f909	c6 84 24 87 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7975], 0
  0f911	c6 84 24 88 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7976], 0
  0f919	c6 84 24 89 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7977], 0
  0f921	c6 84 24 8a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7978], 0
  0f929	c6 84 24 8b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7979], 0
  0f931	c6 84 24 8c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7980], 0
  0f939	c6 84 24 8d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7981], 0
  0f941	c6 84 24 8e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7982], 0
  0f949	c6 84 24 8f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7983], 0
  0f951	c6 84 24 90 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7984], 0
  0f959	c6 84 24 91 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7985], 0
  0f961	c6 84 24 92 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7986], 0
  0f969	c6 84 24 93 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7987], 0
  0f971	c6 84 24 94 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7988], 0
  0f979	c6 84 24 95 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7989], 0
  0f981	c6 84 24 96 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7990], 0
  0f989	c6 84 24 97 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7991], 0
  0f991	c6 84 24 98 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7992], 0
  0f999	c6 84 24 99 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7993], 0
  0f9a1	c6 84 24 9a 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7994], 0
  0f9a9	c6 84 24 9b 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7995], 0
  0f9b1	c6 84 24 9c 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7996], 0
  0f9b9	c6 84 24 9d 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7997], 0
  0f9c1	c6 84 24 9e 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7998], 0
  0f9c9	c6 84 24 9f 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+7999], 0
  0f9d1	c6 84 24 a0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8000], 0
  0f9d9	c6 84 24 a1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8001], 0
  0f9e1	c6 84 24 a2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8002], 0
  0f9e9	c6 84 24 a3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8003], 0
  0f9f1	c6 84 24 a4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8004], 0
  0f9f9	c6 84 24 a5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8005], 0
  0fa01	c6 84 24 a6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8006], 0
  0fa09	c6 84 24 a7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8007], 0
  0fa11	c6 84 24 a8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8008], 0
  0fa19	c6 84 24 a9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8009], 0
  0fa21	c6 84 24 aa 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8010], 0
  0fa29	c6 84 24 ab 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8011], 0
  0fa31	c6 84 24 ac 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8012], 0
  0fa39	c6 84 24 ad 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8013], 0
  0fa41	c6 84 24 ae 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8014], 0
  0fa49	c6 84 24 af 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8015], 0
  0fa51	c6 84 24 b0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8016], 0
  0fa59	c6 84 24 b1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8017], 0
  0fa61	c6 84 24 b2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8018], 0
  0fa69	c6 84 24 b3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8019], 0
  0fa71	c6 84 24 b4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8020], 0
  0fa79	c6 84 24 b5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8021], 0
  0fa81	c6 84 24 b6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8022], 0
  0fa89	c6 84 24 b7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8023], 0
  0fa91	c6 84 24 b8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8024], 0
  0fa99	c6 84 24 b9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8025], 0
  0faa1	c6 84 24 ba 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8026], 0
  0faa9	c6 84 24 bb 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8027], 0
  0fab1	c6 84 24 bc 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8028], 0
  0fab9	c6 84 24 bd 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8029], 0
  0fac1	c6 84 24 be 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8030], 0
  0fac9	c6 84 24 bf 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8031], 0
  0fad1	c6 84 24 c0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8032], 0
  0fad9	c6 84 24 c1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8033], 0
  0fae1	c6 84 24 c2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8034], 0
  0fae9	c6 84 24 c3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8035], 0
  0faf1	c6 84 24 c4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8036], 0
  0faf9	c6 84 24 c5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8037], 0
  0fb01	c6 84 24 c6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8038], 0
  0fb09	c6 84 24 c7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8039], 0
  0fb11	c6 84 24 c8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8040], 0
  0fb19	c6 84 24 c9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8041], 0
  0fb21	c6 84 24 ca 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8042], 0
  0fb29	c6 84 24 cb 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8043], 0
  0fb31	c6 84 24 cc 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8044], 0
  0fb39	c6 84 24 cd 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8045], 0
  0fb41	c6 84 24 ce 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8046], 0
  0fb49	c6 84 24 cf 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8047], 0
  0fb51	c6 84 24 d0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8048], 0
  0fb59	c6 84 24 d1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8049], 0
  0fb61	c6 84 24 d2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8050], 0
  0fb69	c6 84 24 d3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8051], 0
  0fb71	c6 84 24 d4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8052], 0
  0fb79	c6 84 24 d5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8053], 0
  0fb81	c6 84 24 d6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8054], 0
  0fb89	c6 84 24 d7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8055], 0
  0fb91	c6 84 24 d8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8056], 0
  0fb99	c6 84 24 d9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8057], 0
  0fba1	c6 84 24 da 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8058], 0
  0fba9	c6 84 24 db 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8059], 0
  0fbb1	c6 84 24 dc 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8060], 0
  0fbb9	c6 84 24 dd 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8061], 0
  0fbc1	c6 84 24 de 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8062], 0
  0fbc9	c6 84 24 df 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8063], 0
  0fbd1	c6 84 24 e0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8064], 0
  0fbd9	c6 84 24 e1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8065], 0
  0fbe1	c6 84 24 e2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8066], 0
  0fbe9	c6 84 24 e3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8067], 0
  0fbf1	c6 84 24 e4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8068], 0
  0fbf9	c6 84 24 e5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8069], 0
  0fc01	c6 84 24 e6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8070], 0
  0fc09	c6 84 24 e7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8071], 0
  0fc11	c6 84 24 e8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8072], 0
  0fc19	c6 84 24 e9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8073], 0
  0fc21	c6 84 24 ea 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8074], 0
  0fc29	c6 84 24 eb 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8075], 0
  0fc31	c6 84 24 ec 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8076], 0
  0fc39	c6 84 24 ed 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8077], 0
  0fc41	c6 84 24 ee 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8078], 0
  0fc49	c6 84 24 ef 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8079], 0
  0fc51	c6 84 24 f0 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8080], 0
  0fc59	c6 84 24 f1 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8081], 0
  0fc61	c6 84 24 f2 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8082], 0
  0fc69	c6 84 24 f3 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8083], 0
  0fc71	c6 84 24 f4 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8084], 0
  0fc79	c6 84 24 f5 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8085], 0
  0fc81	c6 84 24 f6 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8086], 0
  0fc89	c6 84 24 f7 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8087], 0
  0fc91	c6 84 24 f8 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8088], 0
  0fc99	c6 84 24 f9 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8089], 0
  0fca1	c6 84 24 fa 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8090], 0
  0fca9	c6 84 24 fb 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8091], 0
  0fcb1	c6 84 24 fc 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8092], 0
  0fcb9	c6 84 24 fd 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8093], 0
  0fcc1	c6 84 24 fe 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8094], 0
  0fcc9	c6 84 24 ff 1f
	00 00 00	 mov	 BYTE PTR $T5[rsp+8095], 0
  0fcd1	c6 84 24 00 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8096], 0
  0fcd9	c6 84 24 01 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8097], 0
  0fce1	c6 84 24 02 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8098], 0
  0fce9	c6 84 24 03 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8099], 0
  0fcf1	c6 84 24 04 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8100], 0
  0fcf9	c6 84 24 05 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8101], 0
  0fd01	c6 84 24 06 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8102], 0
  0fd09	c6 84 24 07 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8103], 0
  0fd11	c6 84 24 08 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8104], 0
  0fd19	c6 84 24 09 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8105], 0
  0fd21	c6 84 24 0a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8106], 0
  0fd29	c6 84 24 0b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8107], 0
  0fd31	c6 84 24 0c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8108], 0
  0fd39	c6 84 24 0d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8109], 0
  0fd41	c6 84 24 0e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8110], 0
  0fd49	c6 84 24 0f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8111], 0
  0fd51	c6 84 24 10 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8112], 0
  0fd59	c6 84 24 11 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8113], 0
  0fd61	c6 84 24 12 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8114], 0
  0fd69	c6 84 24 13 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8115], 0
  0fd71	c6 84 24 14 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8116], 0
  0fd79	c6 84 24 15 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8117], 0
  0fd81	c6 84 24 16 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8118], 0
  0fd89	c6 84 24 17 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8119], 0
  0fd91	c6 84 24 18 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8120], 0
  0fd99	c6 84 24 19 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8121], 0
  0fda1	c6 84 24 1a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8122], 0
  0fda9	c6 84 24 1b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8123], 0
  0fdb1	c6 84 24 1c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8124], 0
  0fdb9	c6 84 24 1d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8125], 0
  0fdc1	c6 84 24 1e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8126], 0
  0fdc9	c6 84 24 1f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8127], 0
  0fdd1	c6 84 24 20 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8128], 0
  0fdd9	c6 84 24 21 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8129], 0
  0fde1	c6 84 24 22 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8130], 0
  0fde9	c6 84 24 23 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8131], 0
  0fdf1	c6 84 24 24 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8132], 0
  0fdf9	c6 84 24 25 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8133], 0
  0fe01	c6 84 24 26 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8134], 0
  0fe09	c6 84 24 27 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8135], 0
  0fe11	c6 84 24 28 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8136], 0
  0fe19	c6 84 24 29 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8137], 0
  0fe21	c6 84 24 2a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8138], 0
  0fe29	c6 84 24 2b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8139], 0
  0fe31	c6 84 24 2c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8140], 0
  0fe39	c6 84 24 2d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8141], 0
  0fe41	c6 84 24 2e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8142], 0
  0fe49	c6 84 24 2f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8143], 0
  0fe51	c6 84 24 30 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8144], 0
  0fe59	c6 84 24 31 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8145], 0
  0fe61	c6 84 24 32 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8146], 0
  0fe69	c6 84 24 33 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8147], 0
  0fe71	c6 84 24 34 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8148], 0
  0fe79	c6 84 24 35 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8149], 0
  0fe81	c6 84 24 36 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8150], 0
  0fe89	c6 84 24 37 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8151], 0
  0fe91	c6 84 24 38 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8152], 0
  0fe99	c6 84 24 39 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8153], 0
  0fea1	c6 84 24 3a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8154], 0
  0fea9	c6 84 24 3b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8155], 0
  0feb1	c6 84 24 3c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8156], 0
  0feb9	c6 84 24 3d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8157], 0
  0fec1	c6 84 24 3e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8158], 0
  0fec9	c6 84 24 3f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8159], 0
  0fed1	c6 84 24 40 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8160], 0
  0fed9	c6 84 24 41 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8161], 0
  0fee1	c6 84 24 42 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8162], 0
  0fee9	c6 84 24 43 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8163], 0
  0fef1	c6 84 24 44 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8164], 0
  0fef9	c6 84 24 45 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8165], 0
  0ff01	c6 84 24 46 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8166], 0
  0ff09	c6 84 24 47 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8167], 0
  0ff11	c6 84 24 48 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8168], 0
  0ff19	c6 84 24 49 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8169], 0
  0ff21	c6 84 24 4a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8170], 0
  0ff29	c6 84 24 4b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8171], 0
  0ff31	c6 84 24 4c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8172], 0
  0ff39	c6 84 24 4d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8173], 0
  0ff41	c6 84 24 4e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8174], 0
  0ff49	c6 84 24 4f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8175], 0
  0ff51	c6 84 24 50 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8176], 0
  0ff59	c6 84 24 51 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8177], 0
  0ff61	c6 84 24 52 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8178], 0
  0ff69	c6 84 24 53 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8179], 0
  0ff71	c6 84 24 54 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8180], 0
  0ff79	c6 84 24 55 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8181], 0
  0ff81	c6 84 24 56 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8182], 0
  0ff89	c6 84 24 57 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8183], 0
  0ff91	c6 84 24 58 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8184], 0
  0ff99	c6 84 24 59 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8185], 0
  0ffa1	c6 84 24 5a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8186], 0
  0ffa9	c6 84 24 5b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8187], 0
  0ffb1	c6 84 24 5c 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8188], 0
  0ffb9	c6 84 24 5d 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8189], 0
  0ffc1	c6 84 24 5e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8190], 0
  0ffc9	c6 84 24 5f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8191], 0
  0ffd1	c6 84 24 60 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8192], 0
  0ffd9	c6 84 24 61 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8193], 16
  0ffe1	c6 84 24 62 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8194], 0
  0ffe9	c6 84 24 63 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8195], 0
  0fff1	c6 84 24 64 20
	00 00 23	 mov	 BYTE PTR $T5[rsp+8196], 35 ; 00000023H
  0fff9	c6 84 24 65 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8197], 16
  10001	c6 84 24 66 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8198], 0
  10009	c6 84 24 67 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8199], 0
  10011	c6 84 24 68 20
	00 00 60	 mov	 BYTE PTR $T5[rsp+8200], 96 ; 00000060H
  10019	c6 84 24 69 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8201], 53 ; 00000035H
  10021	c6 84 24 6a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8202], 0
  10029	c6 84 24 6b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8203], 0
  10031	c6 84 24 6c 20
	00 00 23	 mov	 BYTE PTR $T5[rsp+8204], 35 ; 00000023H
  10039	c6 84 24 6d 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8205], 16
  10041	c6 84 24 6e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8206], 0
  10049	c6 84 24 6f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8207], 0
  10051	c6 84 24 70 20
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8208], 111 ; 0000006fH
  10059	c6 84 24 71 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8209], 16
  10061	c6 84 24 72 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8210], 0
  10069	c6 84 24 73 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8211], 0
  10071	c6 84 24 74 20
	00 00 68	 mov	 BYTE PTR $T5[rsp+8212], 104 ; 00000068H
  10079	c6 84 24 75 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8213], 53 ; 00000035H
  10081	c6 84 24 76 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8214], 0
  10089	c6 84 24 77 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8215], 0
  10091	c6 84 24 78 20
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8216], 111 ; 0000006fH
  10099	c6 84 24 79 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8217], 16
  100a1	c6 84 24 7a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8218], 0
  100a9	c6 84 24 7b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8219], 0
  100b1	c6 84 24 7c 20
	00 00 c8	 mov	 BYTE PTR $T5[rsp+8220], 200 ; 000000c8H
  100b9	c6 84 24 7d 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8221], 16
  100c1	c6 84 24 7e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8222], 0
  100c9	c6 84 24 7f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8223], 0
  100d1	c6 84 24 80 20
	00 00 84	 mov	 BYTE PTR $T5[rsp+8224], 132 ; 00000084H
  100d9	c6 84 24 81 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8225], 53 ; 00000035H
  100e1	c6 84 24 82 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8226], 0
  100e9	c6 84 24 83 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8227], 0
  100f1	c6 84 24 84 20
	00 00 c8	 mov	 BYTE PTR $T5[rsp+8228], 200 ; 000000c8H
  100f9	c6 84 24 85 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8229], 16
  10101	c6 84 24 86 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8230], 0
  10109	c6 84 24 87 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8231], 0
  10111	c6 84 24 88 20
	00 00 ee	 mov	 BYTE PTR $T5[rsp+8232], 238 ; 000000eeH
  10119	c6 84 24 89 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8233], 16
  10121	c6 84 24 8a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8234], 0
  10129	c6 84 24 8b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8235], 0
  10131	c6 84 24 8c 20
	00 00 84	 mov	 BYTE PTR $T5[rsp+8236], 132 ; 00000084H
  10139	c6 84 24 8d 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8237], 53 ; 00000035H
  10141	c6 84 24 8e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8238], 0
  10149	c6 84 24 8f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8239], 0
  10151	c6 84 24 90 20
	00 00 ee	 mov	 BYTE PTR $T5[rsp+8240], 238 ; 000000eeH
  10159	c6 84 24 91 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8241], 16
  10161	c6 84 24 92 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8242], 0
  10169	c6 84 24 93 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8243], 0
  10171	c6 84 24 94 20
	00 00 fa	 mov	 BYTE PTR $T5[rsp+8244], 250 ; 000000faH
  10179	c6 84 24 95 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8245], 16
  10181	c6 84 24 96 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8246], 0
  10189	c6 84 24 97 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8247], 0
  10191	c6 84 24 98 20
	00 00 a0	 mov	 BYTE PTR $T5[rsp+8248], 160 ; 000000a0H
  10199	c6 84 24 99 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8249], 53 ; 00000035H
  101a1	c6 84 24 9a 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8250], 0
  101a9	c6 84 24 9b 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8251], 0
  101b1	c6 84 24 9c 20
	00 00 fa	 mov	 BYTE PTR $T5[rsp+8252], 250 ; 000000faH
  101b9	c6 84 24 9d 20
	00 00 10	 mov	 BYTE PTR $T5[rsp+8253], 16
  101c1	c6 84 24 9e 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8254], 0
  101c9	c6 84 24 9f 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8255], 0
  101d1	c6 84 24 a0 20
	00 00 5d	 mov	 BYTE PTR $T5[rsp+8256], 93 ; 0000005dH
  101d9	c6 84 24 a1 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8257], 17
  101e1	c6 84 24 a2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8258], 0
  101e9	c6 84 24 a3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8259], 0
  101f1	c6 84 24 a4 20
	00 00 b8	 mov	 BYTE PTR $T5[rsp+8260], 184 ; 000000b8H
  101f9	c6 84 24 a5 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8261], 53 ; 00000035H
  10201	c6 84 24 a6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8262], 0
  10209	c6 84 24 a7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8263], 0
  10211	c6 84 24 a8 20
	00 00 5d	 mov	 BYTE PTR $T5[rsp+8264], 93 ; 0000005dH
  10219	c6 84 24 a9 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8265], 17
  10221	c6 84 24 aa 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8266], 0
  10229	c6 84 24 ab 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8267], 0
  10231	c6 84 24 ac 20
	00 00 9f	 mov	 BYTE PTR $T5[rsp+8268], 159 ; 0000009fH
  10239	c6 84 24 ad 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8269], 17
  10241	c6 84 24 ae 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8270], 0
  10249	c6 84 24 af 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8271], 0
  10251	c6 84 24 b0 20
	00 00 d0	 mov	 BYTE PTR $T5[rsp+8272], 208 ; 000000d0H
  10259	c6 84 24 b1 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8273], 53 ; 00000035H
  10261	c6 84 24 b2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8274], 0
  10269	c6 84 24 b3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8275], 0
  10271	c6 84 24 b4 20
	00 00 9f	 mov	 BYTE PTR $T5[rsp+8276], 159 ; 0000009fH
  10279	c6 84 24 b5 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8277], 17
  10281	c6 84 24 b6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8278], 0
  10289	c6 84 24 b7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8279], 0
  10291	c6 84 24 b8 20
	00 00 ef	 mov	 BYTE PTR $T5[rsp+8280], 239 ; 000000efH
  10299	c6 84 24 b9 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8281], 17
  102a1	c6 84 24 ba 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8282], 0
  102a9	c6 84 24 bb 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8283], 0
  102b1	c6 84 24 bc 20
	00 00 e4	 mov	 BYTE PTR $T5[rsp+8284], 228 ; 000000e4H
  102b9	c6 84 24 bd 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8285], 53 ; 00000035H
  102c1	c6 84 24 be 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8286], 0
  102c9	c6 84 24 bf 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8287], 0
  102d1	c6 84 24 c0 20
	00 00 ef	 mov	 BYTE PTR $T5[rsp+8288], 239 ; 000000efH
  102d9	c6 84 24 c1 20
	00 00 11	 mov	 BYTE PTR $T5[rsp+8289], 17
  102e1	c6 84 24 c2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8290], 0
  102e9	c6 84 24 c3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8291], 0
  102f1	c6 84 24 c4 20
	00 00 27	 mov	 BYTE PTR $T5[rsp+8292], 39 ; 00000027H
  102f9	c6 84 24 c5 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8293], 18
  10301	c6 84 24 c6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8294], 0
  10309	c6 84 24 c7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8295], 0
  10311	c6 84 24 c8 20
	00 00 f8	 mov	 BYTE PTR $T5[rsp+8296], 248 ; 000000f8H
  10319	c6 84 24 c9 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8297], 53 ; 00000035H
  10321	c6 84 24 ca 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8298], 0
  10329	c6 84 24 cb 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8299], 0
  10331	c6 84 24 cc 20
	00 00 27	 mov	 BYTE PTR $T5[rsp+8300], 39 ; 00000027H
  10339	c6 84 24 cd 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8301], 18
  10341	c6 84 24 ce 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8302], 0
  10349	c6 84 24 cf 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8303], 0
  10351	c6 84 24 d0 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8304], 53 ; 00000035H
  10359	c6 84 24 d1 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8305], 18
  10361	c6 84 24 d2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8306], 0
  10369	c6 84 24 d3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8307], 0
  10371	c6 84 24 d4 20
	00 00 08	 mov	 BYTE PTR $T5[rsp+8308], 8
  10379	c6 84 24 d5 20
	00 00 36	 mov	 BYTE PTR $T5[rsp+8309], 54 ; 00000036H
  10381	c6 84 24 d6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8310], 0
  10389	c6 84 24 d7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8311], 0
  10391	c6 84 24 d8 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8312], 53 ; 00000035H
  10399	c6 84 24 d9 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8313], 18
  103a1	c6 84 24 da 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8314], 0
  103a9	c6 84 24 db 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8315], 0
  103b1	c6 84 24 dc 20
	00 00 4a	 mov	 BYTE PTR $T5[rsp+8316], 74 ; 0000004aH
  103b9	c6 84 24 dd 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8317], 18
  103c1	c6 84 24 de 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8318], 0
  103c9	c6 84 24 df 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8319], 0
  103d1	c6 84 24 e0 20
	00 00 18	 mov	 BYTE PTR $T5[rsp+8320], 24
  103d9	c6 84 24 e1 20
	00 00 36	 mov	 BYTE PTR $T5[rsp+8321], 54 ; 00000036H
  103e1	c6 84 24 e2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8322], 0
  103e9	c6 84 24 e3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8323], 0
  103f1	c6 84 24 e4 20
	00 00 4a	 mov	 BYTE PTR $T5[rsp+8324], 74 ; 0000004aH
  103f9	c6 84 24 e5 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8325], 18
  10401	c6 84 24 e6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8326], 0
  10409	c6 84 24 e7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8327], 0
  10411	c6 84 24 e8 20
	00 00 b3	 mov	 BYTE PTR $T5[rsp+8328], 179 ; 000000b3H
  10419	c6 84 24 e9 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8329], 18
  10421	c6 84 24 ea 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8330], 0
  10429	c6 84 24 eb 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8331], 0
  10431	c6 84 24 ec 20
	00 00 a0	 mov	 BYTE PTR $T5[rsp+8332], 160 ; 000000a0H
  10439	c6 84 24 ed 20
	00 00 35	 mov	 BYTE PTR $T5[rsp+8333], 53 ; 00000035H
  10441	c6 84 24 ee 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8334], 0
  10449	c6 84 24 ef 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8335], 0
  10451	c6 84 24 f0 20
	00 00 b3	 mov	 BYTE PTR $T5[rsp+8336], 179 ; 000000b3H
  10459	c6 84 24 f1 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8337], 18
  10461	c6 84 24 f2 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8338], 0
  10469	c6 84 24 f3 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8339], 0
  10471	c6 84 24 f4 20
	00 00 c9	 mov	 BYTE PTR $T5[rsp+8340], 201 ; 000000c9H
  10479	c6 84 24 f5 20
	00 00 12	 mov	 BYTE PTR $T5[rsp+8341], 18
  10481	c6 84 24 f6 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8342], 0
  10489	c6 84 24 f7 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8343], 0
  10491	c6 84 24 f8 20
	00 00 2c	 mov	 BYTE PTR $T5[rsp+8344], 44 ; 0000002cH
  10499	c6 84 24 f9 20
	00 00 36	 mov	 BYTE PTR $T5[rsp+8345], 54 ; 00000036H
  104a1	c6 84 24 fa 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8346], 0
  104a9	c6 84 24 fb 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8347], 0
  104b1	c6 84 24 fc 20
	00 00 50	 mov	 BYTE PTR $T5[rsp+8348], 80 ; 00000050H
  104b9	c6 84 24 fd 20
	00 00 13	 mov	 BYTE PTR $T5[rsp+8349], 19
  104c1	c6 84 24 fe 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8350], 0
  104c9	c6 84 24 ff 20
	00 00 00	 mov	 BYTE PTR $T5[rsp+8351], 0
  104d1	c6 84 24 00 21
	00 00 b1	 mov	 BYTE PTR $T5[rsp+8352], 177 ; 000000b1H
  104d9	c6 84 24 01 21
	00 00 14	 mov	 BYTE PTR $T5[rsp+8353], 20
  104e1	c6 84 24 02 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8354], 0
  104e9	c6 84 24 03 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8355], 0
  104f1	c6 84 24 04 21
	00 00 40	 mov	 BYTE PTR $T5[rsp+8356], 64 ; 00000040H
  104f9	c6 84 24 05 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8357], 54 ; 00000036H
  10501	c6 84 24 06 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8358], 0
  10509	c6 84 24 07 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8359], 0
  10511	c6 84 24 08 21
	00 00 b1	 mov	 BYTE PTR $T5[rsp+8360], 177 ; 000000b1H
  10519	c6 84 24 09 21
	00 00 14	 mov	 BYTE PTR $T5[rsp+8361], 20
  10521	c6 84 24 0a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8362], 0
  10529	c6 84 24 0b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8363], 0
  10531	c6 84 24 0c 21
	00 00 04	 mov	 BYTE PTR $T5[rsp+8364], 4
  10539	c6 84 24 0d 21
	00 00 15	 mov	 BYTE PTR $T5[rsp+8365], 21
  10541	c6 84 24 0e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8366], 0
  10549	c6 84 24 0f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8367], 0
  10551	c6 84 24 10 21
	00 00 50	 mov	 BYTE PTR $T5[rsp+8368], 80 ; 00000050H
  10559	c6 84 24 11 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8369], 54 ; 00000036H
  10561	c6 84 24 12 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8370], 0
  10569	c6 84 24 13 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8371], 0
  10571	c6 84 24 14 21
	00 00 04	 mov	 BYTE PTR $T5[rsp+8372], 4
  10579	c6 84 24 15 21
	00 00 15	 mov	 BYTE PTR $T5[rsp+8373], 21
  10581	c6 84 24 16 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8374], 0
  10589	c6 84 24 17 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8375], 0
  10591	c6 84 24 18 21
	00 00 54	 mov	 BYTE PTR $T5[rsp+8376], 84 ; 00000054H
  10599	c6 84 24 19 21
	00 00 15	 mov	 BYTE PTR $T5[rsp+8377], 21
  105a1	c6 84 24 1a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8378], 0
  105a9	c6 84 24 1b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8379], 0
  105b1	c6 84 24 1c 21
	00 00 64	 mov	 BYTE PTR $T5[rsp+8380], 100 ; 00000064H
  105b9	c6 84 24 1d 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8381], 54 ; 00000036H
  105c1	c6 84 24 1e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8382], 0
  105c9	c6 84 24 1f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8383], 0
  105d1	c6 84 24 20 21
	00 00 54	 mov	 BYTE PTR $T5[rsp+8384], 84 ; 00000054H
  105d9	c6 84 24 21 21
	00 00 15	 mov	 BYTE PTR $T5[rsp+8385], 21
  105e1	c6 84 24 22 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8386], 0
  105e9	c6 84 24 23 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8387], 0
  105f1	c6 84 24 24 21
	00 00 5e	 mov	 BYTE PTR $T5[rsp+8388], 94 ; 0000005eH
  105f9	c6 84 24 25 21
	00 00 19	 mov	 BYTE PTR $T5[rsp+8389], 25
  10601	c6 84 24 26 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8390], 0
  10609	c6 84 24 27 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8391], 0
  10611	c6 84 24 28 21
	00 00 80	 mov	 BYTE PTR $T5[rsp+8392], 128 ; 00000080H
  10619	c6 84 24 29 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8393], 54 ; 00000036H
  10621	c6 84 24 2a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8394], 0
  10629	c6 84 24 2b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8395], 0
  10631	c6 84 24 2c 21
	00 00 5e	 mov	 BYTE PTR $T5[rsp+8396], 94 ; 0000005eH
  10639	c6 84 24 2d 21
	00 00 19	 mov	 BYTE PTR $T5[rsp+8397], 25
  10641	c6 84 24 2e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8398], 0
  10649	c6 84 24 2f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8399], 0
  10651	c6 84 24 30 21
	00 00 3a	 mov	 BYTE PTR $T5[rsp+8400], 58 ; 0000003aH
  10659	c6 84 24 31 21
	00 00 1a	 mov	 BYTE PTR $T5[rsp+8401], 26
  10661	c6 84 24 32 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8402], 0
  10669	c6 84 24 33 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8403], 0
  10671	c6 84 24 34 21
	00 00 9c	 mov	 BYTE PTR $T5[rsp+8404], 156 ; 0000009cH
  10679	c6 84 24 35 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8405], 54 ; 00000036H
  10681	c6 84 24 36 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8406], 0
  10689	c6 84 24 37 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8407], 0
  10691	c6 84 24 38 21
	00 00 3a	 mov	 BYTE PTR $T5[rsp+8408], 58 ; 0000003aH
  10699	c6 84 24 39 21
	00 00 1a	 mov	 BYTE PTR $T5[rsp+8409], 26
  106a1	c6 84 24 3a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8410], 0
  106a9	c6 84 24 3b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8411], 0
  106b1	c6 84 24 3c 21
	00 00 4e	 mov	 BYTE PTR $T5[rsp+8412], 78 ; 0000004eH
  106b9	c6 84 24 3d 21
	00 00 1a	 mov	 BYTE PTR $T5[rsp+8413], 26
  106c1	c6 84 24 3e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8414], 0
  106c9	c6 84 24 3f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8415], 0
  106d1	c6 84 24 40 21
	00 00 ac	 mov	 BYTE PTR $T5[rsp+8416], 172 ; 000000acH
  106d9	c6 84 24 41 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8417], 54 ; 00000036H
  106e1	c6 84 24 42 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8418], 0
  106e9	c6 84 24 43 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8419], 0
  106f1	c6 84 24 44 21
	00 00 4e	 mov	 BYTE PTR $T5[rsp+8420], 78 ; 0000004eH
  106f9	c6 84 24 45 21
	00 00 1a	 mov	 BYTE PTR $T5[rsp+8421], 26
  10701	c6 84 24 46 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8422], 0
  10709	c6 84 24 47 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8423], 0
  10711	c6 84 24 48 21
	00 00 60	 mov	 BYTE PTR $T5[rsp+8424], 96 ; 00000060H
  10719	c6 84 24 49 21
	00 00 1b	 mov	 BYTE PTR $T5[rsp+8425], 27
  10721	c6 84 24 4a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8426], 0
  10729	c6 84 24 4b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8427], 0
  10731	c6 84 24 4c 21
	00 00 c0	 mov	 BYTE PTR $T5[rsp+8428], 192 ; 000000c0H
  10739	c6 84 24 4d 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8429], 54 ; 00000036H
  10741	c6 84 24 4e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8430], 0
  10749	c6 84 24 4f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8431], 0
  10751	c6 84 24 50 21
	00 00 60	 mov	 BYTE PTR $T5[rsp+8432], 96 ; 00000060H
  10759	c6 84 24 51 21
	00 00 1b	 mov	 BYTE PTR $T5[rsp+8433], 27
  10761	c6 84 24 52 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8434], 0
  10769	c6 84 24 53 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8435], 0
  10771	c6 84 24 54 21
	00 00 23	 mov	 BYTE PTR $T5[rsp+8436], 35 ; 00000023H
  10779	c6 84 24 55 21
	00 00 1c	 mov	 BYTE PTR $T5[rsp+8437], 28
  10781	c6 84 24 56 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8438], 0
  10789	c6 84 24 57 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8439], 0
  10791	c6 84 24 58 21
	00 00 fc	 mov	 BYTE PTR $T5[rsp+8440], 252 ; 000000fcH
  10799	c6 84 24 59 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8441], 54 ; 00000036H
  107a1	c6 84 24 5a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8442], 0
  107a9	c6 84 24 5b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8443], 0
  107b1	c6 84 24 5c 21
	00 00 30	 mov	 BYTE PTR $T5[rsp+8444], 48 ; 00000030H
  107b9	c6 84 24 5d 21
	00 00 1c	 mov	 BYTE PTR $T5[rsp+8445], 28
  107c1	c6 84 24 5e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8446], 0
  107c9	c6 84 24 5f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8447], 0
  107d1	c6 84 24 60 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8448], 29
  107d9	c6 84 24 61 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8449], 29
  107e1	c6 84 24 62 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8450], 0
  107e9	c6 84 24 63 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8451], 0
  107f1	c6 84 24 64 21
	00 00 e0	 mov	 BYTE PTR $T5[rsp+8452], 224 ; 000000e0H
  107f9	c6 84 24 65 21
	00 00 36	 mov	 BYTE PTR $T5[rsp+8453], 54 ; 00000036H
  10801	c6 84 24 66 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8454], 0
  10809	c6 84 24 67 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8455], 0
  10811	c6 84 24 68 21
	00 00 20	 mov	 BYTE PTR $T5[rsp+8456], 32 ; 00000020H
  10819	c6 84 24 69 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8457], 29
  10821	c6 84 24 6a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8458], 0
  10829	c6 84 24 6b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8459], 0
  10831	c6 84 24 6c 21
	00 00 54	 mov	 BYTE PTR $T5[rsp+8460], 84 ; 00000054H
  10839	c6 84 24 6d 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8461], 29
  10841	c6 84 24 6e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8462], 0
  10849	c6 84 24 6f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8463], 0
  10851	c6 84 24 70 21
	00 00 18	 mov	 BYTE PTR $T5[rsp+8464], 24
  10859	c6 84 24 71 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8465], 55 ; 00000037H
  10861	c6 84 24 72 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8466], 0
  10869	c6 84 24 73 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8467], 0
  10871	c6 84 24 74 21
	00 00 60	 mov	 BYTE PTR $T5[rsp+8468], 96 ; 00000060H
  10879	c6 84 24 75 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8469], 29
  10881	c6 84 24 76 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8470], 0
  10889	c6 84 24 77 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8471], 0
  10891	c6 84 24 78 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8472], 29
  10899	c6 84 24 79 21
	00 00 1e	 mov	 BYTE PTR $T5[rsp+8473], 30
  108a1	c6 84 24 7a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8474], 0
  108a9	c6 84 24 7b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8475], 0
  108b1	c6 84 24 7c 21
	00 00 24	 mov	 BYTE PTR $T5[rsp+8476], 36 ; 00000024H
  108b9	c6 84 24 7d 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8477], 55 ; 00000037H
  108c1	c6 84 24 7e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8478], 0
  108c9	c6 84 24 7f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8479], 0
  108d1	c6 84 24 80 21
	00 00 1d	 mov	 BYTE PTR $T5[rsp+8480], 29
  108d9	c6 84 24 81 21
	00 00 1e	 mov	 BYTE PTR $T5[rsp+8481], 30
  108e1	c6 84 24 82 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8482], 0
  108e9	c6 84 24 83 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8483], 0
  108f1	c6 84 24 84 21
	00 00 7c	 mov	 BYTE PTR $T5[rsp+8484], 124 ; 0000007cH
  108f9	c6 84 24 85 21
	00 00 1f	 mov	 BYTE PTR $T5[rsp+8485], 31
  10901	c6 84 24 86 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8486], 0
  10909	c6 84 24 87 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8487], 0
  10911	c6 84 24 88 21
	00 00 34	 mov	 BYTE PTR $T5[rsp+8488], 52 ; 00000034H
  10919	c6 84 24 89 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8489], 55 ; 00000037H
  10921	c6 84 24 8a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8490], 0
  10929	c6 84 24 8b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8491], 0
  10931	c6 84 24 8c 21
	00 00 7c	 mov	 BYTE PTR $T5[rsp+8492], 124 ; 0000007cH
  10939	c6 84 24 8d 21
	00 00 1f	 mov	 BYTE PTR $T5[rsp+8493], 31
  10941	c6 84 24 8e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8494], 0
  10949	c6 84 24 8f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8495], 0
  10951	c6 84 24 90 21
	00 00 9a	 mov	 BYTE PTR $T5[rsp+8496], 154 ; 0000009aH
  10959	c6 84 24 91 21
	00 00 1f	 mov	 BYTE PTR $T5[rsp+8497], 31
  10961	c6 84 24 92 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8498], 0
  10969	c6 84 24 93 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8499], 0
  10971	c6 84 24 94 21
	00 00 4c	 mov	 BYTE PTR $T5[rsp+8500], 76 ; 0000004cH
  10979	c6 84 24 95 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8501], 55 ; 00000037H
  10981	c6 84 24 96 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8502], 0
  10989	c6 84 24 97 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8503], 0
  10991	c6 84 24 98 21
	00 00 e0	 mov	 BYTE PTR $T5[rsp+8504], 224 ; 000000e0H
  10999	c6 84 24 99 21
	00 00 1f	 mov	 BYTE PTR $T5[rsp+8505], 31
  109a1	c6 84 24 9a 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8506], 0
  109a9	c6 84 24 9b 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8507], 0
  109b1	c6 84 24 9c 21
	00 00 e5	 mov	 BYTE PTR $T5[rsp+8508], 229 ; 000000e5H
  109b9	c6 84 24 9d 21
	00 00 1f	 mov	 BYTE PTR $T5[rsp+8509], 31
  109c1	c6 84 24 9e 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8510], 0
  109c9	c6 84 24 9f 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8511], 0
  109d1	c6 84 24 a0 21
	00 00 60	 mov	 BYTE PTR $T5[rsp+8512], 96 ; 00000060H
  109d9	c6 84 24 a1 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8513], 55 ; 00000037H
  109e1	c6 84 24 a2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8514], 0
  109e9	c6 84 24 a3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8515], 0
  109f1	c6 84 24 a4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8516], 0
  109f9	c6 84 24 a5 21
	00 00 20	 mov	 BYTE PTR $T5[rsp+8517], 32 ; 00000020H
  10a01	c6 84 24 a6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8518], 0
  10a09	c6 84 24 a7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8519], 0
  10a11	c6 84 24 a8 21
	00 00 e9	 mov	 BYTE PTR $T5[rsp+8520], 233 ; 000000e9H
  10a19	c6 84 24 a9 21
	00 00 20	 mov	 BYTE PTR $T5[rsp+8521], 32 ; 00000020H
  10a21	c6 84 24 aa 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8522], 0
  10a29	c6 84 24 ab 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8523], 0
  10a31	c6 84 24 ac 21
	00 00 68	 mov	 BYTE PTR $T5[rsp+8524], 104 ; 00000068H
  10a39	c6 84 24 ad 21
	00 00 37	 mov	 BYTE PTR $T5[rsp+8525], 55 ; 00000037H
  10a41	c6 84 24 ae 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8526], 0
  10a49	c6 84 24 af 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8527], 0
  10a51	c6 84 24 b0 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8528], 0
  10a59	c6 84 24 b1 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8529], 0
  10a61	c6 84 24 b2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8530], 0
  10a69	c6 84 24 b3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8531], 0
  10a71	c6 84 24 b4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8532], 0
  10a79	c6 84 24 b5 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8533], 0
  10a81	c6 84 24 b6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8534], 0
  10a89	c6 84 24 b7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8535], 0
  10a91	c6 84 24 b8 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8536], 0
  10a99	c6 84 24 b9 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8537], 0
  10aa1	c6 84 24 ba 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8538], 0
  10aa9	c6 84 24 bb 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8539], 0
  10ab1	c6 84 24 bc 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8540], 0
  10ab9	c6 84 24 bd 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8541], 0
  10ac1	c6 84 24 be 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8542], 0
  10ac9	c6 84 24 bf 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8543], 0
  10ad1	c6 84 24 c0 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8544], 0
  10ad9	c6 84 24 c1 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8545], 0
  10ae1	c6 84 24 c2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8546], 0
  10ae9	c6 84 24 c3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8547], 0
  10af1	c6 84 24 c4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8548], 0
  10af9	c6 84 24 c5 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8549], 0
  10b01	c6 84 24 c6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8550], 0
  10b09	c6 84 24 c7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8551], 0
  10b11	c6 84 24 c8 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8552], 0
  10b19	c6 84 24 c9 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8553], 0
  10b21	c6 84 24 ca 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8554], 0
  10b29	c6 84 24 cb 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8555], 0
  10b31	c6 84 24 cc 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8556], 0
  10b39	c6 84 24 cd 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8557], 0
  10b41	c6 84 24 ce 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8558], 0
  10b49	c6 84 24 cf 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8559], 0
  10b51	c6 84 24 d0 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8560], 0
  10b59	c6 84 24 d1 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8561], 0
  10b61	c6 84 24 d2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8562], 0
  10b69	c6 84 24 d3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8563], 0
  10b71	c6 84 24 d4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8564], 0
  10b79	c6 84 24 d5 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8565], 0
  10b81	c6 84 24 d6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8566], 0
  10b89	c6 84 24 d7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8567], 0
  10b91	c6 84 24 d8 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8568], 0
  10b99	c6 84 24 d9 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8569], 0
  10ba1	c6 84 24 da 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8570], 0
  10ba9	c6 84 24 db 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8571], 0
  10bb1	c6 84 24 dc 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8572], 0
  10bb9	c6 84 24 dd 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8573], 0
  10bc1	c6 84 24 de 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8574], 0
  10bc9	c6 84 24 df 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8575], 0
  10bd1	c6 84 24 e0 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8576], 0
  10bd9	c6 84 24 e1 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8577], 0
  10be1	c6 84 24 e2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8578], 0
  10be9	c6 84 24 e3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8579], 0
  10bf1	c6 84 24 e4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8580], 0
  10bf9	c6 84 24 e5 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8581], 0
  10c01	c6 84 24 e6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8582], 0
  10c09	c6 84 24 e7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8583], 0
  10c11	c6 84 24 e8 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8584], 0
  10c19	c6 84 24 e9 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8585], 0
  10c21	c6 84 24 ea 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8586], 0
  10c29	c6 84 24 eb 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8587], 0
  10c31	c6 84 24 ec 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8588], 0
  10c39	c6 84 24 ed 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8589], 0
  10c41	c6 84 24 ee 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8590], 0
  10c49	c6 84 24 ef 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8591], 0
  10c51	c6 84 24 f0 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8592], 0
  10c59	c6 84 24 f1 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8593], 0
  10c61	c6 84 24 f2 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8594], 0
  10c69	c6 84 24 f3 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8595], 0
  10c71	c6 84 24 f4 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8596], 0
  10c79	c6 84 24 f5 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8597], 0
  10c81	c6 84 24 f6 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8598], 0
  10c89	c6 84 24 f7 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8599], 0
  10c91	c6 84 24 f8 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8600], 0
  10c99	c6 84 24 f9 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8601], 0
  10ca1	c6 84 24 fa 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8602], 0
  10ca9	c6 84 24 fb 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8603], 0
  10cb1	c6 84 24 fc 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8604], 0
  10cb9	c6 84 24 fd 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8605], 0
  10cc1	c6 84 24 fe 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8606], 0
  10cc9	c6 84 24 ff 21
	00 00 00	 mov	 BYTE PTR $T5[rsp+8607], 0
  10cd1	c6 84 24 00 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8608], 0
  10cd9	c6 84 24 01 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8609], 0
  10ce1	c6 84 24 02 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8610], 0
  10ce9	c6 84 24 03 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8611], 0
  10cf1	c6 84 24 04 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8612], 0
  10cf9	c6 84 24 05 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8613], 0
  10d01	c6 84 24 06 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8614], 0
  10d09	c6 84 24 07 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8615], 0
  10d11	c6 84 24 08 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8616], 0
  10d19	c6 84 24 09 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8617], 0
  10d21	c6 84 24 0a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8618], 0
  10d29	c6 84 24 0b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8619], 0
  10d31	c6 84 24 0c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8620], 0
  10d39	c6 84 24 0d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8621], 0
  10d41	c6 84 24 0e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8622], 0
  10d49	c6 84 24 0f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8623], 0
  10d51	c6 84 24 10 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8624], 0
  10d59	c6 84 24 11 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8625], 0
  10d61	c6 84 24 12 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8626], 0
  10d69	c6 84 24 13 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8627], 0
  10d71	c6 84 24 14 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8628], 0
  10d79	c6 84 24 15 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8629], 0
  10d81	c6 84 24 16 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8630], 0
  10d89	c6 84 24 17 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8631], 0
  10d91	c6 84 24 18 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8632], 0
  10d99	c6 84 24 19 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8633], 0
  10da1	c6 84 24 1a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8634], 0
  10da9	c6 84 24 1b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8635], 0
  10db1	c6 84 24 1c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8636], 0
  10db9	c6 84 24 1d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8637], 0
  10dc1	c6 84 24 1e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8638], 0
  10dc9	c6 84 24 1f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8639], 0
  10dd1	c6 84 24 20 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8640], 0
  10dd9	c6 84 24 21 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8641], 0
  10de1	c6 84 24 22 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8642], 0
  10de9	c6 84 24 23 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8643], 0
  10df1	c6 84 24 24 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8644], 0
  10df9	c6 84 24 25 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8645], 0
  10e01	c6 84 24 26 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8646], 0
  10e09	c6 84 24 27 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8647], 0
  10e11	c6 84 24 28 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8648], 0
  10e19	c6 84 24 29 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8649], 0
  10e21	c6 84 24 2a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8650], 0
  10e29	c6 84 24 2b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8651], 0
  10e31	c6 84 24 2c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8652], 0
  10e39	c6 84 24 2d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8653], 0
  10e41	c6 84 24 2e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8654], 0
  10e49	c6 84 24 2f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8655], 0
  10e51	c6 84 24 30 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8656], 0
  10e59	c6 84 24 31 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8657], 0
  10e61	c6 84 24 32 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8658], 0
  10e69	c6 84 24 33 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8659], 0
  10e71	c6 84 24 34 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8660], 0
  10e79	c6 84 24 35 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8661], 0
  10e81	c6 84 24 36 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8662], 0
  10e89	c6 84 24 37 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8663], 0
  10e91	c6 84 24 38 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8664], 0
  10e99	c6 84 24 39 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8665], 0
  10ea1	c6 84 24 3a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8666], 0
  10ea9	c6 84 24 3b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8667], 0
  10eb1	c6 84 24 3c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8668], 0
  10eb9	c6 84 24 3d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8669], 0
  10ec1	c6 84 24 3e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8670], 0
  10ec9	c6 84 24 3f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8671], 0
  10ed1	c6 84 24 40 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8672], 0
  10ed9	c6 84 24 41 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8673], 0
  10ee1	c6 84 24 42 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8674], 0
  10ee9	c6 84 24 43 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8675], 0
  10ef1	c6 84 24 44 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8676], 0
  10ef9	c6 84 24 45 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8677], 0
  10f01	c6 84 24 46 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8678], 0
  10f09	c6 84 24 47 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8679], 0
  10f11	c6 84 24 48 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8680], 0
  10f19	c6 84 24 49 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8681], 0
  10f21	c6 84 24 4a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8682], 0
  10f29	c6 84 24 4b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8683], 0
  10f31	c6 84 24 4c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8684], 0
  10f39	c6 84 24 4d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8685], 0
  10f41	c6 84 24 4e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8686], 0
  10f49	c6 84 24 4f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8687], 0
  10f51	c6 84 24 50 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8688], 0
  10f59	c6 84 24 51 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8689], 0
  10f61	c6 84 24 52 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8690], 0
  10f69	c6 84 24 53 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8691], 0
  10f71	c6 84 24 54 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8692], 0
  10f79	c6 84 24 55 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8693], 0
  10f81	c6 84 24 56 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8694], 0
  10f89	c6 84 24 57 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8695], 0
  10f91	c6 84 24 58 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8696], 0
  10f99	c6 84 24 59 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8697], 0
  10fa1	c6 84 24 5a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8698], 0
  10fa9	c6 84 24 5b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8699], 0
  10fb1	c6 84 24 5c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8700], 0
  10fb9	c6 84 24 5d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8701], 0
  10fc1	c6 84 24 5e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8702], 0
  10fc9	c6 84 24 5f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8703], 0
  10fd1	c6 84 24 60 22
	00 00 28	 mov	 BYTE PTR $T5[rsp+8704], 40 ; 00000028H
  10fd9	c6 84 24 61 22
	00 00 60	 mov	 BYTE PTR $T5[rsp+8705], 96 ; 00000060H
  10fe1	c6 84 24 62 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8706], 0
  10fe9	c6 84 24 63 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8707], 0
  10ff1	c6 84 24 64 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8708], 0
  10ff9	c6 84 24 65 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8709], 0
  11001	c6 84 24 66 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8710], 0
  11009	c6 84 24 67 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8711], 0
  11011	c6 84 24 68 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8712], 0
  11019	c6 84 24 69 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8713], 0
  11021	c6 84 24 6a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8714], 0
  11029	c6 84 24 6b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8715], 0
  11031	c6 84 24 6c 22
	00 00 b2	 mov	 BYTE PTR $T5[rsp+8716], 178 ; 000000b2H
  11039	c6 84 24 6d 22
	00 00 62	 mov	 BYTE PTR $T5[rsp+8717], 98 ; 00000062H
  11041	c6 84 24 6e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8718], 0
  11049	c6 84 24 6f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8719], 0
  11051	c6 84 24 70 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8720], 0
  11059	c6 84 24 71 22
	00 00 30	 mov	 BYTE PTR $T5[rsp+8721], 48 ; 00000030H
  11061	c6 84 24 72 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8722], 0
  11069	c6 84 24 73 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8723], 0
  11071	c6 84 24 74 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8724], 0
  11079	c6 84 24 75 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8725], 0
  11081	c6 84 24 76 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8726], 0
  11089	c6 84 24 77 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8727], 0
  11091	c6 84 24 78 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8728], 0
  11099	c6 84 24 79 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8729], 0
  110a1	c6 84 24 7a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8730], 0
  110a9	c6 84 24 7b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8731], 0
  110b1	c6 84 24 7c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8732], 0
  110b9	c6 84 24 7d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8733], 0
  110c1	c6 84 24 7e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8734], 0
  110c9	c6 84 24 7f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8735], 0
  110d1	c6 84 24 80 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8736], 0
  110d9	c6 84 24 81 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8737], 0
  110e1	c6 84 24 82 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8738], 0
  110e9	c6 84 24 83 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8739], 0
  110f1	c6 84 24 84 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8740], 0
  110f9	c6 84 24 85 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8741], 0
  11101	c6 84 24 86 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8742], 0
  11109	c6 84 24 87 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8743], 0
  11111	c6 84 24 88 22
	00 00 d8	 mov	 BYTE PTR $T5[rsp+8744], 216 ; 000000d8H
  11119	c6 84 24 89 22
	00 00 60	 mov	 BYTE PTR $T5[rsp+8745], 96 ; 00000060H
  11121	c6 84 24 8a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8746], 0
  11129	c6 84 24 8b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8747], 0
  11131	c6 84 24 8c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8748], 0
  11139	c6 84 24 8d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8749], 0
  11141	c6 84 24 8e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8750], 0
  11149	c6 84 24 8f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8751], 0
  11151	c6 84 24 90 22
	00 00 ec	 mov	 BYTE PTR $T5[rsp+8752], 236 ; 000000ecH
  11159	c6 84 24 91 22
	00 00 60	 mov	 BYTE PTR $T5[rsp+8753], 96 ; 00000060H
  11161	c6 84 24 92 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8754], 0
  11169	c6 84 24 93 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8755], 0
  11171	c6 84 24 94 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8756], 0
  11179	c6 84 24 95 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8757], 0
  11181	c6 84 24 96 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8758], 0
  11189	c6 84 24 97 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8759], 0
  11191	c6 84 24 98 22
	00 00 0c	 mov	 BYTE PTR $T5[rsp+8760], 12
  11199	c6 84 24 99 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8761], 97 ; 00000061H
  111a1	c6 84 24 9a 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8762], 0
  111a9	c6 84 24 9b 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8763], 0
  111b1	c6 84 24 9c 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8764], 0
  111b9	c6 84 24 9d 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8765], 0
  111c1	c6 84 24 9e 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8766], 0
  111c9	c6 84 24 9f 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8767], 0
  111d1	c6 84 24 a0 22
	00 00 26	 mov	 BYTE PTR $T5[rsp+8768], 38 ; 00000026H
  111d9	c6 84 24 a1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8769], 97 ; 00000061H
  111e1	c6 84 24 a2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8770], 0
  111e9	c6 84 24 a3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8771], 0
  111f1	c6 84 24 a4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8772], 0
  111f9	c6 84 24 a5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8773], 0
  11201	c6 84 24 a6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8774], 0
  11209	c6 84 24 a7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8775], 0
  11211	c6 84 24 a8 22
	00 00 3e	 mov	 BYTE PTR $T5[rsp+8776], 62 ; 0000003eH
  11219	c6 84 24 a9 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8777], 97 ; 00000061H
  11221	c6 84 24 aa 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8778], 0
  11229	c6 84 24 ab 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8779], 0
  11231	c6 84 24 ac 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8780], 0
  11239	c6 84 24 ad 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8781], 0
  11241	c6 84 24 ae 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8782], 0
  11249	c6 84 24 af 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8783], 0
  11251	c6 84 24 b0 22
	00 00 52	 mov	 BYTE PTR $T5[rsp+8784], 82 ; 00000052H
  11259	c6 84 24 b1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8785], 97 ; 00000061H
  11261	c6 84 24 b2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8786], 0
  11269	c6 84 24 b3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8787], 0
  11271	c6 84 24 b4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8788], 0
  11279	c6 84 24 b5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8789], 0
  11281	c6 84 24 b6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8790], 0
  11289	c6 84 24 b7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8791], 0
  11291	c6 84 24 b8 22
	00 00 6a	 mov	 BYTE PTR $T5[rsp+8792], 106 ; 0000006aH
  11299	c6 84 24 b9 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8793], 97 ; 00000061H
  112a1	c6 84 24 ba 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8794], 0
  112a9	c6 84 24 bb 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8795], 0
  112b1	c6 84 24 bc 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8796], 0
  112b9	c6 84 24 bd 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8797], 0
  112c1	c6 84 24 be 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8798], 0
  112c9	c6 84 24 bf 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8799], 0
  112d1	c6 84 24 c0 22
	00 00 88	 mov	 BYTE PTR $T5[rsp+8800], 136 ; 00000088H
  112d9	c6 84 24 c1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8801], 97 ; 00000061H
  112e1	c6 84 24 c2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8802], 0
  112e9	c6 84 24 c3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8803], 0
  112f1	c6 84 24 c4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8804], 0
  112f9	c6 84 24 c5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8805], 0
  11301	c6 84 24 c6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8806], 0
  11309	c6 84 24 c7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8807], 0
  11311	c6 84 24 c8 22
	00 00 9a	 mov	 BYTE PTR $T5[rsp+8808], 154 ; 0000009aH
  11319	c6 84 24 c9 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8809], 97 ; 00000061H
  11321	c6 84 24 ca 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8810], 0
  11329	c6 84 24 cb 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8811], 0
  11331	c6 84 24 cc 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8812], 0
  11339	c6 84 24 cd 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8813], 0
  11341	c6 84 24 ce 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8814], 0
  11349	c6 84 24 cf 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8815], 0
  11351	c6 84 24 d0 22
	00 00 bc	 mov	 BYTE PTR $T5[rsp+8816], 188 ; 000000bcH
  11359	c6 84 24 d1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8817], 97 ; 00000061H
  11361	c6 84 24 d2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8818], 0
  11369	c6 84 24 d3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8819], 0
  11371	c6 84 24 d4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8820], 0
  11379	c6 84 24 d5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8821], 0
  11381	c6 84 24 d6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8822], 0
  11389	c6 84 24 d7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8823], 0
  11391	c6 84 24 d8 22
	00 00 c6	 mov	 BYTE PTR $T5[rsp+8824], 198 ; 000000c6H
  11399	c6 84 24 d9 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8825], 97 ; 00000061H
  113a1	c6 84 24 da 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8826], 0
  113a9	c6 84 24 db 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8827], 0
  113b1	c6 84 24 dc 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8828], 0
  113b9	c6 84 24 dd 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8829], 0
  113c1	c6 84 24 de 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8830], 0
  113c9	c6 84 24 df 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8831], 0
  113d1	c6 84 24 e0 22
	00 00 d4	 mov	 BYTE PTR $T5[rsp+8832], 212 ; 000000d4H
  113d9	c6 84 24 e1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8833], 97 ; 00000061H
  113e1	c6 84 24 e2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8834], 0
  113e9	c6 84 24 e3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8835], 0
  113f1	c6 84 24 e4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8836], 0
  113f9	c6 84 24 e5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8837], 0
  11401	c6 84 24 e6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8838], 0
  11409	c6 84 24 e7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8839], 0
  11411	c6 84 24 e8 22
	00 00 e2	 mov	 BYTE PTR $T5[rsp+8840], 226 ; 000000e2H
  11419	c6 84 24 e9 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8841], 97 ; 00000061H
  11421	c6 84 24 ea 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8842], 0
  11429	c6 84 24 eb 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8843], 0
  11431	c6 84 24 ec 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8844], 0
  11439	c6 84 24 ed 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8845], 0
  11441	c6 84 24 ee 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8846], 0
  11449	c6 84 24 ef 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8847], 0
  11451	c6 84 24 f0 22
	00 00 fc	 mov	 BYTE PTR $T5[rsp+8848], 252 ; 000000fcH
  11459	c6 84 24 f1 22
	00 00 61	 mov	 BYTE PTR $T5[rsp+8849], 97 ; 00000061H
  11461	c6 84 24 f2 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8850], 0
  11469	c6 84 24 f3 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8851], 0
  11471	c6 84 24 f4 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8852], 0
  11479	c6 84 24 f5 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8853], 0
  11481	c6 84 24 f6 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8854], 0
  11489	c6 84 24 f7 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8855], 0
  11491	c6 84 24 f8 22
	00 00 12	 mov	 BYTE PTR $T5[rsp+8856], 18
  11499	c6 84 24 f9 22
	00 00 62	 mov	 BYTE PTR $T5[rsp+8857], 98 ; 00000062H
  114a1	c6 84 24 fa 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8858], 0
  114a9	c6 84 24 fb 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8859], 0
  114b1	c6 84 24 fc 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8860], 0
  114b9	c6 84 24 fd 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8861], 0
  114c1	c6 84 24 fe 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8862], 0
  114c9	c6 84 24 ff 22
	00 00 00	 mov	 BYTE PTR $T5[rsp+8863], 0
  114d1	c6 84 24 00 23
	00 00 2a	 mov	 BYTE PTR $T5[rsp+8864], 42 ; 0000002aH
  114d9	c6 84 24 01 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8865], 98 ; 00000062H
  114e1	c6 84 24 02 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8866], 0
  114e9	c6 84 24 03 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8867], 0
  114f1	c6 84 24 04 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8868], 0
  114f9	c6 84 24 05 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8869], 0
  11501	c6 84 24 06 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8870], 0
  11509	c6 84 24 07 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8871], 0
  11511	c6 84 24 08 23
	00 00 4a	 mov	 BYTE PTR $T5[rsp+8872], 74 ; 0000004aH
  11519	c6 84 24 09 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8873], 98 ; 00000062H
  11521	c6 84 24 0a 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8874], 0
  11529	c6 84 24 0b 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8875], 0
  11531	c6 84 24 0c 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8876], 0
  11539	c6 84 24 0d 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8877], 0
  11541	c6 84 24 0e 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8878], 0
  11549	c6 84 24 0f 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8879], 0
  11551	c6 84 24 10 23
	00 00 5e	 mov	 BYTE PTR $T5[rsp+8880], 94 ; 0000005eH
  11559	c6 84 24 11 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8881], 98 ; 00000062H
  11561	c6 84 24 12 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8882], 0
  11569	c6 84 24 13 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8883], 0
  11571	c6 84 24 14 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8884], 0
  11579	c6 84 24 15 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8885], 0
  11581	c6 84 24 16 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8886], 0
  11589	c6 84 24 17 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8887], 0
  11591	c6 84 24 18 23
	00 00 70	 mov	 BYTE PTR $T5[rsp+8888], 112 ; 00000070H
  11599	c6 84 24 19 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8889], 98 ; 00000062H
  115a1	c6 84 24 1a 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8890], 0
  115a9	c6 84 24 1b 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8891], 0
  115b1	c6 84 24 1c 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8892], 0
  115b9	c6 84 24 1d 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8893], 0
  115c1	c6 84 24 1e 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8894], 0
  115c9	c6 84 24 1f 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8895], 0
  115d1	c6 84 24 20 23
	00 00 84	 mov	 BYTE PTR $T5[rsp+8896], 132 ; 00000084H
  115d9	c6 84 24 21 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8897], 98 ; 00000062H
  115e1	c6 84 24 22 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8898], 0
  115e9	c6 84 24 23 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8899], 0
  115f1	c6 84 24 24 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8900], 0
  115f9	c6 84 24 25 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8901], 0
  11601	c6 84 24 26 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8902], 0
  11609	c6 84 24 27 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8903], 0
  11611	c6 84 24 28 23
	00 00 96	 mov	 BYTE PTR $T5[rsp+8904], 150 ; 00000096H
  11619	c6 84 24 29 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+8905], 98 ; 00000062H
  11621	c6 84 24 2a 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8906], 0
  11629	c6 84 24 2b 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8907], 0
  11631	c6 84 24 2c 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8908], 0
  11639	c6 84 24 2d 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8909], 0
  11641	c6 84 24 2e 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8910], 0
  11649	c6 84 24 2f 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8911], 0
  11651	c6 84 24 30 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8912], 0
  11659	c6 84 24 31 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8913], 0
  11661	c6 84 24 32 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8914], 0
  11669	c6 84 24 33 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8915], 0
  11671	c6 84 24 34 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8916], 0
  11679	c6 84 24 35 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8917], 0
  11681	c6 84 24 36 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8918], 0
  11689	c6 84 24 37 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8919], 0
  11691	c6 84 24 38 23
	00 00 76	 mov	 BYTE PTR $T5[rsp+8920], 118 ; 00000076H
  11699	c6 84 24 39 23
	00 00 08	 mov	 BYTE PTR $T5[rsp+8921], 8
  116a1	c6 84 24 3a 23
	00 00 52	 mov	 BYTE PTR $T5[rsp+8922], 82 ; 00000052H
  116a9	c6 84 24 3b 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8923], 116 ; 00000074H
  116b1	c6 84 24 3c 23
	00 00 6c	 mov	 BYTE PTR $T5[rsp+8924], 108 ; 0000006cH
  116b9	c6 84 24 3d 23
	00 00 49	 mov	 BYTE PTR $T5[rsp+8925], 73 ; 00000049H
  116c1	c6 84 24 3e 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8926], 110 ; 0000006eH
  116c9	c6 84 24 3f 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8927], 105 ; 00000069H
  116d1	c6 84 24 40 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8928], 116 ; 00000074H
  116d9	c6 84 24 41 23
	00 00 41	 mov	 BYTE PTR $T5[rsp+8929], 65 ; 00000041H
  116e1	c6 84 24 42 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8930], 110 ; 0000006eH
  116e9	c6 84 24 43 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+8931], 115 ; 00000073H
  116f1	c6 84 24 44 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8932], 105 ; 00000069H
  116f9	c6 84 24 45 23
	00 00 53	 mov	 BYTE PTR $T5[rsp+8933], 83 ; 00000053H
  11701	c6 84 24 46 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8934], 116 ; 00000074H
  11709	c6 84 24 47 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+8935], 114 ; 00000072H
  11711	c6 84 24 48 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8936], 105 ; 00000069H
  11719	c6 84 24 49 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8937], 110 ; 0000006eH
  11721	c6 84 24 4a 23
	00 00 67	 mov	 BYTE PTR $T5[rsp+8938], 103 ; 00000067H
  11729	c6 84 24 4b 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8939], 0
  11731	c6 84 24 4c 23
	00 00 a4	 mov	 BYTE PTR $T5[rsp+8940], 164 ; 000000a4H
  11739	c6 84 24 4d 23
	00 00 07	 mov	 BYTE PTR $T5[rsp+8941], 7
  11741	c6 84 24 4e 23
	00 00 52	 mov	 BYTE PTR $T5[rsp+8942], 82 ; 00000052H
  11749	c6 84 24 4f 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8943], 116 ; 00000074H
  11751	c6 84 24 50 23
	00 00 6c	 mov	 BYTE PTR $T5[rsp+8944], 108 ; 0000006cH
  11759	c6 84 24 51 23
	00 00 41	 mov	 BYTE PTR $T5[rsp+8945], 65 ; 00000041H
  11761	c6 84 24 52 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8946], 110 ; 0000006eH
  11769	c6 84 24 53 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+8947], 115 ; 00000073H
  11771	c6 84 24 54 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8948], 105 ; 00000069H
  11779	c6 84 24 55 23
	00 00 53	 mov	 BYTE PTR $T5[rsp+8949], 83 ; 00000053H
  11781	c6 84 24 56 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8950], 116 ; 00000074H
  11789	c6 84 24 57 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+8951], 114 ; 00000072H
  11791	c6 84 24 58 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8952], 105 ; 00000069H
  11799	c6 84 24 59 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8953], 110 ; 0000006eH
  117a1	c6 84 24 5a 23
	00 00 67	 mov	 BYTE PTR $T5[rsp+8954], 103 ; 00000067H
  117a9	c6 84 24 5b 23
	00 00 54	 mov	 BYTE PTR $T5[rsp+8955], 84 ; 00000054H
  117b1	c6 84 24 5c 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8956], 111 ; 0000006fH
  117b9	c6 84 24 5d 23
	00 00 55	 mov	 BYTE PTR $T5[rsp+8957], 85 ; 00000055H
  117c1	c6 84 24 5e 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8958], 110 ; 0000006eH
  117c9	c6 84 24 5f 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8959], 105 ; 00000069H
  117d1	c6 84 24 60 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+8960], 99 ; 00000063H
  117d9	c6 84 24 61 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8961], 111 ; 0000006fH
  117e1	c6 84 24 62 23
	00 00 64	 mov	 BYTE PTR $T5[rsp+8962], 100 ; 00000064H
  117e9	c6 84 24 63 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+8963], 101 ; 00000065H
  117f1	c6 84 24 64 23
	00 00 53	 mov	 BYTE PTR $T5[rsp+8964], 83 ; 00000053H
  117f9	c6 84 24 65 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8965], 116 ; 00000074H
  11801	c6 84 24 66 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+8966], 114 ; 00000072H
  11809	c6 84 24 67 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8967], 105 ; 00000069H
  11811	c6 84 24 68 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8968], 110 ; 0000006eH
  11819	c6 84 24 69 23
	00 00 67	 mov	 BYTE PTR $T5[rsp+8969], 103 ; 00000067H
  11821	c6 84 24 6a 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8970], 0
  11829	c6 84 24 6b 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8971], 0
  11831	c6 84 24 6c 23
	00 00 c9	 mov	 BYTE PTR $T5[rsp+8972], 201 ; 000000c9H
  11839	c6 84 24 6d 23
	00 00 07	 mov	 BYTE PTR $T5[rsp+8973], 7
  11841	c6 84 24 6e 23
	00 00 52	 mov	 BYTE PTR $T5[rsp+8974], 82 ; 00000052H
  11849	c6 84 24 6f 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8975], 116 ; 00000074H
  11851	c6 84 24 70 23
	00 00 6c	 mov	 BYTE PTR $T5[rsp+8976], 108 ; 0000006cH
  11859	c6 84 24 71 23
	00 00 43	 mov	 BYTE PTR $T5[rsp+8977], 67 ; 00000043H
  11861	c6 84 24 72 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8978], 111 ; 0000006fH
  11869	c6 84 24 73 23
	00 00 6d	 mov	 BYTE PTR $T5[rsp+8979], 109 ; 0000006dH
  11871	c6 84 24 74 23
	00 00 70	 mov	 BYTE PTR $T5[rsp+8980], 112 ; 00000070H
  11879	c6 84 24 75 23
	00 00 61	 mov	 BYTE PTR $T5[rsp+8981], 97 ; 00000061H
  11881	c6 84 24 76 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+8982], 114 ; 00000072H
  11889	c6 84 24 77 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+8983], 101 ; 00000065H
  11891	c6 84 24 78 23
	00 00 55	 mov	 BYTE PTR $T5[rsp+8984], 85 ; 00000055H
  11899	c6 84 24 79 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8985], 110 ; 0000006eH
  118a1	c6 84 24 7a 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8986], 105 ; 00000069H
  118a9	c6 84 24 7b 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+8987], 99 ; 00000063H
  118b1	c6 84 24 7c 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+8988], 111 ; 0000006fH
  118b9	c6 84 24 7d 23
	00 00 64	 mov	 BYTE PTR $T5[rsp+8989], 100 ; 00000064H
  118c1	c6 84 24 7e 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+8990], 101 ; 00000065H
  118c9	c6 84 24 7f 23
	00 00 53	 mov	 BYTE PTR $T5[rsp+8991], 83 ; 00000053H
  118d1	c6 84 24 80 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+8992], 116 ; 00000074H
  118d9	c6 84 24 81 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+8993], 114 ; 00000072H
  118e1	c6 84 24 82 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+8994], 105 ; 00000069H
  118e9	c6 84 24 83 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+8995], 110 ; 0000006eH
  118f1	c6 84 24 84 23
	00 00 67	 mov	 BYTE PTR $T5[rsp+8996], 103 ; 00000067H
  118f9	c6 84 24 85 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+8997], 0
  11901	c6 84 24 86 23
	00 00 43	 mov	 BYTE PTR $T5[rsp+8998], 67 ; 00000043H
  11909	c6 84 24 87 23
	00 00 08	 mov	 BYTE PTR $T5[rsp+8999], 8
  11911	c6 84 24 88 23
	00 00 52	 mov	 BYTE PTR $T5[rsp+9000], 82 ; 00000052H
  11919	c6 84 24 89 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+9001], 116 ; 00000074H
  11921	c6 84 24 8a 23
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9002], 108 ; 0000006cH
  11929	c6 84 24 8b 23
	00 00 46	 mov	 BYTE PTR $T5[rsp+9003], 70 ; 00000046H
  11931	c6 84 24 8c 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9004], 114 ; 00000072H
  11939	c6 84 24 8d 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9005], 101 ; 00000065H
  11941	c6 84 24 8e 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9006], 101 ; 00000065H
  11949	c6 84 24 8f 23
	00 00 55	 mov	 BYTE PTR $T5[rsp+9007], 85 ; 00000055H
  11951	c6 84 24 90 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9008], 110 ; 0000006eH
  11959	c6 84 24 91 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+9009], 105 ; 00000069H
  11961	c6 84 24 92 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9010], 99 ; 00000063H
  11969	c6 84 24 93 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9011], 111 ; 0000006fH
  11971	c6 84 24 94 23
	00 00 64	 mov	 BYTE PTR $T5[rsp+9012], 100 ; 00000064H
  11979	c6 84 24 95 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9013], 101 ; 00000065H
  11981	c6 84 24 96 23
	00 00 53	 mov	 BYTE PTR $T5[rsp+9014], 83 ; 00000053H
  11989	c6 84 24 97 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+9015], 116 ; 00000074H
  11991	c6 84 24 98 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9016], 114 ; 00000072H
  11999	c6 84 24 99 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+9017], 105 ; 00000069H
  119a1	c6 84 24 9a 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9018], 110 ; 0000006eH
  119a9	c6 84 24 9b 23
	00 00 67	 mov	 BYTE PTR $T5[rsp+9019], 103 ; 00000067H
  119b1	c6 84 24 9c 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9020], 0
  119b9	c6 84 24 9d 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9021], 0
  119c1	c6 84 24 9e 23
	00 00 d1	 mov	 BYTE PTR $T5[rsp+9022], 209 ; 000000d1H
  119c9	c6 84 24 9f 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9023], 0
  119d1	c6 84 24 a0 23
	00 00 45	 mov	 BYTE PTR $T5[rsp+9024], 69 ; 00000045H
  119d9	c6 84 24 a1 23
	00 00 78	 mov	 BYTE PTR $T5[rsp+9025], 120 ; 00000078H
  119e1	c6 84 24 a2 23
	00 00 47	 mov	 BYTE PTR $T5[rsp+9026], 71 ; 00000047H
  119e9	c6 84 24 a3 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9027], 101 ; 00000065H
  119f1	c6 84 24 a4 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+9028], 116 ; 00000074H
  119f9	c6 84 24 a5 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9029], 80 ; 00000050H
  11a01	c6 84 24 a6 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9030], 114 ; 00000072H
  11a09	c6 84 24 a7 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9031], 101 ; 00000065H
  11a11	c6 84 24 a8 23
	00 00 76	 mov	 BYTE PTR $T5[rsp+9032], 118 ; 00000076H
  11a19	c6 84 24 a9 23
	00 00 69	 mov	 BYTE PTR $T5[rsp+9033], 105 ; 00000069H
  11a21	c6 84 24 aa 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9034], 111 ; 0000006fH
  11a29	c6 84 24 ab 23
	00 00 75	 mov	 BYTE PTR $T5[rsp+9035], 117 ; 00000075H
  11a31	c6 84 24 ac 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9036], 115 ; 00000073H
  11a39	c6 84 24 ad 23
	00 00 4d	 mov	 BYTE PTR $T5[rsp+9037], 77 ; 0000004dH
  11a41	c6 84 24 ae 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9038], 111 ; 0000006fH
  11a49	c6 84 24 af 23
	00 00 64	 mov	 BYTE PTR $T5[rsp+9039], 100 ; 00000064H
  11a51	c6 84 24 b0 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9040], 101 ; 00000065H
  11a59	c6 84 24 b1 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9041], 0
  11a61	c6 84 24 b2 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9042], 115 ; 00000073H
  11a69	c6 84 24 b3 23
	00 00 06	 mov	 BYTE PTR $T5[rsp+9043], 6
  11a71	c6 84 24 b4 23
	00 00 4f	 mov	 BYTE PTR $T5[rsp+9044], 79 ; 0000004fH
  11a79	c6 84 24 b5 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+9045], 98 ; 00000062H
  11a81	c6 84 24 b6 23
	00 00 66	 mov	 BYTE PTR $T5[rsp+9046], 102 ; 00000066H
  11a89	c6 84 24 b7 23
	00 00 44	 mov	 BYTE PTR $T5[rsp+9047], 68 ; 00000044H
  11a91	c6 84 24 b8 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9048], 101 ; 00000065H
  11a99	c6 84 24 b9 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9049], 114 ; 00000072H
  11aa1	c6 84 24 ba 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9050], 101 ; 00000065H
  11aa9	c6 84 24 bb 23
	00 00 66	 mov	 BYTE PTR $T5[rsp+9051], 102 ; 00000066H
  11ab1	c6 84 24 bc 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9052], 101 ; 00000065H
  11ab9	c6 84 24 bd 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9053], 114 ; 00000072H
  11ac1	c6 84 24 be 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9054], 101 ; 00000065H
  11ac9	c6 84 24 bf 23
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9055], 110 ; 0000006eH
  11ad1	c6 84 24 c0 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9056], 99 ; 00000063H
  11ad9	c6 84 24 c1 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9057], 101 ; 00000065H
  11ae1	c6 84 24 c2 23
	00 00 4f	 mov	 BYTE PTR $T5[rsp+9058], 79 ; 0000004fH
  11ae9	c6 84 24 c3 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+9059], 98 ; 00000062H
  11af1	c6 84 24 c4 23
	00 00 6a	 mov	 BYTE PTR $T5[rsp+9060], 106 ; 0000006aH
  11af9	c6 84 24 c5 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9061], 101 ; 00000065H
  11b01	c6 84 24 c6 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9062], 99 ; 00000063H
  11b09	c6 84 24 c7 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+9063], 116 ; 00000074H
  11b11	c6 84 24 c8 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9064], 0
  11b19	c6 84 24 c9 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9065], 0
  11b21	c6 84 24 ca 23
	00 00 4f	 mov	 BYTE PTR $T5[rsp+9066], 79 ; 0000004fH
  11b29	c6 84 24 cb 23
	00 00 07	 mov	 BYTE PTR $T5[rsp+9067], 7
  11b31	c6 84 24 cc 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9068], 80 ; 00000050H
  11b39	c6 84 24 cd 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9069], 115 ; 00000073H
  11b41	c6 84 24 ce 23
	00 00 4c	 mov	 BYTE PTR $T5[rsp+9070], 76 ; 0000004cH
  11b49	c6 84 24 cf 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9071], 111 ; 0000006fH
  11b51	c6 84 24 d0 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9072], 111 ; 0000006fH
  11b59	c6 84 24 d1 23
	00 00 6b	 mov	 BYTE PTR $T5[rsp+9073], 107 ; 0000006bH
  11b61	c6 84 24 d2 23
	00 00 75	 mov	 BYTE PTR $T5[rsp+9074], 117 ; 00000075H
  11b69	c6 84 24 d3 23
	00 00 70	 mov	 BYTE PTR $T5[rsp+9075], 112 ; 00000070H
  11b71	c6 84 24 d4 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9076], 80 ; 00000050H
  11b79	c6 84 24 d5 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9077], 114 ; 00000072H
  11b81	c6 84 24 d6 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9078], 111 ; 0000006fH
  11b89	c6 84 24 d7 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9079], 99 ; 00000063H
  11b91	c6 84 24 d8 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9080], 101 ; 00000065H
  11b99	c6 84 24 d9 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9081], 115 ; 00000073H
  11ba1	c6 84 24 da 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9082], 115 ; 00000073H
  11ba9	c6 84 24 db 23
	00 00 42	 mov	 BYTE PTR $T5[rsp+9083], 66 ; 00000042H
  11bb1	c6 84 24 dc 23
	00 00 79	 mov	 BYTE PTR $T5[rsp+9084], 121 ; 00000079H
  11bb9	c6 84 24 dd 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9085], 80 ; 00000050H
  11bc1	c6 84 24 de 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9086], 114 ; 00000072H
  11bc9	c6 84 24 df 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9087], 111 ; 0000006fH
  11bd1	c6 84 24 e0 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9088], 99 ; 00000063H
  11bd9	c6 84 24 e1 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9089], 101 ; 00000065H
  11be1	c6 84 24 e2 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9090], 115 ; 00000073H
  11be9	c6 84 24 e3 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9091], 115 ; 00000073H
  11bf1	c6 84 24 e4 23
	00 00 49	 mov	 BYTE PTR $T5[rsp+9092], 73 ; 00000049H
  11bf9	c6 84 24 e5 23
	00 00 64	 mov	 BYTE PTR $T5[rsp+9093], 100 ; 00000064H
  11c01	c6 84 24 e6 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9094], 0
  11c09	c6 84 24 e7 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9095], 0
  11c11	c6 84 24 e8 23
	00 00 14	 mov	 BYTE PTR $T5[rsp+9096], 20
  11c19	c6 84 24 e9 23
	00 00 07	 mov	 BYTE PTR $T5[rsp+9097], 7
  11c21	c6 84 24 ea 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9098], 80 ; 00000050H
  11c29	c6 84 24 eb 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9099], 115 ; 00000073H
  11c31	c6 84 24 ec 23
	00 00 47	 mov	 BYTE PTR $T5[rsp+9100], 71 ; 00000047H
  11c39	c6 84 24 ed 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9101], 101 ; 00000065H
  11c41	c6 84 24 ee 23
	00 00 74	 mov	 BYTE PTR $T5[rsp+9102], 116 ; 00000074H
  11c49	c6 84 24 ef 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9103], 80 ; 00000050H
  11c51	c6 84 24 f0 23
	00 00 72	 mov	 BYTE PTR $T5[rsp+9104], 114 ; 00000072H
  11c59	c6 84 24 f1 23
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9105], 111 ; 0000006fH
  11c61	c6 84 24 f2 23
	00 00 63	 mov	 BYTE PTR $T5[rsp+9106], 99 ; 00000063H
  11c69	c6 84 24 f3 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9107], 101 ; 00000065H
  11c71	c6 84 24 f4 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9108], 115 ; 00000073H
  11c79	c6 84 24 f5 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9109], 115 ; 00000073H
  11c81	c6 84 24 f6 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9110], 80 ; 00000050H
  11c89	c6 84 24 f7 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9111], 101 ; 00000065H
  11c91	c6 84 24 f8 23
	00 00 62	 mov	 BYTE PTR $T5[rsp+9112], 98 ; 00000062H
  11c99	c6 84 24 f9 23
	00 00 00	 mov	 BYTE PTR $T5[rsp+9113], 0
  11ca1	c6 84 24 fa 23
	00 00 17	 mov	 BYTE PTR $T5[rsp+9114], 23
  11ca9	c6 84 24 fb 23
	00 00 07	 mov	 BYTE PTR $T5[rsp+9115], 7
  11cb1	c6 84 24 fc 23
	00 00 50	 mov	 BYTE PTR $T5[rsp+9116], 80 ; 00000050H
  11cb9	c6 84 24 fd 23
	00 00 73	 mov	 BYTE PTR $T5[rsp+9117], 115 ; 00000073H
  11cc1	c6 84 24 fe 23
	00 00 47	 mov	 BYTE PTR $T5[rsp+9118], 71 ; 00000047H
  11cc9	c6 84 24 ff 23
	00 00 65	 mov	 BYTE PTR $T5[rsp+9119], 101 ; 00000065H
  11cd1	c6 84 24 00 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9120], 116 ; 00000074H
  11cd9	c6 84 24 01 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9121], 80 ; 00000050H
  11ce1	c6 84 24 02 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9122], 114 ; 00000072H
  11ce9	c6 84 24 03 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9123], 111 ; 0000006fH
  11cf1	c6 84 24 04 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9124], 99 ; 00000063H
  11cf9	c6 84 24 05 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9125], 101 ; 00000065H
  11d01	c6 84 24 06 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9126], 115 ; 00000073H
  11d09	c6 84 24 07 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9127], 115 ; 00000073H
  11d11	c6 84 24 08 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9128], 83 ; 00000053H
  11d19	c6 84 24 09 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9129], 101 ; 00000065H
  11d21	c6 84 24 0a 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9130], 99 ; 00000063H
  11d29	c6 84 24 0b 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9131], 116 ; 00000074H
  11d31	c6 84 24 0c 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9132], 105 ; 00000069H
  11d39	c6 84 24 0d 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9133], 111 ; 0000006fH
  11d41	c6 84 24 0e 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9134], 110 ; 0000006eH
  11d49	c6 84 24 0f 24
	00 00 42	 mov	 BYTE PTR $T5[rsp+9135], 66 ; 00000042H
  11d51	c6 84 24 10 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9136], 97 ; 00000061H
  11d59	c6 84 24 11 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9137], 115 ; 00000073H
  11d61	c6 84 24 12 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9138], 101 ; 00000065H
  11d69	c6 84 24 13 24
	00 00 41	 mov	 BYTE PTR $T5[rsp+9139], 65 ; 00000041H
  11d71	c6 84 24 14 24
	00 00 64	 mov	 BYTE PTR $T5[rsp+9140], 100 ; 00000064H
  11d79	c6 84 24 15 24
	00 00 64	 mov	 BYTE PTR $T5[rsp+9141], 100 ; 00000064H
  11d81	c6 84 24 16 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9142], 114 ; 00000072H
  11d89	c6 84 24 17 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9143], 101 ; 00000065H
  11d91	c6 84 24 18 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9144], 115 ; 00000073H
  11d99	c6 84 24 19 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9145], 115 ; 00000073H
  11da1	c6 84 24 1a 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9146], 0
  11da9	c6 84 24 1b 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9147], 0
  11db1	c6 84 24 1c 24
	00 00 ce	 mov	 BYTE PTR $T5[rsp+9148], 206 ; 000000ceH
  11db9	c6 84 24 1d 24
	00 00 0b	 mov	 BYTE PTR $T5[rsp+9149], 11
  11dc1	c6 84 24 1e 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9150], 115 ; 00000073H
  11dc9	c6 84 24 1f 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9151], 116 ; 00000074H
  11dd1	c6 84 24 20 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9152], 114 ; 00000072H
  11dd9	c6 84 24 21 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9153], 115 ; 00000073H
  11de1	c6 84 24 22 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9154], 116 ; 00000074H
  11de9	c6 84 24 23 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9155], 114 ; 00000072H
  11df1	c6 84 24 24 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9156], 0
  11df9	c6 84 24 25 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9157], 0
  11e01	c6 84 24 26 24
	00 00 5e	 mov	 BYTE PTR $T5[rsp+9158], 94 ; 0000005eH
  11e09	c6 84 24 27 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9159], 0
  11e11	c6 84 24 28 24
	00 00 44	 mov	 BYTE PTR $T5[rsp+9160], 68 ; 00000044H
  11e19	c6 84 24 29 24
	00 00 62	 mov	 BYTE PTR $T5[rsp+9161], 98 ; 00000062H
  11e21	c6 84 24 2a 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9162], 103 ; 00000067H
  11e29	c6 84 24 2b 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9163], 80 ; 00000050H
  11e31	c6 84 24 2c 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9164], 114 ; 00000072H
  11e39	c6 84 24 2d 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9165], 105 ; 00000069H
  11e41	c6 84 24 2e 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9166], 110 ; 0000006eH
  11e49	c6 84 24 2f 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9167], 116 ; 00000074H
  11e51	c6 84 24 30 24
	00 00 45	 mov	 BYTE PTR $T5[rsp+9168], 69 ; 00000045H
  11e59	c6 84 24 31 24
	00 00 78	 mov	 BYTE PTR $T5[rsp+9169], 120 ; 00000078H
  11e61	c6 84 24 32 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9170], 0
  11e69	c6 84 24 33 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9171], 0
  11e71	c6 84 24 34 24
	00 00 3f	 mov	 BYTE PTR $T5[rsp+9172], 63 ; 0000003fH
  11e79	c6 84 24 35 24
	00 00 04	 mov	 BYTE PTR $T5[rsp+9173], 4
  11e81	c6 84 24 36 24
	00 00 4b	 mov	 BYTE PTR $T5[rsp+9174], 75 ; 0000004bH
  11e89	c6 84 24 37 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9175], 101 ; 00000065H
  11e91	c6 84 24 38 24
	00 00 42	 mov	 BYTE PTR $T5[rsp+9176], 66 ; 00000042H
  11e99	c6 84 24 39 24
	00 00 75	 mov	 BYTE PTR $T5[rsp+9177], 117 ; 00000075H
  11ea1	c6 84 24 3a 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9178], 103 ; 00000067H
  11ea9	c6 84 24 3b 24
	00 00 43	 mov	 BYTE PTR $T5[rsp+9179], 67 ; 00000043H
  11eb1	c6 84 24 3c 24
	00 00 68	 mov	 BYTE PTR $T5[rsp+9180], 104 ; 00000068H
  11eb9	c6 84 24 3d 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9181], 101 ; 00000065H
  11ec1	c6 84 24 3e 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9182], 99 ; 00000063H
  11ec9	c6 84 24 3f 24
	00 00 6b	 mov	 BYTE PTR $T5[rsp+9183], 107 ; 0000006bH
  11ed1	c6 84 24 40 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9184], 0
  11ed9	c6 84 24 41 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9185], 0
  11ee1	c6 84 24 42 24
	00 00 37	 mov	 BYTE PTR $T5[rsp+9186], 55 ; 00000037H
  11ee9	c6 84 24 43 24
	00 00 07	 mov	 BYTE PTR $T5[rsp+9187], 7
  11ef1	c6 84 24 44 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9188], 80 ; 00000050H
  11ef9	c6 84 24 45 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9189], 115 ; 00000073H
  11f01	c6 84 24 46 24
	00 00 49	 mov	 BYTE PTR $T5[rsp+9190], 73 ; 00000049H
  11f09	c6 84 24 47 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9191], 110 ; 0000006eH
  11f11	c6 84 24 48 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9192], 105 ; 00000069H
  11f19	c6 84 24 49 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9193], 116 ; 00000074H
  11f21	c6 84 24 4a 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9194], 105 ; 00000069H
  11f29	c6 84 24 4b 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9195], 97 ; 00000061H
  11f31	c6 84 24 4c 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9196], 108 ; 0000006cH
  11f39	c6 84 24 4d 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9197], 83 ; 00000053H
  11f41	c6 84 24 4e 24
	00 00 79	 mov	 BYTE PTR $T5[rsp+9198], 121 ; 00000079H
  11f49	c6 84 24 4f 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9199], 115 ; 00000073H
  11f51	c6 84 24 50 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9200], 116 ; 00000074H
  11f59	c6 84 24 51 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9201], 101 ; 00000065H
  11f61	c6 84 24 52 24
	00 00 6d	 mov	 BYTE PTR $T5[rsp+9202], 109 ; 0000006dH
  11f69	c6 84 24 53 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9203], 80 ; 00000050H
  11f71	c6 84 24 54 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9204], 114 ; 00000072H
  11f79	c6 84 24 55 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9205], 111 ; 0000006fH
  11f81	c6 84 24 56 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9206], 99 ; 00000063H
  11f89	c6 84 24 57 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9207], 101 ; 00000065H
  11f91	c6 84 24 58 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9208], 115 ; 00000073H
  11f99	c6 84 24 59 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9209], 115 ; 00000073H
  11fa1	c6 84 24 5a 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9210], 0
  11fa9	c6 84 24 5b 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9211], 0
  11fb1	c6 84 24 5c 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9212], 108 ; 0000006cH
  11fb9	c6 84 24 5d 24
	00 00 05	 mov	 BYTE PTR $T5[rsp+9213], 5
  11fc1	c6 84 24 5e 24
	00 00 4d	 mov	 BYTE PTR $T5[rsp+9214], 77 ; 0000004dH
  11fc9	c6 84 24 5f 24
	00 00 6d	 mov	 BYTE PTR $T5[rsp+9215], 109 ; 0000006dH
  11fd1	c6 84 24 60 24
	00 00 43	 mov	 BYTE PTR $T5[rsp+9216], 67 ; 00000043H
  11fd9	c6 84 24 61 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9217], 111 ; 0000006fH
  11fe1	c6 84 24 62 24
	00 00 70	 mov	 BYTE PTR $T5[rsp+9218], 112 ; 00000070H
  11fe9	c6 84 24 63 24
	00 00 79	 mov	 BYTE PTR $T5[rsp+9219], 121 ; 00000079H
  11ff1	c6 84 24 64 24
	00 00 56	 mov	 BYTE PTR $T5[rsp+9220], 86 ; 00000056H
  11ff9	c6 84 24 65 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9221], 105 ; 00000069H
  12001	c6 84 24 66 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9222], 114 ; 00000072H
  12009	c6 84 24 67 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9223], 116 ; 00000074H
  12011	c6 84 24 68 24
	00 00 75	 mov	 BYTE PTR $T5[rsp+9224], 117 ; 00000075H
  12019	c6 84 24 69 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9225], 97 ; 00000061H
  12021	c6 84 24 6a 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9226], 108 ; 0000006cH
  12029	c6 84 24 6b 24
	00 00 4d	 mov	 BYTE PTR $T5[rsp+9227], 77 ; 0000004dH
  12031	c6 84 24 6c 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9228], 101 ; 00000065H
  12039	c6 84 24 6d 24
	00 00 6d	 mov	 BYTE PTR $T5[rsp+9229], 109 ; 0000006dH
  12041	c6 84 24 6e 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9230], 111 ; 0000006fH
  12049	c6 84 24 6f 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9231], 114 ; 00000072H
  12051	c6 84 24 70 24
	00 00 79	 mov	 BYTE PTR $T5[rsp+9232], 121 ; 00000079H
  12059	c6 84 24 71 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9233], 0
  12061	c6 84 24 72 24
	00 00 7f	 mov	 BYTE PTR $T5[rsp+9234], 127 ; 0000007fH
  12069	c6 84 24 73 24
	00 00 08	 mov	 BYTE PTR $T5[rsp+9235], 8
  12071	c6 84 24 74 24
	00 00 52	 mov	 BYTE PTR $T5[rsp+9236], 82 ; 00000052H
  12079	c6 84 24 75 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9237], 116 ; 00000074H
  12081	c6 84 24 76 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9238], 108 ; 0000006cH
  12089	c6 84 24 77 24
	00 00 49	 mov	 BYTE PTR $T5[rsp+9239], 73 ; 00000049H
  12091	c6 84 24 78 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9240], 110 ; 0000006eH
  12099	c6 84 24 79 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9241], 105 ; 00000069H
  120a1	c6 84 24 7a 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9242], 116 ; 00000074H
  120a9	c6 84 24 7b 24
	00 00 55	 mov	 BYTE PTR $T5[rsp+9243], 85 ; 00000055H
  120b1	c6 84 24 7c 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9244], 110 ; 0000006eH
  120b9	c6 84 24 7d 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9245], 105 ; 00000069H
  120c1	c6 84 24 7e 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9246], 99 ; 00000063H
  120c9	c6 84 24 7f 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9247], 111 ; 0000006fH
  120d1	c6 84 24 80 24
	00 00 64	 mov	 BYTE PTR $T5[rsp+9248], 100 ; 00000064H
  120d9	c6 84 24 81 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9249], 101 ; 00000065H
  120e1	c6 84 24 82 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9250], 83 ; 00000053H
  120e9	c6 84 24 83 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9251], 116 ; 00000074H
  120f1	c6 84 24 84 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9252], 114 ; 00000072H
  120f9	c6 84 24 85 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9253], 105 ; 00000069H
  12101	c6 84 24 86 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9254], 110 ; 0000006eH
  12109	c6 84 24 87 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9255], 103 ; 00000067H
  12111	c6 84 24 88 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9256], 0
  12119	c6 84 24 89 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9257], 0
  12121	c6 84 24 8a 24
	00 00 5a	 mov	 BYTE PTR $T5[rsp+9258], 90 ; 0000005aH
  12129	c6 84 24 8b 24
	00 00 09	 mov	 BYTE PTR $T5[rsp+9259], 9
  12131	c6 84 24 8c 24
	00 00 52	 mov	 BYTE PTR $T5[rsp+9260], 82 ; 00000052H
  12139	c6 84 24 8d 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9261], 116 ; 00000074H
  12141	c6 84 24 8e 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9262], 108 ; 0000006cH
  12149	c6 84 24 8f 24
	00 00 55	 mov	 BYTE PTR $T5[rsp+9263], 85 ; 00000055H
  12151	c6 84 24 90 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9264], 110 ; 0000006eH
  12159	c6 84 24 91 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9265], 105 ; 00000069H
  12161	c6 84 24 92 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9266], 99 ; 00000063H
  12169	c6 84 24 93 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9267], 111 ; 0000006fH
  12171	c6 84 24 94 24
	00 00 64	 mov	 BYTE PTR $T5[rsp+9268], 100 ; 00000064H
  12179	c6 84 24 95 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9269], 101 ; 00000065H
  12181	c6 84 24 96 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9270], 83 ; 00000053H
  12189	c6 84 24 97 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9271], 116 ; 00000074H
  12191	c6 84 24 98 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9272], 114 ; 00000072H
  12199	c6 84 24 99 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9273], 105 ; 00000069H
  121a1	c6 84 24 9a 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9274], 110 ; 0000006eH
  121a9	c6 84 24 9b 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9275], 103 ; 00000067H
  121b1	c6 84 24 9c 24
	00 00 54	 mov	 BYTE PTR $T5[rsp+9276], 84 ; 00000054H
  121b9	c6 84 24 9d 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9277], 111 ; 0000006fH
  121c1	c6 84 24 9e 24
	00 00 41	 mov	 BYTE PTR $T5[rsp+9278], 65 ; 00000041H
  121c9	c6 84 24 9f 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9279], 110 ; 0000006eH
  121d1	c6 84 24 a0 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9280], 115 ; 00000073H
  121d9	c6 84 24 a1 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9281], 105 ; 00000069H
  121e1	c6 84 24 a2 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9282], 83 ; 00000053H
  121e9	c6 84 24 a3 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9283], 116 ; 00000074H
  121f1	c6 84 24 a4 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9284], 114 ; 00000072H
  121f9	c6 84 24 a5 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9285], 105 ; 00000069H
  12201	c6 84 24 a6 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9286], 110 ; 0000006eH
  12209	c6 84 24 a7 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9287], 103 ; 00000067H
  12211	c6 84 24 a8 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9288], 0
  12219	c6 84 24 a9 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9289], 0
  12221	c6 84 24 aa 24
	00 00 3d	 mov	 BYTE PTR $T5[rsp+9290], 61 ; 0000003dH
  12229	c6 84 24 ab 24
	00 00 08	 mov	 BYTE PTR $T5[rsp+9291], 8
  12231	c6 84 24 ac 24
	00 00 52	 mov	 BYTE PTR $T5[rsp+9292], 82 ; 00000052H
  12239	c6 84 24 ad 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9293], 116 ; 00000074H
  12241	c6 84 24 ae 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9294], 108 ; 0000006cH
  12249	c6 84 24 af 24
	00 00 46	 mov	 BYTE PTR $T5[rsp+9295], 70 ; 00000046H
  12251	c6 84 24 b0 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9296], 114 ; 00000072H
  12259	c6 84 24 b1 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9297], 101 ; 00000065H
  12261	c6 84 24 b2 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9298], 101 ; 00000065H
  12269	c6 84 24 b3 24
	00 00 41	 mov	 BYTE PTR $T5[rsp+9299], 65 ; 00000041H
  12271	c6 84 24 b4 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9300], 110 ; 0000006eH
  12279	c6 84 24 b5 24
	00 00 73	 mov	 BYTE PTR $T5[rsp+9301], 115 ; 00000073H
  12281	c6 84 24 b6 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9302], 105 ; 00000069H
  12289	c6 84 24 b7 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9303], 83 ; 00000053H
  12291	c6 84 24 b8 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9304], 116 ; 00000074H
  12299	c6 84 24 b9 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9305], 114 ; 00000072H
  122a1	c6 84 24 ba 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9306], 105 ; 00000069H
  122a9	c6 84 24 bb 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9307], 110 ; 0000006eH
  122b1	c6 84 24 bc 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9308], 103 ; 00000067H
  122b9	c6 84 24 bd 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9309], 0
  122c1	c6 84 24 be 24
	00 00 9e	 mov	 BYTE PTR $T5[rsp+9310], 158 ; 0000009eH
  122c9	c6 84 24 bf 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9311], 0
  122d1	c6 84 24 c0 24
	00 00 45	 mov	 BYTE PTR $T5[rsp+9312], 69 ; 00000045H
  122d9	c6 84 24 c1 24
	00 00 78	 mov	 BYTE PTR $T5[rsp+9313], 120 ; 00000078H
  122e1	c6 84 24 c2 24
	00 00 41	 mov	 BYTE PTR $T5[rsp+9314], 65 ; 00000041H
  122e9	c6 84 24 c3 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9315], 108 ; 0000006cH
  122f1	c6 84 24 c4 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9316], 108 ; 0000006cH
  122f9	c6 84 24 c5 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9317], 111 ; 0000006fH
  12301	c6 84 24 c6 24
	00 00 63	 mov	 BYTE PTR $T5[rsp+9318], 99 ; 00000063H
  12309	c6 84 24 c7 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9319], 97 ; 00000061H
  12311	c6 84 24 c8 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9320], 116 ; 00000074H
  12319	c6 84 24 c9 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9321], 101 ; 00000065H
  12321	c6 84 24 ca 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9322], 80 ; 00000050H
  12329	c6 84 24 cb 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9323], 111 ; 0000006fH
  12331	c6 84 24 cc 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9324], 111 ; 0000006fH
  12339	c6 84 24 cd 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9325], 108 ; 0000006cH
  12341	c6 84 24 ce 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9326], 0
  12349	c6 84 24 cf 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9327], 0
  12351	c6 84 24 d0 24
	00 00 ca	 mov	 BYTE PTR $T5[rsp+9328], 202 ; 000000caH
  12359	c6 84 24 d1 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9329], 0
  12361	c6 84 24 d2 24
	00 00 45	 mov	 BYTE PTR $T5[rsp+9330], 69 ; 00000045H
  12369	c6 84 24 d3 24
	00 00 78	 mov	 BYTE PTR $T5[rsp+9331], 120 ; 00000078H
  12371	c6 84 24 d4 24
	00 00 46	 mov	 BYTE PTR $T5[rsp+9332], 70 ; 00000046H
  12379	c6 84 24 d5 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9333], 114 ; 00000072H
  12381	c6 84 24 d6 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9334], 101 ; 00000065H
  12389	c6 84 24 d7 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9335], 101 ; 00000065H
  12391	c6 84 24 d8 24
	00 00 50	 mov	 BYTE PTR $T5[rsp+9336], 80 ; 00000050H
  12399	c6 84 24 d9 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9337], 111 ; 0000006fH
  123a1	c6 84 24 da 24
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9338], 111 ; 0000006fH
  123a9	c6 84 24 db 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9339], 108 ; 0000006cH
  123b1	c6 84 24 dc 24
	00 00 57	 mov	 BYTE PTR $T5[rsp+9340], 87 ; 00000057H
  123b9	c6 84 24 dd 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9341], 105 ; 00000069H
  123c1	c6 84 24 de 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9342], 116 ; 00000074H
  123c9	c6 84 24 df 24
	00 00 68	 mov	 BYTE PTR $T5[rsp+9343], 104 ; 00000068H
  123d1	c6 84 24 e0 24
	00 00 54	 mov	 BYTE PTR $T5[rsp+9344], 84 ; 00000054H
  123d9	c6 84 24 e1 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9345], 97 ; 00000061H
  123e1	c6 84 24 e2 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9346], 103 ; 00000067H
  123e9	c6 84 24 e3 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9347], 0
  123f1	c6 84 24 e4 24
	00 00 12	 mov	 BYTE PTR $T5[rsp+9348], 18
  123f9	c6 84 24 e5 24
	00 00 08	 mov	 BYTE PTR $T5[rsp+9349], 8
  12401	c6 84 24 e6 24
	00 00 52	 mov	 BYTE PTR $T5[rsp+9350], 82 ; 00000052H
  12409	c6 84 24 e7 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9351], 116 ; 00000074H
  12411	c6 84 24 e8 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9352], 108 ; 0000006cH
  12419	c6 84 24 e9 24
	00 00 45	 mov	 BYTE PTR $T5[rsp+9353], 69 ; 00000045H
  12421	c6 84 24 ea 24
	00 00 71	 mov	 BYTE PTR $T5[rsp+9354], 113 ; 00000071H
  12429	c6 84 24 eb 24
	00 00 75	 mov	 BYTE PTR $T5[rsp+9355], 117 ; 00000075H
  12431	c6 84 24 ec 24
	00 00 61	 mov	 BYTE PTR $T5[rsp+9356], 97 ; 00000061H
  12439	c6 84 24 ed 24
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9357], 108 ; 0000006cH
  12441	c6 84 24 ee 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9358], 83 ; 00000053H
  12449	c6 84 24 ef 24
	00 00 74	 mov	 BYTE PTR $T5[rsp+9359], 116 ; 00000074H
  12451	c6 84 24 f0 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9360], 114 ; 00000072H
  12459	c6 84 24 f1 24
	00 00 69	 mov	 BYTE PTR $T5[rsp+9361], 105 ; 00000069H
  12461	c6 84 24 f2 24
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9362], 110 ; 0000006eH
  12469	c6 84 24 f3 24
	00 00 67	 mov	 BYTE PTR $T5[rsp+9363], 103 ; 00000067H
  12471	c6 84 24 f4 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9364], 0
  12479	c6 84 24 f5 24
	00 00 00	 mov	 BYTE PTR $T5[rsp+9365], 0
  12481	c6 84 24 f6 24
	00 00 14	 mov	 BYTE PTR $T5[rsp+9366], 20
  12489	c6 84 24 f7 24
	00 00 0b	 mov	 BYTE PTR $T5[rsp+9367], 11
  12491	c6 84 24 f8 24
	00 00 5a	 mov	 BYTE PTR $T5[rsp+9368], 90 ; 0000005aH
  12499	c6 84 24 f9 24
	00 00 77	 mov	 BYTE PTR $T5[rsp+9369], 119 ; 00000077H
  124a1	c6 84 24 fa 24
	00 00 51	 mov	 BYTE PTR $T5[rsp+9370], 81 ; 00000051H
  124a9	c6 84 24 fb 24
	00 00 75	 mov	 BYTE PTR $T5[rsp+9371], 117 ; 00000075H
  124b1	c6 84 24 fc 24
	00 00 65	 mov	 BYTE PTR $T5[rsp+9372], 101 ; 00000065H
  124b9	c6 84 24 fd 24
	00 00 72	 mov	 BYTE PTR $T5[rsp+9373], 114 ; 00000072H
  124c1	c6 84 24 fe 24
	00 00 79	 mov	 BYTE PTR $T5[rsp+9374], 121 ; 00000079H
  124c9	c6 84 24 ff 24
	00 00 53	 mov	 BYTE PTR $T5[rsp+9375], 83 ; 00000053H
  124d1	c6 84 24 00 25
	00 00 79	 mov	 BYTE PTR $T5[rsp+9376], 121 ; 00000079H
  124d9	c6 84 24 01 25
	00 00 73	 mov	 BYTE PTR $T5[rsp+9377], 115 ; 00000073H
  124e1	c6 84 24 02 25
	00 00 74	 mov	 BYTE PTR $T5[rsp+9378], 116 ; 00000074H
  124e9	c6 84 24 03 25
	00 00 65	 mov	 BYTE PTR $T5[rsp+9379], 101 ; 00000065H
  124f1	c6 84 24 04 25
	00 00 6d	 mov	 BYTE PTR $T5[rsp+9380], 109 ; 0000006dH
  124f9	c6 84 24 05 25
	00 00 49	 mov	 BYTE PTR $T5[rsp+9381], 73 ; 00000049H
  12501	c6 84 24 06 25
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9382], 110 ; 0000006eH
  12509	c6 84 24 07 25
	00 00 66	 mov	 BYTE PTR $T5[rsp+9383], 102 ; 00000066H
  12511	c6 84 24 08 25
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9384], 111 ; 0000006fH
  12519	c6 84 24 09 25
	00 00 72	 mov	 BYTE PTR $T5[rsp+9385], 114 ; 00000072H
  12521	c6 84 24 0a 25
	00 00 6d	 mov	 BYTE PTR $T5[rsp+9386], 109 ; 0000006dH
  12529	c6 84 24 0b 25
	00 00 61	 mov	 BYTE PTR $T5[rsp+9387], 97 ; 00000061H
  12531	c6 84 24 0c 25
	00 00 74	 mov	 BYTE PTR $T5[rsp+9388], 116 ; 00000074H
  12539	c6 84 24 0d 25
	00 00 69	 mov	 BYTE PTR $T5[rsp+9389], 105 ; 00000069H
  12541	c6 84 24 0e 25
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9390], 111 ; 0000006fH
  12549	c6 84 24 0f 25
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9391], 110 ; 0000006eH
  12551	c6 84 24 10 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9392], 0
  12559	c6 84 24 11 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9393], 0
  12561	c6 84 24 12 25
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9394], 110 ; 0000006eH
  12569	c6 84 24 13 25
	00 00 74	 mov	 BYTE PTR $T5[rsp+9395], 116 ; 00000074H
  12571	c6 84 24 14 25
	00 00 6f	 mov	 BYTE PTR $T5[rsp+9396], 111 ; 0000006fH
  12579	c6 84 24 15 25
	00 00 73	 mov	 BYTE PTR $T5[rsp+9397], 115 ; 00000073H
  12581	c6 84 24 16 25
	00 00 6b	 mov	 BYTE PTR $T5[rsp+9398], 107 ; 0000006bH
  12589	c6 84 24 17 25
	00 00 72	 mov	 BYTE PTR $T5[rsp+9399], 114 ; 00000072H
  12591	c6 84 24 18 25
	00 00 6e	 mov	 BYTE PTR $T5[rsp+9400], 110 ; 0000006eH
  12599	c6 84 24 19 25
	00 00 6c	 mov	 BYTE PTR $T5[rsp+9401], 108 ; 0000006cH
  125a1	c6 84 24 1a 25
	00 00 2e	 mov	 BYTE PTR $T5[rsp+9402], 46 ; 0000002eH
  125a9	c6 84 24 1b 25
	00 00 65	 mov	 BYTE PTR $T5[rsp+9403], 101 ; 00000065H
  125b1	c6 84 24 1c 25
	00 00 78	 mov	 BYTE PTR $T5[rsp+9404], 120 ; 00000078H
  125b9	c6 84 24 1d 25
	00 00 65	 mov	 BYTE PTR $T5[rsp+9405], 101 ; 00000065H
  125c1	c6 84 24 1e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9406], 0
  125c9	c6 84 24 1f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9407], 0
  125d1	c6 84 24 20 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9408], 0
  125d9	c6 84 24 21 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9409], 0
  125e1	c6 84 24 22 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9410], 0
  125e9	c6 84 24 23 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9411], 0
  125f1	c6 84 24 24 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9412], 0
  125f9	c6 84 24 25 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9413], 0
  12601	c6 84 24 26 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9414], 0
  12609	c6 84 24 27 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9415], 0
  12611	c6 84 24 28 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9416], 0
  12619	c6 84 24 29 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9417], 0
  12621	c6 84 24 2a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9418], 0
  12629	c6 84 24 2b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9419], 0
  12631	c6 84 24 2c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9420], 0
  12639	c6 84 24 2d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9421], 0
  12641	c6 84 24 2e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9422], 0
  12649	c6 84 24 2f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9423], 0
  12651	c6 84 24 30 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9424], 0
  12659	c6 84 24 31 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9425], 0
  12661	c6 84 24 32 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9426], 0
  12669	c6 84 24 33 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9427], 0
  12671	c6 84 24 34 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9428], 0
  12679	c6 84 24 35 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9429], 0
  12681	c6 84 24 36 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9430], 0
  12689	c6 84 24 37 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9431], 0
  12691	c6 84 24 38 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9432], 0
  12699	c6 84 24 39 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9433], 0
  126a1	c6 84 24 3a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9434], 0
  126a9	c6 84 24 3b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9435], 0
  126b1	c6 84 24 3c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9436], 0
  126b9	c6 84 24 3d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9437], 0
  126c1	c6 84 24 3e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9438], 0
  126c9	c6 84 24 3f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9439], 0
  126d1	c6 84 24 40 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9440], 0
  126d9	c6 84 24 41 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9441], 0
  126e1	c6 84 24 42 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9442], 0
  126e9	c6 84 24 43 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9443], 0
  126f1	c6 84 24 44 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9444], 0
  126f9	c6 84 24 45 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9445], 0
  12701	c6 84 24 46 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9446], 0
  12709	c6 84 24 47 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9447], 0
  12711	c6 84 24 48 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9448], 0
  12719	c6 84 24 49 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9449], 0
  12721	c6 84 24 4a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9450], 0
  12729	c6 84 24 4b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9451], 0
  12731	c6 84 24 4c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9452], 0
  12739	c6 84 24 4d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9453], 0
  12741	c6 84 24 4e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9454], 0
  12749	c6 84 24 4f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9455], 0
  12751	c6 84 24 50 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9456], 0
  12759	c6 84 24 51 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9457], 0
  12761	c6 84 24 52 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9458], 0
  12769	c6 84 24 53 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9459], 0
  12771	c6 84 24 54 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9460], 0
  12779	c6 84 24 55 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9461], 0
  12781	c6 84 24 56 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9462], 0
  12789	c6 84 24 57 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9463], 0
  12791	c6 84 24 58 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9464], 0
  12799	c6 84 24 59 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9465], 0
  127a1	c6 84 24 5a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9466], 0
  127a9	c6 84 24 5b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9467], 0
  127b1	c6 84 24 5c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9468], 0
  127b9	c6 84 24 5d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9469], 0
  127c1	c6 84 24 5e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9470], 0
  127c9	c6 84 24 5f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9471], 0
  127d1	c6 84 24 60 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9472], 0
  127d9	c6 84 24 61 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9473], 0
  127e1	c6 84 24 62 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9474], 0
  127e9	c6 84 24 63 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9475], 0
  127f1	c6 84 24 64 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9476], 0
  127f9	c6 84 24 65 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9477], 0
  12801	c6 84 24 66 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9478], 0
  12809	c6 84 24 67 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9479], 0
  12811	c6 84 24 68 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9480], 0
  12819	c6 84 24 69 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9481], 0
  12821	c6 84 24 6a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9482], 0
  12829	c6 84 24 6b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9483], 0
  12831	c6 84 24 6c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9484], 0
  12839	c6 84 24 6d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9485], 0
  12841	c6 84 24 6e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9486], 0
  12849	c6 84 24 6f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9487], 0
  12851	c6 84 24 70 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9488], 0
  12859	c6 84 24 71 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9489], 0
  12861	c6 84 24 72 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9490], 0
  12869	c6 84 24 73 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9491], 0
  12871	c6 84 24 74 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9492], 0
  12879	c6 84 24 75 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9493], 0
  12881	c6 84 24 76 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9494], 0
  12889	c6 84 24 77 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9495], 0
  12891	c6 84 24 78 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9496], 0
  12899	c6 84 24 79 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9497], 0
  128a1	c6 84 24 7a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9498], 0
  128a9	c6 84 24 7b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9499], 0
  128b1	c6 84 24 7c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9500], 0
  128b9	c6 84 24 7d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9501], 0
  128c1	c6 84 24 7e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9502], 0
  128c9	c6 84 24 7f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9503], 0
  128d1	c6 84 24 80 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9504], 0
  128d9	c6 84 24 81 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9505], 0
  128e1	c6 84 24 82 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9506], 0
  128e9	c6 84 24 83 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9507], 0
  128f1	c6 84 24 84 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9508], 0
  128f9	c6 84 24 85 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9509], 0
  12901	c6 84 24 86 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9510], 0
  12909	c6 84 24 87 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9511], 0
  12911	c6 84 24 88 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9512], 0
  12919	c6 84 24 89 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9513], 0
  12921	c6 84 24 8a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9514], 0
  12929	c6 84 24 8b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9515], 0
  12931	c6 84 24 8c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9516], 0
  12939	c6 84 24 8d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9517], 0
  12941	c6 84 24 8e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9518], 0
  12949	c6 84 24 8f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9519], 0
  12951	c6 84 24 90 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9520], 0
  12959	c6 84 24 91 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9521], 0
  12961	c6 84 24 92 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9522], 0
  12969	c6 84 24 93 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9523], 0
  12971	c6 84 24 94 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9524], 0
  12979	c6 84 24 95 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9525], 0
  12981	c6 84 24 96 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9526], 0
  12989	c6 84 24 97 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9527], 0
  12991	c6 84 24 98 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9528], 0
  12999	c6 84 24 99 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9529], 0
  129a1	c6 84 24 9a 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9530], 0
  129a9	c6 84 24 9b 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9531], 0
  129b1	c6 84 24 9c 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9532], 0
  129b9	c6 84 24 9d 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9533], 0
  129c1	c6 84 24 9e 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9534], 0
  129c9	c6 84 24 9f 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9535], 0
  129d1	c6 84 24 a0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9536], 0
  129d9	c6 84 24 a1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9537], 0
  129e1	c6 84 24 a2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9538], 0
  129e9	c6 84 24 a3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9539], 0
  129f1	c6 84 24 a4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9540], 0
  129f9	c6 84 24 a5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9541], 0
  12a01	c6 84 24 a6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9542], 0
  12a09	c6 84 24 a7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9543], 0
  12a11	c6 84 24 a8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9544], 0
  12a19	c6 84 24 a9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9545], 0
  12a21	c6 84 24 aa 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9546], 0
  12a29	c6 84 24 ab 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9547], 0
  12a31	c6 84 24 ac 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9548], 0
  12a39	c6 84 24 ad 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9549], 0
  12a41	c6 84 24 ae 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9550], 0
  12a49	c6 84 24 af 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9551], 0
  12a51	c6 84 24 b0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9552], 0
  12a59	c6 84 24 b1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9553], 0
  12a61	c6 84 24 b2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9554], 0
  12a69	c6 84 24 b3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9555], 0
  12a71	c6 84 24 b4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9556], 0
  12a79	c6 84 24 b5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9557], 0
  12a81	c6 84 24 b6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9558], 0
  12a89	c6 84 24 b7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9559], 0
  12a91	c6 84 24 b8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9560], 0
  12a99	c6 84 24 b9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9561], 0
  12aa1	c6 84 24 ba 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9562], 0
  12aa9	c6 84 24 bb 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9563], 0
  12ab1	c6 84 24 bc 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9564], 0
  12ab9	c6 84 24 bd 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9565], 0
  12ac1	c6 84 24 be 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9566], 0
  12ac9	c6 84 24 bf 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9567], 0
  12ad1	c6 84 24 c0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9568], 0
  12ad9	c6 84 24 c1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9569], 0
  12ae1	c6 84 24 c2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9570], 0
  12ae9	c6 84 24 c3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9571], 0
  12af1	c6 84 24 c4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9572], 0
  12af9	c6 84 24 c5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9573], 0
  12b01	c6 84 24 c6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9574], 0
  12b09	c6 84 24 c7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9575], 0
  12b11	c6 84 24 c8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9576], 0
  12b19	c6 84 24 c9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9577], 0
  12b21	c6 84 24 ca 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9578], 0
  12b29	c6 84 24 cb 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9579], 0
  12b31	c6 84 24 cc 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9580], 0
  12b39	c6 84 24 cd 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9581], 0
  12b41	c6 84 24 ce 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9582], 0
  12b49	c6 84 24 cf 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9583], 0
  12b51	c6 84 24 d0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9584], 0
  12b59	c6 84 24 d1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9585], 0
  12b61	c6 84 24 d2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9586], 0
  12b69	c6 84 24 d3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9587], 0
  12b71	c6 84 24 d4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9588], 0
  12b79	c6 84 24 d5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9589], 0
  12b81	c6 84 24 d6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9590], 0
  12b89	c6 84 24 d7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9591], 0
  12b91	c6 84 24 d8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9592], 0
  12b99	c6 84 24 d9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9593], 0
  12ba1	c6 84 24 da 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9594], 0
  12ba9	c6 84 24 db 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9595], 0
  12bb1	c6 84 24 dc 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9596], 0
  12bb9	c6 84 24 dd 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9597], 0
  12bc1	c6 84 24 de 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9598], 0
  12bc9	c6 84 24 df 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9599], 0
  12bd1	c6 84 24 e0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9600], 0
  12bd9	c6 84 24 e1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9601], 0
  12be1	c6 84 24 e2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9602], 0
  12be9	c6 84 24 e3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9603], 0
  12bf1	c6 84 24 e4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9604], 0
  12bf9	c6 84 24 e5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9605], 0
  12c01	c6 84 24 e6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9606], 0
  12c09	c6 84 24 e7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9607], 0
  12c11	c6 84 24 e8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9608], 0
  12c19	c6 84 24 e9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9609], 0
  12c21	c6 84 24 ea 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9610], 0
  12c29	c6 84 24 eb 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9611], 0
  12c31	c6 84 24 ec 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9612], 0
  12c39	c6 84 24 ed 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9613], 0
  12c41	c6 84 24 ee 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9614], 0
  12c49	c6 84 24 ef 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9615], 0
  12c51	c6 84 24 f0 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9616], 0
  12c59	c6 84 24 f1 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9617], 0
  12c61	c6 84 24 f2 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9618], 0
  12c69	c6 84 24 f3 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9619], 0
  12c71	c6 84 24 f4 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9620], 0
  12c79	c6 84 24 f5 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9621], 0
  12c81	c6 84 24 f6 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9622], 0
  12c89	c6 84 24 f7 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9623], 0
  12c91	c6 84 24 f8 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9624], 0
  12c99	c6 84 24 f9 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9625], 0
  12ca1	c6 84 24 fa 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9626], 0
  12ca9	c6 84 24 fb 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9627], 0
  12cb1	c6 84 24 fc 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9628], 0
  12cb9	c6 84 24 fd 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9629], 0
  12cc1	c6 84 24 fe 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9630], 0
  12cc9	c6 84 24 ff 25
	00 00 00	 mov	 BYTE PTR $T5[rsp+9631], 0
  12cd1	c6 84 24 00 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9632], 0
  12cd9	c6 84 24 01 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9633], 0
  12ce1	c6 84 24 02 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9634], 0
  12ce9	c6 84 24 03 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9635], 0
  12cf1	c6 84 24 04 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9636], 0
  12cf9	c6 84 24 05 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9637], 0
  12d01	c6 84 24 06 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9638], 0
  12d09	c6 84 24 07 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9639], 0
  12d11	c6 84 24 08 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9640], 0
  12d19	c6 84 24 09 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9641], 0
  12d21	c6 84 24 0a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9642], 0
  12d29	c6 84 24 0b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9643], 0
  12d31	c6 84 24 0c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9644], 0
  12d39	c6 84 24 0d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9645], 0
  12d41	c6 84 24 0e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9646], 0
  12d49	c6 84 24 0f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9647], 0
  12d51	c6 84 24 10 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9648], 0
  12d59	c6 84 24 11 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9649], 0
  12d61	c6 84 24 12 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9650], 0
  12d69	c6 84 24 13 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9651], 0
  12d71	c6 84 24 14 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9652], 0
  12d79	c6 84 24 15 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9653], 0
  12d81	c6 84 24 16 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9654], 0
  12d89	c6 84 24 17 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9655], 0
  12d91	c6 84 24 18 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9656], 0
  12d99	c6 84 24 19 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9657], 0
  12da1	c6 84 24 1a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9658], 0
  12da9	c6 84 24 1b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9659], 0
  12db1	c6 84 24 1c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9660], 0
  12db9	c6 84 24 1d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9661], 0
  12dc1	c6 84 24 1e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9662], 0
  12dc9	c6 84 24 1f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9663], 0
  12dd1	c6 84 24 20 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9664], 0
  12dd9	c6 84 24 21 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9665], 0
  12de1	c6 84 24 22 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9666], 0
  12de9	c6 84 24 23 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9667], 0
  12df1	c6 84 24 24 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9668], 0
  12df9	c6 84 24 25 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9669], 0
  12e01	c6 84 24 26 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9670], 0
  12e09	c6 84 24 27 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9671], 0
  12e11	c6 84 24 28 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9672], 0
  12e19	c6 84 24 29 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9673], 0
  12e21	c6 84 24 2a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9674], 0
  12e29	c6 84 24 2b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9675], 0
  12e31	c6 84 24 2c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9676], 0
  12e39	c6 84 24 2d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9677], 0
  12e41	c6 84 24 2e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9678], 0
  12e49	c6 84 24 2f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9679], 0
  12e51	c6 84 24 30 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9680], 0
  12e59	c6 84 24 31 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9681], 0
  12e61	c6 84 24 32 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9682], 0
  12e69	c6 84 24 33 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9683], 0
  12e71	c6 84 24 34 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9684], 0
  12e79	c6 84 24 35 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9685], 0
  12e81	c6 84 24 36 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9686], 0
  12e89	c6 84 24 37 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9687], 0
  12e91	c6 84 24 38 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9688], 0
  12e99	c6 84 24 39 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9689], 0
  12ea1	c6 84 24 3a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9690], 0
  12ea9	c6 84 24 3b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9691], 0
  12eb1	c6 84 24 3c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9692], 0
  12eb9	c6 84 24 3d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9693], 0
  12ec1	c6 84 24 3e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9694], 0
  12ec9	c6 84 24 3f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9695], 0
  12ed1	c6 84 24 40 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9696], 0
  12ed9	c6 84 24 41 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9697], 0
  12ee1	c6 84 24 42 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9698], 0
  12ee9	c6 84 24 43 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9699], 0
  12ef1	c6 84 24 44 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9700], 0
  12ef9	c6 84 24 45 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9701], 0
  12f01	c6 84 24 46 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9702], 0
  12f09	c6 84 24 47 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9703], 0
  12f11	c6 84 24 48 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9704], 0
  12f19	c6 84 24 49 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9705], 0
  12f21	c6 84 24 4a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9706], 0
  12f29	c6 84 24 4b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9707], 0
  12f31	c6 84 24 4c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9708], 0
  12f39	c6 84 24 4d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9709], 0
  12f41	c6 84 24 4e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9710], 0
  12f49	c6 84 24 4f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9711], 0
  12f51	c6 84 24 50 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9712], 0
  12f59	c6 84 24 51 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9713], 0
  12f61	c6 84 24 52 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9714], 0
  12f69	c6 84 24 53 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9715], 0
  12f71	c6 84 24 54 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9716], 0
  12f79	c6 84 24 55 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9717], 0
  12f81	c6 84 24 56 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9718], 0
  12f89	c6 84 24 57 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9719], 0
  12f91	c6 84 24 58 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9720], 0
  12f99	c6 84 24 59 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9721], 0
  12fa1	c6 84 24 5a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9722], 0
  12fa9	c6 84 24 5b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9723], 0
  12fb1	c6 84 24 5c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9724], 0
  12fb9	c6 84 24 5d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9725], 0
  12fc1	c6 84 24 5e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9726], 0
  12fc9	c6 84 24 5f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9727], 0
  12fd1	c6 84 24 60 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9728], 0
  12fd9	c6 84 24 61 26
	00 00 30	 mov	 BYTE PTR $T5[rsp+9729], 48 ; 00000030H
  12fe1	c6 84 24 62 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9730], 0
  12fe9	c6 84 24 63 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9731], 0
  12ff1	c6 84 24 64 26
	00 00 14	 mov	 BYTE PTR $T5[rsp+9732], 20
  12ff9	c6 84 24 65 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9733], 0
  13001	c6 84 24 66 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9734], 0
  13009	c6 84 24 67 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9735], 0
  13011	c6 84 24 68 26
	00 00 b0	 mov	 BYTE PTR $T5[rsp+9736], 176 ; 000000b0H
  13019	c6 84 24 69 26
	00 00 a0	 mov	 BYTE PTR $T5[rsp+9737], 160 ; 000000a0H
  13021	c6 84 24 6a 26
	00 00 b8	 mov	 BYTE PTR $T5[rsp+9738], 184 ; 000000b8H
  13029	c6 84 24 6b 26
	00 00 a0	 mov	 BYTE PTR $T5[rsp+9739], 160 ; 000000a0H
  13031	c6 84 24 6c 26
	00 00 d8	 mov	 BYTE PTR $T5[rsp+9740], 216 ; 000000d8H
  13039	c6 84 24 6d 26
	00 00 a2	 mov	 BYTE PTR $T5[rsp+9741], 162 ; 000000a2H
  13041	c6 84 24 6e 26
	00 00 f0	 mov	 BYTE PTR $T5[rsp+9742], 240 ; 000000f0H
  13049	c6 84 24 6f 26
	00 00 a2	 mov	 BYTE PTR $T5[rsp+9743], 162 ; 000000a2H
  13051	c6 84 24 70 26
	00 00 f8	 mov	 BYTE PTR $T5[rsp+9744], 248 ; 000000f8H
  13059	c6 84 24 71 26
	00 00 a2	 mov	 BYTE PTR $T5[rsp+9745], 162 ; 000000a2H
  13061	c6 84 24 72 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9746], 0
  13069	c6 84 24 73 26
	00 00 a3	 mov	 BYTE PTR $T5[rsp+9747], 163 ; 000000a3H
  13071	c6 84 24 74 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9748], 0
  13079	c6 84 24 75 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9749], 0
  13081	c6 84 24 76 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9750], 0
  13089	c6 84 24 77 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9751], 0
  13091	c6 84 24 78 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9752], 0
  13099	c6 84 24 79 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9753], 0
  130a1	c6 84 24 7a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9754], 0
  130a9	c6 84 24 7b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9755], 0
  130b1	c6 84 24 7c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9756], 0
  130b9	c6 84 24 7d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9757], 0
  130c1	c6 84 24 7e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9758], 0
  130c9	c6 84 24 7f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9759], 0
  130d1	c6 84 24 80 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9760], 0
  130d9	c6 84 24 81 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9761], 0
  130e1	c6 84 24 82 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9762], 0
  130e9	c6 84 24 83 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9763], 0
  130f1	c6 84 24 84 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9764], 0
  130f9	c6 84 24 85 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9765], 0
  13101	c6 84 24 86 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9766], 0
  13109	c6 84 24 87 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9767], 0
  13111	c6 84 24 88 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9768], 0
  13119	c6 84 24 89 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9769], 0
  13121	c6 84 24 8a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9770], 0
  13129	c6 84 24 8b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9771], 0
  13131	c6 84 24 8c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9772], 0
  13139	c6 84 24 8d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9773], 0
  13141	c6 84 24 8e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9774], 0
  13149	c6 84 24 8f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9775], 0
  13151	c6 84 24 90 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9776], 0
  13159	c6 84 24 91 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9777], 0
  13161	c6 84 24 92 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9778], 0
  13169	c6 84 24 93 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9779], 0
  13171	c6 84 24 94 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9780], 0
  13179	c6 84 24 95 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9781], 0
  13181	c6 84 24 96 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9782], 0
  13189	c6 84 24 97 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9783], 0
  13191	c6 84 24 98 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9784], 0
  13199	c6 84 24 99 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9785], 0
  131a1	c6 84 24 9a 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9786], 0
  131a9	c6 84 24 9b 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9787], 0
  131b1	c6 84 24 9c 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9788], 0
  131b9	c6 84 24 9d 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9789], 0
  131c1	c6 84 24 9e 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9790], 0
  131c9	c6 84 24 9f 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9791], 0
  131d1	c6 84 24 a0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9792], 0
  131d9	c6 84 24 a1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9793], 0
  131e1	c6 84 24 a2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9794], 0
  131e9	c6 84 24 a3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9795], 0
  131f1	c6 84 24 a4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9796], 0
  131f9	c6 84 24 a5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9797], 0
  13201	c6 84 24 a6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9798], 0
  13209	c6 84 24 a7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9799], 0
  13211	c6 84 24 a8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9800], 0
  13219	c6 84 24 a9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9801], 0
  13221	c6 84 24 aa 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9802], 0
  13229	c6 84 24 ab 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9803], 0
  13231	c6 84 24 ac 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9804], 0
  13239	c6 84 24 ad 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9805], 0
  13241	c6 84 24 ae 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9806], 0
  13249	c6 84 24 af 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9807], 0
  13251	c6 84 24 b0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9808], 0
  13259	c6 84 24 b1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9809], 0
  13261	c6 84 24 b2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9810], 0
  13269	c6 84 24 b3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9811], 0
  13271	c6 84 24 b4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9812], 0
  13279	c6 84 24 b5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9813], 0
  13281	c6 84 24 b6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9814], 0
  13289	c6 84 24 b7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9815], 0
  13291	c6 84 24 b8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9816], 0
  13299	c6 84 24 b9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9817], 0
  132a1	c6 84 24 ba 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9818], 0
  132a9	c6 84 24 bb 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9819], 0
  132b1	c6 84 24 bc 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9820], 0
  132b9	c6 84 24 bd 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9821], 0
  132c1	c6 84 24 be 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9822], 0
  132c9	c6 84 24 bf 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9823], 0
  132d1	c6 84 24 c0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9824], 0
  132d9	c6 84 24 c1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9825], 0
  132e1	c6 84 24 c2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9826], 0
  132e9	c6 84 24 c3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9827], 0
  132f1	c6 84 24 c4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9828], 0
  132f9	c6 84 24 c5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9829], 0
  13301	c6 84 24 c6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9830], 0
  13309	c6 84 24 c7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9831], 0
  13311	c6 84 24 c8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9832], 0
  13319	c6 84 24 c9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9833], 0
  13321	c6 84 24 ca 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9834], 0
  13329	c6 84 24 cb 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9835], 0
  13331	c6 84 24 cc 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9836], 0
  13339	c6 84 24 cd 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9837], 0
  13341	c6 84 24 ce 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9838], 0
  13349	c6 84 24 cf 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9839], 0
  13351	c6 84 24 d0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9840], 0
  13359	c6 84 24 d1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9841], 0
  13361	c6 84 24 d2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9842], 0
  13369	c6 84 24 d3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9843], 0
  13371	c6 84 24 d4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9844], 0
  13379	c6 84 24 d5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9845], 0
  13381	c6 84 24 d6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9846], 0
  13389	c6 84 24 d7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9847], 0
  13391	c6 84 24 d8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9848], 0
  13399	c6 84 24 d9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9849], 0
  133a1	c6 84 24 da 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9850], 0
  133a9	c6 84 24 db 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9851], 0
  133b1	c6 84 24 dc 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9852], 0
  133b9	c6 84 24 dd 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9853], 0
  133c1	c6 84 24 de 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9854], 0
  133c9	c6 84 24 df 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9855], 0
  133d1	c6 84 24 e0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9856], 0
  133d9	c6 84 24 e1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9857], 0
  133e1	c6 84 24 e2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9858], 0
  133e9	c6 84 24 e3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9859], 0
  133f1	c6 84 24 e4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9860], 0
  133f9	c6 84 24 e5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9861], 0
  13401	c6 84 24 e6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9862], 0
  13409	c6 84 24 e7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9863], 0
  13411	c6 84 24 e8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9864], 0
  13419	c6 84 24 e9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9865], 0
  13421	c6 84 24 ea 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9866], 0
  13429	c6 84 24 eb 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9867], 0
  13431	c6 84 24 ec 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9868], 0
  13439	c6 84 24 ed 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9869], 0
  13441	c6 84 24 ee 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9870], 0
  13449	c6 84 24 ef 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9871], 0
  13451	c6 84 24 f0 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9872], 0
  13459	c6 84 24 f1 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9873], 0
  13461	c6 84 24 f2 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9874], 0
  13469	c6 84 24 f3 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9875], 0
  13471	c6 84 24 f4 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9876], 0
  13479	c6 84 24 f5 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9877], 0
  13481	c6 84 24 f6 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9878], 0
  13489	c6 84 24 f7 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9879], 0
  13491	c6 84 24 f8 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9880], 0
  13499	c6 84 24 f9 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9881], 0
  134a1	c6 84 24 fa 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9882], 0
  134a9	c6 84 24 fb 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9883], 0
  134b1	c6 84 24 fc 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9884], 0
  134b9	c6 84 24 fd 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9885], 0
  134c1	c6 84 24 fe 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9886], 0
  134c9	c6 84 24 ff 26
	00 00 00	 mov	 BYTE PTR $T5[rsp+9887], 0
  134d1	c6 84 24 00 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9888], 0
  134d9	c6 84 24 01 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9889], 0
  134e1	c6 84 24 02 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9890], 0
  134e9	c6 84 24 03 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9891], 0
  134f1	c6 84 24 04 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9892], 0
  134f9	c6 84 24 05 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9893], 0
  13501	c6 84 24 06 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9894], 0
  13509	c6 84 24 07 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9895], 0
  13511	c6 84 24 08 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9896], 0
  13519	c6 84 24 09 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9897], 0
  13521	c6 84 24 0a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9898], 0
  13529	c6 84 24 0b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9899], 0
  13531	c6 84 24 0c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9900], 0
  13539	c6 84 24 0d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9901], 0
  13541	c6 84 24 0e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9902], 0
  13549	c6 84 24 0f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9903], 0
  13551	c6 84 24 10 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9904], 0
  13559	c6 84 24 11 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9905], 0
  13561	c6 84 24 12 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9906], 0
  13569	c6 84 24 13 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9907], 0
  13571	c6 84 24 14 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9908], 0
  13579	c6 84 24 15 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9909], 0
  13581	c6 84 24 16 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9910], 0
  13589	c6 84 24 17 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9911], 0
  13591	c6 84 24 18 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9912], 0
  13599	c6 84 24 19 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9913], 0
  135a1	c6 84 24 1a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9914], 0
  135a9	c6 84 24 1b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9915], 0
  135b1	c6 84 24 1c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9916], 0
  135b9	c6 84 24 1d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9917], 0
  135c1	c6 84 24 1e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9918], 0
  135c9	c6 84 24 1f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9919], 0
  135d1	c6 84 24 20 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9920], 0
  135d9	c6 84 24 21 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9921], 0
  135e1	c6 84 24 22 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9922], 0
  135e9	c6 84 24 23 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9923], 0
  135f1	c6 84 24 24 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9924], 0
  135f9	c6 84 24 25 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9925], 0
  13601	c6 84 24 26 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9926], 0
  13609	c6 84 24 27 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9927], 0
  13611	c6 84 24 28 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9928], 0
  13619	c6 84 24 29 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9929], 0
  13621	c6 84 24 2a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9930], 0
  13629	c6 84 24 2b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9931], 0
  13631	c6 84 24 2c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9932], 0
  13639	c6 84 24 2d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9933], 0
  13641	c6 84 24 2e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9934], 0
  13649	c6 84 24 2f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9935], 0
  13651	c6 84 24 30 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9936], 0
  13659	c6 84 24 31 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9937], 0
  13661	c6 84 24 32 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9938], 0
  13669	c6 84 24 33 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9939], 0
  13671	c6 84 24 34 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9940], 0
  13679	c6 84 24 35 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9941], 0
  13681	c6 84 24 36 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9942], 0
  13689	c6 84 24 37 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9943], 0
  13691	c6 84 24 38 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9944], 0
  13699	c6 84 24 39 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9945], 0
  136a1	c6 84 24 3a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9946], 0
  136a9	c6 84 24 3b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9947], 0
  136b1	c6 84 24 3c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9948], 0
  136b9	c6 84 24 3d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9949], 0
  136c1	c6 84 24 3e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9950], 0
  136c9	c6 84 24 3f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9951], 0
  136d1	c6 84 24 40 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9952], 0
  136d9	c6 84 24 41 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9953], 0
  136e1	c6 84 24 42 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9954], 0
  136e9	c6 84 24 43 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9955], 0
  136f1	c6 84 24 44 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9956], 0
  136f9	c6 84 24 45 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9957], 0
  13701	c6 84 24 46 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9958], 0
  13709	c6 84 24 47 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9959], 0
  13711	c6 84 24 48 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9960], 0
  13719	c6 84 24 49 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9961], 0
  13721	c6 84 24 4a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9962], 0
  13729	c6 84 24 4b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9963], 0
  13731	c6 84 24 4c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9964], 0
  13739	c6 84 24 4d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9965], 0
  13741	c6 84 24 4e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9966], 0
  13749	c6 84 24 4f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9967], 0
  13751	c6 84 24 50 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9968], 0
  13759	c6 84 24 51 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9969], 0
  13761	c6 84 24 52 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9970], 0
  13769	c6 84 24 53 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9971], 0
  13771	c6 84 24 54 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9972], 0
  13779	c6 84 24 55 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9973], 0
  13781	c6 84 24 56 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9974], 0
  13789	c6 84 24 57 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9975], 0
  13791	c6 84 24 58 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9976], 0
  13799	c6 84 24 59 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9977], 0
  137a1	c6 84 24 5a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9978], 0
  137a9	c6 84 24 5b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9979], 0
  137b1	c6 84 24 5c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9980], 0
  137b9	c6 84 24 5d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9981], 0
  137c1	c6 84 24 5e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9982], 0
  137c9	c6 84 24 5f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9983], 0
  137d1	c6 84 24 60 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9984], 0
  137d9	c6 84 24 61 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9985], 0
  137e1	c6 84 24 62 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9986], 0
  137e9	c6 84 24 63 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9987], 0
  137f1	c6 84 24 64 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9988], 0
  137f9	c6 84 24 65 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9989], 0
  13801	c6 84 24 66 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9990], 0
  13809	c6 84 24 67 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9991], 0
  13811	c6 84 24 68 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9992], 0
  13819	c6 84 24 69 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9993], 0
  13821	c6 84 24 6a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9994], 0
  13829	c6 84 24 6b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9995], 0
  13831	c6 84 24 6c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9996], 0
  13839	c6 84 24 6d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9997], 0
  13841	c6 84 24 6e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9998], 0
  13849	c6 84 24 6f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+9999], 0
  13851	c6 84 24 70 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10000], 0
  13859	c6 84 24 71 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10001], 0
  13861	c6 84 24 72 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10002], 0
  13869	c6 84 24 73 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10003], 0
  13871	c6 84 24 74 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10004], 0
  13879	c6 84 24 75 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10005], 0
  13881	c6 84 24 76 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10006], 0
  13889	c6 84 24 77 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10007], 0
  13891	c6 84 24 78 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10008], 0
  13899	c6 84 24 79 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10009], 0
  138a1	c6 84 24 7a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10010], 0
  138a9	c6 84 24 7b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10011], 0
  138b1	c6 84 24 7c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10012], 0
  138b9	c6 84 24 7d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10013], 0
  138c1	c6 84 24 7e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10014], 0
  138c9	c6 84 24 7f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10015], 0
  138d1	c6 84 24 80 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10016], 0
  138d9	c6 84 24 81 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10017], 0
  138e1	c6 84 24 82 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10018], 0
  138e9	c6 84 24 83 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10019], 0
  138f1	c6 84 24 84 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10020], 0
  138f9	c6 84 24 85 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10021], 0
  13901	c6 84 24 86 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10022], 0
  13909	c6 84 24 87 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10023], 0
  13911	c6 84 24 88 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10024], 0
  13919	c6 84 24 89 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10025], 0
  13921	c6 84 24 8a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10026], 0
  13929	c6 84 24 8b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10027], 0
  13931	c6 84 24 8c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10028], 0
  13939	c6 84 24 8d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10029], 0
  13941	c6 84 24 8e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10030], 0
  13949	c6 84 24 8f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10031], 0
  13951	c6 84 24 90 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10032], 0
  13959	c6 84 24 91 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10033], 0
  13961	c6 84 24 92 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10034], 0
  13969	c6 84 24 93 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10035], 0
  13971	c6 84 24 94 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10036], 0
  13979	c6 84 24 95 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10037], 0
  13981	c6 84 24 96 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10038], 0
  13989	c6 84 24 97 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10039], 0
  13991	c6 84 24 98 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10040], 0
  13999	c6 84 24 99 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10041], 0
  139a1	c6 84 24 9a 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10042], 0
  139a9	c6 84 24 9b 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10043], 0
  139b1	c6 84 24 9c 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10044], 0
  139b9	c6 84 24 9d 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10045], 0
  139c1	c6 84 24 9e 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10046], 0
  139c9	c6 84 24 9f 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10047], 0
  139d1	c6 84 24 a0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10048], 0
  139d9	c6 84 24 a1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10049], 0
  139e1	c6 84 24 a2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10050], 0
  139e9	c6 84 24 a3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10051], 0
  139f1	c6 84 24 a4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10052], 0
  139f9	c6 84 24 a5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10053], 0
  13a01	c6 84 24 a6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10054], 0
  13a09	c6 84 24 a7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10055], 0
  13a11	c6 84 24 a8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10056], 0
  13a19	c6 84 24 a9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10057], 0
  13a21	c6 84 24 aa 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10058], 0
  13a29	c6 84 24 ab 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10059], 0
  13a31	c6 84 24 ac 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10060], 0
  13a39	c6 84 24 ad 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10061], 0
  13a41	c6 84 24 ae 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10062], 0
  13a49	c6 84 24 af 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10063], 0
  13a51	c6 84 24 b0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10064], 0
  13a59	c6 84 24 b1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10065], 0
  13a61	c6 84 24 b2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10066], 0
  13a69	c6 84 24 b3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10067], 0
  13a71	c6 84 24 b4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10068], 0
  13a79	c6 84 24 b5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10069], 0
  13a81	c6 84 24 b6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10070], 0
  13a89	c6 84 24 b7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10071], 0
  13a91	c6 84 24 b8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10072], 0
  13a99	c6 84 24 b9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10073], 0
  13aa1	c6 84 24 ba 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10074], 0
  13aa9	c6 84 24 bb 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10075], 0
  13ab1	c6 84 24 bc 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10076], 0
  13ab9	c6 84 24 bd 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10077], 0
  13ac1	c6 84 24 be 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10078], 0
  13ac9	c6 84 24 bf 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10079], 0
  13ad1	c6 84 24 c0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10080], 0
  13ad9	c6 84 24 c1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10081], 0
  13ae1	c6 84 24 c2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10082], 0
  13ae9	c6 84 24 c3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10083], 0
  13af1	c6 84 24 c4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10084], 0
  13af9	c6 84 24 c5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10085], 0
  13b01	c6 84 24 c6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10086], 0
  13b09	c6 84 24 c7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10087], 0
  13b11	c6 84 24 c8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10088], 0
  13b19	c6 84 24 c9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10089], 0
  13b21	c6 84 24 ca 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10090], 0
  13b29	c6 84 24 cb 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10091], 0
  13b31	c6 84 24 cc 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10092], 0
  13b39	c6 84 24 cd 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10093], 0
  13b41	c6 84 24 ce 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10094], 0
  13b49	c6 84 24 cf 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10095], 0
  13b51	c6 84 24 d0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10096], 0
  13b59	c6 84 24 d1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10097], 0
  13b61	c6 84 24 d2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10098], 0
  13b69	c6 84 24 d3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10099], 0
  13b71	c6 84 24 d4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10100], 0
  13b79	c6 84 24 d5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10101], 0
  13b81	c6 84 24 d6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10102], 0
  13b89	c6 84 24 d7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10103], 0
  13b91	c6 84 24 d8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10104], 0
  13b99	c6 84 24 d9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10105], 0
  13ba1	c6 84 24 da 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10106], 0
  13ba9	c6 84 24 db 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10107], 0
  13bb1	c6 84 24 dc 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10108], 0
  13bb9	c6 84 24 dd 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10109], 0
  13bc1	c6 84 24 de 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10110], 0
  13bc9	c6 84 24 df 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10111], 0
  13bd1	c6 84 24 e0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10112], 0
  13bd9	c6 84 24 e1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10113], 0
  13be1	c6 84 24 e2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10114], 0
  13be9	c6 84 24 e3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10115], 0
  13bf1	c6 84 24 e4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10116], 0
  13bf9	c6 84 24 e5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10117], 0
  13c01	c6 84 24 e6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10118], 0
  13c09	c6 84 24 e7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10119], 0
  13c11	c6 84 24 e8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10120], 0
  13c19	c6 84 24 e9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10121], 0
  13c21	c6 84 24 ea 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10122], 0
  13c29	c6 84 24 eb 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10123], 0
  13c31	c6 84 24 ec 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10124], 0
  13c39	c6 84 24 ed 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10125], 0
  13c41	c6 84 24 ee 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10126], 0
  13c49	c6 84 24 ef 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10127], 0
  13c51	c6 84 24 f0 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10128], 0
  13c59	c6 84 24 f1 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10129], 0
  13c61	c6 84 24 f2 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10130], 0
  13c69	c6 84 24 f3 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10131], 0
  13c71	c6 84 24 f4 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10132], 0
  13c79	c6 84 24 f5 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10133], 0
  13c81	c6 84 24 f6 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10134], 0
  13c89	c6 84 24 f7 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10135], 0
  13c91	c6 84 24 f8 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10136], 0
  13c99	c6 84 24 f9 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10137], 0
  13ca1	c6 84 24 fa 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10138], 0
  13ca9	c6 84 24 fb 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10139], 0
  13cb1	c6 84 24 fc 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10140], 0
  13cb9	c6 84 24 fd 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10141], 0
  13cc1	c6 84 24 fe 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10142], 0
  13cc9	c6 84 24 ff 27
	00 00 00	 mov	 BYTE PTR $T5[rsp+10143], 0
  13cd1	c6 84 24 00 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10144], 0
  13cd9	c6 84 24 01 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10145], 0
  13ce1	c6 84 24 02 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10146], 0
  13ce9	c6 84 24 03 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10147], 0
  13cf1	c6 84 24 04 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10148], 0
  13cf9	c6 84 24 05 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10149], 0
  13d01	c6 84 24 06 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10150], 0
  13d09	c6 84 24 07 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10151], 0
  13d11	c6 84 24 08 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10152], 0
  13d19	c6 84 24 09 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10153], 0
  13d21	c6 84 24 0a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10154], 0
  13d29	c6 84 24 0b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10155], 0
  13d31	c6 84 24 0c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10156], 0
  13d39	c6 84 24 0d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10157], 0
  13d41	c6 84 24 0e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10158], 0
  13d49	c6 84 24 0f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10159], 0
  13d51	c6 84 24 10 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10160], 0
  13d59	c6 84 24 11 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10161], 0
  13d61	c6 84 24 12 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10162], 0
  13d69	c6 84 24 13 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10163], 0
  13d71	c6 84 24 14 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10164], 0
  13d79	c6 84 24 15 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10165], 0
  13d81	c6 84 24 16 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10166], 0
  13d89	c6 84 24 17 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10167], 0
  13d91	c6 84 24 18 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10168], 0
  13d99	c6 84 24 19 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10169], 0
  13da1	c6 84 24 1a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10170], 0
  13da9	c6 84 24 1b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10171], 0
  13db1	c6 84 24 1c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10172], 0
  13db9	c6 84 24 1d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10173], 0
  13dc1	c6 84 24 1e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10174], 0
  13dc9	c6 84 24 1f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10175], 0
  13dd1	c6 84 24 20 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10176], 0
  13dd9	c6 84 24 21 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10177], 0
  13de1	c6 84 24 22 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10178], 0
  13de9	c6 84 24 23 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10179], 0
  13df1	c6 84 24 24 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10180], 0
  13df9	c6 84 24 25 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10181], 0
  13e01	c6 84 24 26 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10182], 0
  13e09	c6 84 24 27 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10183], 0
  13e11	c6 84 24 28 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10184], 0
  13e19	c6 84 24 29 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10185], 0
  13e21	c6 84 24 2a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10186], 0
  13e29	c6 84 24 2b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10187], 0
  13e31	c6 84 24 2c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10188], 0
  13e39	c6 84 24 2d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10189], 0
  13e41	c6 84 24 2e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10190], 0
  13e49	c6 84 24 2f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10191], 0
  13e51	c6 84 24 30 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10192], 0
  13e59	c6 84 24 31 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10193], 0
  13e61	c6 84 24 32 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10194], 0
  13e69	c6 84 24 33 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10195], 0
  13e71	c6 84 24 34 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10196], 0
  13e79	c6 84 24 35 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10197], 0
  13e81	c6 84 24 36 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10198], 0
  13e89	c6 84 24 37 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10199], 0
  13e91	c6 84 24 38 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10200], 0
  13e99	c6 84 24 39 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10201], 0
  13ea1	c6 84 24 3a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10202], 0
  13ea9	c6 84 24 3b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10203], 0
  13eb1	c6 84 24 3c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10204], 0
  13eb9	c6 84 24 3d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10205], 0
  13ec1	c6 84 24 3e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10206], 0
  13ec9	c6 84 24 3f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10207], 0
  13ed1	c6 84 24 40 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10208], 0
  13ed9	c6 84 24 41 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10209], 0
  13ee1	c6 84 24 42 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10210], 0
  13ee9	c6 84 24 43 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10211], 0
  13ef1	c6 84 24 44 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10212], 0
  13ef9	c6 84 24 45 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10213], 0
  13f01	c6 84 24 46 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10214], 0
  13f09	c6 84 24 47 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10215], 0
  13f11	c6 84 24 48 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10216], 0
  13f19	c6 84 24 49 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10217], 0
  13f21	c6 84 24 4a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10218], 0
  13f29	c6 84 24 4b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10219], 0
  13f31	c6 84 24 4c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10220], 0
  13f39	c6 84 24 4d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10221], 0
  13f41	c6 84 24 4e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10222], 0
  13f49	c6 84 24 4f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10223], 0
  13f51	c6 84 24 50 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10224], 0
  13f59	c6 84 24 51 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10225], 0
  13f61	c6 84 24 52 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10226], 0
  13f69	c6 84 24 53 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10227], 0
  13f71	c6 84 24 54 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10228], 0
  13f79	c6 84 24 55 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10229], 0
  13f81	c6 84 24 56 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10230], 0
  13f89	c6 84 24 57 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10231], 0
  13f91	c6 84 24 58 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10232], 0
  13f99	c6 84 24 59 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10233], 0
  13fa1	c6 84 24 5a 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10234], 0
  13fa9	c6 84 24 5b 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10235], 0
  13fb1	c6 84 24 5c 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10236], 0
  13fb9	c6 84 24 5d 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10237], 0
  13fc1	c6 84 24 5e 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10238], 0
  13fc9	c6 84 24 5f 28
	00 00 00	 mov	 BYTE PTR $T5[rsp+10239], 0
  13fd1	48 8d 84 24 60
	28 00 00	 lea	 rax, QWORD PTR $T5[rsp+10240]
  13fd9	4c 8b c0	 mov	 r8, rax
  13fdc	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T5[rsp]
  13fe1	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  13fe6	e8 00 00 00 00	 call	 ??0?$initializer_list@E@std@@QEAA@PEBE0@Z ; std::initializer_list<unsigned char>::initializer_list<unsigned char>
  13feb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  13ff0	48 8b f9	 mov	 rdi, rcx
  13ff3	48 8b f0	 mov	 rsi, rax
  13ff6	b9 10 00 00 00	 mov	 ecx, 16
  13ffb	f3 a4		 rep movsb
  13ffd	48 8d 44 24 40	 lea	 rax, QWORD PTR $T3[rsp]
  14002	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  14007	48 8b f8	 mov	 rdi, rax
  1400a	48 8b f1	 mov	 rsi, rcx
  1400d	b9 10 00 00 00	 mov	 ecx, 16
  14012	f3 a4		 rep movsb
  14014	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv77[rsp]
  14019	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  1401e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A ; Drv
  14025	e8 00 00 00 00	 call	 ??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
  1402a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__FDrv@@YAXXZ ; `dynamic atexit destructor for 'Drv''
  14031	e8 00 00 00 00	 call	 atexit
  14036	48 8b 8c 24 70
	28 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  1403e	48 33 cc	 xor	 rcx, rsp
  14041	e8 00 00 00 00	 call	 __security_check_cookie
  14046	48 81 c4 88 28
	00 00		 add	 rsp, 10376		; 00002888H
  1404d	5f		 pop	 rdi
  1404e	5e		 pop	 rsi
  1404f	c3		 ret	 0
??__EDrv@@YAXXZ ENDP					; `dynamic initializer for 'Drv''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??__FDrv@@YAXXZ
text$yd	SEGMENT
??__FDrv@@YAXXZ PROC					; `dynamic atexit destructor for 'Drv'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A
  0000b	48 85 c9	 test	 rcx, rcx
  0000e	74 46		 je	 SHORT $LN6@dynamic

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	48 8b 15 10 00
	00 00		 mov	 rdx, QWORD PTR ?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A+16
  00017	48 2b d1	 sub	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00021	72 18		 jb	 SHORT $LN22@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00027	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	49 2b c8	 sub	 rcx, r8

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00032	48 83 f8 1f	 cmp	 rax, 31
  00036	77 23		 ja	 SHORT $LN19@dynamic

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00038	49 8b c8	 mov	 rcx, r8
$LN22@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003b	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00040	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00043	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A, 0

; 1755 :             _Mylast  = nullptr;

  0004e	f3 0f 7f 05 08
	00 00 00	 movdqu	 XMMWORD PTR ?Drv@@3V?$vector@EV?$allocator@E@std@@@std@@A+8, xmm0
$LN6@dynamic:
  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
$LN19@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00061	cc		 int	 3
$LN28@dynamic:
??__FDrv@@YAXXZ ENDP					; `dynamic atexit destructor for 'Drv''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.h
;	COMDAT ??__EKm@@YAXXZ
text$di	SEGMENT
??__EKm@@YAXXZ PROC					; `dynamic initializer for 'Km'', COMDAT

; 101  : inline kernel::driver Km;

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__FKm@@YAXXZ ; `dynamic atexit destructor for 'Km''
  00007	e9 00 00 00 00	 jmp	 atexit
??__EKm@@YAXXZ ENDP					; `dynamic initializer for 'Km''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__FKm@@YAXXZ
text$yd	SEGMENT
??__FKm@@YAXXZ PROC					; `dynamic atexit destructor for 'Km'', COMDAT
  00000	c2 00 00	 ret	 0
??__FKm@@YAXXZ ENDP					; `dynamic atexit destructor for 'Km''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
??0driver@kernel@@QEAA@XZ PROC				; kernel::driver::driver

; 7    : kernel::driver::driver() : pid(0u)

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Km@@3Vdriver@kernel@@A, 0

; 8    : {}

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Km@@3Vdriver@kernel@@A ; Km
  00011	c3		 ret	 0
??0driver@kernel@@QEAA@XZ ENDP				; kernel::driver::driver
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$ = 8
??1driver@kernel@@QEAA@XZ PROC				; kernel::driver::~driver

; 11   : {}

  00000	c2 00 00	 ret	 0
??1driver@kernel@@QEAA@XZ ENDP				; kernel::driver::~driver
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 80
data$ = 88
?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<20,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c a2 01 00
	00		 jl	 $LN16@crypt
  00017	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0001f	49 8d 42 13	 lea	 rax, QWORD PTR [r10+19]
  00023	48 8d 51 13	 lea	 rdx, QWORD PTR [rcx+19]
  00027	48 3b c8	 cmp	 rcx, rax
  0002a	77 09		 ja	 SHORT $LN10@crypt
  0002c	49 3b d2	 cmp	 rdx, r10
  0002f	0f 83 84 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  00035	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  0003a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0003f	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00045	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0004d	4c 8d 49 04	 lea	 r9, QWORD PTR [rcx+4]
  00051	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00059	b8 05 00 00 00	 mov	 eax, 5
  0005e	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00066	49 8b d2	 mov	 rdx, r10
  00069	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0006e	48 2b d1	 sub	 rdx, rcx
  00071	44 8b 1c 24	 mov	 r11d, DWORD PTR $T1[rsp]
  00075	66 0f 6e f0	 movd	 xmm6, eax
  00079	b8 1f 00 00 00	 mov	 eax, 31
  0007e	66 44 0f 6e c0	 movd	 xmm8, eax
  00083	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00090	66 41 0f 6e d0	 movd	 xmm2, r8d
  00095	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00099	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0009e	4d 8d 49 08	 lea	 r9, QWORD PTR [r9+8]
  000a2	66 0f fe d5	 paddd	 xmm2, xmm5
  000a6	66 0f 6e d8	 movd	 xmm3, eax
  000aa	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000ae	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  000b3	66 0f 62 ca	 punpckldq xmm1, xmm2
  000b7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  000bb	66 0f 6a c2	 punpckhdq xmm0, xmm2
  000bf	66 0f fe dd	 paddd	 xmm3, xmm5
  000c3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000c8	41 83 c0 08	 add	 r8d, 8
  000cc	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000d1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000d5	66 0f fe ca	 paddd	 xmm1, xmm2
  000d9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000dd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000e1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000e6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ea	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000ef	66 0f fa d0	 psubd	 xmm2, xmm0
  000f3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000f8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000fd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00102	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00106	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0010e	66 0f 67 d2	 packuswb xmm2, xmm2
  00112	66 0f 62 cb	 punpckldq xmm1, xmm3
  00116	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011b	66 41 0f 6e c3	 movd	 xmm0, r11d
  00120	66 0f fc d0	 paddb	 xmm2, xmm0
  00124	66 42 0f 6e 44
	0a f4		 movd	 xmm0, DWORD PTR [rdx+r9-12]
  0012b	66 0f ef d0	 pxor	 xmm2, xmm0
  0012f	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00133	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00137	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0013c	66 41 0f 7e 51
	f4		 movd	 DWORD PTR [r9-12], xmm2
  00142	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00146	66 0f fe cb	 paddd	 xmm1, xmm3
  0014a	66 0f e2 ce	 psrad	 xmm1, xmm6
  0014e	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00152	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00157	66 0f fe c1	 paddd	 xmm0, xmm1
  0015b	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  00160	66 0f fa d8	 psubd	 xmm3, xmm0
  00164	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00169	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0016e	66 41 0f 6e c3	 movd	 xmm0, r11d
  00173	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00178	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00180	66 0f 67 d2	 packuswb xmm2, xmm2
  00184	66 0f fc d0	 paddb	 xmm2, xmm0
  00188	66 42 0f 6e 44
	0a f8		 movd	 xmm0, DWORD PTR [rdx+r9-8]
  0018f	66 0f ef d0	 pxor	 xmm2, xmm0
  00193	66 41 0f 7e 51
	f8		 movd	 DWORD PTR [r9-8], xmm2
  00199	41 83 f8 10	 cmp	 r8d, 16
  0019d	0f 8c ed fe ff
	ff		 jl	 $LL4@crypt

; 109  : 			for (int i = 0; i < _size; i++)

  001a3	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  001a9	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  001ae	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  001b3	41 83 f8 14	 cmp	 r8d, 20
  001b7	7d 50		 jge	 SHORT $LN3@crypt
$LN16@crypt:
  001b9	4d 63 c8	 movsxd	 r9, r8d
  001bc	4c 03 c9	 add	 r9, rcx
  001bf	4c 2b d1	 sub	 r10, rcx
  001c2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001d5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001d9	41 f7 e8	 imul	 r8d
  001dc	41 03 d0	 add	 edx, r8d
  001df	c1 fa 05	 sar	 edx, 5
  001e2	8b c2		 mov	 eax, edx
  001e4	c1 e8 1f	 shr	 eax, 31
  001e7	03 d0		 add	 edx, eax
  001e9	0f be c2	 movsx	 eax, dl
  001ec	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	41 ff c0	 inc	 r8d
  001f6	2a c1		 sub	 al, cl
  001f8	04 38		 add	 al, 56			; 00000038H
  001fa	43 32 44 11 ff	 xor	 al, BYTE PTR [r9+r10-1]
  001ff	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00203	41 83 f8 14	 cmp	 r8d, 20
  00207	7c c7		 jl	 SHORT $LL8@crypt
$LN3@crypt:

; 112  : 			}
; 113  : 		}

  00209	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020d	c3		 ret	 0
?crypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<20,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 80
data$ = 88
?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<25,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c a2 01 00
	00		 jl	 $LN16@crypt
  00017	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0001f	49 8d 42 18	 lea	 rax, QWORD PTR [r10+24]
  00023	48 8d 51 18	 lea	 rdx, QWORD PTR [rcx+24]
  00027	48 3b c8	 cmp	 rcx, rax
  0002a	77 09		 ja	 SHORT $LN10@crypt
  0002c	49 3b d2	 cmp	 rdx, r10
  0002f	0f 83 84 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  00035	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  0003a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0003f	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00045	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0004d	4c 8d 49 04	 lea	 r9, QWORD PTR [rcx+4]
  00051	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00059	b8 05 00 00 00	 mov	 eax, 5
  0005e	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00066	49 8b d2	 mov	 rdx, r10
  00069	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0006e	48 2b d1	 sub	 rdx, rcx
  00071	44 8b 1c 24	 mov	 r11d, DWORD PTR $T1[rsp]
  00075	66 0f 6e f0	 movd	 xmm6, eax
  00079	b8 1f 00 00 00	 mov	 eax, 31
  0007e	66 44 0f 6e c0	 movd	 xmm8, eax
  00083	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00090	66 41 0f 6e d0	 movd	 xmm2, r8d
  00095	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00099	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0009e	4d 8d 49 08	 lea	 r9, QWORD PTR [r9+8]
  000a2	66 0f fe d5	 paddd	 xmm2, xmm5
  000a6	66 0f 6e d8	 movd	 xmm3, eax
  000aa	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000ae	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  000b3	66 0f 62 ca	 punpckldq xmm1, xmm2
  000b7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  000bb	66 0f 6a c2	 punpckhdq xmm0, xmm2
  000bf	66 0f fe dd	 paddd	 xmm3, xmm5
  000c3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000c8	41 83 c0 08	 add	 r8d, 8
  000cc	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000d1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000d5	66 0f fe ca	 paddd	 xmm1, xmm2
  000d9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000dd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000e1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000e6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ea	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000ef	66 0f fa d0	 psubd	 xmm2, xmm0
  000f3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000f8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000fd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00102	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00106	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0010e	66 0f 67 d2	 packuswb xmm2, xmm2
  00112	66 0f 62 cb	 punpckldq xmm1, xmm3
  00116	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011b	66 41 0f 6e c3	 movd	 xmm0, r11d
  00120	66 0f fc d0	 paddb	 xmm2, xmm0
  00124	66 42 0f 6e 44
	0a f4		 movd	 xmm0, DWORD PTR [rdx+r9-12]
  0012b	66 0f ef d0	 pxor	 xmm2, xmm0
  0012f	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00133	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00137	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0013c	66 41 0f 7e 51
	f4		 movd	 DWORD PTR [r9-12], xmm2
  00142	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00146	66 0f fe cb	 paddd	 xmm1, xmm3
  0014a	66 0f e2 ce	 psrad	 xmm1, xmm6
  0014e	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00152	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00157	66 0f fe c1	 paddd	 xmm0, xmm1
  0015b	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  00160	66 0f fa d8	 psubd	 xmm3, xmm0
  00164	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00169	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0016e	66 41 0f 6e c3	 movd	 xmm0, r11d
  00173	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00178	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00180	66 0f 67 d2	 packuswb xmm2, xmm2
  00184	66 0f fc d0	 paddb	 xmm2, xmm0
  00188	66 42 0f 6e 44
	0a f8		 movd	 xmm0, DWORD PTR [rdx+r9-8]
  0018f	66 0f ef d0	 pxor	 xmm2, xmm0
  00193	66 41 0f 7e 51
	f8		 movd	 DWORD PTR [r9-8], xmm2
  00199	41 83 f8 18	 cmp	 r8d, 24
  0019d	0f 8c ed fe ff
	ff		 jl	 $LL4@crypt

; 109  : 			for (int i = 0; i < _size; i++)

  001a3	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  001a9	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  001ae	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  001b3	41 83 f8 19	 cmp	 r8d, 25
  001b7	7d 50		 jge	 SHORT $LN3@crypt
$LN16@crypt:
  001b9	4d 63 c8	 movsxd	 r9, r8d
  001bc	4c 03 c9	 add	 r9, rcx
  001bf	4c 2b d1	 sub	 r10, rcx
  001c2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001d5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001d9	41 f7 e8	 imul	 r8d
  001dc	41 03 d0	 add	 edx, r8d
  001df	c1 fa 05	 sar	 edx, 5
  001e2	8b c2		 mov	 eax, edx
  001e4	c1 e8 1f	 shr	 eax, 31
  001e7	03 d0		 add	 edx, eax
  001e9	0f be c2	 movsx	 eax, dl
  001ec	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	41 ff c0	 inc	 r8d
  001f6	2a c1		 sub	 al, cl
  001f8	04 38		 add	 al, 56			; 00000038H
  001fa	43 32 44 11 ff	 xor	 al, BYTE PTR [r9+r10-1]
  001ff	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00203	41 83 f8 19	 cmp	 r8d, 25
  00207	7c c7		 jl	 SHORT $LL8@crypt
$LN3@crypt:

; 112  : 			}
; 113  : 		}

  00209	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020d	c3		 ret	 0
?crypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<25,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 32
data$ = 40
?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<15,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 18	 sub	 rsp, 24

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c 2e 01 00
	00		 jl	 $LN16@crypt
  00017	49 8d 42 0e	 lea	 rax, QWORD PTR [r10+14]
  0001b	48 8d 51 0e	 lea	 rdx, QWORD PTR [rcx+14]
  0001f	48 3b c8	 cmp	 rcx, rax
  00022	77 09		 ja	 SHORT $LN10@crypt
  00024	49 3b d2	 cmp	 rdx, r10
  00027	0f 83 18 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  0002d	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00031	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00039	b8 05 00 00 00	 mov	 eax, 5
  0003e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00046	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0004a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00052	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00056	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0005a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00060	66 0f 62 ca	 punpckldq xmm1, xmm2
  00064	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00069	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0006e	66 0f 6e f0	 movd	 xmm6, eax
  00072	b8 1f 00 00 00	 mov	 eax, 31
  00077	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0007b	66 0f fe ca	 paddd	 xmm1, xmm2
  0007f	66 0f 6e e8	 movd	 xmm5, eax
  00083	66 0f e2 ce	 psrad	 xmm1, xmm6
  00087	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0008b	66 0f d2 c5	 psrld	 xmm0, xmm5
  0008f	66 0f fe c1	 paddd	 xmm0, xmm1
  00093	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0009c	66 0f fa d0	 psubd	 xmm2, xmm0
  000a0	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000a5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000aa	66 41 0f 6e 02	 movd	 xmm0, DWORD PTR [r10]
  000af	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000b4	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000b8	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000c0	66 0f 67 d2	 packuswb xmm2, xmm2
  000c4	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000cc	66 0f ef d0	 pxor	 xmm2, xmm0
  000d0	66 0f 62 cb	 punpckldq xmm1, xmm3
  000d4	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000d8	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000dc	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000e0	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000e5	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000ea	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000ee	66 0f fe cb	 paddd	 xmm1, xmm3
  000f2	66 0f e2 ce	 psrad	 xmm1, xmm6
  000f6	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fa	66 0f d2 c5	 psrld	 xmm0, xmm5
  000fe	66 0f fe c1	 paddd	 xmm0, xmm1
  00102	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0010b	66 0f fa d8	 psubd	 xmm3, xmm0
  0010f	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00114	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00119	66 41 0f 6e 42
	04		 movd	 xmm0, DWORD PTR [r10+4]
  0011f	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00124	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0012c	66 0f 67 d2	 packuswb xmm2, xmm2
  00130	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  00138	66 0f ef d0	 pxor	 xmm2, xmm0
  0013c	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2

; 109  : 			for (int i = 0; i < _size; i++)

  00141	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
$LN16@crypt:
  00145	45 8b c8	 mov	 r9d, r8d
  00148	4c 03 c9	 add	 r9, rcx
  0014b	4c 2b d1	 sub	 r10, rcx
  0014e	66 90		 npad	 2
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00150	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00155	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00159	41 f7 e8	 imul	 r8d
  0015c	41 03 d0	 add	 edx, r8d
  0015f	c1 fa 05	 sar	 edx, 5
  00162	8b c2		 mov	 eax, edx
  00164	c1 e8 1f	 shr	 eax, 31
  00167	03 d0		 add	 edx, eax
  00169	0f be c2	 movsx	 eax, dl
  0016c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0016f	41 0f b6 c0	 movzx	 eax, r8b
  00173	41 ff c0	 inc	 r8d
  00176	2a c1		 sub	 al, cl
  00178	04 38		 add	 al, 56			; 00000038H
  0017a	43 32 44 0a ff	 xor	 al, BYTE PTR [r10+r9-1]
  0017f	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00183	41 83 f8 0f	 cmp	 r8d, 15
  00187	7c c7		 jl	 SHORT $LL8@crypt

; 112  : 			}
; 113  : 		}

  00189	48 83 c4 18	 add	 rsp, 24
  0018d	c3		 ret	 0
?crypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<15,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 80
data$ = 88
?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<18,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c a2 01 00
	00		 jl	 $LN16@crypt
  00017	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0001f	49 8d 42 11	 lea	 rax, QWORD PTR [r10+17]
  00023	48 8d 51 11	 lea	 rdx, QWORD PTR [rcx+17]
  00027	48 3b c8	 cmp	 rcx, rax
  0002a	77 09		 ja	 SHORT $LN10@crypt
  0002c	49 3b d2	 cmp	 rdx, r10
  0002f	0f 83 84 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  00035	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  0003a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0003f	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00045	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0004d	4c 8d 49 04	 lea	 r9, QWORD PTR [rcx+4]
  00051	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00059	b8 05 00 00 00	 mov	 eax, 5
  0005e	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00066	49 8b d2	 mov	 rdx, r10
  00069	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0006e	48 2b d1	 sub	 rdx, rcx
  00071	44 8b 1c 24	 mov	 r11d, DWORD PTR $T1[rsp]
  00075	66 0f 6e f0	 movd	 xmm6, eax
  00079	b8 1f 00 00 00	 mov	 eax, 31
  0007e	66 44 0f 6e c0	 movd	 xmm8, eax
  00083	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00090	66 41 0f 6e d0	 movd	 xmm2, r8d
  00095	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00099	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0009e	4d 8d 49 08	 lea	 r9, QWORD PTR [r9+8]
  000a2	66 0f fe d5	 paddd	 xmm2, xmm5
  000a6	66 0f 6e d8	 movd	 xmm3, eax
  000aa	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000ae	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  000b3	66 0f 62 ca	 punpckldq xmm1, xmm2
  000b7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  000bb	66 0f 6a c2	 punpckhdq xmm0, xmm2
  000bf	66 0f fe dd	 paddd	 xmm3, xmm5
  000c3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000c8	41 83 c0 08	 add	 r8d, 8
  000cc	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000d1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000d5	66 0f fe ca	 paddd	 xmm1, xmm2
  000d9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000dd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000e1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000e6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ea	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000ef	66 0f fa d0	 psubd	 xmm2, xmm0
  000f3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000f8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000fd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00102	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00106	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0010e	66 0f 67 d2	 packuswb xmm2, xmm2
  00112	66 0f 62 cb	 punpckldq xmm1, xmm3
  00116	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011b	66 41 0f 6e c3	 movd	 xmm0, r11d
  00120	66 0f fc d0	 paddb	 xmm2, xmm0
  00124	66 42 0f 6e 44
	0a f4		 movd	 xmm0, DWORD PTR [rdx+r9-12]
  0012b	66 0f ef d0	 pxor	 xmm2, xmm0
  0012f	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00133	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00137	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0013c	66 41 0f 7e 51
	f4		 movd	 DWORD PTR [r9-12], xmm2
  00142	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00146	66 0f fe cb	 paddd	 xmm1, xmm3
  0014a	66 0f e2 ce	 psrad	 xmm1, xmm6
  0014e	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00152	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00157	66 0f fe c1	 paddd	 xmm0, xmm1
  0015b	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  00160	66 0f fa d8	 psubd	 xmm3, xmm0
  00164	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00169	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0016e	66 41 0f 6e c3	 movd	 xmm0, r11d
  00173	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00178	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00180	66 0f 67 d2	 packuswb xmm2, xmm2
  00184	66 0f fc d0	 paddb	 xmm2, xmm0
  00188	66 42 0f 6e 44
	0a f8		 movd	 xmm0, DWORD PTR [rdx+r9-8]
  0018f	66 0f ef d0	 pxor	 xmm2, xmm0
  00193	66 41 0f 7e 51
	f8		 movd	 DWORD PTR [r9-8], xmm2
  00199	41 83 f8 10	 cmp	 r8d, 16
  0019d	0f 8c ed fe ff
	ff		 jl	 $LL4@crypt

; 109  : 			for (int i = 0; i < _size; i++)

  001a3	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  001a9	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  001ae	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  001b3	41 83 f8 12	 cmp	 r8d, 18
  001b7	7d 50		 jge	 SHORT $LN3@crypt
$LN16@crypt:
  001b9	4d 63 c8	 movsxd	 r9, r8d
  001bc	4c 03 c9	 add	 r9, rcx
  001bf	4c 2b d1	 sub	 r10, rcx
  001c2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001d5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001d9	41 f7 e8	 imul	 r8d
  001dc	41 03 d0	 add	 edx, r8d
  001df	c1 fa 05	 sar	 edx, 5
  001e2	8b c2		 mov	 eax, edx
  001e4	c1 e8 1f	 shr	 eax, 31
  001e7	03 d0		 add	 edx, eax
  001e9	0f be c2	 movsx	 eax, dl
  001ec	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	41 ff c0	 inc	 r8d
  001f6	2a c1		 sub	 al, cl
  001f8	04 38		 add	 al, 56			; 00000038H
  001fa	43 32 44 11 ff	 xor	 al, BYTE PTR [r9+r10-1]
  001ff	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00203	41 83 f8 12	 cmp	 r8d, 18
  00207	7c c7		 jl	 SHORT $LL8@crypt
$LN3@crypt:

; 112  : 			}
; 113  : 		}

  00209	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020d	c3		 ret	 0
?crypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<18,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 80
data$ = 88
?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<44,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c a2 01 00
	00		 jl	 $LN16@crypt
  00017	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0001f	49 8d 42 2b	 lea	 rax, QWORD PTR [r10+43]
  00023	48 8d 51 2b	 lea	 rdx, QWORD PTR [rcx+43]
  00027	48 3b c8	 cmp	 rcx, rax
  0002a	77 09		 ja	 SHORT $LN10@crypt
  0002c	49 3b d2	 cmp	 rdx, r10
  0002f	0f 83 84 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  00035	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  0003a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0003f	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00045	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0004d	4c 8d 49 04	 lea	 r9, QWORD PTR [rcx+4]
  00051	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00059	b8 05 00 00 00	 mov	 eax, 5
  0005e	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00066	49 8b d2	 mov	 rdx, r10
  00069	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0006e	48 2b d1	 sub	 rdx, rcx
  00071	44 8b 1c 24	 mov	 r11d, DWORD PTR $T1[rsp]
  00075	66 0f 6e f0	 movd	 xmm6, eax
  00079	b8 1f 00 00 00	 mov	 eax, 31
  0007e	66 44 0f 6e c0	 movd	 xmm8, eax
  00083	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00090	66 41 0f 6e d0	 movd	 xmm2, r8d
  00095	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00099	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0009e	4d 8d 49 08	 lea	 r9, QWORD PTR [r9+8]
  000a2	66 0f fe d5	 paddd	 xmm2, xmm5
  000a6	66 0f 6e d8	 movd	 xmm3, eax
  000aa	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000ae	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  000b3	66 0f 62 ca	 punpckldq xmm1, xmm2
  000b7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  000bb	66 0f 6a c2	 punpckhdq xmm0, xmm2
  000bf	66 0f fe dd	 paddd	 xmm3, xmm5
  000c3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000c8	41 83 c0 08	 add	 r8d, 8
  000cc	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000d1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000d5	66 0f fe ca	 paddd	 xmm1, xmm2
  000d9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000dd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000e1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000e6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ea	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000ef	66 0f fa d0	 psubd	 xmm2, xmm0
  000f3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000f8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000fd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00102	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00106	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0010e	66 0f 67 d2	 packuswb xmm2, xmm2
  00112	66 0f 62 cb	 punpckldq xmm1, xmm3
  00116	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011b	66 41 0f 6e c3	 movd	 xmm0, r11d
  00120	66 0f fc d0	 paddb	 xmm2, xmm0
  00124	66 42 0f 6e 44
	0a f4		 movd	 xmm0, DWORD PTR [rdx+r9-12]
  0012b	66 0f ef d0	 pxor	 xmm2, xmm0
  0012f	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00133	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00137	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0013c	66 41 0f 7e 51
	f4		 movd	 DWORD PTR [r9-12], xmm2
  00142	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00146	66 0f fe cb	 paddd	 xmm1, xmm3
  0014a	66 0f e2 ce	 psrad	 xmm1, xmm6
  0014e	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00152	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00157	66 0f fe c1	 paddd	 xmm0, xmm1
  0015b	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  00160	66 0f fa d8	 psubd	 xmm3, xmm0
  00164	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00169	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0016e	66 41 0f 6e c3	 movd	 xmm0, r11d
  00173	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00178	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00180	66 0f 67 d2	 packuswb xmm2, xmm2
  00184	66 0f fc d0	 paddb	 xmm2, xmm0
  00188	66 42 0f 6e 44
	0a f8		 movd	 xmm0, DWORD PTR [rdx+r9-8]
  0018f	66 0f ef d0	 pxor	 xmm2, xmm0
  00193	66 41 0f 7e 51
	f8		 movd	 DWORD PTR [r9-8], xmm2
  00199	41 83 f8 28	 cmp	 r8d, 40			; 00000028H
  0019d	0f 8c ed fe ff
	ff		 jl	 $LL4@crypt

; 109  : 			for (int i = 0; i < _size; i++)

  001a3	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  001a9	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  001ae	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  001b3	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  001b7	7d 50		 jge	 SHORT $LN3@crypt
$LN16@crypt:
  001b9	4d 63 c8	 movsxd	 r9, r8d
  001bc	4c 03 c9	 add	 r9, rcx
  001bf	4c 2b d1	 sub	 r10, rcx
  001c2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001d5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001d9	41 f7 e8	 imul	 r8d
  001dc	41 03 d0	 add	 edx, r8d
  001df	c1 fa 05	 sar	 edx, 5
  001e2	8b c2		 mov	 eax, edx
  001e4	c1 e8 1f	 shr	 eax, 31
  001e7	03 d0		 add	 edx, eax
  001e9	0f be c2	 movsx	 eax, dl
  001ec	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	41 ff c0	 inc	 r8d
  001f6	2a c1		 sub	 al, cl
  001f8	04 38		 add	 al, 56			; 00000038H
  001fa	43 32 44 11 ff	 xor	 al, BYTE PTR [r9+r10-1]
  001ff	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00203	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  00207	7c c7		 jl	 SHORT $LL8@crypt
$LN3@crypt:

; 112  : 			}
; 113  : 		}

  00209	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020d	c3		 ret	 0
?crypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<44,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
__$ArrayPad$ = 48
?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ PROC		; ensure_dll_load

; 66   : {

$LN60:
  00000	40 55		 push	 rbp
  00002	48 8b ec	 mov	 rbp, rsp
  00005	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 45 f0	 mov	 QWORD PTR __$ArrayPad$[rbp-64], rax

; 69   : 	LOAD_DLL("user32.dll");

  00017	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  0001e	48 8d 4d e0	 lea	 rcx, QWORD PTR $T2[rbp-64]
  00022	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  0002a	f2 0f 11 45 e0	 movsd	 QWORD PTR $T2[rbp-64], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  0002f	80 75 e1 39	 xor	 BYTE PTR $T2[rbp-63], 57 ; 00000039H
  00033	80 75 e2 3a	 xor	 BYTE PTR $T2[rbp-62], 58 ; 0000003aH
  00037	80 75 e3 3b	 xor	 BYTE PTR $T2[rbp-61], 59 ; 0000003bH
  0003b	80 75 e4 3c	 xor	 BYTE PTR $T2[rbp-60], 60 ; 0000003cH
  0003f	80 75 e5 3d	 xor	 BYTE PTR $T2[rbp-59], 61 ; 0000003dH
  00043	80 75 e6 3e	 xor	 BYTE PTR $T2[rbp-58], 62 ; 0000003eH
  00047	80 75 e7 3f	 xor	 BYTE PTR $T2[rbp-57], 63 ; 0000003fH
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 69   : 	LOAD_DLL("user32.dll");

  0004b	66 89 45 e8	 mov	 WORD PTR $T2[rbp-56], ax
  0004f	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00056	80 75 e8 40	 xor	 BYTE PTR $T2[rbp-56], 64 ; 00000040H
  0005a	34 42		 xor	 al, 66			; 00000042H
  0005c	80 75 e9 41	 xor	 BYTE PTR $T2[rbp-55], 65 ; 00000041H
  00060	88 45 ea	 mov	 BYTE PTR $T2[rbp-54], al
  00063	c6 45 e0 75	 mov	 BYTE PTR $T2[rbp-64], 117 ; 00000075H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 69   : 	LOAD_DLL("user32.dll");

  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA

; 73   : 	return LoadLibrary(_("win32u.dll"));

  0006d	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  00074	48 8d 4d e0	 lea	 rcx, QWORD PTR $T1[rbp-64]
  00078	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  00080	f2 0f 11 45 e0	 movsd	 QWORD PTR $T1[rbp-64], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00085	80 75 e1 39	 xor	 BYTE PTR $T1[rbp-63], 57 ; 00000039H
  00089	80 75 e2 3a	 xor	 BYTE PTR $T1[rbp-62], 58 ; 0000003aH
  0008d	80 75 e3 3b	 xor	 BYTE PTR $T1[rbp-61], 59 ; 0000003bH
  00091	80 75 e4 3c	 xor	 BYTE PTR $T1[rbp-60], 60 ; 0000003cH
  00095	80 75 e5 3d	 xor	 BYTE PTR $T1[rbp-59], 61 ; 0000003dH
  00099	80 75 e6 3e	 xor	 BYTE PTR $T1[rbp-58], 62 ; 0000003eH
  0009d	80 75 e7 3f	 xor	 BYTE PTR $T1[rbp-57], 63 ; 0000003fH
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 73   : 	return LoadLibrary(_("win32u.dll"));

  000a1	66 89 45 e8	 mov	 WORD PTR $T1[rbp-56], ax
  000a5	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  000ac	80 75 e8 40	 xor	 BYTE PTR $T1[rbp-56], 64 ; 00000040H
  000b0	34 42		 xor	 al, 66			; 00000042H
  000b2	80 75 e9 41	 xor	 BYTE PTR $T1[rbp-55], 65 ; 00000041H
  000b6	88 45 ea	 mov	 BYTE PTR $T1[rbp-54], al
  000b9	c6 45 e0 77	 mov	 BYTE PTR $T1[rbp-64], 119 ; 00000077H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 73   : 	return LoadLibrary(_("win32u.dll"));

  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA

; 74   : }

  000c3	48 8b 4d f0	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-64]
  000c7	48 33 cc	 xor	 rcx, rsp
  000ca	e8 00 00 00 00	 call	 __security_check_cookie
  000cf	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d3	5d		 pop	 rbp
  000d4	c3		 ret	 0
?ensure_dll_load@@YAPEAUHINSTANCE__@@XZ ENDP		; ensure_dll_load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ PROC ; <lambda_57bce39a08961ea86b276630ec11ec78>::operator()

; 69   : 	LOAD_DLL("user32.dll");

  00000	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  00007	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  0000f	f2 0f 11 02	 movsd	 QWORD PTR [rdx], xmm0
  00013	66 89 42 08	 mov	 WORD PTR [rdx+8], ax
  00017	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
  0001e	88 42 0a	 mov	 BYTE PTR [rdx+10], al
  00021	48 8b c2	 mov	 rax, rdx
  00024	c3		 ret	 0
??R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ ENDP ; <lambda_57bce39a08961ea86b276630ec11ec78>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
?crypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<11,56,50,char>::crypt, COMDAT

; 109  : 			for (int i = 0; i < _size; i++)
; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00000	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00003	34 38		 xor	 al, 56			; 00000038H
  00005	88 01		 mov	 BYTE PTR [rcx], al
  00007	0f b6 42 01	 movzx	 eax, BYTE PTR [rdx+1]
  0000b	34 39		 xor	 al, 57			; 00000039H
  0000d	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00010	0f b6 42 02	 movzx	 eax, BYTE PTR [rdx+2]
  00014	34 3a		 xor	 al, 58			; 0000003aH
  00016	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00019	0f b6 42 03	 movzx	 eax, BYTE PTR [rdx+3]
  0001d	34 3b		 xor	 al, 59			; 0000003bH
  0001f	88 41 03	 mov	 BYTE PTR [rcx+3], al
  00022	0f b6 42 04	 movzx	 eax, BYTE PTR [rdx+4]
  00026	34 3c		 xor	 al, 60			; 0000003cH
  00028	88 41 04	 mov	 BYTE PTR [rcx+4], al
  0002b	0f b6 42 05	 movzx	 eax, BYTE PTR [rdx+5]
  0002f	34 3d		 xor	 al, 61			; 0000003dH
  00031	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00034	0f b6 42 06	 movzx	 eax, BYTE PTR [rdx+6]
  00038	34 3e		 xor	 al, 62			; 0000003eH
  0003a	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0003d	0f b6 42 07	 movzx	 eax, BYTE PTR [rdx+7]
  00041	34 3f		 xor	 al, 63			; 0000003fH
  00043	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00046	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  0004a	34 40		 xor	 al, 64			; 00000040H
  0004c	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0004f	0f b6 42 09	 movzx	 eax, BYTE PTR [rdx+9]
  00053	34 41		 xor	 al, 65			; 00000041H
  00055	88 41 09	 mov	 BYTE PTR [rcx+9], al
  00058	0f b6 42 0a	 movzx	 eax, BYTE PTR [rdx+10]
  0005c	34 42		 xor	 al, 66			; 00000042H
  0005e	88 41 0a	 mov	 BYTE PTR [rcx+10], al

; 112  : 			}
; 113  : 		}

  00061	c3		 ret	 0
?crypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<11,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ PROC ; <lambda_6d32484823a26278e33b8e250507ac0c>::operator()

; 73   : 	return LoadLibrary(_("win32u.dll"));

  00000	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  00007	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  0000f	f2 0f 11 02	 movsd	 QWORD PTR [rdx], xmm0
  00013	66 89 42 08	 mov	 WORD PTR [rdx+8], ax
  00017	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
  0001e	88 42 0a	 mov	 BYTE PTR [rdx+10], al
  00021	48 8b c2	 mov	 rax, rdx
  00024	c3		 ret	 0
??R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ ENDP ; <lambda_6d32484823a26278e33b8e250507ac0c>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 48
$T4 = 64
$T5 = 80
$T6 = 96
__$ArrayPad$ = 120
this$ = 208
?init@driver@kernel@@QEAA_NXZ PROC			; kernel::driver::init

; 78   : {

$LN144:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000b	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000f	55		 push	 rbp
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  00018	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0001f	0f 29 70 d8	 movaps	 XMMWORD PTR [rax-40], xmm6
  00023	0f 29 78 c8	 movaps	 XMMWORD PTR [rax-56], xmm7
  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002e	48 33 c4	 xor	 rax, rsp
  00031	48 89 45 0f	 mov	 QWORD PTR __$ArrayPad$[rbp-105], rax

; 79   : 	if (!pHookFunc)

  00035	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __isa_available
  0003b	33 db		 xor	 ebx, ebx
  0003d	48 39 1d 00 00
	00 00		 cmp	 QWORD PTR ?pHookFunc@@3P6A_J_K@ZEA, rbx ; pHookFunc
  00044	48 8b f9	 mov	 rdi, rcx
  00047	44 8d 73 05	 lea	 r14d, QWORD PTR [rbx+5]
  0004b	44 8d 7b 1f	 lea	 r15d, QWORD PTR [rbx+31]
  0004f	0f 85 26 03 00
	00		 jne	 $LN5@init

; 81   : 		HMODULE hDll = GetModuleHandle(_("win32u.dll"));

  00055	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  0005c	48 8d 4d d7	 lea	 rcx, QWORD PTR $T4[rbp-105]
  00060	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  00068	f2 0f 11 45 d7	 movsd	 QWORD PTR $T4[rbp-105], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  0006d	80 75 d8 39	 xor	 BYTE PTR $T4[rbp-104], 57 ; 00000039H
  00071	80 75 d9 3a	 xor	 BYTE PTR $T4[rbp-103], 58 ; 0000003aH
  00075	80 75 da 3b	 xor	 BYTE PTR $T4[rbp-102], 59 ; 0000003bH
  00079	80 75 db 3c	 xor	 BYTE PTR $T4[rbp-101], 60 ; 0000003cH
  0007d	80 75 dc 3d	 xor	 BYTE PTR $T4[rbp-100], 61 ; 0000003dH
  00081	80 75 dd 3e	 xor	 BYTE PTR $T4[rbp-99], 62 ; 0000003eH
  00085	80 75 de 3f	 xor	 BYTE PTR $T4[rbp-98], 63 ; 0000003fH
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 81   : 		HMODULE hDll = GetModuleHandle(_("win32u.dll"));

  00089	66 89 45 df	 mov	 WORD PTR $T4[rbp-97], ax
  0008d	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00094	80 75 df 40	 xor	 BYTE PTR $T4[rbp-97], 64 ; 00000040H
  00098	34 42		 xor	 al, 66			; 00000042H
  0009a	80 75 e0 41	 xor	 BYTE PTR $T4[rbp-96], 65 ; 00000041H
  0009e	88 45 e1	 mov	 BYTE PTR $T4[rbp-95], al
  000a1	c6 45 d7 77	 mov	 BYTE PTR $T4[rbp-105], 119 ; 00000077H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 81   : 		HMODULE hDll = GetModuleHandle(_("win32u.dll"));

  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  000ab	4c 8b d0	 mov	 r10, rax

; 82   : 		if (!hDll)

  000ae	48 85 c0	 test	 rax, rax
  000b1	0f 85 b8 00 00
	00		 jne	 $LN4@init

; 69   : 	LOAD_DLL("user32.dll");

  000b7	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  000be	48 8d 4d e7	 lea	 rcx, QWORD PTR $T5[rbp-105]
  000c2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  000ca	f2 0f 11 45 e7	 movsd	 QWORD PTR $T5[rbp-105], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  000cf	80 75 e8 39	 xor	 BYTE PTR $T5[rbp-104], 57 ; 00000039H
  000d3	80 75 e9 3a	 xor	 BYTE PTR $T5[rbp-103], 58 ; 0000003aH
  000d7	80 75 ea 3b	 xor	 BYTE PTR $T5[rbp-102], 59 ; 0000003bH
  000db	80 75 eb 3c	 xor	 BYTE PTR $T5[rbp-101], 60 ; 0000003cH
  000df	80 75 ec 3d	 xor	 BYTE PTR $T5[rbp-100], 61 ; 0000003dH
  000e3	80 75 ed 3e	 xor	 BYTE PTR $T5[rbp-99], 62 ; 0000003eH
  000e7	80 75 ee 3f	 xor	 BYTE PTR $T5[rbp-98], 63 ; 0000003fH
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 69   : 	LOAD_DLL("user32.dll");

  000eb	66 89 45 ef	 mov	 WORD PTR $T5[rbp-97], ax
  000ef	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_57bce39a08961ea86b276630ec11ec78>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  000f6	80 75 ef 40	 xor	 BYTE PTR $T5[rbp-97], 64 ; 00000040H
  000fa	34 42		 xor	 al, 66			; 00000042H
  000fc	80 75 f0 41	 xor	 BYTE PTR $T5[rbp-96], 65 ; 00000041H
  00100	88 45 f1	 mov	 BYTE PTR $T5[rbp-95], al
  00103	c6 45 e7 75	 mov	 BYTE PTR $T5[rbp-105], 117 ; 00000075H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 69   : 	LOAD_DLL("user32.dll");

  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA

; 73   : 	return LoadLibrary(_("win32u.dll"));

  0010d	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  00114	48 8d 4d c7	 lea	 rcx, QWORD PTR $T2[rbp-105]
  00118	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  00120	f2 0f 11 45 c7	 movsd	 QWORD PTR $T2[rbp-105], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00125	80 75 c8 39	 xor	 BYTE PTR $T2[rbp-104], 57 ; 00000039H
  00129	80 75 c9 3a	 xor	 BYTE PTR $T2[rbp-103], 58 ; 0000003aH
  0012d	80 75 ca 3b	 xor	 BYTE PTR $T2[rbp-102], 59 ; 0000003bH
  00131	80 75 cb 3c	 xor	 BYTE PTR $T2[rbp-101], 60 ; 0000003cH
  00135	80 75 cc 3d	 xor	 BYTE PTR $T2[rbp-100], 61 ; 0000003dH
  00139	80 75 cd 3e	 xor	 BYTE PTR $T2[rbp-99], 62 ; 0000003eH
  0013d	80 75 ce 3f	 xor	 BYTE PTR $T2[rbp-98], 63 ; 0000003fH
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 73   : 	return LoadLibrary(_("win32u.dll"));

  00141	66 89 45 cf	 mov	 WORD PTR $T2[rbp-97], ax
  00145	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_6d32484823a26278e33b8e250507ac0c>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  0014c	80 75 cf 40	 xor	 BYTE PTR $T2[rbp-97], 64 ; 00000040H
  00150	34 42		 xor	 al, 66			; 00000042H
  00152	80 75 d0 41	 xor	 BYTE PTR $T2[rbp-96], 65 ; 00000041H
  00156	88 45 d1	 mov	 BYTE PTR $T2[rbp-95], al
  00159	c6 45 c7 77	 mov	 BYTE PTR $T2[rbp-105], 119 ; 00000077H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 73   : 	return LoadLibrary(_("win32u.dll"));

  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00163	4c 8b d0	 mov	 r10, rax

; 83   : 		{
; 84   : 			hDll = ensure_dll_load();
; 85   : 			if (!hDll) return false;

  00166	48 85 c0	 test	 rax, rax
  00169	0f 84 05 02 00
	00		 je	 $LN142@init
$LN4@init:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 88   : 			return _storage[_size - 1] != 0;

  0016f	38 1d 15 00 00
	00		 cmp	 BYTE PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B+21, bl
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 88   : 		pHookFunc = (pfunc_hk_t)GetProcAddress(hDll, _("NtUserGetGuiResources"));

  00175	8b 05 10 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B+16
  0017b	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B
  00182	89 45 07	 mov	 DWORD PTR $T6[rbp-89], eax
  00185	0f b7 05 14 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B+20
  0018c	0f 11 45 f7	 movups	 XMMWORD PTR $T6[rbp-105], xmm0
  00190	66 89 45 0b	 mov	 WORD PTR $T6[rbp-85], ax
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 80   : 			if (isEncrypted())

  00194	0f 84 ba 01 00
	00		 je	 $LN63@init

; 109  : 			for (int i = 0; i < _size; i++)

  0019a	44 8b c3	 mov	 r8d, ebx
  0019d	83 fe 02	 cmp	 esi, 2
  001a0	0f 8c 64 01 00
	00		 jl	 $LN140@init
  001a6	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  001ae	48 8d 4d fb	 lea	 rcx, QWORD PTR $T6[rbp-101]
  001b2	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  001ba	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  001c2	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  001ca	66 0f 7f 45 b7	 movdqa	 XMMWORD PTR $T1[rbp-105], xmm0
  001cf	8b 55 b7	 mov	 edx, DWORD PTR $T1[rbp-105]
  001d2	44 0f 29 84 24
	80 00 00 00	 movaps	 XMMWORD PTR [rsp+128], xmm8
  001db	66 41 0f 6e f6	 movd	 xmm6, r14d
  001e0	66 45 0f 6e c7	 movd	 xmm8, r15d
  001e5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL64@init:

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001f0	66 41 0f 6e d0	 movd	 xmm2, r8d
  001f5	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  001f9	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  001fe	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00202	66 0f fe d5	 paddd	 xmm2, xmm5
  00206	66 0f 6e d8	 movd	 xmm3, eax
  0020a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0020e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00213	66 0f 62 ca	 punpckldq xmm1, xmm2
  00217	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0021b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0021f	66 0f fe dd	 paddd	 xmm3, xmm5
  00223	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00228	41 83 c0 08	 add	 r8d, 8
  0022c	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00231	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00235	66 0f fe ca	 paddd	 xmm1, xmm2
  00239	66 0f e2 ce	 psrad	 xmm1, xmm6
  0023d	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00241	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00246	66 0f fe c1	 paddd	 xmm0, xmm1
  0024a	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0024f	66 0f fa d0	 psubd	 xmm2, xmm0
  00253	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00258	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0025d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00262	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00266	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0026e	66 0f 67 d2	 packuswb xmm2, xmm2
  00272	66 0f 62 cb	 punpckldq xmm1, xmm3
  00276	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0027b	66 0f 6e c2	 movd	 xmm0, edx
  0027f	66 0f fc d0	 paddb	 xmm2, xmm0
  00283	66 0f 6e 41 f4	 movd	 xmm0, DWORD PTR [rcx-12]
  00288	66 0f ef d0	 pxor	 xmm2, xmm0
  0028c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00290	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00294	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00299	66 0f 7e 51 f4	 movd	 DWORD PTR [rcx-12], xmm2
  0029e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  002a2	66 0f fe cb	 paddd	 xmm1, xmm3
  002a6	66 0f e2 ce	 psrad	 xmm1, xmm6
  002aa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  002ae	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  002b3	66 0f fe c1	 paddd	 xmm0, xmm1
  002b7	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  002bc	66 0f fa d8	 psubd	 xmm3, xmm0
  002c0	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  002c5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  002ca	66 0f 6e c2	 movd	 xmm0, edx
  002ce	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  002d3	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  002db	66 0f 67 d2	 packuswb xmm2, xmm2
  002df	66 0f fc d0	 paddb	 xmm2, xmm0
  002e3	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  002e8	66 0f ef d0	 pxor	 xmm2, xmm0
  002ec	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  002f1	41 83 f8 10	 cmp	 r8d, 16
  002f5	0f 8c f5 fe ff
	ff		 jl	 $LL64@init

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  002fb	44 0f 28 84 24
	80 00 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+128]
  00304	41 83 f8 16	 cmp	 r8d, 22
  00308	7d 4a		 jge	 SHORT $LN63@init
$LN140@init:
  0030a	49 63 c0	 movsxd	 rax, r8d
  0030d	4c 8d 4d f7	 lea	 r9, QWORD PTR $T6[rbp-105]
  00311	4c 03 c8	 add	 r9, rax
  00314	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL90@init:

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00320	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00325	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00329	41 f7 e8	 imul	 r8d
  0032c	41 03 d0	 add	 edx, r8d
  0032f	c1 fa 05	 sar	 edx, 5
  00332	8b c2		 mov	 eax, edx
  00334	c1 e8 1f	 shr	 eax, 31
  00337	03 d0		 add	 edx, eax
  00339	0f be c2	 movsx	 eax, dl
  0033c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0033f	41 0f b6 c0	 movzx	 eax, r8b
  00343	41 ff c0	 inc	 r8d
  00346	2a c1		 sub	 al, cl
  00348	04 38		 add	 al, 56			; 00000038H
  0034a	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0034e	41 83 f8 16	 cmp	 r8d, 22
  00352	7c cc		 jl	 SHORT $LL90@init
$LN63@init:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 88   : 		pHookFunc = (pfunc_hk_t)GetProcAddress(hDll, _("NtUserGetGuiResources"));

  00354	48 8d 55 f7	 lea	 rdx, QWORD PTR $T6[rbp-105]
  00358	49 8b ca	 mov	 rcx, r10
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00361	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pHookFunc@@3P6A_J_K@ZEA, rax ; pHookFunc

; 89   : 		if (!pHookFunc)

  00368	48 85 c0	 test	 rax, rax
  0036b	75 0e		 jne	 SHORT $LN5@init

; 90   : 		{
; 91   : 			pHookFunc = (pfunc_hk_t)NULL;

  0036d	48 89 1d 00 00
	00 00		 mov	 QWORD PTR ?pHookFunc@@3P6A_J_K@ZEA, rbx ; pHookFunc
$LN142@init:

; 100  : }

  00374	32 c0		 xor	 al, al
  00376	e9 b6 01 00 00	 jmp	 $LN1@init
$LN5@init:

; 92   : 			return false;
; 93   : 		}
; 94   : 	}
; 95   : 
; 96   : 	if (get_process_base(GetCurrentProcessId()) != (uintptr_t)GetModuleHandle(NULL))

  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId
  00381	8b d0		 mov	 edx, eax
  00383	48 8b cf	 mov	 rcx, rdi
  00386	e8 00 00 00 00	 call	 ?get_process_base@driver@kernel@@QEAA_KI@Z ; kernel::driver::get_process_base
  0038b	33 c9		 xor	 ecx, ecx
  0038d	48 8b f8	 mov	 rdi, rax
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  00396	48 3b f8	 cmp	 rdi, rax
  00399	75 d9		 jne	 SHORT $LN142@init
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 88   : 			return _storage[_size - 1] != 0;

  0039b	38 1d 0d 00 00
	00		 cmp	 BYTE PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B+13, bl
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 98   : 	std::cout << _("init passed: "), pHookFunc;

  003a1	8b 05 08 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B+8
  003a7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B
  003af	89 45 cf	 mov	 DWORD PTR $T3[rbp-97], eax
  003b2	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B+12
  003b9	66 89 45 d3	 mov	 WORD PTR $T3[rbp-93], ax
  003bd	f2 0f 11 45 c7	 movsd	 QWORD PTR $T3[rbp-105], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 80   : 			if (isEncrypted())

  003c2	0f 84 57 01 00
	00		 je	 $LN77@init

; 109  : 			for (int i = 0; i < _size; i++)

  003c8	83 fe 02	 cmp	 esi, 2
  003cb	0f 8c 10 01 00
	00		 jl	 $LN141@init

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  003d1	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  003d9	bb 08 00 00 00	 mov	 ebx, 8
  003de	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  003e6	66 0f 6f ca	 movdqa	 xmm1, xmm2
  003ea	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  003f2	66 0f 6f c2	 movdqa	 xmm0, xmm2
  003f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR __xmm@38383838383838383838383838383838
  003fc	66 0f 6a c2	 punpckhdq xmm0, xmm2
  00400	66 0f 62 ca	 punpckldq xmm1, xmm2
  00404	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00409	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0040e	66 41 0f 6e f6	 movd	 xmm6, r14d
  00413	66 41 0f 6e ef	 movd	 xmm5, r15d
  00418	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0041c	66 0f fe ca	 paddd	 xmm1, xmm2
  00420	66 0f e2 ce	 psrad	 xmm1, xmm6
  00424	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00428	66 0f d2 c5	 psrld	 xmm0, xmm5
  0042c	66 0f fe c1	 paddd	 xmm0, xmm1
  00430	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00439	66 0f fa d0	 psubd	 xmm2, xmm0
  0043d	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00442	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00447	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0044c	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00454	66 0f 6e 0d 00
	00 00 00	 movd	 xmm1, DWORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B
  0045c	66 0f 67 d2	 packuswb xmm2, xmm2
  00460	66 0f 6e c0	 movd	 xmm0, eax
  00464	66 0f fc d0	 paddb	 xmm2, xmm0
  00468	66 0f 6f c3	 movdqa	 xmm0, xmm3
  0046c	66 0f ef d1	 pxor	 xmm2, xmm1
  00470	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00474	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00479	66 0f 6f cb	 movdqa	 xmm1, xmm3
  0047d	66 0f 62 cb	 punpckldq xmm1, xmm3
  00481	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00486	66 0f 7e 55 c7	 movd	 DWORD PTR $T3[rbp-105], xmm2
  0048b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0048f	66 0f fe cb	 paddd	 xmm1, xmm3
  00493	66 0f e2 ce	 psrad	 xmm1, xmm6
  00497	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0049b	66 0f d2 c5	 psrld	 xmm0, xmm5
  0049f	66 0f fe c1	 paddd	 xmm0, xmm1
  004a3	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  004ac	66 0f fa d8	 psubd	 xmm3, xmm0
  004b0	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  004b5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  004ba	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  004bf	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  004c7	66 0f 6e 4d cb	 movd	 xmm1, DWORD PTR $T3[rbp-101]
  004cc	66 0f 67 d2	 packuswb xmm2, xmm2
  004d0	66 0f 6e c0	 movd	 xmm0, eax
  004d4	66 0f fc d0	 paddb	 xmm2, xmm0
  004d8	66 0f ef d1	 pxor	 xmm2, xmm1
  004dc	66 0f 7e 55 cb	 movd	 DWORD PTR $T3[rbp-101], xmm2
$LN141@init:

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  004e1	8b c3		 mov	 eax, ebx
  004e3	4c 8d 45 c7	 lea	 r8, QWORD PTR $T3[rbp-105]
  004e7	4c 03 c0	 add	 r8, rax
  004ea	66 0f 1f 44 00
	00		 npad	 6
$LL92@init:

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  004f0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  004f5	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  004f9	f7 eb		 imul	 ebx
  004fb	03 d3		 add	 edx, ebx
  004fd	c1 fa 05	 sar	 edx, 5
  00500	8b c2		 mov	 eax, edx
  00502	c1 e8 1f	 shr	 eax, 31
  00505	03 d0		 add	 edx, eax
  00507	0f be c2	 movsx	 eax, dl
  0050a	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  0050d	0f b6 c3	 movzx	 eax, bl
  00510	ff c3		 inc	 ebx
  00512	2a c2		 sub	 al, dl
  00514	04 38		 add	 al, 56			; 00000038H
  00516	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  0051a	83 fb 0e	 cmp	 ebx, 14
  0051d	7c d1		 jl	 SHORT $LL92@init
$LN77@init:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 98   : 	std::cout << _("init passed: "), pHookFunc;

  0051f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00526	48 8d 55 c7	 lea	 rdx, QWORD PTR $T3[rbp-105]
  0052a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 99   : 	return true;

  0052f	b0 01		 mov	 al, 1
$LN1@init:

; 100  : }

  00531	48 8b 4d 0f	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-105]
  00535	48 33 cc	 xor	 rcx, rsp
  00538	e8 00 00 00 00	 call	 __security_check_cookie
  0053d	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  00545	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  00549	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  0054d	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  00551	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  00556	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  0055b	49 8b e3	 mov	 rsp, r11
  0055e	41 5f		 pop	 r15
  00560	41 5e		 pop	 r14
  00562	5d		 pop	 rbp
  00563	c3		 ret	 0
?init@driver@kernel@@QEAA_NXZ ENDP			; kernel::driver::init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ PROC ; <lambda_b2c4f788f3fb21db083d3b397ab63711>::operator()

; 81   : 		HMODULE hDll = GetModuleHandle(_("win32u.dll"));

  00000	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+8
  00007	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B
  0000f	f2 0f 11 02	 movsd	 QWORD PTR [rdx], xmm0
  00013	66 89 42 08	 mov	 WORD PTR [rdx+8], ax
  00017	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ@4V?$skCrypter@$0L@$0DI@$0DC@D@skc@@B+10
  0001e	88 42 0a	 mov	 BYTE PTR [rdx+10], al
  00021	48 8b c2	 mov	 rax, rdx
  00024	c3		 ret	 0
??R<lambda_b2c4f788f3fb21db083d3b397ab63711>@@QEBA@XZ ENDP ; <lambda_b2c4f788f3fb21db083d3b397ab63711>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ PROC ; <lambda_2a10f0e3f1b306b77146f02adc3c3aa7>::operator()

; 88   : 		pHookFunc = (pfunc_hk_t)GetProcAddress(hDll, _("NtUserGetGuiResources"));

  00000	8b 05 10 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B+16
  00006	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00013	0f b7 05 14 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ@4V?$skCrypter@$0BG@$0DI@$0DC@D@skc@@B+20
  0001a	66 89 42 14	 mov	 WORD PTR [rdx+20], ax
  0001e	48 8b c2	 mov	 rax, rdx
  00021	c3		 ret	 0
??R<lambda_2a10f0e3f1b306b77146f02adc3c3aa7>@@QEBA@XZ ENDP ; <lambda_2a10f0e3f1b306b77146f02adc3c3aa7>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 80
data$ = 88
?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<22,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c a2 01 00
	00		 jl	 $LN16@crypt
  00017	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0001f	49 8d 42 15	 lea	 rax, QWORD PTR [r10+21]
  00023	48 8d 51 15	 lea	 rdx, QWORD PTR [rcx+21]
  00027	48 3b c8	 cmp	 rcx, rax
  0002a	77 09		 ja	 SHORT $LN10@crypt
  0002c	49 3b d2	 cmp	 rdx, r10
  0002f	0f 83 84 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  00035	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  0003a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0003f	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00045	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0004d	4c 8d 49 04	 lea	 r9, QWORD PTR [rcx+4]
  00051	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00059	b8 05 00 00 00	 mov	 eax, 5
  0005e	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00066	49 8b d2	 mov	 rdx, r10
  00069	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0006e	48 2b d1	 sub	 rdx, rcx
  00071	44 8b 1c 24	 mov	 r11d, DWORD PTR $T1[rsp]
  00075	66 0f 6e f0	 movd	 xmm6, eax
  00079	b8 1f 00 00 00	 mov	 eax, 31
  0007e	66 44 0f 6e c0	 movd	 xmm8, eax
  00083	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00090	66 41 0f 6e d0	 movd	 xmm2, r8d
  00095	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00099	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0009e	4d 8d 49 08	 lea	 r9, QWORD PTR [r9+8]
  000a2	66 0f fe d5	 paddd	 xmm2, xmm5
  000a6	66 0f 6e d8	 movd	 xmm3, eax
  000aa	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000ae	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  000b3	66 0f 62 ca	 punpckldq xmm1, xmm2
  000b7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  000bb	66 0f 6a c2	 punpckhdq xmm0, xmm2
  000bf	66 0f fe dd	 paddd	 xmm3, xmm5
  000c3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000c8	41 83 c0 08	 add	 r8d, 8
  000cc	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000d1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000d5	66 0f fe ca	 paddd	 xmm1, xmm2
  000d9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000dd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000e1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000e6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ea	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000ef	66 0f fa d0	 psubd	 xmm2, xmm0
  000f3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000f8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000fd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00102	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00106	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0010e	66 0f 67 d2	 packuswb xmm2, xmm2
  00112	66 0f 62 cb	 punpckldq xmm1, xmm3
  00116	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011b	66 41 0f 6e c3	 movd	 xmm0, r11d
  00120	66 0f fc d0	 paddb	 xmm2, xmm0
  00124	66 42 0f 6e 44
	0a f4		 movd	 xmm0, DWORD PTR [rdx+r9-12]
  0012b	66 0f ef d0	 pxor	 xmm2, xmm0
  0012f	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00133	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00137	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0013c	66 41 0f 7e 51
	f4		 movd	 DWORD PTR [r9-12], xmm2
  00142	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00146	66 0f fe cb	 paddd	 xmm1, xmm3
  0014a	66 0f e2 ce	 psrad	 xmm1, xmm6
  0014e	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00152	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00157	66 0f fe c1	 paddd	 xmm0, xmm1
  0015b	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  00160	66 0f fa d8	 psubd	 xmm3, xmm0
  00164	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00169	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0016e	66 41 0f 6e c3	 movd	 xmm0, r11d
  00173	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00178	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00180	66 0f 67 d2	 packuswb xmm2, xmm2
  00184	66 0f fc d0	 paddb	 xmm2, xmm0
  00188	66 42 0f 6e 44
	0a f8		 movd	 xmm0, DWORD PTR [rdx+r9-8]
  0018f	66 0f ef d0	 pxor	 xmm2, xmm0
  00193	66 41 0f 7e 51
	f8		 movd	 DWORD PTR [r9-8], xmm2
  00199	41 83 f8 10	 cmp	 r8d, 16
  0019d	0f 8c ed fe ff
	ff		 jl	 $LL4@crypt

; 109  : 			for (int i = 0; i < _size; i++)

  001a3	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  001a9	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  001ae	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  001b3	41 83 f8 16	 cmp	 r8d, 22
  001b7	7d 50		 jge	 SHORT $LN3@crypt
$LN16@crypt:
  001b9	4d 63 c8	 movsxd	 r9, r8d
  001bc	4c 03 c9	 add	 r9, rcx
  001bf	4c 2b d1	 sub	 r10, rcx
  001c2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001d5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001d9	41 f7 e8	 imul	 r8d
  001dc	41 03 d0	 add	 edx, r8d
  001df	c1 fa 05	 sar	 edx, 5
  001e2	8b c2		 mov	 eax, edx
  001e4	c1 e8 1f	 shr	 eax, 31
  001e7	03 d0		 add	 edx, eax
  001e9	0f be c2	 movsx	 eax, dl
  001ec	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	41 ff c0	 inc	 r8d
  001f6	2a c1		 sub	 al, cl
  001f8	04 38		 add	 al, 56			; 00000038H
  001fa	43 32 44 11 ff	 xor	 al, BYTE PTR [r9+r10-1]
  001ff	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00203	41 83 f8 16	 cmp	 r8d, 22
  00207	7c c7		 jl	 SHORT $LL8@crypt
$LN3@crypt:

; 112  : 			}
; 113  : 		}

  00209	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020d	c3		 ret	 0
?crypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<22,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ PROC ; <lambda_4ad0c4e7a179063298744f2a64fa5ebb>::operator()

; 98   : 	std::cout << _("init passed: "), pHookFunc;

  00000	8b 05 08 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B+8
  00006	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B
  0000e	f2 0f 11 02	 movsd	 QWORD PTR [rdx], xmm0
  00012	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00015	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ@4V?$skCrypter@$0O@$0DI@$0DC@D@skc@@B+12
  0001c	66 89 42 0c	 mov	 WORD PTR [rdx+12], ax
  00020	48 8b c2	 mov	 rax, rdx
  00023	c3		 ret	 0
??R<lambda_4ad0c4e7a179063298744f2a64fa5ebb>@@QEBA@XZ ENDP ; <lambda_4ad0c4e7a179063298744f2a64fa5ebb>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 32
data$ = 40
?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z PROC ; skc::skCrypter<14,56,50,char>::crypt, COMDAT

; 108  : 		{

$LN18:
  00000	48 83 ec 18	 sub	 rsp, 24

; 109  : 			for (int i = 0; i < _size; i++)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	4c 8b d2	 mov	 r10, rdx
  0000a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00011	0f 8c 2e 01 00
	00		 jl	 $LN16@crypt
  00017	49 8d 42 0d	 lea	 rax, QWORD PTR [r10+13]
  0001b	48 8d 51 0d	 lea	 rdx, QWORD PTR [rcx+13]
  0001f	48 3b c8	 cmp	 rcx, rax
  00022	77 09		 ja	 SHORT $LN10@crypt
  00024	49 3b d2	 cmp	 rdx, r10
  00027	0f 83 18 01 00
	00		 jae	 $LN16@crypt
$LN10@crypt:
  0002d	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00031	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00039	b8 05 00 00 00	 mov	 eax, 5
  0003e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00046	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0004a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00052	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00056	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0005a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00060	66 0f 62 ca	 punpckldq xmm1, xmm2
  00064	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00069	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0006e	66 0f 6e f0	 movd	 xmm6, eax
  00072	b8 1f 00 00 00	 mov	 eax, 31
  00077	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0007b	66 0f fe ca	 paddd	 xmm1, xmm2
  0007f	66 0f 6e e8	 movd	 xmm5, eax
  00083	66 0f e2 ce	 psrad	 xmm1, xmm6
  00087	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0008b	66 0f d2 c5	 psrld	 xmm0, xmm5
  0008f	66 0f fe c1	 paddd	 xmm0, xmm1
  00093	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0009c	66 0f fa d0	 psubd	 xmm2, xmm0
  000a0	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000a5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000aa	66 41 0f 6e 02	 movd	 xmm0, DWORD PTR [r10]
  000af	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000b4	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000b8	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000c0	66 0f 67 d2	 packuswb xmm2, xmm2
  000c4	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000cc	66 0f ef d0	 pxor	 xmm2, xmm0
  000d0	66 0f 62 cb	 punpckldq xmm1, xmm3
  000d4	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000d8	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000dc	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000e0	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000e5	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000ea	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000ee	66 0f fe cb	 paddd	 xmm1, xmm3
  000f2	66 0f e2 ce	 psrad	 xmm1, xmm6
  000f6	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fa	66 0f d2 c5	 psrld	 xmm0, xmm5
  000fe	66 0f fe c1	 paddd	 xmm0, xmm1
  00102	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0010b	66 0f fa d8	 psubd	 xmm3, xmm0
  0010f	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00114	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00119	66 41 0f 6e 42
	04		 movd	 xmm0, DWORD PTR [r10+4]
  0011f	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00124	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0012c	66 0f 67 d2	 packuswb xmm2, xmm2
  00130	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  00138	66 0f ef d0	 pxor	 xmm2, xmm0
  0013c	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2

; 109  : 			for (int i = 0; i < _size; i++)

  00141	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
$LN16@crypt:
  00145	45 8b c8	 mov	 r9d, r8d
  00148	4c 03 c9	 add	 r9, rcx
  0014b	4c 2b d1	 sub	 r10, rcx
  0014e	66 90		 npad	 2
$LL8@crypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00150	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00155	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00159	41 f7 e8	 imul	 r8d
  0015c	41 03 d0	 add	 edx, r8d
  0015f	c1 fa 05	 sar	 edx, 5
  00162	8b c2		 mov	 eax, edx
  00164	c1 e8 1f	 shr	 eax, 31
  00167	03 d0		 add	 edx, eax
  00169	0f be c2	 movsx	 eax, dl
  0016c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0016f	41 0f b6 c0	 movzx	 eax, r8b
  00173	41 ff c0	 inc	 r8d
  00176	2a c1		 sub	 al, cl
  00178	04 38		 add	 al, 56			; 00000038H
  0017a	43 32 44 0a ff	 xor	 al, BYTE PTR [r10+r9-1]
  0017f	41 88 41 ff	 mov	 BYTE PTR [r9-1], al
  00183	41 83 f8 0e	 cmp	 r8d, 14
  00187	7c c7		 jl	 SHORT $LL8@crypt

; 112  : 			}
; 113  : 		}

  00189	48 83 c4 18	 add	 rsp, 24
  0018d	c3		 ret	 0
?crypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@AEAAXPEAD@Z ENDP ; skc::skCrypter<14,56,50,char>::crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
com$ = 32
__$ArrayPad$ = 384
this$ = 416
_pid$ = 424
?get_process_base@driver@kernel@@QEAA_KI@Z PROC		; kernel::driver::get_process_base

; 115  : {

$LN7:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 81 ec 90 01
	00 00		 sub	 rsp, 400		; 00000190H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	8b da		 mov	 ebx, edx
  00021	48 8b f9	 mov	 rdi, rcx

; 116  : 	fptr_data::kernel_com com{};

  00024	33 d2		 xor	 edx, edx
  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  0002b	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  00031	e8 00 00 00 00	 call	 memset

; 117  : 	com.target_pid = _pid ? _pid : this->pid;

  00036	85 db		 test	 ebx, ebx
  00038	74 06		 je	 SHORT $LN4@get_proces
  0003a	89 5c 24 38	 mov	 DWORD PTR com$[rsp+24], ebx
  0003e	eb 06		 jmp	 SHORT $LN5@get_proces
$LN4@get_proces:
  00040	8b 07		 mov	 eax, DWORD PTR [rdi]
  00042	89 44 24 38	 mov	 DWORD PTR com$[rsp+24], eax
$LN5@get_proces:

; 118  : 
; 119  : 	if (invoke_driver<true>(&com, fptr_data::kernel_opr::get_process_base))

  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  00050	e8 00 00 00 00	 call	 ??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z ; invoke_driver<1>
  00055	33 c9		 xor	 ecx, ecx
  00057	84 c0		 test	 al, al
  00059	48 0f 45 4c 24
	48		 cmovne	 rcx, QWORD PTR com$[rsp+40]
  0005f	48 8b c1	 mov	 rax, rcx

; 120  : 		return com.buffer;
; 121  : 	return 0;
; 122  : }

  00062	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0006a	48 33 cc	 xor	 rcx, rsp
  0006d	e8 00 00 00 00	 call	 __security_check_cookie
  00072	48 8b 9c 24 b0
	01 00 00	 mov	 rbx, QWORD PTR [rsp+432]
  0007a	48 81 c4 90 01
	00 00		 add	 rsp, 400		; 00000190H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
?get_process_base@driver@kernel@@QEAA_KI@Z ENDP		; kernel::driver::get_process_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
com$ = 32
__$ArrayPad$ = 384
this$ = 448
addr$ = 456
buffer$ = 464
size$ = 472
transfer$dead$ = 480
?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z PROC	; kernel::driver::read_buffer

; 126  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001e	49 8b f0	 mov	 rsi, r8
  00021	48 8b fa	 mov	 rdi, rdx
  00024	48 8b d9	 mov	 rbx, rcx

; 127  : 	fptr_data::kernel_com com{};

  00027	33 d2		 xor	 edx, edx
  00029	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  0002f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  00034	49 8b e9	 mov	 rbp, r9
  00037	e8 00 00 00 00	 call	 memset

; 128  : 	com.target_pid = this->pid;

  0003c	8b 03		 mov	 eax, DWORD PTR [rbx]
  0003e	89 44 24 38	 mov	 DWORD PTR com$[rsp+24], eax

; 129  : 	com.user_pid = GetCurrentProcessId();

  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId

; 130  : 
; 131  : 	com.address = addr;
; 132  : 	com.buffer = (uintptr_t)buffer;
; 133  : 	com.size = size;
; 134  : 
; 135  : 	if (!invoke_driver<true>(&com, fptr_data::kernel_opr::read))

  00048	ba 01 00 00 00	 mov	 edx, 1
  0004d	48 89 7c 24 40	 mov	 QWORD PTR com$[rsp+32], rdi
  00052	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  00057	89 44 24 3c	 mov	 DWORD PTR com$[rsp+28], eax
  0005b	48 89 74 24 48	 mov	 QWORD PTR com$[rsp+40], rsi
  00060	48 89 ac 24 68
	01 00 00	 mov	 QWORD PTR com$[rsp+328], rbp
  00068	e8 00 00 00 00	 call	 ??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z ; invoke_driver<1>
  0006d	84 c0		 test	 al, al
  0006f	0f 95 c0	 setne	 al

; 136  : 		return false;
; 137  : 
; 138  : 	if (transfer)
; 139  : 		*transfer = com.transfer;
; 140  : 	return true;
; 141  : }

  00072	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007a	48 33 cc	 xor	 rcx, rsp
  0007d	e8 00 00 00 00	 call	 __security_check_cookie
  00082	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	5d		 pop	 rbp
  0008c	5b		 pop	 rbx
  0008d	c3		 ret	 0
?read_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z ENDP	; kernel::driver::read_buffer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
_TEXT	SEGMENT
com$ = 32
__$ArrayPad$ = 384
this$ = 448
addr$ = 456
buffer$ = 464
size$ = 472
transfer$dead$ = 480
?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z PROC	; kernel::driver::write_buffer

; 144  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001e	49 8b f0	 mov	 rsi, r8
  00021	48 8b fa	 mov	 rdi, rdx
  00024	48 8b d9	 mov	 rbx, rcx

; 145  : 	fptr_data::kernel_com com{};

  00027	33 d2		 xor	 edx, edx
  00029	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  0002f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  00034	49 8b e9	 mov	 rbp, r9
  00037	e8 00 00 00 00	 call	 memset

; 146  : 	com.target_pid = this->pid;

  0003c	8b 03		 mov	 eax, DWORD PTR [rbx]
  0003e	89 44 24 38	 mov	 DWORD PTR com$[rsp+24], eax

; 147  : 	com.user_pid = GetCurrentProcessId();

  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId

; 148  : 
; 149  : 	com.address = addr;
; 150  : 	com.buffer = (uintptr_t)buffer;
; 151  : 	com.size = size;
; 152  : 
; 153  : 	if (!invoke_driver<true>(&com, fptr_data::kernel_opr::write))

  00048	ba 02 00 00 00	 mov	 edx, 2
  0004d	48 89 7c 24 40	 mov	 QWORD PTR com$[rsp+32], rdi
  00052	48 8d 4c 24 20	 lea	 rcx, QWORD PTR com$[rsp]
  00057	89 44 24 3c	 mov	 DWORD PTR com$[rsp+28], eax
  0005b	48 89 74 24 48	 mov	 QWORD PTR com$[rsp+40], rsi
  00060	48 89 ac 24 68
	01 00 00	 mov	 QWORD PTR com$[rsp+328], rbp
  00068	e8 00 00 00 00	 call	 ??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z ; invoke_driver<1>
  0006d	84 c0		 test	 al, al
  0006f	0f 95 c0	 setne	 al

; 154  : 		return false;
; 155  : 
; 156  : 	if (transfer)
; 157  : 		*transfer = com.transfer;
; 158  : 	return true;
; 159  : }

  00072	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007a	48 33 cc	 xor	 rcx, rsp
  0007d	e8 00 00 00 00	 call	 __security_check_cookie
  00082	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	5d		 pop	 rbp
  0008c	5b		 pop	 rbx
  0008d	c3		 ret	 0
?write_buffer@driver@kernel@@QEAA_N_KPEAE0PEA_K@Z ENDP	; kernel::driver::write_buffer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 32
??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<14,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN25:
  00000	48 83 ec 18	 sub	 rsp, 24

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 0d 00	 cmp	 BYTE PTR [rcx+13], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 63 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 16 01 00
	00		 jl	 $LN22@operator

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00021	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00036	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0003a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00042	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00046	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0004a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00050	66 0f 62 ca	 punpckldq xmm1, xmm2
  00054	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00059	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0005e	66 0f 6e e8	 movd	 xmm5, eax
  00062	b8 1f 00 00 00	 mov	 eax, 31
  00067	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6
  0006b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0006f	66 0f fe ca	 paddd	 xmm1, xmm2
  00073	66 0f 6e f0	 movd	 xmm6, eax
  00077	66 0f e2 cd	 psrad	 xmm1, xmm5
  0007b	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0007f	66 0f d2 c6	 psrld	 xmm0, xmm6
  00083	66 0f fe c1	 paddd	 xmm0, xmm1
  00087	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00090	66 0f fa d0	 psubd	 xmm2, xmm0
  00094	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00099	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0009e	66 0f 6e 01	 movd	 xmm0, DWORD PTR [rcx]
  000a2	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000a7	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000ab	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000b3	66 0f 67 d2	 packuswb xmm2, xmm2
  000b7	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000bf	66 0f ef d0	 pxor	 xmm2, xmm0
  000c3	66 0f 62 cb	 punpckldq xmm1, xmm3
  000c7	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000cb	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000cf	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000d3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000d8	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000dd	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000e1	66 0f fe cb	 paddd	 xmm1, xmm3
  000e5	66 0f e2 cd	 psrad	 xmm1, xmm5
  000e9	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000ed	66 0f d2 c6	 psrld	 xmm0, xmm6
  000f1	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
  000f5	66 0f fe c1	 paddd	 xmm0, xmm1
  000f9	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00102	66 0f fa d8	 psubd	 xmm3, xmm0
  00106	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  0010b	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00110	66 0f 6e 41 04	 movd	 xmm0, DWORD PTR [rcx+4]
  00115	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0011a	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00122	66 0f 67 d2	 packuswb xmm2, xmm2
  00126	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  0012e	66 0f ef d0	 pxor	 xmm2, xmm0
  00132	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2
$LN22@operator:

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  00137	45 8b c8	 mov	 r9d, r8d
  0013a	4d 03 ca	 add	 r9, r10
  0013d	0f 1f 00	 npad	 3
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00140	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00145	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00149	41 f7 e8	 imul	 r8d
  0014c	41 03 d0	 add	 edx, r8d
  0014f	c1 fa 05	 sar	 edx, 5
  00152	8b c2		 mov	 eax, edx
  00154	c1 e8 1f	 shr	 eax, 31
  00157	03 d0		 add	 edx, eax
  00159	0f be c2	 movsx	 eax, dl
  0015c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0015f	41 0f b6 c0	 movzx	 eax, r8b
  00163	41 ff c0	 inc	 r8d
  00166	2a c1		 sub	 al, cl
  00168	04 38		 add	 al, 56			; 00000038H
  0016a	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0016e	41 83 f8 0e	 cmp	 r8d, 14
  00172	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  00174	49 8b c2	 mov	 rax, r10
  00177	48 83 c4 18	 add	 rsp, 24
  0017b	c3		 ret	 0
??B?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<14,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<22,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN26:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 15 00	 cmp	 BYTE PTR [rcx+21], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN22@operator
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL11@operator

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 16	 cmp	 r8d, 22
  0018f	7d 43		 jge	 SHORT $LN23@operator
$LN22@operator:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 16	 cmp	 r8d, 22
  001d2	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
??B?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<22,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
??B?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<11,56,50,char>::operator char *, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	0f b6 41 0a	 movzx	 eax, BYTE PTR [rcx+10]
  00004	84 c0		 test	 al, al

; 80   : 			if (isEncrypted())

  00006	74 2c		 je	 SHORT $LN27@operator

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00008	80 31 38	 xor	 BYTE PTR [rcx], 56	; 00000038H
  0000b	80 71 01 39	 xor	 BYTE PTR [rcx+1], 57	; 00000039H
  0000f	80 71 02 3a	 xor	 BYTE PTR [rcx+2], 58	; 0000003aH
  00013	80 71 03 3b	 xor	 BYTE PTR [rcx+3], 59	; 0000003bH
  00017	80 71 04 3c	 xor	 BYTE PTR [rcx+4], 60	; 0000003cH
  0001b	80 71 05 3d	 xor	 BYTE PTR [rcx+5], 61	; 0000003dH
  0001f	80 71 06 3e	 xor	 BYTE PTR [rcx+6], 62	; 0000003eH
  00023	80 71 07 3f	 xor	 BYTE PTR [rcx+7], 63	; 0000003fH
  00027	80 71 08 40	 xor	 BYTE PTR [rcx+8], 64	; 00000040H
  0002b	80 71 09 41	 xor	 BYTE PTR [rcx+9], 65	; 00000041H
  0002f	34 42		 xor	 al, 66			; 00000042H
  00031	88 41 0a	 mov	 BYTE PTR [rcx+10], al
$LN27@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  00034	48 8b c1	 mov	 rax, rcx
  00037	c3		 ret	 0
??B?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<11,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ??0?$initializer_list@E@std@@QEAA@PEBE0@Z
_TEXT	SEGMENT
this$ = 8
_First_arg$ = 16
_Last_arg$ = 24
??0?$initializer_list@E@std@@QEAA@PEBE0@Z PROC		; std::initializer_list<unsigned char>::initializer_list<unsigned char>, COMDAT

; 35   :         : _First(_First_arg), _Last(_Last_arg) {}

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 8b c1	 mov	 rax, rcx
  00006	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
  0000a	c3		 ret	 0
??0?$initializer_list@E@std@@QEAA@PEBE0@Z ENDP		; std::initializer_list<unsigned char>::initializer_list<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 39 02	 cmp	 QWORD PTR [rdx], rax
  00006	48 0f 42 ca	 cmovb	 rcx, rdx
  0000a	48 8b c1	 mov	 rax, rcx

; 67   : }

  0000d	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 48
??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ PROC ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >, COMDAT

; 105  :     map() : _Mybase(key_compare()) {}

$LN45:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00006	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map

; 105  :     map() : _Mybase(key_compare()) {}

  00008	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, rax
  00016	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0001d	8d 48 30	 lea	 ecx, QWORD PTR [rax+48]
  00020	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00025	48 89 00	 mov	 QWORD PTR [rax], rax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00028	48 89 40 08	 mov	 QWORD PTR [rax+8], rax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0002c	48 89 40 10	 mov	 QWORD PTR [rax+16], rax

; 348  :         _Pnode->_Color = _Black;

  00030	66 c7 40 18 01
	01		 mov	 WORD PTR [rax+24], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00036	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map

; 105  :     map() : _Mybase(key_compare()) {}

  0003d	48 8b c3	 mov	 rax, rbx
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
??0?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@QEAA@XZ ENDP ; std::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >::map<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::~_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >, COMDAT

; 1084 :     ~_Tree() noexcept {

$LN63:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00010	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00014	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00018	75 2e		 jne	 SHORT $LN7@Tree
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00020	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b cf	 mov	 rcx, rdi
  0002a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002f	48 8b cb	 mov	 rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00037	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00043	74 db		 je	 SHORT $LL6@Tree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00045	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
$LN7@Tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00048	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00057	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??1?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::~_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

$LN28:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 3a		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00011	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00015	48 2b d1	 sub	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0001f	72 18		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00021	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00025	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	49 2b c8	 sub	 rcx, r8

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002c	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00030	48 83 f8 1f	 cmp	 rax, 31
  00034	77 1b		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	49 8b c8	 mov	 rcx, r8
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0003e	33 c0		 xor	 eax, eax
  00040	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1755 :             _Mylast  = nullptr;

  00043	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1756 :             _Myend   = nullptr;

  00047	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN4@vector:

; 704  :     }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00057	cc		 int	 3
$LN25@vector:
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 48
_Ilist$ = 56
_Al$dead$ = 64
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT

; 534  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 535  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 536  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 537  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00006	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000a	33 c0		 xor	 eax, eax

; 535  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 536  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 537  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0000c	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0000f	48 8b d9	 mov	 rbx, rcx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
  00015	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00019	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 535  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 536  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 537  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0001d	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Range_construct_or_tidy<unsigned char const *>

; 538  :         _Proxy._Release();
; 539  :     }

  00022	48 8b c3	 mov	 rax, rbx
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@V?$initializer_list@E@1@AEBV?$allocator@E@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@E@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@E@std@@QEAA@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT

; 787  :     constexpr allocator() noexcept {}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@E@std@@QEAA@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :             return _Ok;

  00000	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]

; 125  :         }

  00004	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0000f	84 c0		 test	 al, al
  00011	75 0a		 jne	 SHORT $LN2@sentry

; 118  :                 this->_Myostr._Osfx();

  00013	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0001c	90		 npad	 1
$LN2@sentry:

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00020	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00023	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00027	48 8b 4c 11 48	 mov	 rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  0002c	48 85 c9	 test	 rcx, rcx
  0002f	74 07		 je	 SHORT $LN10@sentry

; 80   :                 _Rdbuf->_Unlock();

  00031	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00034	ff 50 10	 call	 QWORD PTR [rax+16]
  00037	90		 npad	 1
$LN10@sentry:

; 119  :             }
; 120  :         }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Ostr$ = 56
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN24:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00015	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  00018	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0001b	48 63 42 04	 movsxd	 rax, DWORD PTR [rdx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0001f	48 8b 4c 18 48	 mov	 rcx, QWORD PTR [rax+rbx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 72   :             if (_Rdbuf) {

  00024	48 85 c9	 test	 rcx, rcx
  00027	74 09		 je	 SHORT $LN8@sentry

; 73   :                 _Rdbuf->_Lock();

  00029	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0002c	ff 50 08	 call	 QWORD PTR [rax+8]
  0002f	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
$LN8@sentry:

; 92   :             if (!_Ostr.good()) {

  00032	48 63 4a 04	 movsxd	 rcx, DWORD PTR [rdx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  00036	83 7c 19 10 00	 cmp	 DWORD PTR [rcx+rbx+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 92   :             if (!_Ostr.good()) {

  0003b	74 04		 je	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0003d	32 c0		 xor	 al, al

; 94   :                 return;

  0003f	eb 28		 jmp	 SHORT $LN1@sentry
$LN2@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 69   :         return _Tiestr;

  00041	48 8b 4c 19 50	 mov	 rcx, QWORD PTR [rcx+rbx+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  00046	48 85 c9	 test	 rcx, rcx
  00049	74 1c		 je	 SHORT $LN4@sentry
  0004b	48 3b cb	 cmp	 rcx, rbx
  0004e	74 17		 je	 SHORT $LN4@sentry

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00056	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00059	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  0005d	83 7c 19 10 00	 cmp	 DWORD PTR [rcx+rbx+16], 0
  00062	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00065	eb 02		 jmp	 SHORT $LN1@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  00067	b0 01		 mov	 al, 1
$LN1@sentry:

; 105  :         }

  00069	88 47 08	 mov	 BYTE PTR [rdi+8], al
  0006c	48 8b c7	 mov	 rax, rdi
  0006f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Ostr$ = 56
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Ostr$ = 56
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 32
?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<14,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN23:
  00000	48 83 ec 18	 sub	 rsp, 24

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 0d 00	 cmp	 BYTE PTR [rcx+13], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 63 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 16 01 00
	00		 jl	 $LN20@decrypt

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00021	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00036	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0003a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00042	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00046	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0004a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00050	66 0f 62 ca	 punpckldq xmm1, xmm2
  00054	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00059	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0005e	66 0f 6e e8	 movd	 xmm5, eax
  00062	b8 1f 00 00 00	 mov	 eax, 31
  00067	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6
  0006b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0006f	66 0f fe ca	 paddd	 xmm1, xmm2
  00073	66 0f 6e f0	 movd	 xmm6, eax
  00077	66 0f e2 cd	 psrad	 xmm1, xmm5
  0007b	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0007f	66 0f d2 c6	 psrld	 xmm0, xmm6
  00083	66 0f fe c1	 paddd	 xmm0, xmm1
  00087	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00090	66 0f fa d0	 psubd	 xmm2, xmm0
  00094	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00099	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0009e	66 0f 6e 01	 movd	 xmm0, DWORD PTR [rcx]
  000a2	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000a7	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000ab	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000b3	66 0f 67 d2	 packuswb xmm2, xmm2
  000b7	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000bf	66 0f ef d0	 pxor	 xmm2, xmm0
  000c3	66 0f 62 cb	 punpckldq xmm1, xmm3
  000c7	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000cb	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000cf	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000d3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000d8	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000dd	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000e1	66 0f fe cb	 paddd	 xmm1, xmm3
  000e5	66 0f e2 cd	 psrad	 xmm1, xmm5
  000e9	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000ed	66 0f d2 c6	 psrld	 xmm0, xmm6
  000f1	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
  000f5	66 0f fe c1	 paddd	 xmm0, xmm1
  000f9	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00102	66 0f fa d8	 psubd	 xmm3, xmm0
  00106	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  0010b	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00110	66 0f 6e 41 04	 movd	 xmm0, DWORD PTR [rcx+4]
  00115	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0011a	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00122	66 0f 67 d2	 packuswb xmm2, xmm2
  00126	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  0012e	66 0f ef d0	 pxor	 xmm2, xmm0
  00132	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2
$LN20@decrypt:

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  00137	45 8b c8	 mov	 r9d, r8d
  0013a	4d 03 ca	 add	 r9, r10
  0013d	0f 1f 00	 npad	 3
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00140	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00145	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00149	41 f7 e8	 imul	 r8d
  0014c	41 03 d0	 add	 edx, r8d
  0014f	c1 fa 05	 sar	 edx, 5
  00152	8b c2		 mov	 eax, edx
  00154	c1 e8 1f	 shr	 eax, 31
  00157	03 d0		 add	 edx, eax
  00159	0f be c2	 movsx	 eax, dl
  0015c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0015f	41 0f b6 c0	 movzx	 eax, r8b
  00163	41 ff c0	 inc	 r8d
  00166	2a c1		 sub	 al, cl
  00168	04 38		 add	 al, 56			; 00000038H
  0016a	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0016e	41 83 f8 0e	 cmp	 r8d, 14
  00172	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  00174	49 8b c2	 mov	 rax, r10
  00177	48 83 c4 18	 add	 rsp, 24
  0017b	c3		 ret	 0
?decrypt@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<14,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<22,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN24:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 15 00	 cmp	 BYTE PTR [rcx+21], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN20@decrypt
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL9@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL9@decrypt

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 16	 cmp	 r8d, 22
  0018f	7d 43		 jge	 SHORT $LN21@decrypt
$LN20@decrypt:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 16	 cmp	 r8d, 22
  001d2	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
?decrypt@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<22,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
?decrypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<11,56,50,char>::decrypt, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	0f b6 41 0a	 movzx	 eax, BYTE PTR [rcx+10]
  00004	84 c0		 test	 al, al

; 80   : 			if (isEncrypted())

  00006	74 2c		 je	 SHORT $LN25@decrypt

; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00008	80 31 38	 xor	 BYTE PTR [rcx], 56	; 00000038H
  0000b	80 71 01 39	 xor	 BYTE PTR [rcx+1], 57	; 00000039H
  0000f	80 71 02 3a	 xor	 BYTE PTR [rcx+2], 58	; 0000003aH
  00013	80 71 03 3b	 xor	 BYTE PTR [rcx+3], 59	; 0000003bH
  00017	80 71 04 3c	 xor	 BYTE PTR [rcx+4], 60	; 0000003cH
  0001b	80 71 05 3d	 xor	 BYTE PTR [rcx+5], 61	; 0000003dH
  0001f	80 71 06 3e	 xor	 BYTE PTR [rcx+6], 62	; 0000003eH
  00023	80 71 07 3f	 xor	 BYTE PTR [rcx+7], 63	; 0000003fH
  00027	80 71 08 40	 xor	 BYTE PTR [rcx+8], 64	; 00000040H
  0002b	80 71 09 41	 xor	 BYTE PTR [rcx+9], 65	; 00000041H
  0002f	34 42		 xor	 al, 66			; 00000042H
  00031	88 41 0a	 mov	 BYTE PTR [rcx+10], al
$LN25@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  00034	48 8b c1	 mov	 rax, rcx
  00037	c3		 ret	 0
?decrypt@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<11,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?end@?$initializer_list@E@std@@QEBAPEBEXZ
_TEXT	SEGMENT
this$ = 8
?end@?$initializer_list@E@std@@QEBAPEBEXZ PROC		; std::initializer_list<unsigned char>::end, COMDAT

; 42   :         return _Last;

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]

; 43   :     }

  00004	c3		 ret	 0
?end@?$initializer_list@E@std@@QEBAPEBEXZ ENDP		; std::initializer_list<unsigned char>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?begin@?$initializer_list@E@std@@QEBAPEBEXZ
_TEXT	SEGMENT
this$ = 8
?begin@?$initializer_list@E@std@@QEBAPEBEXZ PROC	; std::initializer_list<unsigned char>::begin, COMDAT

; 38   :         return _First;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 39   :     }

  00003	c3		 ret	 0
?begin@?$initializer_list@E@std@@QEBAPEBEXZ ENDP	; std::initializer_list<unsigned char>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Pnode$ = 16
_Plist$dead$ = 24
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>, COMDAT

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 39   :         this->_Adopt(_Plist);
; 40   :     }

  00003	48 8b c1	 mov	 rax, rcx
  00006	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary, COMDAT

; 1943 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 1944 :     }

  00003	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal, COMDAT

; 1935 :         return _Mypair._Myval2._Get_first();

  00000	48 8b c1	 mov	 rax, rcx

; 1936 :     }

  00003	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z
_TEXT	SEGMENT
this$dead$ = 48
_Parg$dead$ = 56
??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >, COMDAT

; 883  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

$LN41:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00007	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000c	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00014	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00019	48 89 00	 mov	 QWORD PTR [rax], rax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0001c	48 89 40 08	 mov	 QWORD PTR [rax+8], rax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00020	48 89 40 10	 mov	 QWORD PTR [rax+16], rax

; 348  :         _Pnode->_Color = _Black;

  00024	66 c7 40 18 01
	01		 mov	 WORD PTR [rax+24], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0002a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, rax

; 884  :         _Alloc_sentinel_and_proxy();
; 885  :     }

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
??0?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA@AEBU?$less@_K@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT

; 1742 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

$LN25:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1743 :         auto& _My_data    = _Mypair._Myval2;
; 1744 :         pointer& _Myfirst = _My_data._Myfirst;
; 1745 :         pointer& _Mylast  = _My_data._Mylast;
; 1746 :         pointer& _Myend   = _My_data._Myend;
; 1747 : 
; 1748 :         _My_data._Orphan_all();
; 1749 : 
; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 3a		 je	 SHORT $LN2@Tidy

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00011	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00015	48 2b d1	 sub	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0001f	72 18		 jb	 SHORT $LN18@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00021	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00025	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	49 2b c8	 sub	 rcx, r8

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002c	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00030	48 83 f8 1f	 cmp	 rax, 31
  00034	77 1b		 ja	 SHORT $LN15@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	49 8b c8	 mov	 rcx, r8
$LN18@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0003e	33 c0		 xor	 eax, eax
  00040	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1755 :             _Mylast  = nullptr;

  00043	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1756 :             _Myend   = nullptr;

  00047	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 1758 :     }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00057	cc		 int	 3
$LN22@Tidy:
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 470  :         return static_cast<int_type>(EOF);

  00000	b8 ff ff ff ff	 mov	 eax, -1

; 471  :     }

  00005	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 462  :         return _Left == _Right;

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	39 01		 cmp	 DWORD PTR [rcx], eax
  00004	0f 94 c0	 sete	 al

; 463  :     }

  00007	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 8
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 389  :         // find length of null-terminated string
; 390  : #if _HAS_CXX17
; 391  : #ifdef __cpp_char8_t
; 392  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 393  : #if _HAS_U8_INTRINSICS
; 394  :             return __builtin_u8strlen(_First);
; 395  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 396  :             return _Primary_char_traits::length(_First);
; 397  : #endif // _HAS_U8_INTRINSICS
; 398  :         } else
; 399  : #endif // __cpp_char8_t
; 400  :         {
; 401  :             return __builtin_strlen(_First);

  00000	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LL3@length:
  00007	48 ff c0	 inc	 rax
  0000a	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  0000e	75 f7		 jne	 SHORT $LL3@length

; 402  :         }
; 403  : #else // _HAS_CXX17
; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 405  : #endif // _HAS_CXX17
; 406  :     }

  00010	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00004	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00007	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0000a	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0000e	48 8b 4c 11 48	 mov	 rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  00013	48 85 c9	 test	 rcx, rcx
  00016	74 07		 je	 SHORT $LN2@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  00018	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0001b	ff 50 10	 call	 QWORD PTR [rax+16]
  0001e	90		 npad	 1
$LN2@Sentry_bas:

; 81   :             }
; 82   :         }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Ostr$ = 56
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  0000c	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0000f	4c 63 40 04	 movsxd	 r8, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00013	49 8b 4c 10 48	 mov	 rcx, QWORD PTR [r8+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 72   :             if (_Rdbuf) {

  00018	48 85 c9	 test	 rcx, rcx
  0001b	74 06		 je	 SHORT $LN6@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  0001d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00020	ff 50 08	 call	 QWORD PTR [rax+8]
$LN6@Sentry_bas:

; 74   :             }
; 75   :         }

  00023	48 8b c3	 mov	 rax, rbx
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<14,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 0d 00	 cmp	 BYTE PTR [rcx+13], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0O@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<14,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<22,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 15 00	 cmp	 BYTE PTR [rcx+21], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0BG@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<22,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<11,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 0a 00	 cmp	 BYTE PTR [rcx+10], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0L@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<11,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first, COMDAT

; 1339 :         return *this;

  00000	48 8b c1	 mov	 rax, rcx

; 1340 :     }

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Alloc_sentinel_and_proxy, COMDAT

; 1913 :     void _Alloc_sentinel_and_proxy() {

$LN31:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00004	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00009	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000e	48 89 00	 mov	 QWORD PTR [rax], rax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00011	48 89 40 08	 mov	 QWORD PTR [rax+8], rax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00015	48 89 40 10	 mov	 QWORD PTR [rax+16], rax

; 348  :         _Pnode->_Color = _Black;

  00019	66 c7 40 18 01
	01		 mov	 WORD PTR [rax+24], 257	; 00000101H

; 1914 :         const auto _Scary = _Get_scary();
; 1915 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1916 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, rax

; 1918 :         _Proxy._Release();
; 1919 :     }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal, COMDAT

; 1805 :         return _Mypair._Get_first();

  00000	48 8b c1	 mov	 rax, rcx

; 1806 :     }

  00003	c3		 ret	 0
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0@Z
_TEXT	SEGMENT
this$dead$ = 8
_First$dead$ = 16
_Last$dead$ = 24
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

  00000	c2 00 00	 ret	 0
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z PROC	; std::allocator<unsigned char>::deallocate, COMDAT

; 795  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN21:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c2	 mov	 rax, rdx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00007	49 81 f8 00 10
	00 00		 cmp	 r8, 4096		; 00001000H
  0000e	72 18		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00010	48 8b 4a f8	 mov	 rcx, QWORD PTR [rdx-8]
  00014	49 83 c0 27	 add	 r8, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00018	48 2b c1	 sub	 rax, rcx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001b	48 83 c0 f8	 add	 rax, -8
  0001f	48 83 f8 1f	 cmp	 rax, 31
  00023	77 12		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00025	48 8b c1	 mov	 rax, rcx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	49 8b d0	 mov	 rdx, r8
  0002b	48 8b c8	 mov	 rcx, rax

; 796  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
; 798  :     }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  0003d	cc		 int	 3
$LN18@deallocate:
?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z ENDP	; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT

; 1339 :         return *this;

  00000	48 8b c1	 mov	 rax, rcx

; 1340 :     }

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>, COMDAT

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

$LN122:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0001a	4d 8b f1	 mov	 r14, r9
  0001d	49 8b f8	 mov	 rdi, r8
  00020	48 8b da	 mov	 rbx, rdx

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00023	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
  0002a	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0002e	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
  00033	33 d2		 xor	 edx, edx
  00035	89 54 24 38	 mov	 DWORD PTR $T3[rsp+8], edx
  00039	48 8b ce	 mov	 rcx, rsi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003c	38 50 19	 cmp	 BYTE PTR [rax+25], dl
  0003f	75 2b		 jne	 SHORT $LN9@emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00041	4d 8b 08	 mov	 r9, QWORD PTR [r8]
$LL8@emplace:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00044	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00049	4c 39 48 20	 cmp	 QWORD PTR [rax+32], r9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0004d	73 0a		 jae	 SHORT $LN10@emplace

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;

  0004f	89 54 24 38	 mov	 DWORD PTR $T3[rsp+8], edx

; 1603 :                 _Trynode                 = _Trynode->_Right;

  00053	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1604 :             } else {

  00057	eb 0e		 jmp	 SHORT $LN11@emplace
$LN10@emplace:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;

  00059	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR $T3[rsp+8], 1

; 1606 :                 _Result._Bound           = _Trynode;

  00061	48 8b c8	 mov	 rcx, rax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN11@emplace:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00067	38 50 19	 cmp	 BYTE PTR [rax+25], dl
  0006a	74 d8		 je	 SHORT $LL8@emplace
$LN9@emplace:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006c	38 51 19	 cmp	 BYTE PTR [rcx+25], dl
  0006f	75 0d		 jne	 SHORT $LN4@emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00071	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00075	49 39 00	 cmp	 QWORD PTR [r8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00078	72 04		 jb	 SHORT $LN4@emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0007a	32 c0		 xor	 al, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1008 :                 return {_Loc._Bound, false};

  0007c	eb 6d		 jmp	 SHORT $LN102@emplace
$LN4@emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  0007e	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H
  00088	48 39 05 08 00
	00 00		 cmp	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, rax
  0008f	74 7e		 je	 SHORT $LN120@emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00091	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  00098	48 89 6c 24 20	 mov	 QWORD PTR $T2[rsp], rbp

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0009d	48 89 54 24 28	 mov	 QWORD PTR $T2[rsp+8], rdx

; 79   :         return ::operator new(_Bytes);

  000a2	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000a7	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000ac	4c 8b c0	 mov	 r8, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000af	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000b2	49 89 40 20	 mov	 QWORD PTR [r8+32], rax
  000b6	49 8b 06	 mov	 rax, QWORD PTR [r14]
  000b9	49 89 40 28	 mov	 QWORD PTR [r8+40], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000bd	49 89 30	 mov	 QWORD PTR [r8], rsi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000c0	49 89 70 08	 mov	 QWORD PTR [r8+8], rsi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000c4	49 89 70 10	 mov	 QWORD PTR [r8+16], rsi

; 809  :         this->_Ptr->_Color = _Red;

  000c8	66 41 c7 40 18
	00 00		 mov	 WORD PTR [r8+24], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000cf	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR $T3[rsp]
  000d4	0f 29 44 24 20	 movaps	 XMMWORD PTR $T1[rsp], xmm0
  000d9	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  000de	48 8b cd	 mov	 rcx, rbp
  000e1	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
  000e6	48 8b c8	 mov	 rcx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000e9	b0 01		 mov	 al, 1
$LN102@emplace:
  000eb	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  000ee	88 43 08	 mov	 BYTE PTR [rbx+8], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1038 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

  000f1	48 8b c3	 mov	 rax, rbx

; 1039 :     }

  000f4	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000f9	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000fe	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00103	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00108	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0010c	41 5e		 pop	 r14
  0010e	c3		 ret	 0
$LN120@emplace:

; 1616 :             _Throw_tree_length_error();

  0010f	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
  00114	cc		 int	 3
$LN118@emplace:
??$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
?dtor$2@?0???$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
?dtor$2@?0???$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???$emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@1@AEA_K0@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 731  :     const char* _Val) { // insert NTBS into char stream

$LN99:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00016	4c 8b fa	 mov	 r15, rdx
  00019	48 8b f1	 mov	 rsi, rcx

; 732  :     using _Elem = char;
; 733  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 734  : 
; 735  :     ios_base::iostate _State = ios_base::goodbit;

  0001c	33 db		 xor	 ebx, ebx
  0001e	89 5c 24 70	 mov	 DWORD PTR _State$[rsp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 401  :             return __builtin_strlen(_First);

  00022	49 c7 c6 ff ff
	ff ff		 mov	 r14, -1
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL92@operator:
  00030	49 ff c6	 inc	 r14
  00033	42 38 1c 32	 cmp	 BYTE PTR [rdx+r14], bl
  00037	75 f7		 jne	 SHORT $LL92@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 737  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00039	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003c	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 359  :         return _Wide;

  00040	48 8b 7c 30 28	 mov	 rdi, QWORD PTR [rax+rsi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 737  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00045	48 85 ff	 test	 rdi, rdi
  00048	7e 0a		 jle	 SHORT $LN17@operator
  0004a	49 3b fe	 cmp	 rdi, r14
  0004d	7e 05		 jle	 SHORT $LN17@operator
  0004f	49 2b fe	 sub	 rdi, r14
  00052	eb 02		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00054	33 ff		 xor	 edi, edi
$LN18@operator:

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00056	4c 8b e6	 mov	 r12, rsi
  00059	48 89 74 24 20	 mov	 QWORD PTR _Ok$[rsp], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0005e	4c 8b 44 30 48	 mov	 r8, QWORD PTR [rax+rsi+72]
  00063	48 8b d1	 mov	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 72   :             if (_Rdbuf) {

  00066	4d 85 c0	 test	 r8, r8
  00069	74 0f		 je	 SHORT $LN39@operator

; 73   :                 _Rdbuf->_Lock();

  0006b	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0006e	49 8b c8	 mov	 rcx, r8
  00071	ff 50 08	 call	 QWORD PTR [rax+8]
  00074	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00077	48 8b d1	 mov	 rdx, rcx
$LN39@operator:

; 92   :             if (!_Ostr.good()) {

  0007a	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  0007e	83 7c 30 10 00	 cmp	 DWORD PTR [rax+rsi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 92   :             if (!_Ostr.good()) {

  00083	74 04		 je	 SHORT $LN33@operator

; 93   :                 _Ok = false;

  00085	32 c0		 xor	 al, al

; 94   :                 return;

  00087	eb 2e		 jmp	 SHORT $LN95@operator
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 69   :         return _Tiestr;

  00089	48 8b 44 30 50	 mov	 rax, QWORD PTR [rax+rsi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  0008e	48 85 c0	 test	 rax, rax
  00091	74 22		 je	 SHORT $LN35@operator
  00093	48 3b c6	 cmp	 rax, rsi
  00096	74 1d		 je	 SHORT $LN35@operator

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  00098	48 8b c8	 mov	 rcx, rax
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a1	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000a4	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  000a8	83 7c 30 10 00	 cmp	 DWORD PTR [rax+rsi+16], 0
  000ad	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000b0	48 8b d1	 mov	 rdx, rcx
  000b3	eb 02		 jmp	 SHORT $LN95@operator
$LN35@operator:

; 99   :                 _Ok = true;

  000b5	b0 01		 mov	 al, 1
$LN95@operator:

; 105  :         }

  000b7	88 44 24 28	 mov	 BYTE PTR _Ok$[rsp+8], al

; 738  :     const typename _Myos::sentry _Ok(_Ostr);
; 739  : 
; 740  :     if (!_Ok) {

  000bb	84 c0		 test	 al, al
  000bd	75 0a		 jne	 SHORT $LN8@operator

; 741  :         _State |= ios_base::badbit;

  000bf	bb 04 00 00 00	 mov	 ebx, 4

; 742  :     } else { // state okay, insert

  000c4	e9 a9 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 744  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000c9	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 322  :         return _Fmtfl;

  000cd	8b 4c 30 18	 mov	 ecx, DWORD PTR [rax+rsi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 744  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000d1	81 e1 c0 01 00
	00		 and	 ecx, 448		; 000001c0H
  000d7	83 f9 40	 cmp	 ecx, 64			; 00000040H
  000da	74 2d		 je	 SHORT $LN87@operator
  000dc	0f 1f 40 00	 npad	 4
$LL4@operator:

; 745  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000e0	48 85 ff	 test	 rdi, rdi
  000e3	7e 21		 jle	 SHORT $LN89@operator

; 746  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000e5	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000e8	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  000ec	0f b6 54 31 58	 movzx	 edx, BYTE PTR [rcx+rsi+88]
  000f1	48 8b 4c 31 48	 mov	 rcx, QWORD PTR [rcx+rsi+72]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  000fc	83 f8 ff	 cmp	 eax, -1
  000ff	74 48		 je	 SHORT $LN96@operator

; 745  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00101	48 ff cf	 dec	 rdi
  00104	eb da		 jmp	 SHORT $LL4@operator
$LN89@operator:

; 747  :                     _State |= ios_base::badbit; // insertion failed, quit
; 748  :                     break;
; 749  :                 }
; 750  :             }
; 751  :         }
; 752  : 
; 753  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00106	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
$LN87@operator:
  00109	48 63 42 04	 movsxd	 rax, DWORD PTR [rdx+4]
  0010d	4d 8b c6	 mov	 r8, r14
  00110	49 8b d7	 mov	 rdx, r15
  00113	48 8b 4c 30 48	 mov	 rcx, QWORD PTR [rax+rsi+72]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0011e	49 3b c6	 cmp	 rax, r14
  00121	75 26		 jne	 SHORT $LN96@operator
$LL93@operator:

; 754  :             _State |= ios_base::badbit;
; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit) {
; 758  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00123	48 85 ff	 test	 rdi, rdi
  00126	7e 2a		 jle	 SHORT $LN6@operator

; 759  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00128	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0012b	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  0012f	0f b6 54 31 58	 movzx	 edx, BYTE PTR [rcx+rsi+88]
  00134	48 8b 4c 31 48	 mov	 rcx, QWORD PTR [rcx+rsi+72]
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0013f	83 f8 ff	 cmp	 eax, -1
  00142	74 05		 je	 SHORT $LN96@operator

; 754  :             _State |= ios_base::badbit;
; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit) {
; 758  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00144	48 ff cf	 dec	 rdi
  00147	eb da		 jmp	 SHORT $LL93@operator
$LN96@operator:

; 760  :                     _State |= ios_base::badbit; // insertion failed, quit
; 761  :                     break;
; 762  :                 }
; 763  :             }
; 764  :         }
; 765  : 
; 766  :         _Ostr.width(0);

  00149	bb 04 00 00 00	 mov	 ebx, 4
  0014e	89 5c 24 70	 mov	 DWORD PTR _State$[rsp], ebx
$LN6@operator:
  00152	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00155	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 364  :         _Wide                      = _Newwidth;

  00159	48 c7 44 31 28
	00 00 00 00	 mov	 QWORD PTR [rcx+rsi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
  00162	eb 0e		 jmp	 SHORT $LN22@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
  00164	48 8b 74 24 60	 mov	 rsi, QWORD PTR _Ostr$[rsp]
  00169	8b 5c 24 70	 mov	 ebx, DWORD PTR _State$[rsp]
  0016d	4c 8b 64 24 20	 mov	 r12, QWORD PTR _Ok$[rsp]
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 770  :     _Ostr.setstate(_State);

  00172	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00175	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00179	48 03 ce	 add	 rcx, rsi
  0017c	45 33 c0	 xor	 r8d, r8d
  0017f	8b d3		 mov	 edx, ebx
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00187	90		 npad	 1

; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0018e	84 c0		 test	 al, al
  00190	75 0a		 jne	 SHORT $LN72@operator

; 118  :                 this->_Myostr._Osfx();

  00192	49 8b cc	 mov	 rcx, r12
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0019b	90		 npad	 1
$LN72@operator:

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  0019c	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  001a0	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  001a4	4a 8b 4c 21 48	 mov	 rcx, QWORD PTR [rcx+r12+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  001a9	48 85 c9	 test	 rcx, rcx
  001ac	74 07		 je	 SHORT $LN76@operator

; 80   :                 _Rdbuf->_Unlock();

  001ae	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  001b1	ff 50 10	 call	 QWORD PTR [rax+16]
  001b4	90		 npad	 1
$LN76@operator:

; 771  :     return _Ostr;

  001b5	48 8b c6	 mov	 rax, rsi

; 772  : }

  001b8	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  001bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c1	41 5f		 pop	 r15
  001c3	41 5e		 pop	 r14
  001c5	41 5c		 pop	 r12
  001c7	5f		 pop	 rdi
  001c8	5e		 pop	 rsi
  001c9	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 767  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 55 60	 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00011	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00014	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00018	48 03 ca	 add	 rcx, rdx
  0001b	41 b0 01	 mov	 r8b, 1
  0001e	ba 04 00 00 00	 mov	 edx, 4
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00029	90		 npad	 1
  0002a	48 b8 00 00 00
	00 00 00 00 00	 mov	 rax, 0
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
  0003a	cc		 int	 3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 767  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 55 60	 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00011	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00014	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00018	48 03 ca	 add	 rcx, rdx
  0001b	41 b0 01	 mov	 r8b, 1
  0001e	ba 04 00 00 00	 mov	 edx, 4
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00029	90		 npad	 1
  0002a	48 b8 00 00 00
	00 00 00 00 00	 mov	 rax, 0
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
  0003a	cc		 int	 3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
$T4 = 48
$T5 = 48
$T6 = 48
__$ArrayPad$ = 96
com$ = 176
op$ = 184
??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z PROC ; invoke_driver<1>, COMDAT

; 22   : {

$LN139:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	55		 push	 rbp
  00008	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  0000c	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00013	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  00017	0f 29 78 d8	 movaps	 XMMWORD PTR [rax-40], xmm7
  0001b	44 0f 29 40 c8	 movaps	 XMMWORD PTR [rax-56], xmm8
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c4	 xor	 rax, rsp
  0002a	48 89 45 17	 mov	 QWORD PTR __$ArrayPad$[rbp-73], rax

; 23   : 	if (!pHookFunc) return false;

  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?pHookFunc@@3P6A_J_K@ZEA ; pHookFunc
  00035	48 8b d9	 mov	 rbx, rcx
  00038	48 85 c0	 test	 rax, rax
  0003b	0f 84 47 09 00
	00		 je	 $LN2@invoke_dri

; 24   : 
; 25   : 	com->error = fptr_data::kernel_err::unset_err;

  00041	b9 01 00 00 00	 mov	 ecx, 1

; 26   : 	com->opr = op;

  00046	89 53 04	 mov	 DWORD PTR [rbx+4], edx
  00049	66 89 4b 02	 mov	 WORD PTR [rbx+2], cx

; 27   : 	if (!pHookFunc((uintptr_t)com) &&

  0004d	48 8b cb	 mov	 rcx, rbx
  00050	ff d0		 call	 rax
  00052	48 85 c0	 test	 rax, rax
  00055	0f 85 dd 01 00
	00		 jne	 $LN136@invoke_dri
  0005b	66 83 7b 02 01	 cmp	 WORD PTR [rbx+2], 1
  00060	0f 85 d2 01 00
	00		 jne	 $LN136@invoke_dri
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 88   : 			return _storage[_size - 1] != 0;

  00066	80 3d 13 00 00
	00 00		 cmp	 BYTE PTR ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B+19, 0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 30   : 		printf(_("Driver not loaded.\n"));

  0006d	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B
  00074	8b 05 10 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B+16
  0007a	89 45 f7	 mov	 DWORD PTR $T6[rbp-57], eax
  0007d	0f 11 45 e7	 movups	 XMMWORD PTR $T6[rbp-73], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 80   : 			if (isEncrypted())

  00081	0f 84 a8 01 00
	00		 je	 $LN26@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  00087	33 c9		 xor	 ecx, ecx
  00089	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  00090	0f 8c 58 01 00
	00		 jl	 $LN131@invoke_dri
  00096	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0009e	48 8d 55 eb	 lea	 rdx, QWORD PTR $T6[rbp-69]
  000a2	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  000aa	b8 05 00 00 00	 mov	 eax, 5
  000af	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  000b7	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  000bf	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T1[rbp-73], xmm0
  000c4	44 8b 45 d7	 mov	 r8d, DWORD PTR $T1[rbp-73]
  000c8	66 0f 6e f0	 movd	 xmm6, eax
  000cc	b8 1f 00 00 00	 mov	 eax, 31
  000d1	66 44 0f 6e c0	 movd	 xmm8, eax
  000d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL27@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  000e0	66 0f 6e d1	 movd	 xmm2, ecx
  000e4	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
  000e7	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  000ec	48 8d 52 08	 lea	 rdx, QWORD PTR [rdx+8]
  000f0	66 0f fe d5	 paddd	 xmm2, xmm5
  000f4	66 0f 6e d8	 movd	 xmm3, eax
  000f8	66 0f 6f ca	 movdqa	 xmm1, xmm2
  000fc	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00101	66 0f 62 ca	 punpckldq xmm1, xmm2
  00105	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00109	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0010d	66 0f fe dd	 paddd	 xmm3, xmm5
  00111	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00116	83 c1 08	 add	 ecx, 8
  00119	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe ca	 paddd	 xmm1, xmm2
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d0	 psubd	 xmm2, xmm0
  00140	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0014f	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f 62 cb	 punpckldq xmm1, xmm3
  00163	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00168	66 41 0f 6e c0	 movd	 xmm0, r8d
  0016d	66 0f fc d0	 paddb	 xmm2, xmm0
  00171	66 0f 6e 42 f4	 movd	 xmm0, DWORD PTR [rdx-12]
  00176	66 0f ef d0	 pxor	 xmm2, xmm0
  0017a	66 0f 6f c3	 movdqa	 xmm0, xmm3
  0017e	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00182	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00187	66 0f 7e 52 f4	 movd	 DWORD PTR [rdx-12], xmm2
  0018c	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00190	66 0f fe cb	 paddd	 xmm1, xmm3
  00194	66 0f e2 ce	 psrad	 xmm1, xmm6
  00198	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0019c	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  001a1	66 0f fe c1	 paddd	 xmm0, xmm1
  001a5	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  001aa	66 0f fa d8	 psubd	 xmm3, xmm0
  001ae	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  001b3	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  001b8	66 41 0f 6e c0	 movd	 xmm0, r8d
  001bd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  001c2	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  001ca	66 0f 67 d2	 packuswb xmm2, xmm2
  001ce	66 0f fc d0	 paddb	 xmm2, xmm0
  001d2	66 0f 6e 42 f8	 movd	 xmm0, DWORD PTR [rdx-8]
  001d7	66 0f ef d0	 pxor	 xmm2, xmm0
  001db	66 0f 7e 52 f8	 movd	 DWORD PTR [rdx-8], xmm2
  001e0	83 f9 10	 cmp	 ecx, 16
  001e3	0f 8c f7 fe ff
	ff		 jl	 $LL27@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  001e9	83 f9 14	 cmp	 ecx, 20
  001ec	7d 41		 jge	 SHORT $LN26@invoke_dri
$LN131@invoke_dri:
  001ee	48 63 c1	 movsxd	 rax, ecx
  001f1	4c 8d 45 e7	 lea	 r8, QWORD PTR $T6[rbp-73]
  001f5	4c 03 c0	 add	 r8, rax
  001f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL95@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00200	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00205	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00209	f7 e9		 imul	 ecx
  0020b	03 d1		 add	 edx, ecx
  0020d	c1 fa 05	 sar	 edx, 5
  00210	8b c2		 mov	 eax, edx
  00212	c1 e8 1f	 shr	 eax, 31
  00215	03 d0		 add	 edx, eax
  00217	0f be c2	 movsx	 eax, dl
  0021a	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  0021d	0f b6 c1	 movzx	 eax, cl
  00220	ff c1		 inc	 ecx
  00222	2a c2		 sub	 al, dl
  00224	04 38		 add	 al, 56			; 00000038H
  00226	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  0022a	83 f9 14	 cmp	 ecx, 20
  0022d	7c d1		 jl	 SHORT $LL95@invoke_dri
$LN26@invoke_dri:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 30   : 		printf(_("Driver not loaded.\n"));

  0022f	48 8d 4d e7	 lea	 rcx, QWORD PTR $T6[rbp-73]

; 31   : 		return false;

  00233	e9 4b 07 00 00	 jmp	 $LN137@invoke_dri
$LN136@invoke_dri:

; 32   : 	}
; 33   : 
; 34   : 	if (com->success) return true && com->error == fptr_data::kernel_err::no_error;

  00238	80 3b 00	 cmp	 BYTE PTR [rbx], 0
  0023b	0f b7 43 02	 movzx	 eax, WORD PTR [rbx+2]
  0023f	74 0b		 je	 SHORT $LN6@invoke_dri
  00241	66 85 c0	 test	 ax, ax
  00244	0f 94 c0	 sete	 al
  00247	e9 3e 07 00 00	 jmp	 $LN1@invoke_dri
$LN6@invoke_dri:

; 35   : 	if (!debug) return false;
; 36   : 
; 37   : 	switch (com->error)

  0024c	8b c8		 mov	 ecx, eax
  0024e	83 e9 02	 sub	 ecx, 2
  00251	0f 84 61 05 00
	00		 je	 $LN10@invoke_dri
  00257	83 e9 01	 sub	 ecx, 1
  0025a	0f 84 88 03 00
	00		 je	 $LN8@invoke_dri
  00260	83 e9 01	 sub	 ecx, 1
  00263	0f 84 9f 01 00
	00		 je	 $LN11@invoke_dri
  00269	83 f9 01	 cmp	 ecx, 1
  0026c	0f 85 16 07 00
	00		 jne	 $LN2@invoke_dri

; 46   : 		printf(_("Invalid data.\n"));

  00272	8b 05 08 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+8
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  00278	33 c9		 xor	 ecx, ecx
  0027a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 46   : 		printf(_("Invalid data.\n"));

  00281	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B
  00289	89 45 df	 mov	 DWORD PTR $T2[rbp-65], eax
  0028c	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+12
  00293	66 89 45 e3	 mov	 WORD PTR $T2[rbp-61], ax
  00297	0f b6 05 0e 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+14
  0029e	88 45 e5	 mov	 BYTE PTR $T2[rbp-59], al
  002a1	f2 0f 11 45 d7	 movsd	 QWORD PTR $T2[rbp-73], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  002a6	0f 8c 18 01 00
	00		 jl	 $LN132@invoke_dri

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  002ac	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  002b4	b8 05 00 00 00	 mov	 eax, 5
  002b9	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  002c1	66 0f 6f ca	 movdqa	 xmm1, xmm2
  002c5	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  002cd	66 0f 6f c2	 movdqa	 xmm0, xmm2
  002d1	66 0f 6a c2	 punpckhdq xmm0, xmm2
  002d5	b9 08 00 00 00	 mov	 ecx, 8
  002da	66 0f 62 ca	 punpckldq xmm1, xmm2
  002de	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  002e3	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  002e8	66 0f 6e f0	 movd	 xmm6, eax
  002ec	b8 1f 00 00 00	 mov	 eax, 31
  002f1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  002f5	66 0f fe ca	 paddd	 xmm1, xmm2
  002f9	66 0f 6e e8	 movd	 xmm5, eax
  002fd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR __xmm@38383838383838383838383838383838
  00303	66 0f e2 ce	 psrad	 xmm1, xmm6
  00307	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0030b	66 0f d2 c5	 psrld	 xmm0, xmm5
  0030f	66 0f fe c1	 paddd	 xmm0, xmm1
  00313	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0031c	66 0f fa d0	 psubd	 xmm2, xmm0
  00320	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00325	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0032a	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0032f	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00337	66 0f 6e 0d 00
	00 00 00	 movd	 xmm1, DWORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B
  0033f	66 0f 67 d2	 packuswb xmm2, xmm2
  00343	66 0f 6e c0	 movd	 xmm0, eax
  00347	66 0f fc d0	 paddb	 xmm2, xmm0
  0034b	66 0f 6f c3	 movdqa	 xmm0, xmm3
  0034f	66 0f ef d1	 pxor	 xmm2, xmm1
  00353	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00357	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  0035c	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00360	66 0f 62 cb	 punpckldq xmm1, xmm3
  00364	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00369	66 0f 7e 55 d7	 movd	 DWORD PTR $T2[rbp-73], xmm2
  0036e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00372	66 0f fe cb	 paddd	 xmm1, xmm3
  00376	66 0f e2 ce	 psrad	 xmm1, xmm6
  0037a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0037e	66 0f d2 c5	 psrld	 xmm0, xmm5
  00382	66 0f fe c1	 paddd	 xmm0, xmm1
  00386	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  0038f	66 0f fa d8	 psubd	 xmm3, xmm0
  00393	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00398	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0039d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  003a2	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  003aa	66 0f 6e 4d db	 movd	 xmm1, DWORD PTR $T2[rbp-69]
  003af	66 0f 67 d2	 packuswb xmm2, xmm2
  003b3	66 0f 6e c0	 movd	 xmm0, eax
  003b7	66 0f fc d0	 paddb	 xmm2, xmm0
  003bb	66 0f ef d1	 pxor	 xmm2, xmm1
  003bf	66 0f 7e 55 db	 movd	 DWORD PTR $T2[rbp-69], xmm2
$LN132@invoke_dri:

; 109  : 			for (int i = 0; i < _size; i++)

  003c4	8b c1		 mov	 eax, ecx
  003c6	4c 8d 45 d7	 lea	 r8, QWORD PTR $T2[rbp-73]
  003ca	4c 03 c0	 add	 r8, rax
  003cd	0f 1f 00	 npad	 3
$LL97@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  003d0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  003d5	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  003d9	f7 e9		 imul	 ecx
  003db	03 d1		 add	 edx, ecx
  003dd	c1 fa 05	 sar	 edx, 5
  003e0	8b c2		 mov	 eax, edx
  003e2	c1 e8 1f	 shr	 eax, 31
  003e5	03 d0		 add	 edx, eax
  003e7	0f be c2	 movsx	 eax, dl
  003ea	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  003ed	0f b6 c1	 movzx	 eax, cl
  003f0	ff c1		 inc	 ecx
  003f2	2a c2		 sub	 al, dl
  003f4	04 38		 add	 al, 56			; 00000038H
  003f6	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  003fa	83 f9 0f	 cmp	 ecx, 15
  003fd	7c d1		 jl	 SHORT $LL97@invoke_dri
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 47   : 		break;

  003ff	48 8d 4d d7	 lea	 rcx, QWORD PTR $T2[rbp-73]
  00403	e9 7b 05 00 00	 jmp	 $LN137@invoke_dri
$LN11@invoke_dri:

; 56   : 		printf(_("Invalid funciton operation sent to driver.\n"));

  00408	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B
  0040f	8b 05 28 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+40
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  00415	33 c9		 xor	 ecx, ecx
  00417	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 56   : 		printf(_("Invalid funciton operation sent to driver.\n"));

  0041e	0f 10 0d 10 00
	00 00		 movups	 xmm1, XMMWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+16
  00425	89 45 0f	 mov	 DWORD PTR $T3[rbp-33], eax
  00428	0f 11 45 e7	 movups	 XMMWORD PTR $T3[rbp-73], xmm0
  0042c	f2 0f 10 05 20
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+32
  00434	f2 0f 11 45 07	 movsd	 QWORD PTR $T3[rbp-41], xmm0
  00439	0f 11 4d f7	 movups	 XMMWORD PTR $T3[rbp-57], xmm1
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  0043d	0f 8c 5b 01 00
	00		 jl	 $LN133@invoke_dri
  00443	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  0044b	48 8d 55 eb	 lea	 rdx, QWORD PTR $T3[rbp-69]
  0044f	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00457	b8 05 00 00 00	 mov	 eax, 5
  0045c	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00464	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  0046c	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T1[rbp-73], xmm0
  00471	44 8b 45 d7	 mov	 r8d, DWORD PTR $T1[rbp-73]
  00475	66 0f 6e f0	 movd	 xmm6, eax
  00479	b8 1f 00 00 00	 mov	 eax, 31
  0047e	66 44 0f 6e c0	 movd	 xmm8, eax
  00483	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL83@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00490	66 0f 6e d1	 movd	 xmm2, ecx
  00494	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
  00497	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0049c	48 8d 52 08	 lea	 rdx, QWORD PTR [rdx+8]
  004a0	66 0f fe d5	 paddd	 xmm2, xmm5
  004a4	66 0f 6e d8	 movd	 xmm3, eax
  004a8	66 0f 6f ca	 movdqa	 xmm1, xmm2
  004ac	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  004b1	66 0f 62 ca	 punpckldq xmm1, xmm2
  004b5	66 0f 6f c2	 movdqa	 xmm0, xmm2
  004b9	66 0f 6a c2	 punpckhdq xmm0, xmm2
  004bd	66 0f fe dd	 paddd	 xmm3, xmm5
  004c1	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  004c6	83 c1 08	 add	 ecx, 8
  004c9	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  004ce	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  004d2	66 0f fe ca	 paddd	 xmm1, xmm2
  004d6	66 0f e2 ce	 psrad	 xmm1, xmm6
  004da	66 0f 6f c1	 movdqa	 xmm0, xmm1
  004de	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  004e3	66 0f fe c1	 paddd	 xmm0, xmm1
  004e7	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  004ec	66 0f fa d0	 psubd	 xmm2, xmm0
  004f0	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  004f5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  004fa	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  004ff	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00503	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0050b	66 0f 67 d2	 packuswb xmm2, xmm2
  0050f	66 0f 62 cb	 punpckldq xmm1, xmm3
  00513	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00518	66 41 0f 6e c0	 movd	 xmm0, r8d
  0051d	66 0f fc d0	 paddb	 xmm2, xmm0
  00521	66 0f 6e 42 f4	 movd	 xmm0, DWORD PTR [rdx-12]
  00526	66 0f ef d0	 pxor	 xmm2, xmm0
  0052a	66 0f 6f c3	 movdqa	 xmm0, xmm3
  0052e	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00532	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00537	66 0f 7e 52 f4	 movd	 DWORD PTR [rdx-12], xmm2
  0053c	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00540	66 0f fe cb	 paddd	 xmm1, xmm3
  00544	66 0f e2 ce	 psrad	 xmm1, xmm6
  00548	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0054c	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00551	66 0f fe c1	 paddd	 xmm0, xmm1
  00555	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0055a	66 0f fa d8	 psubd	 xmm3, xmm0
  0055e	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00563	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00568	66 41 0f 6e c0	 movd	 xmm0, r8d
  0056d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00572	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0057a	66 0f 67 d2	 packuswb xmm2, xmm2
  0057e	66 0f fc d0	 paddb	 xmm2, xmm0
  00582	66 0f 6e 42 f8	 movd	 xmm0, DWORD PTR [rdx-8]
  00587	66 0f ef d0	 pxor	 xmm2, xmm0
  0058b	66 0f 7e 52 f8	 movd	 DWORD PTR [rdx-8], xmm2
  00590	83 f9 28	 cmp	 ecx, 40			; 00000028H
  00593	0f 8c f7 fe ff
	ff		 jl	 $LL83@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  00599	83 f9 2c	 cmp	 ecx, 44			; 0000002cH
  0059c	7d 41		 jge	 SHORT $LN82@invoke_dri
$LN133@invoke_dri:
  0059e	48 63 c1	 movsxd	 rax, ecx
  005a1	4c 8d 45 e7	 lea	 r8, QWORD PTR $T3[rbp-73]
  005a5	4c 03 c0	 add	 r8, rax
  005a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL99@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  005b0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  005b5	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  005b9	f7 e9		 imul	 ecx
  005bb	03 d1		 add	 edx, ecx
  005bd	c1 fa 05	 sar	 edx, 5
  005c0	8b c2		 mov	 eax, edx
  005c2	c1 e8 1f	 shr	 eax, 31
  005c5	03 d0		 add	 edx, eax
  005c7	0f be c2	 movsx	 eax, dl
  005ca	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  005cd	0f b6 c1	 movzx	 eax, cl
  005d0	ff c1		 inc	 ecx
  005d2	2a c2		 sub	 al, dl
  005d4	04 38		 add	 al, 56			; 00000038H
  005d6	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  005da	83 f9 2c	 cmp	 ecx, 44			; 0000002cH
  005dd	7c d1		 jl	 SHORT $LL99@invoke_dri
$LN82@invoke_dri:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 56   : 		printf(_("Invalid funciton operation sent to driver.\n"));

  005df	48 8d 4d e7	 lea	 rcx, QWORD PTR $T3[rbp-73]
  005e3	e9 9b 03 00 00	 jmp	 $LN137@invoke_dri
$LN8@invoke_dri:

; 41   : 		printf(_("Security check failure.\n"));

  005e8	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  005ef	33 c9		 xor	 ecx, ecx
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 41   : 		printf(_("Security check failure.\n"));

  005f1	0f b6 05 18 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B+24
  005f8	f2 0f 10 0d 10
	00 00 00	 movsd	 xmm1, QWORD PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B+16
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  00600	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 41   : 		printf(_("Security check failure.\n"));

  00607	0f 11 45 e7	 movups	 XMMWORD PTR $T5[rbp-73], xmm0
  0060b	88 45 ff	 mov	 BYTE PTR $T5[rbp-49], al
  0060e	f2 0f 11 4d f7	 movsd	 QWORD PTR $T5[rbp-57], xmm1
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 109  : 			for (int i = 0; i < _size; i++)

  00613	0f 8c 55 01 00
	00		 jl	 $LN134@invoke_dri
  00619	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00621	48 8d 55 eb	 lea	 rdx, QWORD PTR $T5[rbp-69]
  00625	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  0062d	b8 05 00 00 00	 mov	 eax, 5
  00632	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0063a	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00642	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T1[rbp-73], xmm0
  00647	44 8b 45 d7	 mov	 r8d, DWORD PTR $T1[rbp-73]
  0064b	66 0f 6e f0	 movd	 xmm6, eax
  0064f	b8 1f 00 00 00	 mov	 eax, 31
  00654	66 44 0f 6e c0	 movd	 xmm8, eax
  00659	0f 1f 80 00 00
	00 00		 npad	 7
$LL41@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00660	66 0f 6e d1	 movd	 xmm2, ecx
  00664	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
  00667	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0066c	48 8d 52 08	 lea	 rdx, QWORD PTR [rdx+8]
  00670	66 0f fe d5	 paddd	 xmm2, xmm5
  00674	66 0f 6e d8	 movd	 xmm3, eax
  00678	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0067c	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00681	66 0f 62 ca	 punpckldq xmm1, xmm2
  00685	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00689	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0068d	66 0f fe dd	 paddd	 xmm3, xmm5
  00691	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00696	83 c1 08	 add	 ecx, 8
  00699	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0069e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  006a2	66 0f fe ca	 paddd	 xmm1, xmm2
  006a6	66 0f e2 ce	 psrad	 xmm1, xmm6
  006aa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  006ae	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  006b3	66 0f fe c1	 paddd	 xmm0, xmm1
  006b7	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  006bc	66 0f fa d0	 psubd	 xmm2, xmm0
  006c0	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  006c5	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  006ca	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  006cf	66 0f 6f cb	 movdqa	 xmm1, xmm3
  006d3	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  006db	66 0f 67 d2	 packuswb xmm2, xmm2
  006df	66 0f 62 cb	 punpckldq xmm1, xmm3
  006e3	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  006e8	66 41 0f 6e c0	 movd	 xmm0, r8d
  006ed	66 0f fc d0	 paddb	 xmm2, xmm0
  006f1	66 0f 6e 42 f4	 movd	 xmm0, DWORD PTR [rdx-12]
  006f6	66 0f ef d0	 pxor	 xmm2, xmm0
  006fa	66 0f 6f c3	 movdqa	 xmm0, xmm3
  006fe	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00702	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00707	66 0f 7e 52 f4	 movd	 DWORD PTR [rdx-12], xmm2
  0070c	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00710	66 0f fe cb	 paddd	 xmm1, xmm3
  00714	66 0f e2 ce	 psrad	 xmm1, xmm6
  00718	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0071c	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00721	66 0f fe c1	 paddd	 xmm0, xmm1
  00725	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0072a	66 0f fa d8	 psubd	 xmm3, xmm0
  0072e	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00733	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00738	66 41 0f 6e c0	 movd	 xmm0, r8d
  0073d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00742	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0074a	66 0f 67 d2	 packuswb xmm2, xmm2
  0074e	66 0f fc d0	 paddb	 xmm2, xmm0
  00752	66 0f 6e 42 f8	 movd	 xmm0, DWORD PTR [rdx-8]
  00757	66 0f ef d0	 pxor	 xmm2, xmm0
  0075b	66 0f 7e 52 f8	 movd	 DWORD PTR [rdx-8], xmm2
  00760	83 f9 18	 cmp	 ecx, 24
  00763	0f 8c f7 fe ff
	ff		 jl	 $LL41@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  00769	83 f9 19	 cmp	 ecx, 25
  0076c	7d 41		 jge	 SHORT $LN40@invoke_dri
$LN134@invoke_dri:
  0076e	48 63 c1	 movsxd	 rax, ecx
  00771	4c 8d 45 e7	 lea	 r8, QWORD PTR $T5[rbp-73]
  00775	4c 03 c0	 add	 r8, rax
  00778	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL101@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00780	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00785	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00789	f7 e9		 imul	 ecx
  0078b	03 d1		 add	 edx, ecx
  0078d	c1 fa 05	 sar	 edx, 5
  00790	8b c2		 mov	 eax, edx
  00792	c1 e8 1f	 shr	 eax, 31
  00795	03 d0		 add	 edx, eax
  00797	0f be c2	 movsx	 eax, dl
  0079a	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  0079d	0f b6 c1	 movzx	 eax, cl
  007a0	ff c1		 inc	 ecx
  007a2	2a c2		 sub	 al, dl
  007a4	04 38		 add	 al, 56			; 00000038H
  007a6	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  007aa	83 f9 19	 cmp	 ecx, 25
  007ad	7c d1		 jl	 SHORT $LL101@invoke_dri
$LN40@invoke_dri:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 41   : 		printf(_("Security check failure.\n"));

  007af	48 8d 4d e7	 lea	 rcx, QWORD PTR $T5[rbp-73]

; 42   : 		break;

  007b3	e9 cb 01 00 00	 jmp	 $LN137@invoke_dri
$LN10@invoke_dri:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 88   : 			return _storage[_size - 1] != 0;

  007b8	80 3d 11 00 00
	00 00		 cmp	 BYTE PTR ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B+17, 0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 51   : 		printf(_("Invalid process.\n"));

  007bf	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B
  007c6	0f b7 05 10 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B+16
  007cd	66 89 45 f7	 mov	 WORD PTR $T4[rbp-57], ax
  007d1	0f 11 45 e7	 movups	 XMMWORD PTR $T4[rbp-73], xmm0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h

; 80   : 			if (isEncrypted())

  007d5	0f 84 a4 01 00
	00		 je	 $LN68@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  007db	33 c9		 xor	 ecx, ecx
  007dd	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  007e4	0f 8c 54 01 00
	00		 jl	 $LN135@invoke_dri
  007ea	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  007f2	48 8d 55 eb	 lea	 rdx, QWORD PTR $T4[rbp-69]
  007f6	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  007fe	b8 05 00 00 00	 mov	 eax, 5
  00803	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0080b	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00813	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T1[rbp-73], xmm0
  00818	44 8b 45 d7	 mov	 r8d, DWORD PTR $T1[rbp-73]
  0081c	66 0f 6e f0	 movd	 xmm6, eax
  00820	b8 1f 00 00 00	 mov	 eax, 31
  00825	66 44 0f 6e c0	 movd	 xmm8, eax
  0082a	66 0f 1f 44 00
	00		 npad	 6
$LL69@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00830	66 0f 6e d1	 movd	 xmm2, ecx
  00834	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
  00837	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0083c	48 8d 52 08	 lea	 rdx, QWORD PTR [rdx+8]
  00840	66 0f fe d5	 paddd	 xmm2, xmm5
  00844	66 0f 6e d8	 movd	 xmm3, eax
  00848	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0084c	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00851	66 0f 62 ca	 punpckldq xmm1, xmm2
  00855	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00859	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0085d	66 0f fe dd	 paddd	 xmm3, xmm5
  00861	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00866	83 c1 08	 add	 ecx, 8
  00869	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0086e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00872	66 0f fe ca	 paddd	 xmm1, xmm2
  00876	66 0f e2 ce	 psrad	 xmm1, xmm6
  0087a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0087e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00883	66 0f fe c1	 paddd	 xmm0, xmm1
  00887	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0088c	66 0f fa d0	 psubd	 xmm2, xmm0
  00890	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00895	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0089a	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0089f	66 0f 6f cb	 movdqa	 xmm1, xmm3
  008a3	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  008ab	66 0f 67 d2	 packuswb xmm2, xmm2
  008af	66 0f 62 cb	 punpckldq xmm1, xmm3
  008b3	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  008b8	66 41 0f 6e c0	 movd	 xmm0, r8d
  008bd	66 0f fc d0	 paddb	 xmm2, xmm0
  008c1	66 0f 6e 42 f4	 movd	 xmm0, DWORD PTR [rdx-12]
  008c6	66 0f ef d0	 pxor	 xmm2, xmm0
  008ca	66 0f 6f c3	 movdqa	 xmm0, xmm3
  008ce	66 0f 6a c3	 punpckhdq xmm0, xmm3
  008d2	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  008d7	66 0f 7e 52 f4	 movd	 DWORD PTR [rdx-12], xmm2
  008dc	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  008e0	66 0f fe cb	 paddd	 xmm1, xmm3
  008e4	66 0f e2 ce	 psrad	 xmm1, xmm6
  008e8	66 0f 6f c1	 movdqa	 xmm0, xmm1
  008ec	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  008f1	66 0f fe c1	 paddd	 xmm0, xmm1
  008f5	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  008fa	66 0f fa d8	 psubd	 xmm3, xmm0
  008fe	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00903	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00908	66 41 0f 6e c0	 movd	 xmm0, r8d
  0090d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00912	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0091a	66 0f 67 d2	 packuswb xmm2, xmm2
  0091e	66 0f fc d0	 paddb	 xmm2, xmm0
  00922	66 0f 6e 42 f8	 movd	 xmm0, DWORD PTR [rdx-8]
  00927	66 0f ef d0	 pxor	 xmm2, xmm0
  0092b	66 0f 7e 52 f8	 movd	 DWORD PTR [rdx-8], xmm2
  00930	83 f9 10	 cmp	 ecx, 16
  00933	0f 8c f7 fe ff
	ff		 jl	 $LL69@invoke_dri

; 109  : 			for (int i = 0; i < _size; i++)

  00939	83 f9 12	 cmp	 ecx, 18
  0093c	7d 41		 jge	 SHORT $LN68@invoke_dri
$LN135@invoke_dri:
  0093e	48 63 c1	 movsxd	 rax, ecx
  00941	4c 8d 45 e7	 lea	 r8, QWORD PTR $T4[rbp-73]
  00945	4c 03 c0	 add	 r8, rax
  00948	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL103@invoke_dri:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00950	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00955	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00959	f7 e9		 imul	 ecx
  0095b	03 d1		 add	 edx, ecx
  0095d	c1 fa 05	 sar	 edx, 5
  00960	8b c2		 mov	 eax, edx
  00962	c1 e8 1f	 shr	 eax, 31
  00965	03 d0		 add	 edx, eax
  00967	0f be c2	 movsx	 eax, dl
  0096a	6b d0 33	 imul	 edx, eax, 51		; 00000033H
  0096d	0f b6 c1	 movzx	 eax, cl
  00970	ff c1		 inc	 ecx
  00972	2a c2		 sub	 al, dl
  00974	04 38		 add	 al, 56			; 00000038H
  00976	41 30 40 ff	 xor	 BYTE PTR [r8-1], al
  0097a	83 f9 12	 cmp	 ecx, 18
  0097d	7c d1		 jl	 SHORT $LL103@invoke_dri
$LN68@invoke_dri:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp

; 51   : 		printf(_("Invalid process.\n"));

  0097f	48 8d 4d e7	 lea	 rcx, QWORD PTR $T4[rbp-73]
$LN137@invoke_dri:

; 57   : 		break;
; 58   : 	}
; 59   : 	}
; 60   : 	return false;
; 61   : }

  00983	e8 00 00 00 00	 call	 printf
$LN2@invoke_dri:
  00988	32 c0		 xor	 al, al
$LN1@invoke_dri:
  0098a	48 8b 4d 17	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-73]
  0098e	48 33 cc	 xor	 rcx, rsp
  00991	e8 00 00 00 00	 call	 __security_check_cookie
  00996	4c 8d 9c 24 a0
	00 00 00	 lea	 r11, QWORD PTR [rsp+160]
  0099e	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  009a2	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  009a7	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  009ac	45 0f 28 43 d0	 movaps	 xmm8, XMMWORD PTR [r11-48]
  009b1	49 8b e3	 mov	 rsp, r11
  009b4	5d		 pop	 rbp
  009b5	c3		 ret	 0
??$invoke_driver@$00@@YA_NPEAUkernel_com@fptr_data@@W4kernel_opr@1@@Z ENDP ; invoke_driver<1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ PROC ; <lambda_d0c44f387d109c89364b20584f70023c>::operator(), COMDAT

; 30   : 		printf(_("Driver not loaded.\n"));

  00000	8b 05 10 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B+16
  00006	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ@4V?$skCrypter@$0BE@$0DI@$0DC@D@skc@@B
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00013	48 8b c2	 mov	 rax, rdx
  00016	c3		 ret	 0
??R<lambda_d0c44f387d109c89364b20584f70023c>@@QEBA@XZ ENDP ; <lambda_d0c44f387d109c89364b20584f70023c>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ PROC ; <lambda_6cfd3e9ca2701072e25ae67c739ed459>::operator(), COMDAT

; 41   : 		printf(_("Security check failure.\n"));

  00000	0f b6 05 18 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B+24
  00007	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B
  0000e	f2 0f 10 0d 10
	00 00 00	 movsd	 xmm1, QWORD PTR ?crypted@?1???R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ@4V?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@B+16
  00016	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00019	f2 0f 11 4a 10	 movsd	 QWORD PTR [rdx+16], xmm1
  0001e	88 42 18	 mov	 BYTE PTR [rdx+24], al
  00021	48 8b c2	 mov	 rax, rdx
  00024	c3		 ret	 0
??R<lambda_6cfd3e9ca2701072e25ae67c739ed459>@@QEBA@XZ ENDP ; <lambda_6cfd3e9ca2701072e25ae67c739ed459>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ PROC ; <lambda_07c8de3dc6ef07446993d2c862434f57>::operator(), COMDAT

; 46   : 		printf(_("Invalid data.\n"));

  00000	8b 05 08 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+8
  00006	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B
  0000e	f2 0f 11 02	 movsd	 QWORD PTR [rdx], xmm0
  00012	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00015	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+12
  0001c	66 89 42 0c	 mov	 WORD PTR [rdx+12], ax
  00020	0f b6 05 0e 00
	00 00		 movzx	 eax, BYTE PTR ?crypted@?1???R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ@4V?$skCrypter@$0P@$0DI@$0DC@D@skc@@B+14
  00027	88 42 0e	 mov	 BYTE PTR [rdx+14], al
  0002a	48 8b c2	 mov	 rax, rdx
  0002d	c3		 ret	 0
??R<lambda_07c8de3dc6ef07446993d2c862434f57>@@QEBA@XZ ENDP ; <lambda_07c8de3dc6ef07446993d2c862434f57>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ PROC ; <lambda_e5ada57596ca662cca6407ad0e4058a5>::operator(), COMDAT

; 51   : 		printf(_("Invalid process.\n"));

  00000	0f b7 05 10 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B+16
  00007	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ@4V?$skCrypter@$0BC@$0DI@$0DC@D@skc@@B
  0000e	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00011	66 89 42 10	 mov	 WORD PTR [rdx+16], ax
  00015	48 8b c2	 mov	 rax, rdx
  00018	c3		 ret	 0
??R<lambda_e5ada57596ca662cca6407ad0e4058a5>@@QEBA@XZ ENDP ; <lambda_e5ada57596ca662cca6407ad0e4058a5>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\comms.cpp
;	COMDAT ??R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
??R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ PROC ; <lambda_52c86be46df0f1ecdea0a36a120070fd>::operator(), COMDAT

; 56   : 		printf(_("Invalid funciton operation sent to driver.\n"));

  00000	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B
  00007	8b 05 28 00 00
	00		 mov	 eax, DWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+40
  0000d	0f 10 0d 10 00
	00 00		 movups	 xmm1, XMMWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+16
  00014	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00017	f2 0f 10 05 20
	00 00 00	 movsd	 xmm0, QWORD PTR ?crypted@?1???R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ@4V?$skCrypter@$0CM@$0DI@$0DC@D@skc@@B+32
  0001f	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00023	f2 0f 11 42 20	 movsd	 QWORD PTR [rdx+32], xmm0
  00028	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  0002b	48 8b c2	 mov	 rax, rdx
  0002e	c3		 ret	 0
??R<lambda_52c86be46df0f1ecdea0a36a120070fd>@@QEBA@XZ ENDP ; <lambda_52c86be46df0f1ecdea0a36a120070fd>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

$LN60:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	48 8b f2	 mov	 rsi, rdx

; 751  :         this->_Orphan_all();
; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00015	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00018	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0001c	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00020	75 36		 jne	 SHORT $LN5@Erase_head
  00022	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL4@Erase_head:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00030	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00034	48 8b d6	 mov	 rdx, rsi
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003f	48 8b cb	 mov	 rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00042	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00047	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0004f	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00053	74 db		 je	 SHORT $LL4@Erase_head
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00055	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
$LN5@Erase_head:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 754  :     }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
__formal$dead$ = 72
??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Range_construct_or_tidy<unsigned char const *>, COMDAT

; 511  :     _CONSTEXPR20_CONTAINER void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

$LN84:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b ea	 mov	 rbp, rdx
  00015	48 8b f1	 mov	 rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 1525 :         return _Last - _First; // assume the iterator will do debug checking

  00018	48 2b da	 sub	 rbx, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 513  :         if (_Count != 0) {

  0001b	74 7e		 je	 SHORT $LN57@Range_cons

; 1715 :         if (_Newcapacity > max_size()) {

  0001d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00027	48 3b d8	 cmp	 rbx, rax
  0002a	0f 87 81 00 00
	00		 ja	 $LN81@Range_cons
  00030	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	48 81 fb 00 10
	00 00		 cmp	 rbx, 4096		; 00001000H
  0003c	72 28		 jb	 SHORT $LN15@Range_cons

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0003e	48 8d 4b 27	 lea	 rcx, QWORD PTR [rbx+39]

; 130  :     if (_Block_size <= _Bytes) {

  00042	48 3b cb	 cmp	 rcx, rbx
  00045	76 64		 jbe	 SHORT $LN82@Range_cons

; 79   :         return ::operator new(_Bytes);

  00047	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004c	48 85 c0	 test	 rax, rax
  0004f	74 0e		 je	 SHORT $LN24@Range_cons

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00051	48 8d 78 27	 lea	 rdi, QWORD PTR [rax+39]
  00055	48 83 e7 e0	 and	 rdi, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00059	48 89 47 f8	 mov	 QWORD PTR [rdi-8], rax

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005d	eb 12		 jmp	 SHORT $LN14@Range_cons
$LN24@Range_cons:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00065	cc		 int	 3
$LN15@Range_cons:

; 79   :         return ::operator new(_Bytes);

  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0006e	48 8b f8	 mov	 rdi, rax
$LN14@Range_cons:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1699 :         _Myfirst           = _Newvec;

  00071	48 89 3e	 mov	 QWORD PTR [rsi], rdi

; 1701 :         _Myend             = _Newvec + _Newcapacity;

  00074	48 8d 0c 1f	 lea	 rcx, QWORD PTR [rdi+rbx]
  00078	48 89 7e 08	 mov	 QWORD PTR [rsi+8], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0007c	4c 8b c3	 mov	 r8, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1701 :         _Myend             = _Newvec + _Newcapacity;

  0007f	48 89 4e 10	 mov	 QWORD PTR [rsi+16], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00083	48 8b d5	 mov	 rdx, rbp
  00086	48 8b cf	 mov	 rcx, rdi
  00089	e8 00 00 00 00	 call	 memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1652 :             _Dest += _ULast - _UFirst;

  0008e	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
  00092	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 517  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00097	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN57@Range_cons:

; 518  :             _Guard._Target   = nullptr;
; 519  :         }
; 520  :     }

  0009b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a0	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5e		 pop	 rsi
  000aa	c3		 ret	 0
$LN82@Range_cons:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 131  :         _Throw_bad_array_new_length(); // add overflow

  000ab	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  000b0	cc		 int	 3
$LN81@Range_cons:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1716 :             _Xlength();

  000b1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
  000b6	cc		 int	 3
$LN79@Range_cons:
??$_Range_construct_or_tidy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEBE0Uforward_iterator_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Range_construct_or_tidy<unsigned char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 8
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 922  :     // convert size_t to _Size_type, avoiding truncation
; 923  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 924  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 925  :             _Xlength_error("size_t too long for _Size_type");
; 926  :         }
; 927  :     }
; 928  : 
; 929  :     return static_cast<_Size_type>(_Len);

  00000	48 8b c1	 mov	 rax, rcx

; 930  : }

  00003	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >, COMDAT

; 253  :     return __builtin_addressof(_Val);

  00000	48 8b c1	 mov	 rax, rcx

; 254  : }

  00003	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0AEBU?$less@_K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@_K@1@$$QEAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
<_Val2_0>$dead$ = 32
??$?0AEBU?$less@_K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@_K@1@$$QEAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1><std::less<unsigned __int64> const &,std::_Zero_then_variadic_args_t>, COMDAT

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000a	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00012	c3		 ret	 0
??$?0AEBU?$less@_K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@_K@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1><std::less<unsigned __int64> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN18:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00004	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0000b	72 18		 jb	 SHORT $LN13@Deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000d	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00011	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00015	49 2b c8	 sub	 rcx, r8

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00018	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  0001c	48 83 f8 1f	 cmp	 rax, 31
  00020	77 0c		 ja	 SHORT $LN10@Deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00022	49 8b c8	 mov	 rcx, r8
$LN13@Deallocate:

; 256  :     }
; 257  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN10@Deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00034	cc		 int	 3
$LN15@Deallocate:
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
_Al$dead$ = 48
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 342  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

$LN28:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00004	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00009	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000e	48 89 00	 mov	 QWORD PTR [rax], rax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00011	48 89 40 08	 mov	 QWORD PTR [rax+8], rax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00015	48 89 40 10	 mov	 QWORD PTR [rax+16], rax

; 348  :         _Pnode->_Color = _Black;

  00019	66 c7 40 18 01
	01		 mov	 WORD PTR [rax+24], 257	; 00000101H

; 349  :         _Pnode->_Isnil = true;
; 350  :         return _Pnode;
; 351  :     }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN24:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00004	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0000b	72 31		 jb	 SHORT $LN2@Allocate

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0000d	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 130  :     if (_Block_size <= _Bytes) {

  00011	48 3b c1	 cmp	 rax, rcx
  00014	76 3d		 jbe	 SHORT $LN23@Allocate

; 79   :         return ::operator new(_Bytes);

  00016	48 8b c8	 mov	 rcx, rax
  00019	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0001e	48 8b c8	 mov	 rcx, rax

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00021	48 85 c0	 test	 rax, rax
  00024	74 11		 je	 SHORT $LN11@Allocate

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00026	48 83 c0 27	 add	 rax, 39			; 00000027H
  0002a	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0002e	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 239  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
$LN11@Allocate:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  0003d	cc		 int	 3
$LN2@Allocate:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003e	48 85 c9	 test	 rcx, rcx
  00041	74 09		 je	 SHORT $LN3@Allocate

; 239  : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 79   :         return ::operator new(_Bytes);

  00047	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
$LN3@Allocate:

; 235  :         return _Traits::_Allocate(_Bytes);
; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 c0		 xor	 eax, eax

; 239  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
$LN23@Allocate:

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00053	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00058	cc		 int	 3
$LN21@Allocate:
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$ = 8
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00000	48 8b c1	 mov	 rax, rcx

; 66   : }

  00003	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__param0$ = 16
__param1$dead$ = 24
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >, COMDAT

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 8b c1	 mov	 rax, rcx
  00006	c3		 ret	 0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__param0$ = 16
__param1$dead$ = 24
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >, COMDAT

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 8b c1	 mov	 rax, rcx
  00006	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >, COMDAT

; 33   :     _CONSTEXPR20_DYNALLOC ~_Tidy_guard() {

$LN29:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 34   :         if (_Target) {

  00006	48 8b 19	 mov	 rbx, QWORD PTR [rcx]
  00009	48 85 db	 test	 rbx, rbx
  0000c	74 42		 je	 SHORT $LN5@Tidy_guard
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  0000e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00011	48 85 c9	 test	 rcx, rcx
  00014	74 3a		 je	 SHORT $LN5@Tidy_guard

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00016	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0001a	48 2b d1	 sub	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001d	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00024	72 18		 jb	 SHORT $LN21@Tidy_guard

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  0002a	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002e	49 2b c8	 sub	 rcx, r8

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00035	48 83 f8 1f	 cmp	 rax, 31
  00039	77 1b		 ja	 SHORT $LN18@Tidy_guard

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003b	49 8b c8	 mov	 rcx, r8
$LN21@Tidy_guard:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003e	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00043	33 c0		 xor	 eax, eax
  00045	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1755 :             _Mylast  = nullptr;

  00048	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1756 :             _Myend   = nullptr;

  0004c	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN5@Tidy_guard:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 37   :     }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
$LN18@Tidy_guard:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  0005c	cc		 int	 3
$LN26@Tidy_guard:
??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<44,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN26:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 2b 00	 cmp	 BYTE PTR [rcx+43], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN22@operator
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 28	 cmp	 r8d, 40			; 00000028H
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL11@operator

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  0018f	7d 43		 jge	 SHORT $LN23@operator
$LN22@operator:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  001d2	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
??B?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<44,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<18,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN26:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 11 00	 cmp	 BYTE PTR [rcx+17], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN22@operator
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL11@operator

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 12	 cmp	 r8d, 18
  0018f	7d 43		 jge	 SHORT $LN23@operator
$LN22@operator:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 12	 cmp	 r8d, 18
  001d2	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
??B?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<18,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 32
??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<15,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN25:
  00000	48 83 ec 18	 sub	 rsp, 24

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 0e 00	 cmp	 BYTE PTR [rcx+14], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 63 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 16 01 00
	00		 jl	 $LN22@operator

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00021	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00036	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0003a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00042	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00046	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0004a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00050	66 0f 62 ca	 punpckldq xmm1, xmm2
  00054	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00059	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0005e	66 0f 6e e8	 movd	 xmm5, eax
  00062	b8 1f 00 00 00	 mov	 eax, 31
  00067	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6
  0006b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0006f	66 0f fe ca	 paddd	 xmm1, xmm2
  00073	66 0f 6e f0	 movd	 xmm6, eax
  00077	66 0f e2 cd	 psrad	 xmm1, xmm5
  0007b	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0007f	66 0f d2 c6	 psrld	 xmm0, xmm6
  00083	66 0f fe c1	 paddd	 xmm0, xmm1
  00087	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00090	66 0f fa d0	 psubd	 xmm2, xmm0
  00094	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00099	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0009e	66 0f 6e 01	 movd	 xmm0, DWORD PTR [rcx]
  000a2	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000a7	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000ab	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000b3	66 0f 67 d2	 packuswb xmm2, xmm2
  000b7	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000bf	66 0f ef d0	 pxor	 xmm2, xmm0
  000c3	66 0f 62 cb	 punpckldq xmm1, xmm3
  000c7	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000cb	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000cf	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000d3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000d8	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000dd	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000e1	66 0f fe cb	 paddd	 xmm1, xmm3
  000e5	66 0f e2 cd	 psrad	 xmm1, xmm5
  000e9	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000ed	66 0f d2 c6	 psrld	 xmm0, xmm6
  000f1	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
  000f5	66 0f fe c1	 paddd	 xmm0, xmm1
  000f9	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00102	66 0f fa d8	 psubd	 xmm3, xmm0
  00106	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  0010b	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00110	66 0f 6e 41 04	 movd	 xmm0, DWORD PTR [rcx+4]
  00115	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0011a	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00122	66 0f 67 d2	 packuswb xmm2, xmm2
  00126	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  0012e	66 0f ef d0	 pxor	 xmm2, xmm0
  00132	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2
$LN22@operator:

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  00137	45 8b c8	 mov	 r9d, r8d
  0013a	4d 03 ca	 add	 r9, r10
  0013d	0f 1f 00	 npad	 3
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00140	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00145	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00149	41 f7 e8	 imul	 r8d
  0014c	41 03 d0	 add	 edx, r8d
  0014f	c1 fa 05	 sar	 edx, 5
  00152	8b c2		 mov	 eax, edx
  00154	c1 e8 1f	 shr	 eax, 31
  00157	03 d0		 add	 edx, eax
  00159	0f be c2	 movsx	 eax, dl
  0015c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0015f	41 0f b6 c0	 movzx	 eax, r8b
  00163	41 ff c0	 inc	 r8d
  00166	2a c1		 sub	 al, cl
  00168	04 38		 add	 al, 56			; 00000038H
  0016a	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0016e	41 83 f8 0f	 cmp	 r8d, 15
  00172	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  00174	49 8b c2	 mov	 rax, r10
  00177	48 83 c4 18	 add	 rsp, 24
  0017b	c3		 ret	 0
??B?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<15,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<25,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN26:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 18 00	 cmp	 BYTE PTR [rcx+24], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN22@operator
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 18	 cmp	 r8d, 24
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL11@operator

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 19	 cmp	 r8d, 25
  0018f	7d 43		 jge	 SHORT $LN23@operator
$LN22@operator:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 19	 cmp	 r8d, 25
  001d2	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
??B?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<25,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC	; skc::skCrypter<20,56,50,char>::operator char *, COMDAT

; 100  : 		{

$LN26:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 13 00	 cmp	 BYTE PTR [rcx+19], 0

; 100  : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN23@operator

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN22@operator
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL11@operator

; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 14	 cmp	 r8d, 20
  0018f	7d 43		 jge	 SHORT $LN23@operator
$LN22@operator:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@operator:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 14	 cmp	 r8d, 20
  001d2	7c cc		 jl	 SHORT $LL15@operator
$LN23@operator:

; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
??B?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP	; skc::skCrypter<20,56,50,char>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Count$dead$ = 16
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocate, COMDAT

; 79   :         return ::operator new(_Bytes);

  00000	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00005	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero, COMDAT

; 1704 :     _CONSTEXPR20_CONTAINER void _Buy_nonzero(const size_type _Newcapacity) {

$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1705 :         // allocate array with _Newcapacity elements
; 1706 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1707 :         auto& _My_data    = _Mypair._Myval2;
; 1708 :         pointer& _Myfirst = _My_data._Myfirst;
; 1709 :         pointer& _Mylast  = _My_data._Mylast;
; 1710 :         pointer& _Myend   = _My_data._Myend;
; 1711 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1712 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1713 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1714 : 
; 1715 :         if (_Newcapacity > max_size()) {

  0000a	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00014	48 8b da	 mov	 rbx, rdx
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	48 3b d0	 cmp	 rdx, rax
  0001d	77 5e		 ja	 SHORT $LN33@Buy_nonzer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00026	72 2b		 jb	 SHORT $LN9@Buy_nonzer

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00028	48 8d 4a 27	 lea	 rcx, QWORD PTR [rdx+39]

; 130  :     if (_Block_size <= _Bytes) {

  0002c	48 3b ca	 cmp	 rcx, rdx
  0002f	76 52		 jbe	 SHORT $LN34@Buy_nonzer

; 79   :         return ::operator new(_Bytes);

  00031	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00036	48 8b c8	 mov	 rcx, rax

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00039	48 85 c0	 test	 rax, rax
  0003c	74 0e		 je	 SHORT $LN18@Buy_nonzer

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003e	48 83 c0 27	 add	 rax, 39			; 00000027H
  00042	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00046	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	eb 18		 jmp	 SHORT $LN8@Buy_nonzer
$LN18@Buy_nonzer:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00052	cc		 int	 3
$LN9@Buy_nonzer:

; 234  :     if (_Bytes != 0) {

  00053	48 85 db	 test	 rbx, rbx
  00056	74 0a		 je	 SHORT $LN10@Buy_nonzer

; 79   :         return ::operator new(_Bytes);

  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00060	eb 02		 jmp	 SHORT $LN8@Buy_nonzer
$LN10@Buy_nonzer:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00062	33 c0		 xor	 eax, eax
$LN8@Buy_nonzer:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1699 :         _Myfirst           = _Newvec;

  00064	48 89 07	 mov	 QWORD PTR [rdi], rax

; 1700 :         _Mylast            = _Newvec;

  00067	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 1701 :         _Myend             = _Newvec + _Newcapacity;

  0006b	48 03 c3	 add	 rax, rbx

; 1720 :     }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1701 :         _Myend             = _Newvec + _Newcapacity;

  00073	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax

; 1720 :     }

  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
$LN33@Buy_nonzer:

; 1716 :             _Xlength();

  0007d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
  00082	cc		 int	 3
$LN34@Buy_nonzer:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00083	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00088	cc		 int	 3
$LN31@Buy_nonzer:
?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<44,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN24:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 2b 00	 cmp	 BYTE PTR [rcx+43], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN20@decrypt
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL9@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 28	 cmp	 r8d, 40			; 00000028H
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL9@decrypt

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  0018f	7d 43		 jge	 SHORT $LN21@decrypt
$LN20@decrypt:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 2c	 cmp	 r8d, 44			; 0000002cH
  001d2	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
?decrypt@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<44,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<18,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN24:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 11 00	 cmp	 BYTE PTR [rcx+17], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN20@decrypt
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL9@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL9@decrypt

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 12	 cmp	 r8d, 18
  0018f	7d 43		 jge	 SHORT $LN21@decrypt
$LN20@decrypt:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 12	 cmp	 r8d, 18
  001d2	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
?decrypt@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<18,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 32
?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<15,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN23:
  00000	48 83 ec 18	 sub	 rsp, 24

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 0e 00	 cmp	 BYTE PTR [rcx+14], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 63 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 16 01 00
	00		 jl	 $LN20@decrypt

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00021	66 0f 6f 15 00
	00 00 00	 movdqa	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 1d 00
	00 00 00	 movdqa	 xmm3, XMMWORD PTR __xmm@00000007000000060000000500000004
  00036	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0003a	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  00042	66 0f 6f c2	 movdqa	 xmm0, xmm2
  00046	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0004a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00050	66 0f 62 ca	 punpckldq xmm1, xmm2
  00054	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00059	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0005e	66 0f 6e e8	 movd	 xmm5, eax
  00062	b8 1f 00 00 00	 mov	 eax, 31
  00067	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6
  0006b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0006f	66 0f fe ca	 paddd	 xmm1, xmm2
  00073	66 0f 6e f0	 movd	 xmm6, eax
  00077	66 0f e2 cd	 psrad	 xmm1, xmm5
  0007b	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0007f	66 0f d2 c6	 psrld	 xmm0, xmm6
  00083	66 0f fe c1	 paddd	 xmm0, xmm1
  00087	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00090	66 0f fa d0	 psubd	 xmm2, xmm0
  00094	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00099	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0009e	66 0f 6e 01	 movd	 xmm0, DWORD PTR [rcx]
  000a2	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000a7	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000ab	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000b3	66 0f 67 d2	 packuswb xmm2, xmm2
  000b7	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  000bf	66 0f ef d0	 pxor	 xmm2, xmm0
  000c3	66 0f 62 cb	 punpckldq xmm1, xmm3
  000c7	66 0f 7e 11	 movd	 DWORD PTR [rcx], xmm2
  000cb	66 0f 6f c3	 movdqa	 xmm0, xmm3
  000cf	66 0f 6a c3	 punpckhdq xmm0, xmm3
  000d3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000d8	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000dd	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000e1	66 0f fe cb	 paddd	 xmm1, xmm3
  000e5	66 0f e2 cd	 psrad	 xmm1, xmm5
  000e9	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000ed	66 0f d2 c6	 psrld	 xmm0, xmm6
  000f1	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
  000f5	66 0f fe c1	 paddd	 xmm0, xmm1
  000f9	66 0f 38 40 05
	00 00 00 00	 pmulld	 xmm0, XMMWORD PTR __xmm@00000033000000330000003300000033
  00102	66 0f fa d8	 psubd	 xmm3, xmm0
  00106	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  0010b	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  00110	66 0f 6e 41 04	 movd	 xmm0, DWORD PTR [rcx+4]
  00115	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  0011a	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  00122	66 0f 67 d2	 packuswb xmm2, xmm2
  00126	66 0f fc 15 00
	00 00 00	 paddb	 xmm2, XMMWORD PTR __xmm@38383838383838383838383838383838
  0012e	66 0f ef d0	 pxor	 xmm2, xmm0
  00132	66 0f 7e 51 04	 movd	 DWORD PTR [rcx+4], xmm2
$LN20@decrypt:

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  00137	45 8b c8	 mov	 r9d, r8d
  0013a	4d 03 ca	 add	 r9, r10
  0013d	0f 1f 00	 npad	 3
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00140	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  00145	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00149	41 f7 e8	 imul	 r8d
  0014c	41 03 d0	 add	 edx, r8d
  0014f	c1 fa 05	 sar	 edx, 5
  00152	8b c2		 mov	 eax, edx
  00154	c1 e8 1f	 shr	 eax, 31
  00157	03 d0		 add	 edx, eax
  00159	0f be c2	 movsx	 eax, dl
  0015c	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  0015f	41 0f b6 c0	 movzx	 eax, r8b
  00163	41 ff c0	 inc	 r8d
  00166	2a c1		 sub	 al, cl
  00168	04 38		 add	 al, 56			; 00000038H
  0016a	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0016e	41 83 f8 0f	 cmp	 r8d, 15
  00172	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  00174	49 8b c2	 mov	 rax, r10
  00177	48 83 c4 18	 add	 rsp, 24
  0017b	c3		 ret	 0
?decrypt@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<15,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<25,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN24:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 18 00	 cmp	 BYTE PTR [rcx+24], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN20@decrypt
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL9@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 18	 cmp	 r8d, 24
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL9@decrypt

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 19	 cmp	 r8d, 25
  0018f	7d 43		 jge	 SHORT $LN21@decrypt
$LN20@decrypt:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 19	 cmp	 r8d, 25
  001d2	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
?decrypt@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<25,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 80
?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ PROC ; skc::skCrypter<20,56,50,char>::decrypt, COMDAT

; 79   : 		{

$LN24:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   : 			return _storage[_size - 1] != 0;

  00004	80 79 13 00	 cmp	 BYTE PTR [rcx+19], 0

; 79   : 		{

  00008	4c 8b d1	 mov	 r10, rcx

; 80   : 			if (isEncrypted())

  0000b	0f 84 c3 01 00
	00		 je	 $LN21@decrypt

; 109  : 			for (int i = 0; i < _size; i++)

  00011	45 33 c0	 xor	 r8d, r8d
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  0001b	0f 8c 70 01 00
	00		 jl	 $LN20@decrypt
  00021	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@38383838383838383838383838383838
  00029	b8 05 00 00 00	 mov	 eax, 5
  0002e	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00036	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@a0a0a0a1a0a0a0a1a0a0a0a1a0a0a0a1
  0003e	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00043	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00048	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000033000000330000003300000033
  00050	66 0f 6e f0	 movd	 xmm6, eax
  00054	b8 1f 00 00 00	 mov	 eax, 31
  00059	66 0f 7f 04 24	 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	8b 14 24	 mov	 edx, DWORD PTR $T1[rsp]
  00061	44 0f 29 44 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm8
  00067	66 44 0f 6e c0	 movd	 xmm8, eax
  0006c	0f 1f 40 00	 npad	 4
$LL9@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00070	66 41 0f 6e d0	 movd	 xmm2, r8d
  00075	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00079	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0007e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00082	66 0f fe d5	 paddd	 xmm2, xmm5
  00086	66 0f 6e d8	 movd	 xmm3, eax
  0008a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0008e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00093	66 0f 62 ca	 punpckldq xmm1, xmm2
  00097	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0009b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0009f	66 0f fe dd	 paddd	 xmm3, xmm5
  000a3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  000a8	41 83 c0 08	 add	 r8d, 8
  000ac	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000b1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000b5	66 0f fe ca	 paddd	 xmm1, xmm2
  000b9	66 0f e2 ce	 psrad	 xmm1, xmm6
  000bd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000c1	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  000c6	66 0f fe c1	 paddd	 xmm0, xmm1
  000ca	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  000cf	66 0f fa d0	 psubd	 xmm2, xmm0
  000d3	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  000d8	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  000dd	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  000e2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  000e6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  000ee	66 0f 67 d2	 packuswb xmm2, xmm2
  000f2	66 0f 62 cb	 punpckldq xmm1, xmm3
  000f6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  000fb	66 0f 6e c2	 movd	 xmm0, edx
  000ff	66 0f fc d0	 paddb	 xmm2, xmm0
  00103	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00108	66 0f ef d0	 pxor	 xmm2, xmm0
  0010c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00110	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00114	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00119	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  0011e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00122	66 0f fe cb	 paddd	 xmm1, xmm3
  00126	66 0f e2 ce	 psrad	 xmm1, xmm6
  0012a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0012e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00133	66 0f fe c1	 paddd	 xmm0, xmm1
  00137	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0013c	66 0f fa d8	 psubd	 xmm3, xmm0
  00140	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00145	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0014a	66 0f 6e c2	 movd	 xmm0, edx
  0014e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00153	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0015b	66 0f 67 d2	 packuswb xmm2, xmm2
  0015f	66 0f fc d0	 paddb	 xmm2, xmm0
  00163	66 0f 6e 41 fc	 movd	 xmm0, DWORD PTR [rcx-4]
  00168	66 0f ef d0	 pxor	 xmm2, xmm0
  0016c	66 0f 7e 51 fc	 movd	 DWORD PTR [rcx-4], xmm2
  00171	41 83 f8 10	 cmp	 r8d, 16
  00175	0f 8c f5 fe ff
	ff		 jl	 $LL9@decrypt

; 89   : 		}
; 90   : 
; 91   : 		__forceinline void clear()
; 92   : 		{
; 93   : 			for (int i = 0; i < _size; i++)
; 94   : 			{
; 95   : 				_storage[i] = 0;
; 96   : 			}
; 97   : 		}
; 98   : 
; 99   : 		__forceinline operator T* ()
; 100  : 		{
; 101  : 			decrypt();
; 102  : 
; 103  : 			return _storage;
; 104  : 		}
; 105  : 
; 106  : 	private:
; 107  : 		__forceinline constexpr void crypt(T* data)
; 108  : 		{
; 109  : 			for (int i = 0; i < _size; i++)

  0017b	44 0f 28 44 24
	10		 movaps	 xmm8, XMMWORD PTR [rsp+16]
  00181	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00186	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0018b	41 83 f8 14	 cmp	 r8d, 20
  0018f	7d 43		 jge	 SHORT $LN21@decrypt
$LN20@decrypt:
  00191	4d 63 c8	 movsxd	 r9, r8d
  00194	4d 03 ca	 add	 r9, r10
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@decrypt:

; 110  : 			{
; 111  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001a0	b8 a1 a0 a0 a0	 mov	 eax, -1600085855	; ffffffffa0a0a0a1H
  001a5	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  001a9	41 f7 e8	 imul	 r8d
  001ac	41 03 d0	 add	 edx, r8d
  001af	c1 fa 05	 sar	 edx, 5
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31
  001b7	03 d0		 add	 edx, eax
  001b9	0f be c2	 movsx	 eax, dl
  001bc	6b c8 33	 imul	 ecx, eax, 51		; 00000033H
  001bf	41 0f b6 c0	 movzx	 eax, r8b
  001c3	41 ff c0	 inc	 r8d
  001c6	2a c1		 sub	 al, cl
  001c8	04 38		 add	 al, 56			; 00000038H
  001ca	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  001ce	41 83 f8 14	 cmp	 r8d, 20
  001d2	7c cc		 jl	 SHORT $LL13@decrypt
$LN21@decrypt:

; 81   : 				crypt(_storage);
; 82   : 
; 83   : 			return _storage;
; 84   : 		}

  001d4	49 8b c2	 mov	 rax, r10
  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
?decrypt@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAAPEADXZ ENDP ; skc::skCrypter<20,56,50,char>::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength, COMDAT

; 1760 :     [[noreturn]] static void _Xlength() {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1761 :         _Xlength_error("vector too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
  00011	cc		 int	 3
$LN3@Xlength:
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw, COMDAT

; 1688 :     _CONSTEXPR20_CONTAINER void _Buy_raw(const size_type _Newcapacity) {

$LN30:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00017	72 2b		 jb	 SHORT $LN6@Buy_raw

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00019	48 8d 4a 27	 lea	 rcx, QWORD PTR [rdx+39]

; 130  :     if (_Block_size <= _Bytes) {

  0001d	48 3b ca	 cmp	 rcx, rdx
  00020	76 4c		 jbe	 SHORT $LN29@Buy_raw

; 79   :         return ::operator new(_Bytes);

  00022	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00027	48 8b c8	 mov	 rcx, rax

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002a	48 85 c0	 test	 rax, rax
  0002d	74 0e		 je	 SHORT $LN15@Buy_raw

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0002f	48 83 c0 27	 add	 rax, 39			; 00000027H
  00033	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00037	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003b	eb 18		 jmp	 SHORT $LN5@Buy_raw
$LN15@Buy_raw:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00043	cc		 int	 3
$LN6@Buy_raw:

; 234  :     if (_Bytes != 0) {

  00044	48 85 db	 test	 rbx, rbx
  00047	74 0a		 je	 SHORT $LN7@Buy_raw

; 79   :         return ::operator new(_Bytes);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00051	eb 02		 jmp	 SHORT $LN5@Buy_raw
$LN7@Buy_raw:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00053	33 c0		 xor	 eax, eax
$LN5@Buy_raw:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1699 :         _Myfirst           = _Newvec;

  00055	48 89 07	 mov	 QWORD PTR [rdi], rax

; 1700 :         _Mylast            = _Newvec;

  00058	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 1701 :         _Myend             = _Newvec + _Newcapacity;

  0005c	48 03 c3	 add	 rax, rbx

; 1702 :     }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
$LN29@Buy_raw:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 131  :         _Throw_bad_array_new_length(); // add overflow

  0006e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00073	cc		 int	 3
$LN27@Buy_raw:
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT

; 1540 :         return (_STD min)(

  00000	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

  0000a	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<44,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 2b 00	 cmp	 BYTE PTR [rcx+43], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0CM@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<44,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<18,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 11 00	 cmp	 BYTE PTR [rcx+17], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0BC@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<18,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<15,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 0e 00	 cmp	 BYTE PTR [rcx+14], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0P@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<15,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<25,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 18 00	 cmp	 BYTE PTR [rcx+24], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0BJ@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<25,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\crypt.h
;	COMDAT ?isEncrypted@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isEncrypted@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAA_NXZ PROC ; skc::skCrypter<20,56,50,char>::isEncrypted, COMDAT

; 88   : 			return _storage[_size - 1] != 0;

  00000	80 79 13 00	 cmp	 BYTE PTR [rcx+19], 0
  00004	0f 95 c0	 setne	 al

; 89   : 		}

  00007	c3		 ret	 0
?isEncrypted@?$skCrypter@$0BE@$0DI@$0DC@D@skc@@QEAA_NXZ ENDP ; skc::skCrypter<20,56,50,char>::isEncrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal, COMDAT

; 1809 :         return _Mypair._Get_first();

  00000	48 8b c1	 mov	 rax, rcx

; 1810 :     }

  00003	c3		 ret	 0
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size, COMDAT

; 695  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 696  :     }

  00007	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@E@std@@QEAAPEAE_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@E@std@@QEAAPEAE_K@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT

; 800  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN27:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00004	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0000b	72 2e		 jb	 SHORT $LN4@allocate

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0000d	48 8d 4a 27	 lea	 rcx, QWORD PTR [rdx+39]

; 130  :     if (_Block_size <= _Bytes) {

  00011	48 3b ca	 cmp	 rcx, rdx
  00014	76 3d		 jbe	 SHORT $LN26@allocate

; 79   :         return ::operator new(_Bytes);

  00016	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0001b	48 8b c8	 mov	 rcx, rax

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001e	48 85 c0	 test	 rax, rax
  00021	74 11		 je	 SHORT $LN13@allocate

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00023	48 83 c0 27	 add	 rax, 39			; 00000027H
  00027	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0002b	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 801  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 802  :     }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
$LN13@allocate:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  0003a	cc		 int	 3
$LN4@allocate:

; 234  :     if (_Bytes != 0) {

  0003b	48 85 d2	 test	 rdx, rdx
  0003e	74 0c		 je	 SHORT $LN5@allocate

; 79   :         return ::operator new(_Bytes);

  00040	48 8b ca	 mov	 rcx, rdx

; 801  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 802  :     }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 79   :         return ::operator new(_Bytes);

  00047	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
$LN5@allocate:

; 238  :     return nullptr;

  0004c	33 c0		 xor	 eax, eax

; 801  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 802  :     }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
$LN26@allocate:

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00053	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00058	cc		 int	 3
$LN24@allocate:
?allocate@?$allocator@E@std@@QEAAPEAE_K@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT

; 1343 :         return *this;

  00000	48 8b c1	 mov	 rax, rcx

; 1344 :     }

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1><>, COMDAT

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000a	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00012	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QEA_NAEA_N@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@_N@std@@YA$$QEA_NAEA_N@Z PROC		; std::forward<bool>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@_N@std@@YA$$QEA_NAEA_N@Z ENDP		; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEA_K@std@@YAAEA_KAEA_K@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEA_K@std@@YAAEA_KAEA_K@Z PROC		; std::forward<unsigned __int64 &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEA_K@std@@YAAEA_KAEA_K@Z ENDP		; std::forward<unsigned __int64 &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>, COMDAT

; 999  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

$LN112:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0001a	4d 8b f1	 mov	 r14, r9
  0001d	49 8b f8	 mov	 rdi, r8
  00020	48 8b da	 mov	 rbx, rdx

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00023	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
  0002a	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0002e	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
  00033	45 33 c0	 xor	 r8d, r8d
  00036	44 89 44 24 38	 mov	 DWORD PTR $T3[rsp+8], r8d
  0003b	48 8b ce	 mov	 rcx, rsi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003e	44 38 40 19	 cmp	 BYTE PTR [rax+25], r8b
  00042	75 36		 jne	 SHORT $LN7@Emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00044	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL6@Emplace:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00050	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00055	48 39 50 20	 cmp	 QWORD PTR [rax+32], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00059	73 0b		 jae	 SHORT $LN8@Emplace

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;

  0005b	44 89 44 24 38	 mov	 DWORD PTR $T3[rsp+8], r8d

; 1603 :                 _Trynode                 = _Trynode->_Right;

  00060	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1604 :             } else {

  00064	eb 0e		 jmp	 SHORT $LN9@Emplace
$LN8@Emplace:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;

  00066	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR $T3[rsp+8], 1

; 1606 :                 _Result._Bound           = _Trynode;

  0006e	48 8b c8	 mov	 rcx, rax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00071	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN9@Emplace:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00074	44 38 40 19	 cmp	 BYTE PTR [rax+25], r8b
  00078	74 d6		 je	 SHORT $LL6@Emplace
$LN7@Emplace:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0007a	44 38 41 19	 cmp	 BYTE PTR [rcx+25], r8b
  0007e	75 12		 jne	 SHORT $LN2@Emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00080	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00084	48 39 07	 cmp	 QWORD PTR [rdi], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00087	72 09		 jb	 SHORT $LN2@Emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00089	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  0008c	44 88 43 08	 mov	 BYTE PTR [rbx+8], r8b
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1008 :                 return {_Loc._Bound, false};

  00090	eb 6f		 jmp	 SHORT $LN108@Emplace
$LN2@Emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00092	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H
  0009c	48 39 05 08 00
	00 00		 cmp	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, rax
  000a3	74 7a		 je	 SHORT $LN110@Emplace
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000a5	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  000ac	48 89 6c 24 20	 mov	 QWORD PTR $T2[rsp], rbp

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000b1	4c 89 44 24 28	 mov	 QWORD PTR $T2[rsp+8], r8

; 79   :         return ::operator new(_Bytes);

  000b6	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000bb	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000c0	90		 npad	 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000c1	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  000c4	48 89 50 20	 mov	 QWORD PTR [rax+32], rdx
  000c8	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  000cb	48 89 50 28	 mov	 QWORD PTR [rax+40], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000cf	48 89 30	 mov	 QWORD PTR [rax], rsi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000d2	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000d6	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 809  :         this->_Ptr->_Color = _Red;

  000da	66 c7 40 18 00
	00		 mov	 WORD PTR [rax+24], 0

; 1009 :             }
; 1010 : 
; 1011 :             _Check_grow_by_1();
; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();
; 1013 :             // nothrow hereafter
; 1014 :         } else {
; 1015 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);
; 1016 :             const auto& _Keyval = _Traits::_Kfn(_Newnode._Ptr->_Myval);
; 1017 :             if constexpr (_Multi) { // duplicate check if unique
; 1018 :                 _Loc = _Find_upper_bound(_Keyval);
; 1019 :             } else {
; 1020 :                 _Loc = _Find_lower_bound(_Keyval);
; 1021 :                 if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1022 :                     return {_Loc._Bound, false};
; 1023 :                 }
; 1024 :             }
; 1025 : 
; 1026 :             _Check_grow_by_1();
; 1027 :             // nothrow hereafter
; 1028 :             _Inserted = _Newnode._Release();
; 1029 :         }
; 1030 : 
; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e0	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR $T3[rsp]
  000e5	0f 29 44 24 20	 movaps	 XMMWORD PTR $T1[rsp], xmm0
  000ea	4c 8b c0	 mov	 r8, rax
  000ed	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  000f2	48 8b cd	 mov	 rcx, rbp
  000f5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000fa	48 89 03	 mov	 QWORD PTR [rbx], rax
  000fd	c6 43 08 01	 mov	 BYTE PTR [rbx+8], 1
$LN108@Emplace:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

  00101	48 8b c3	 mov	 rax, rbx
  00104	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00109	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0010e	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00113	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00118	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0011c	41 5e		 pop	 r14
  0011e	c3		 ret	 0
$LN110@Emplace:

; 1616 :             _Throw_tree_length_error();

  0011f	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
  00124	cc		 int	 3
$LN107@Emplace:
??$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
?dtor$2@?0???$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 48
this$dead$ = 96
__$ReturnUdt$ = 104
<_Vals_0>$ = 112
<_Vals_1>$ = 120
?dtor$2@?0???$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$2@?0???$_Emplace@AEA_KAEA_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@1@AEA_K0@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Emplace<unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@1@AEB_N@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@1@AEB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool const &,0>, COMDAT

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax
  00006	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0000a	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@1@AEB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
_Rootnode$ = 64
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

$LN37:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000f	41 80 78 19 00	 cmp	 BYTE PTR [r8+25], 0
  00014	49 8b d8	 mov	 rbx, r8
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b f1	 mov	 rsi, rcx
  0001d	75 26		 jne	 SHORT $LN3@Erase_tree
  0001f	90		 npad	 1
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00020	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b ce	 mov	 rcx, rsi
  0002a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002f	48 8b cb	 mov	 rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00037	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7b 19 00	 cmp	 BYTE PTR [rbx+25], 0
  00043	74 db		 je	 SHORT $LL2@Erase_tree
$LN3@Erase_tree:

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 369  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	48 8b ca	 mov	 rcx, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00008	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z PROC ; std::forward<std::allocator<unsigned char> const &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z ENDP ; std::forward<std::allocator<unsigned char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$distance@PEBE@std@@YA_JPEBE0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$distance@PEBE@std@@YA_JPEBE0@Z PROC			; std::distance<unsigned char const *>, COMDAT

; 1524 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1525 :         return _Last - _First; // assume the iterator will do debug checking

  00000	48 2b d1	 sub	 rdx, rcx
  00003	48 8b c2	 mov	 rax, rdx

; 1526 :     } else {
; 1527 :         _Adl_verify_range(_First, _Last);
; 1528 :         auto _UFirst             = _Get_unwrapped(_First);
; 1529 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1530 :         _Iter_diff_t<_InIt> _Off = 0;
; 1531 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1532 :             ++_Off;
; 1533 :         }
; 1534 : 
; 1535 :         return _Off;
; 1536 :     }
; 1537 : }

  00006	c3		 ret	 0
??$distance@PEBE@std@@YA_JPEBE0@Z ENDP			; std::distance<unsigned char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z
_TEXT	SEGMENT
this$dead$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char const *>, COMDAT

; 1639 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000d	49 8b c9	 mov	 rcx, r9
  00010	48 2b da	 sub	 rbx, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1639 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

  00013	49 8b f9	 mov	 rdi, r9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00016	4c 8b c3	 mov	 r8, rbx
  00019	e8 00 00 00 00	 call	 memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1652 :             _Dest += _ULast - _UFirst;

  0001e	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1642 :     }

  00022	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
??$_Ucopy@PEBE@?$vector@EV?$allocator@E@std@@@std@@AEAAPEAEPEBE0PEAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBU?$less@_K@std@@@std@@YAAEBU?$less@_K@0@AEBU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBU?$less@_K@std@@@std@@YAAEBU?$less@_K@0@AEBU10@@Z PROC ; std::forward<std::less<unsigned __int64> const &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEBU?$less@_K@std@@@std@@YAAEBU?$less@_K@0@AEBU10@@Z ENDP ; std::forward<std::less<unsigned __int64> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 150  :     }
; 151  : }

  00006	c3		 ret	 0
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00004	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 130  :     if (_Block_size <= _Bytes) {

  00008	48 3b c1	 cmp	 rax, rcx
  0000b	76 28		 jbe	 SHORT $LN16@Allocate_m

; 79   :         return ::operator new(_Bytes);

  0000d	48 8b c8	 mov	 rcx, rax
  00010	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00015	48 8b c8	 mov	 rcx, rax

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00018	48 85 c0	 test	 rax, rax
  0001b	74 11		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0001d	48 83 c0 27	 add	 rax, 39			; 00000027H
  00021	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00025	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN7@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo_noreturn
  00034	cc		 int	 3
$LN16@Allocate_m:

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00035	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  0003a	cc		 int	 3
$LN14@Allocate_m:
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$dead$ = 8
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00000	b8 30 00 00 00	 mov	 eax, 48			; 00000030H

; 66   : }

  00005	c3		 ret	 0
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release, COMDAT

; 1625 :         _First = _Last;

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00004	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1626 :         return _Last;
; 1627 :     }

  00007	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >, COMDAT

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

  00000	c2 00 00	 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 8
_Dest$ = 16
_Al_$ = 24
??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >, COMDAT

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 8b c1	 mov	 rax, rcx
  00006	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0000a	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
  0000e	c3		 ret	 0
??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 970  :         if (_Ptr) {

  00000	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00004	48 85 c9	 test	 rcx, rcx
  00007	74 0a		 je	 SHORT $LN14@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN14@Tree_temp_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 823  :     }

  00013	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Release, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00004	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 962  :     }

  0000c	c3		 ret	 0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map@_K_K_K@std@@SAAEB_KAEB_K0@Z
_TEXT	SEGMENT
_Val$ = 8
__formal$dead$ = 16
?_Extract@?$_In_place_key_extract_map@_K_K_K@std@@SAAEB_KAEB_K0@Z PROC ; std::_In_place_key_extract_map<unsigned __int64,unsigned __int64,unsigned __int64>::_Extract, COMDAT

; 1876 :         return _Val;

  00000	48 8b c1	 mov	 rax, rcx

; 1877 :     }

  00003	c3		 ret	 0
?_Extract@?$_In_place_key_extract_map@_K_K_K@std@@SAAEB_KAEB_K0@Z ENDP ; std::_In_place_key_extract_map<unsigned __int64,unsigned __int64,unsigned __int64>::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z
_TEXT	SEGMENT
this$ = 8
_Loc$ = 16
_Newnode$ = 24
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node, COMDAT

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

$LN57:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 645  :         ++_Mysize;

  0000a	48 ff 41 08	 inc	 QWORD PTR [rcx+8]
  0000e	4d 8b d8	 mov	 r11, r8

; 646  :         const auto _Head  = _Myhead;

  00011	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
  00014	48 8b d9	 mov	 rbx, rcx

; 647  :         _Newnode->_Parent = _Loc._Parent;

  00017	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0001a	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001e	48 3b c7	 cmp	 rax, rdi
  00021	75 1e		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00023	4c 89 07	 mov	 QWORD PTR [rdi], r8

; 710  :         return _Newnode;
; 711  :     }

  00026	49 8b c0	 mov	 rax, r8
  00029	4c 89 47 08	 mov	 QWORD PTR [rdi+8], r8
  0002d	4c 89 47 10	 mov	 QWORD PTR [rdi+16], r8
  00031	41 c6 40 18 01	 mov	 BYTE PTR [r8+24], 1
  00036	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0003b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00040	c3		 ret	 0
$LN5@Insert_nod:

; 650  :             _Head->_Parent   = _Newnode;
; 651  :             _Head->_Right    = _Newnode;
; 652  :             _Newnode->_Color = _Black; // the root is black
; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00041	83 7a 08 00	 cmp	 DWORD PTR [rdx+8], 0
  00045	75 10		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00047	4c 89 58 10	 mov	 QWORD PTR [rax+16], r11

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0004b	48 3b 47 10	 cmp	 rax, QWORD PTR [rdi+16]
  0004f	75 11		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00051	4c 89 5f 10	 mov	 QWORD PTR [rdi+16], r11

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00055	eb 0b		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00057	4c 89 18	 mov	 QWORD PTR [rax], r11

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  0005a	48 3b 07	 cmp	 rax, QWORD PTR [rdi]
  0005d	75 03		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0005f	4c 89 1f	 mov	 QWORD PTR [rdi], r11
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00062	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  00066	49 8b d3	 mov	 rdx, r11
  00069	80 78 18 00	 cmp	 BYTE PTR [rax+24], 0
  0006d	0f 85 f4 01 00
	00		 jne	 $LN3@Insert_nod
  00073	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00080	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00084	4c 8d 4a 08	 lea	 r9, QWORD PTR [rdx+8]
  00088	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  0008c	4c 8d 51 08	 lea	 r10, QWORD PTR [rcx+8]
  00090	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00093	48 3b c8	 cmp	 rcx, rax
  00096	0f 85 e5 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  0009c	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  000a0	80 78 18 00	 cmp	 BYTE PTR [rax+24], 0
  000a4	0f 84 dd 00 00
	00		 je	 $LN54@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  000aa	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  000ae	49 3b d0	 cmp	 rdx, r8
  000b1	75 5b		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  000b3	49 8b 00	 mov	 rax, QWORD PTR [r8]

; 681  :                         _Pnode = _Pnode->_Parent;

  000b6	48 8b d1	 mov	 rdx, rcx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  000b9	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  000bd	49 8b 00	 mov	 rax, QWORD PTR [r8]
  000c0	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  000c4	75 04		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  000c6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  000ca	49 8b 02	 mov	 rax, QWORD PTR [r10]
  000cd	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000d1	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000d4	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  000d8	75 0f		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000da	4c 89 40 08	 mov	 QWORD PTR [rax+8], r8

; 477  :         _Wherenode->_Parent = _Pnode;

  000de	4d 8b ca	 mov	 r9, r10
  000e1	49 89 08	 mov	 QWORD PTR [r8], rcx
  000e4	4d 89 02	 mov	 QWORD PTR [r10], r8
  000e7	eb 28		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000e9	49 8b 02	 mov	 rax, QWORD PTR [r10]
  000ec	48 3b 08	 cmp	 rcx, QWORD PTR [rax]
  000ef	75 0e		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000f1	4c 89 00	 mov	 QWORD PTR [rax], r8

; 477  :         _Wherenode->_Parent = _Pnode;

  000f4	4d 8b ca	 mov	 r9, r10
  000f7	49 89 08	 mov	 QWORD PTR [r8], rcx
  000fa	4d 89 02	 mov	 QWORD PTR [r10], r8
  000fd	eb 12		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000ff	4c 89 40 10	 mov	 QWORD PTR [rax+16], r8

; 477  :         _Wherenode->_Parent = _Pnode;

  00103	4d 8b ca	 mov	 r9, r10
  00106	49 89 08	 mov	 QWORD PTR [r8], rcx
  00109	4d 89 02	 mov	 QWORD PTR [r10], r8
  0010c	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  0010e	4c 8b c1	 mov	 r8, rcx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00111	41 c6 40 18 01	 mov	 BYTE PTR [r8+24], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00116	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00119	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0011d	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  00121	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00124	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00128	4c 8b 01	 mov	 r8, QWORD PTR [rcx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0012b	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  0012f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00132	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00136	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  0013a	75 04		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  0013c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  00140	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00144	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00148	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0014b	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  0014f	75 0d		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00151	4c 89 40 08	 mov	 QWORD PTR [rax+8], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00155	49 89 48 10	 mov	 QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00159	e9 f7 00 00 00	 jmp	 $LN53@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0015e	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00162	48 3b 48 10	 cmp	 rcx, QWORD PTR [rax+16]
  00166	75 0d		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00168	4c 89 40 10	 mov	 QWORD PTR [rax+16], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0016c	49 89 48 10	 mov	 QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00170	e9 e0 00 00 00	 jmp	 $LN53@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	4c 89 00	 mov	 QWORD PTR [rax], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00178	49 89 48 10	 mov	 QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0017c	e9 d4 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00181	80 78 18 00	 cmp	 BYTE PTR [rax+24], 0
  00185	75 1f		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00187	c6 41 18 01	 mov	 BYTE PTR [rcx+24], 1
  0018b	c6 40 18 01	 mov	 BYTE PTR [rax+24], 1
  0018f	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00192	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00196	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
  0019a	49 8b 01	 mov	 rax, QWORD PTR [r9]
  0019d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001a1	e9 b3 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  001a6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  001a9	48 3b d0	 cmp	 rdx, rax
  001ac	75 4d		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  001ae	48 8b d1	 mov	 rdx, rcx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  001b1	48 8b c8	 mov	 rcx, rax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  001b4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001b8	48 89 02	 mov	 QWORD PTR [rdx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  001bb	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  001bf	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  001c3	75 04		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  001c5	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  001c9	49 8b 02	 mov	 rax, QWORD PTR [r10]
  001cc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  001d0	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001d3	48 3b 50 08	 cmp	 rdx, QWORD PTR [rax+8]
  001d7	75 06		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  001d9	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001dd	eb 12		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  001df	49 8b 02	 mov	 rax, QWORD PTR [r10]
  001e2	48 3b 50 10	 cmp	 rdx, QWORD PTR [rax+16]
  001e6	75 06		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  001e8	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 494  :         } else {

  001ec	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  001ee	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  001f1	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 499  :         _Wherenode->_Parent = _Pnode;

  001f5	4d 8b ca	 mov	 r9, r10
  001f8	49 89 0a	 mov	 QWORD PTR [r10], rcx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  001fb	c6 41 18 01	 mov	 BYTE PTR [rcx+24], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  001ff	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00202	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00206	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0020a	49 8b 01	 mov	 rax, QWORD PTR [r9]
  0020d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00211	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  00215	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00218	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0021c	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0021f	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00223	75 04		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00225	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  00229	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0022d	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00231	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00234	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  00238	75 06		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  0023a	4c 89 40 08	 mov	 QWORD PTR [rax+8], r8
  0023e	eb 12		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00240	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00244	48 3b 08	 cmp	 rcx, QWORD PTR [rax]
  00247	75 05		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00249	4c 89 00	 mov	 QWORD PTR [rax], r8

; 472  :         } else {

  0024c	eb 04		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  0024e	4c 89 40 10	 mov	 QWORD PTR [rax+16], r8
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  00252	49 89 08	 mov	 QWORD PTR [r8], rcx
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00255	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
$LN46@Insert_nod:
  00259	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0025d	80 78 18 00	 cmp	 BYTE PTR [rax+24], 0
  00261	0f 84 19 fe ff
	ff		 je	 $LL2@Insert_nod
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  00267	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]

; 710  :         return _Newnode;
; 711  :     }

  0026b	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00270	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00275	c6 40 18 01	 mov	 BYTE PTR [rax+24], 1
  00279	49 8b c3	 mov	 rax, r11
  0027c	c3		 ret	 0
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >, COMDAT

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  0000a	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A, xmm0
  00012	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Check_grow_by_1, COMDAT

; 1614 :     void _Check_grow_by_1() {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00004	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H
  0000e	48 39 05 08 00
	00 00		 cmp	 QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A+8, rax
  00015	74 05		 je	 SHORT $LN6@Check_grow

; 1617 :         }
; 1618 :     }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
$LN6@Check_grow:

; 1616 :             _Throw_tree_length_error();

  0001c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
  00021	cc		 int	 3
$LN4@Check_grow:
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::deallocate, COMDAT

; 660  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

  00000	48 8b ca	 mov	 rcx, rdx

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00008	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAA@XZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >, COMDAT

; 787  :     constexpr allocator() noexcept {}

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges
  00007	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 970  :         if (_Ptr) {

  00000	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00004	48 85 c9	 test	 rcx, rcx
  00007	74 0a		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN10@Tree_temp_:
  00013	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 970  :         if (_Ptr) {

  00000	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00004	48 85 c9	 test	 rcx, rcx
  00007	74 0a		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00013	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Rrotate, COMDAT

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00000	4c 8b 02	 mov	 r8, QWORD PTR [rdx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00003	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00007	48 89 02	 mov	 QWORD PTR [rdx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0000a	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  0000e	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00012	75 04		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00014	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  00018	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0001c	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00020	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00023	48 3b 50 08	 cmp	 rdx, QWORD PTR [rax+8]
  00027	75 0d		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  00029	4c 89 40 08	 mov	 QWORD PTR [rax+8], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0002d	49 89 50 10	 mov	 QWORD PTR [r8+16], rdx
  00031	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  00035	c3		 ret	 0
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00036	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0003a	48 3b 50 10	 cmp	 rdx, QWORD PTR [rax+16]
  0003e	75 0d		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00040	4c 89 40 10	 mov	 QWORD PTR [rax+16], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00044	49 89 50 10	 mov	 QWORD PTR [r8+16], rdx
  00048	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  0004c	c3		 ret	 0
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0004d	4c 89 00	 mov	 QWORD PTR [rax], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00050	49 89 50 10	 mov	 QWORD PTR [r8+16], rdx
  00054	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  00058	c3		 ret	 0
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Lrotate, COMDAT

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00000	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  00004	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00007	48 89 42 10	 mov	 QWORD PTR [rdx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0000b	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0000e	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00012	75 04		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00014	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  00018	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0001c	49 89 40 08	 mov	 QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00020	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00023	48 3b 50 08	 cmp	 rdx, QWORD PTR [rax+8]
  00027	75 0c		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  00029	4c 89 40 08	 mov	 QWORD PTR [rax+8], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0002d	49 89 10	 mov	 QWORD PTR [r8], rdx
  00030	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  00034	c3		 ret	 0
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00035	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00039	48 3b 10	 cmp	 rdx, QWORD PTR [rax]
  0003c	75 0b		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  0003e	4c 89 00	 mov	 QWORD PTR [rax], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  00041	49 89 10	 mov	 QWORD PTR [r8], rdx
  00044	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  00048	c3		 ret	 0
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00049	4c 89 40 10	 mov	 QWORD PTR [rax+16], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0004d	49 89 10	 mov	 QWORD PTR [r8], rdx
  00050	4c 89 42 08	 mov	 QWORD PTR [rdx+8], r8
  00054	c3		 ret	 0
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEBA_KXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::max_size, COMDAT

; 1206 :         return (_STD min)(

  00000	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H

; 1207 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1208 :     }

  0000a	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@QEBA_KXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal, COMDAT

; 1939 :         return _Mypair._Myval2._Get_first();

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 1940 :     }

  00007	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::max_size, COMDAT

; 695  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H

; 696  :     }

  0000a	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::deallocate, COMDAT

; 795  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	48 8b ca	 mov	 rcx, rdx

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00008	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first, COMDAT

; 1343 :         return *this;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 1344 :     }

  00007	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@AEB_K@Z
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
_Keyval$ = 24
??$_Find_lower_bound@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@AEB_K@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Find_lower_bound<unsigned __int64>, COMDAT

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00000	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A
  00007	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
  0000e	48 89 4a 10	 mov	 QWORD PTR [rdx+16], rcx
  00012	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00016	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00019	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  0001d	75 29		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0001f	4d 8b 00	 mov	 r8, QWORD PTR [r8]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00022	48 89 02	 mov	 QWORD PTR [rdx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00025	4c 39 40 20	 cmp	 QWORD PTR [rax+32], r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00029	73 08		 jae	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  0002b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002f	33 c9		 xor	 ecx, ecx

; 1604 :             } else {

  00031	eb 0c		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  00033	48 89 42 10	 mov	 QWORD PTR [rdx+16], rax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00037	b9 01 00 00 00	 mov	 ecx, 1
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003f	89 4a 08	 mov	 DWORD PTR [rdx+8], ecx
  00042	80 78 19 00	 cmp	 BYTE PTR [rax+25], 0
  00046	74 da		 je	 SHORT $LL2@Find_lower
$LN12@Find_lower:

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;
; 1612 :     }

  00048	48 8b c2	 mov	 rax, rdx
  0004b	c3		 ret	 0
??$_Find_lower_bound@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@AEB_K@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Find_lower_bound<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEB_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Bound$ = 16
_Keyval$ = 24
??$_Lower_bound_duplicate@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEB_K@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Lower_bound_duplicate<unsigned __int64>, COMDAT

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00000	80 7a 19 00	 cmp	 BYTE PTR [rdx+25], 0
  00004	75 0c		 jne	 SHORT $LN3@Lower_boun
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00006	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  0000a	49 39 00	 cmp	 QWORD PTR [r8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0000d	72 03		 jb	 SHORT $LN3@Lower_boun
  0000f	b0 01		 mov	 al, 1

; 1592 :     }

  00011	c3		 ret	 0
$LN3@Lower_boun:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00012	32 c0		 xor	 al, al

; 1592 :     }

  00014	c3		 ret	 0
??$_Lower_bound_duplicate@_K@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEB_K@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Lower_bound_duplicate<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &,bool,0>, COMDAT

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax
  00006	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0000a	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z
_TEXT	SEGMENT
this$ = 48
_Al_$ = 56
_Myhead$ = 64
<_Vals_0>$ = 72
<_Vals_1>$ = 80
??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>, COMDAT

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

$LN49:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	48 8b f1	 mov	 rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0001d	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00020	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0

; 79   :         return ::operator new(_Bytes);

  00028	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0002d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 966  :         _Ptr = _Al.allocate(1);

  00032	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00036	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00039	48 89 50 20	 mov	 QWORD PTR [rax+32], rdx
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Vals_1>$[rsp]
  00042	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00045	48 89 50 28	 mov	 QWORD PTR [rax+40], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00049	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0004d	48 89 38	 mov	 QWORD PTR [rax], rdi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00050	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00054	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00058	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0005c	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi

; 809  :         this->_Ptr->_Color = _Red;

  00060	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00064	c6 40 18 00	 mov	 BYTE PTR [rax+24], 0
  00068	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0006c	c6 40 19 00	 mov	 BYTE PTR [rax+25], 0

; 810  :         this->_Ptr->_Isnil = false;
; 811  :     }

  00070	48 8b c6	 mov	 rax, rsi
  00073	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00078	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
??$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
_Myhead$ = 64
<_Vals_0>$ = 72
<_Vals_1>$ = 80
?dtor$1@?0???$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$1
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$1@?0???$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
_Myhead$ = 64
<_Vals_0>$ = 72
<_Vals_1>$ = 80
?dtor$1@?0???$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$1
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$1@?0???$?0AEA_KAEA_K@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@AEA_K2@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > ><unsigned __int64 &,unsigned __int64 &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool,0>, COMDAT

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax
  00006	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0000a	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@1@$$QEA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool><std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@0@AEAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > > >, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@0@AEAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEB_N@std@@YAAEB_NAEB_N@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEB_N@std@@YAAEB_NAEB_N@Z PROC		; std::forward<bool const &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEB_N@std@@YAAEB_NAEB_N@Z ENDP		; std::forward<bool const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@E@std@@YAPEAEPEAE@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@E@std@@YAPEAEPEAE@Z PROC			; std::_Unfancy<unsigned char>, COMDAT

; 266  :     return _Ptr;

  00000	48 8b c1	 mov	 rax, rcx

; 267  : }

  00003	c3		 ret	 0
??$_Unfancy@E@std@@YAPEAEPEAE@Z ENDP			; std::_Unfancy<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@0@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>, COMDAT

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00000	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00003	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00006	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 604  :     return _Old_val;
; 605  : }

  00009	c3		 ret	 0
??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 378  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	48 8b ca	 mov	 rcx, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00008	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z
_TEXT	SEGMENT
_Obj$dead$ = 8
??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>, COMDAT

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_copy<unsigned char const *,std::allocator<unsigned char> >, COMDAT

; 1637 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00010	48 2b d9	 sub	 rbx, rcx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1652 :             _Dest += _ULast - _UFirst;

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]

; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1659 :         _Backout._Emplace_back(*_UFirst);
; 1660 :     }
; 1661 : 
; 1662 :     return _Backout._Release();
; 1663 : }

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Uninitialized_copy@PEBEV?$allocator@E@std@@@std@@YAPEAEQEBE0PEAEAEAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_copy<unsigned char const *,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEBE@std@@YA?A_TAEBQEBE@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEBQEBE@std@@YA?A_TAEBQEBE@Z PROC	; std::_Get_unwrapped<unsigned char const * const &>, COMDAT

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

  00003	c3		 ret	 0
??$_Get_unwrapped@AEBQEBE@std@@YA?A_TAEBQEBE@Z ENDP	; std::_Get_unwrapped<unsigned char const * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>, COMDAT

; 253  :     return __builtin_addressof(_Val);

  00000	48 8b c1	 mov	 rax, rcx

; 254  : }

  00003	c3		 ret	 0
??$addressof@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAXPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Voidify_iter@PEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAXPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * *>, COMDAT

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	48 8b c1	 mov	 rax, rcx

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

  00003	c3		 ret	 0
??$_Voidify_iter@PEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAPEAXPEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEBQEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z
_TEXT	SEGMENT
_Val$ = 8
??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z PROC		; std::_To_address<unsigned char *>, COMDAT

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 3983 : }

  00003	c3		 ret	 0
??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ENDP		; std::_To_address<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CB_K_K@std@@@std@@YAPEAU?$pair@$$CB_K_K@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@U?$pair@$$CB_K_K@std@@@std@@YAPEAU?$pair@$$CB_K_K@0@AEAU10@@Z PROC ; std::addressof<std::pair<unsigned __int64 const ,unsigned __int64> >, COMDAT

; 253  :     return __builtin_addressof(_Val);

  00000	48 8b c1	 mov	 rax, rcx

; 254  : }

  00003	c3		 ret	 0
??$addressof@U?$pair@$$CB_K_K@std@@@std@@YAPEAU?$pair@$$CB_K_K@0@AEAU10@@Z ENDP ; std::addressof<std::pair<unsigned __int64 const ,unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CB_K_K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$dead$ = 16
??$destroy@U?$pair@$$CB_K_K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::destroy<std::pair<unsigned __int64 const ,unsigned __int64> >, COMDAT

; 687  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 688  :         _STD destroy_at(_Ptr);
; 689  : #else // __cpp_lib_constexpr_dynamic_alloc
; 690  :         _Ptr->~_Uty();
; 691  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 692  :     }

  00000	c2 00 00	 ret	 0
??$destroy@U?$pair@$$CB_K_K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::destroy<std::pair<unsigned __int64 const ,unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::nullptr_t>, COMDAT

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00000	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00003	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00006	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 604  :     return _Old_val;
; 605  : }

  00009	c3		 ret	 0
??$exchange@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al_$ = 56
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

$LN35:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0000d	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00010	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0

; 79   :         return ::operator new(_Bytes);

  00018	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 966  :         _Ptr = _Al.allocate(1);

  00022	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 785  :     }

  00026	48 8b c3	 mov	 rax, rbx
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >'::`1'::dtor$0
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >'::`1'::dtor$0
  00000	48 8b 8a 30 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??R?$less@_K@std@@QEBA_NAEB_K0@Z
_TEXT	SEGMENT
this$dead$ = 8
_Left$ = 16
_Right$ = 24
??R?$less@_K@std@@QEBA_NAEB_K0@Z PROC			; std::less<unsigned __int64>::operator(), COMDAT

; 117  :         return _Left < _Right;

  00000	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00003	48 39 02	 cmp	 QWORD PTR [rdx], rax
  00006	0f 92 c0	 setb	 al

; 118  :     }

  00009	c3		 ret	 0
??R?$less@_K@std@@QEBA_NAEB_K0@Z ENDP			; std::less<unsigned __int64>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary, COMDAT

; 1947 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 1948 :     }

  00007	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBU?$less@_K@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
?_Getcomp@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBU?$less@_K@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getcomp, COMDAT

; 1931 :         return _Mypair._Get_first();

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 1932 :     }

  00007	c3		 ret	 0
?_Getcomp@?$_Tree@V?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@@std@@IEBAAEBU?$less@_K@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Allocate, COMDAT

; 964  :     _CONSTEXPR20_DYNALLOC void _Allocate() { // disengage *this, then allocate a new memory block

$LN28:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00009	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0

; 79   :         return ::operator new(_Bytes);

  00011	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00016	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 966  :         _Ptr = _Al.allocate(1);

  0001b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 967  :     }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5b		 pop	 rbx
  00024	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Al_$ = 16
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >, COMDAT

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 8b c1	 mov	 rax, rcx
  00006	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0
  0000e	c3		 ret	 0
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@_K@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
?_Get_first@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@_K@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Get_first, COMDAT

; 1343 :         return *this;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 1344 :     }

  00007	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@_K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@_K@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned __int64>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$_Kfn@$$CB_K_K@?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@SAAEB_KAEBU?$pair@$$CB_K_K@1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$_Kfn@$$CB_K_K@?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@SAAEB_KAEBU?$pair@$$CB_K_K@1@@Z PROC ; std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0>::_Kfn<unsigned __int64 const ,unsigned __int64>, COMDAT

; 68   :         return _Val.first;

  00000	48 8b c1	 mov	 rax, rcx

; 69   :     }

  00003	c3		 ret	 0
??$_Kfn@$$CB_K_K@?$_Tmap_traits@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@$0A@@std@@SAAEB_KAEBU?$pair@$$CB_K_K@1@@Z ENDP ; std::_Tmap_traits<unsigned __int64,unsigned __int64,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,unsigned __int64> >,0>::_Kfn<unsigned __int64 const ,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CB_K_K@std@@AEA_KAEA_K@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@AEA_K2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
<_Args_1>$ = 32
??$construct@U?$pair@$$CB_K_K@std@@AEA_KAEA_K@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@AEA_K2@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::construct<std::pair<unsigned __int64 const ,unsigned __int64>,unsigned __int64 &,unsigned __int64 &>, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00003	48 89 02	 mov	 QWORD PTR [rdx], rax
  00006	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00009	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  0000d	c3		 ret	 0
??$construct@U?$pair@$$CB_K_K@std@@AEA_KAEA_K@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@1@QEAU?$pair@$$CB_K_K@1@AEA_K2@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> > >::construct<std::pair<unsigned __int64 const ,unsigned __int64>,unsigned __int64 &,unsigned __int64 &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@0@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 150  :     }
; 151  : }

  00006	c3		 ret	 0
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *,std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YA$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YA$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@PEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@std@@@std@@YA$$QEAPEAU?$_Tree_node@U?$pair@$$CB_K_K@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned __int64 const ,unsigned __int64>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z
_TEXT	SEGMENT
_It$ = 8
??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z PROC		; std::_Voidify_iter<unsigned char *>, COMDAT

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	48 8b c1	 mov	 rax, rcx

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

  00003	c3		 ret	 0
??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z ENDP		; std::_Voidify_iter<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z PROC	; std::_Copy_memmove<unsigned char const *,unsigned char *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00010	48 2b d9	 sub	 rbx, rcx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Copy_memmove@PEBEPEAE@std@@YAPEAEPEBE0PEAE@Z ENDP	; std::_Copy_memmove<unsigned char const *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PEBE@std@@YA?A_PAEBQEBE@Z
_TEXT	SEGMENT
_Val$ = 8
??$_To_address@PEBE@std@@YA?A_PAEBQEBE@Z PROC		; std::_To_address<unsigned char const *>, COMDAT

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 3983 : }

  00003	c3		 ret	 0
??$_To_address@PEBE@std@@YA?A_PAEBQEBE@Z ENDP		; std::_To_address<unsigned char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@AEBE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEBE@Z
_TEXT	SEGMENT
this$ = 8
<_Vals_0>$ = 16
??$_Emplace_back@AEBE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEBE@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char const &>, COMDAT

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00000	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00004	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00007	41 88 00	 mov	 BYTE PTR [r8], al

; 1621 :         ++_Last;

  0000a	48 ff 41 08	 inc	 QWORD PTR [rcx+8]

; 1622 :     }

  0000e	c3		 ret	 0
??$_Emplace_back@AEBE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEBE@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$dead$ = 8
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > const >, COMDAT

; 253  :     return __builtin_addressof(_Val);

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?pmem_ranges@util@@3V?$map@_K_KU?$less@_K@std@@V?$allocator@U?$pair@$$CB_K_K@std@@@2@@std@@A ; util::pmem_ranges

; 254  : }

  00007	c3		 ret	 0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_K_K@std@@@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned __int64 const ,unsigned __int64> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$pair@$$CB_K_K@std@@@std@@YAPEAXPEAU?$pair@$$CB_K_K@0@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Voidify_iter@PEAU?$pair@$$CB_K_K@std@@@std@@YAPEAXPEAU?$pair@$$CB_K_K@0@@Z PROC ; std::_Voidify_iter<std::pair<unsigned __int64 const ,unsigned __int64> *>, COMDAT

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	48 8b c1	 mov	 rax, rcx

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

  00003	c3		 ret	 0
??$_Voidify_iter@PEAU?$pair@$$CB_K_K@std@@@std@@YAPEAXPEAU?$pair@$$CB_K_K@0@@Z ENDP ; std::_Voidify_iter<std::pair<unsigned __int64 const ,unsigned __int64> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AEA_KAEA_K$0A@@?$pair@$$CB_K_K@std@@QEAA@AEA_K0@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0AEA_KAEA_K$0A@@?$pair@$$CB_K_K@std@@QEAA@AEA_K0@Z PROC ; std::pair<unsigned __int64 const ,unsigned __int64>::pair<unsigned __int64 const ,unsigned __int64><unsigned __int64 &,unsigned __int64 &,0>, COMDAT

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax
  00006	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00009	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0AEA_KAEA_K$0A@@?$pair@$$CB_K_K@std@@QEAA@AEA_K0@Z ENDP ; std::pair<unsigned __int64 const ,unsigned __int64>::pair<unsigned __int64 const ,unsigned __int64><unsigned __int64 &,unsigned __int64 &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBE@std@@YAAEBEAEBE@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBE@std@@YAAEBEAEBE@Z PROC			; std::forward<unsigned char const &>, COMDAT

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1387 : }

  00003	c3		 ret	 0
??$forward@AEBE@std@@YAAEBEAEBE@Z ENDP			; std::forward<unsigned char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@EAEBE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEBE@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@EAEBE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEBE@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char const &>, COMDAT

; 674  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00004	88 02		 mov	 BYTE PTR [rdx], al

; 675  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 676  :         if (_STD is_constant_evaluated()) {
; 677  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 678  :         } else
; 679  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 680  :         {
; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 682  :         }
; 683  :     }

  00006	c3		 ret	 0
??$construct@EAEBE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEBE@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char const &>
_TEXT	ENDS
END
