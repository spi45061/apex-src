; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30147.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@ ; `string'
PUBLIC	??_C@_1BM@LEKEAPIM@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register@ ; `string'
PUBLIC	??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5@ ; `string'
PUBLIC	??_C@_06BNDBNCGN@vs_4_0@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main@				; `string'
PUBLIC	??_C@_08JPMAAECC@POSITION@			; `string'
PUBLIC	??_C@_08CMDKBPJM@TEXCOORD@			; `string'
PUBLIC	??_C@_05DPNLPLKI@COLOR@				; `string'
PUBLIC	??_C@_06HOOBOHFH@ps_4_0@			; `string'
PUBLIC	??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5@ ; `string'
PUBLIC	??_C@_1JK@LNFGNECA@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_0BA@OFLFAAJI@imgui_impl_dx11@		; `string'
PUBLIC	??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown@ ; `string'
PUBLIC	??_C@_1IG@KNKGIPNF@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5@ ; `string'
PUBLIC	??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Ini@ ; `string'
PUBLIC	??_C@_1GC@GNNOEIGA@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd@ ; `string'
PUBLIC	_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
PUBLIC	_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
PUBLIC	_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
EXTRN	__imp_D3DCompile:PROC
;	COMDAT ?vertexShader@?6??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
CONST	SEGMENT
?vertexShader@?6??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB DQ FLAT:??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register@ ; `ImGui_ImplDX11_CreateDeviceObjects'::`7'::vertexShader
CONST	ENDS
;	COMDAT _GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
CONST	SEGMENT
_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369 DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT ?pixelShader@?BB@??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
CONST	SEGMENT
?pixelShader@?BB@??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB DQ FLAT:??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5@ ; `ImGui_ImplDX11_CreateDeviceObjects'::`17'::pixelShader
CONST	ENDS
;	COMDAT _GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
CONST	SEGMENT
_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0 DD 02411e7e1H
	DW	012acH
	DW	04ccfH
	DB	0bdH
	DB	014H
	DB	097H
	DB	098H
	DB	0e8H
	DB	053H
	DB	04dH
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
CONST	SEGMENT
_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c DD 054ec77faH
	DW	01377H
	DW	044e6H
	DB	08cH
	DB	032H
	DB	088H
	DB	0fdH
	DB	05fH
	DB	044H
	DB	0c8H
	DB	04cH
CONST	ENDS
;	COMDAT ??_C@_1GC@GNNOEIGA@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd@
CONST	SEGMENT
??_C@_1GC@GNNOEIGA@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'D', 00H, 'i'
	DB	00H, 'd', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'I', 00H, 'm'
	DB	00H, 'G', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'I', 00H, 'm', 00H
	DB	'p', 00H, 'l', 00H, 'D', 00H, 'X', 00H, '1', 00H, '1', 00H, '_'
	DB	00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, '(', 00H, ')', 00H
	DB	'?', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Ini@
CONST	SEGMENT
??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Ini@ DB 'Did you call I'
	DB	'mGui_ImplDX11_Init()?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1IG@KNKGIPNF@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5@
CONST	SEGMENT
??_C@_1IG@KNKGIPNF@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'N', 00H, 'o'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'a', 00H, 'c'
	DB	00H, 'k', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'y', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H
	DB	't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, '?', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown@
CONST	SEGMENT
??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown@ DB 'No renderer b'
	DB	'ackend to shutdown, or already shutdown?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFLFAAJI@imgui_impl_dx11@
CONST	SEGMENT
??_C@_0BA@OFLFAAJI@imgui_impl_dx11@ DB 'imgui_impl_dx11', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@LNFGNECA@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe@
CONST	SEGMENT
??_C@_1JK@LNFGNECA@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe@ DB 'i'
	DB	00H, 'o', 00H, '.', 00H, 'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'A', 00H, 'l', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5@
CONST	SEGMENT
??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5@ DB 'Already initi'
	DB	'alized a renderer backend!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOOBOHFH@ps_4_0@
CONST	SEGMENT
??_C@_06HOOBOHFH@ps_4_0@ DB 'ps_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPNLPLKI@COLOR@
CONST	SEGMENT
??_C@_05DPNLPLKI@COLOR@ DB 'COLOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMDKBPJM@TEXCOORD@
CONST	SEGMENT
??_C@_08CMDKBPJM@TEXCOORD@ DB 'TEXCOORD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPMAAECC@POSITION@
CONST	SEGMENT
??_C@_08JPMAAECC@POSITION@ DB 'POSITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main@
CONST	SEGMENT
??_C@_04GHJNJNPO@main@ DB 'main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNDBNCGN@vs_4_0@
CONST	SEGMENT
??_C@_06BNDBNCGN@vs_4_0@ DB 'vs_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5@
CONST	SEGMENT
??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5@ DB 's'
	DB	'truct PS_INPUT            {            float4 pos : SV_POSITI'
	DB	'ON;            float4 col : COLOR0;            float2 uv  : T'
	DB	'EXCOORD0;            };            sampler sampler0;         '
	DB	'   Texture2D texture0;                        float4 main(PS_'
	DB	'INPUT input) : SV_Target            {            float4 out_c'
	DB	'ol = input.col * texture0.Sample(sampler0, input.uv);        '
	DB	'     return out_col;             }', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register@
CONST	SEGMENT
??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register@ DB 'cbuffer vert'
	DB	'exBuffer : register(b0)             {              float4x4 P'
	DB	'rojectionMatrix;             };            struct VS_INPUT   '
	DB	'         {              float2 pos : POSITION;              f'
	DB	'loat4 col : COLOR0;              float2 uv  : TEXCOORD0;     '
	DB	'       };                        struct PS_INPUT            {'
	DB	'              float4 pos : SV_POSITION;              float4 c'
	DB	'ol : COLOR0;              float2 uv  : TEXCOORD0;            '
	DB	'};                        PS_INPUT main(VS_INPUT input)      '
	DB	'      {              PS_INPUT output;              output.pos'
	DB	' = mul( ProjectionMatrix, float4(input.pos.xy, 0.f, 1.f));   '
	DB	'           output.col = input.col;              output.uv  = '
	DB	'input.uv;              return output;            }', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@LEKEAPIM@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BM@LEKEAPIM@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'p'
	DB	00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
CONST	SEGMENT
??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'D'
	DB	00H, 'o', 00H, 'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	'd', 00H, 's', 00H, '\', 00H, 'A', 00H, 'p', 00H, 'e', 00H, 'x'
	DB	00H, 'I', 00H, 's', 00H, 'A', 00H, 's', 00H, 's', 00H, 'W', 00H
	DB	'i', 00H, 't', 00H, 'h', 00H, 'E', 00H, 'A', 00H, 'C', 00H, '-'
	DB	00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'A', 00H
	DB	'p', 00H, 'e', 00H, 'x', 00H, 'I', 00H, 's', 00H, 'A', 00H, 's'
	DB	00H, 's', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'E', 00H
	DB	'A', 00H, 'C', 00H, '-', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n'
	DB	00H, '\', 00H, 'I', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H
	DB	'\', 00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '_'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, '_', 00H, 'd', 00H
	DB	'x', 00H, '1', 00H, '1', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
PUBLIC	??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z ; IM_DELETE<ImGui_ImplDX11_Data>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z ; IID_PPV_ARGS_Helper<IDXGIFactory>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z ; IID_PPV_ARGS_Helper<IDXGIAdapter>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z ; IID_PPV_ARGS_Helper<IDXGIDevice>
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?ImGui_ImplDX11_NewFrame@@YAXXZ			; ImGui_ImplDX11_NewFrame
PUBLIC	?ImGui_ImplDX11_Shutdown@@YAXXZ			; ImGui_ImplDX11_Shutdown
PUBLIC	?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_Init
PUBLIC	?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ	; ImGui_ImplDX11_InvalidateDeviceObjects
PUBLIC	?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ	; ImGui_ImplDX11_CreateDeviceObjects
PUBLIC	?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z ; ImGui_ImplDX11_RenderDrawData
PUBLIC	??0ImGui_ImplDX11_Data@@QEAA@XZ			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data
PUBLIC	?SetTexID@ImFontAtlas@@QEAAXPEAX@Z		; ImFontAtlas::SetTexID
PUBLIC	?GetTexID@ImDrawCmd@@QEBAPEAXXZ			; ImDrawCmd::GetTexID
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z DD imagerel $LN6
	DD	imagerel $LN6+69
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_NewFrame@@YAXXZ DD imagerel $LN16
	DD	imagerel $LN16+79
	DD	imagerel $unwind$?ImGui_ImplDX11_NewFrame@@YAXXZ
$pdata$?ImGui_ImplDX11_Shutdown@@YAXXZ DD imagerel $LN33
	DD	imagerel $LN33+218
	DD	imagerel $unwind$?ImGui_ImplDX11_Shutdown@@YAXXZ
$pdata$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel $LN28
	DD	imagerel $LN28+396
	DD	imagerel $unwind$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
$pdata$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ DD imagerel $LN29
	DD	imagerel $LN29+318
	DD	imagerel $unwind$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ
$pdata$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ DD imagerel $LN40
	DD	imagerel $LN40+1403
	DD	imagerel $unwind$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ
$pdata$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ DD imagerel ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ
	DD	imagerel ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ+436
	DD	imagerel $unwind$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ
$pdata$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104
	DD	imagerel $LN104+72
	DD	imagerel $unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$3$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+72
	DD	imagerel $LN104+269
	DD	imagerel $chain$3$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$4$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+269
	DD	imagerel $LN104+490
	DD	imagerel $chain$4$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$5$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+490
	DD	imagerel $LN104+729
	DD	imagerel $chain$5$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$7$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+729
	DD	imagerel $LN104+1973
	DD	imagerel $chain$7$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$8$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+1973
	DD	imagerel $LN104+2633
	DD	imagerel $chain$8$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$9$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+2633
	DD	imagerel $LN104+2641
	DD	imagerel $chain$9$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$10$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+2641
	DD	imagerel $LN104+2673
	DD	imagerel $chain$10$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$11$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN104+2673
	DD	imagerel $LN104+2698
	DD	imagerel $chain$11$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$pdata$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z DD imagerel ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z
	DD	imagerel ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z+493
	DD	imagerel $unwind$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_NewFrame@@YAXXZ DD 020601H
	DD	030023206H
$unwind$?ImGui_ImplDX11_Shutdown@@YAXXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 050d01H
	DD	07009420dH
	DD	050076008H
	DD	03006H
$unwind$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ DD 0d6119H
	DD	053c461H
	DD	0527459H
	DD	0516451H
	DD	0503449H
	DD	04c0115H
	DD	0e004f006H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ DD 0b2f19H
	DD	01be421H
	DD	01a7421H
	DD	0196421H
	DD	0183421H
	DD	0160121H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 042919H
	DD	03810118H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	01bc8H
$chain$3$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 082a21H
	DD	037ef42aH
	DD	037fe41bH
	DD	0380d410H
	DD	03867408H
	DD	imagerel $LN104
	DD	imagerel $LN104+72
	DD	imagerel $unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$4$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 020821H
	DD	03853408H
	DD	imagerel $LN104+72
	DD	imagerel $LN104+269
	DD	imagerel $chain$3$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$5$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 020821H
	DD	0387c408H
	DD	imagerel $LN104+269
	DD	imagerel $LN104+490
	DD	imagerel $chain$4$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$7$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 041321H
	DD	01bd7813H
	DD	01be6808H
	DD	imagerel $LN104+490
	DD	imagerel $LN104+729
	DD	imagerel $chain$5$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$8$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 021H
	DD	imagerel $LN104+490
	DD	imagerel $LN104+729
	DD	imagerel $chain$5$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$9$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 021H
	DD	imagerel $LN104+269
	DD	imagerel $LN104+490
	DD	imagerel $chain$4$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$10$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 021H
	DD	imagerel $LN104+72
	DD	imagerel $LN104+269
	DD	imagerel $chain$3$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$chain$11$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 021H
	DD	imagerel $LN104
	DD	imagerel $LN104+72
	DD	imagerel $unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
$unwind$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z DD 041919H
	DD	012340aH
	DD	07006d20aH
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
;	COMDAT ?GetTexID@ImDrawCmd@@QEBAPEAXXZ
_TEXT	SEGMENT
this$ = 8
?GetTexID@ImDrawCmd@@QEBAPEAXXZ PROC			; ImDrawCmd::GetTexID, COMDAT

; 2407 :     inline ImTextureID GetTexID() const { return TextureId; }

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	c3		 ret	 0
?GetTexID@ImDrawCmd@@QEBAPEAXXZ ENDP			; ImDrawCmd::GetTexID
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
;	COMDAT ?SetTexID@ImFontAtlas@@QEAAXPEAX@Z
_TEXT	SEGMENT
this$ = 8
id$ = 16
?SetTexID@ImFontAtlas@@QEAAXPEAX@Z PROC			; ImFontAtlas::SetTexID, COMDAT

; 2765 :     void                        SetTexID(ImTextureID id) { TexID = id; }

  00000	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  00004	c3		 ret	 0
?SetTexID@ImFontAtlas@@QEAAXPEAX@Z ENDP			; ImFontAtlas::SetTexID
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
;	COMDAT ??0ImGui_ImplDX11_Data@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0ImGui_ImplDX11_Data@@QEAA@XZ PROC			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data, COMDAT

; 63   :     ImGui_ImplDX11_Data() { memset(this, 0, sizeof(*this)); VertexBufferSize = 5000; IndexBufferSize = 10000; }

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	48 8b c1	 mov	 rax, rcx
  00006	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  00009	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  0000d	0f 11 41 20	 movups	 XMMWORD PTR [rcx+32], xmm0
  00011	0f 11 41 30	 movups	 XMMWORD PTR [rcx+48], xmm0
  00015	0f 11 41 40	 movups	 XMMWORD PTR [rcx+64], xmm0
  00019	0f 11 41 50	 movups	 XMMWORD PTR [rcx+80], xmm0
  0001d	0f 11 41 60	 movups	 XMMWORD PTR [rcx+96], xmm0
  00021	c7 41 70 88 13
	00 00		 mov	 DWORD PTR [rcx+112], 5000 ; 00001388H
  00028	c7 41 74 10 27
	00 00		 mov	 DWORD PTR [rcx+116], 10000 ; 00002710H
  0002f	c3		 ret	 0
??0ImGui_ImplDX11_Data@@QEAA@XZ ENDP			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ PROC ; ImGui_ImplDX11_GetBackendData

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00007	48 85 c0	 test	 rax, rax
  0000a	74 08		 je	 SHORT $LN3@ImGui_Impl
  0000c	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]

; 76   : }

  00013	c3		 ret	 0
$LN3@ImGui_Impl:
  00014	c3		 ret	 0
?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ENDP ; ImGui_ImplDX11_GetBackendData
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
offset$ = 48
stride$ = 52
vp$ = 56
blend_factor$ = 80
__$ArrayPad$ = 96
draw_data$ = 128
ctx$ = 136
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z PROC ; ImGui_ImplDX11_SetupRenderState

; 80   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui

; 80   : {

  00020	48 8b fa	 mov	 rdi, rdx

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00023	48 85 c0	 test	 rax, rax
  00026	74 09		 je	 SHORT $LN5@ImGui_Impl
  00028	48 8b 98 98 00
	00 00		 mov	 rbx, QWORD PTR [rax+152]
  0002f	eb 02		 jmp	 SHORT $LN6@ImGui_Impl
$LN5@ImGui_Impl:
  00031	33 db		 xor	 ebx, ebx
$LN6@ImGui_Impl:

; 81   :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 82   : 
; 83   :     // Setup viewport
; 84   :     D3D11_VIEWPORT vp;
; 85   :     memset(&vp, 0, sizeof(D3D11_VIEWPORT));
; 86   :     vp.Width = draw_data->DisplaySize.x;
; 87   :     vp.Height = draw_data->DisplaySize.y;

  00033	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [rcx+36]

; 88   :     vp.MinDepth = 0.0f;
; 89   :     vp.MaxDepth = 1.0f;
; 90   :     vp.TopLeftX = vp.TopLeftY = 0;
; 91   :     ctx->RSSetViewports(1, &vp);

  00038	4c 8d 44 24 38	 lea	 r8, QWORD PTR vp$[rsp]
  0003d	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  00042	48 8b cf	 mov	 rcx, rdi
  00045	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00048	ba 01 00 00 00	 mov	 edx, 1
  0004d	f3 0f 11 4c 24
	44		 movss	 DWORD PTR vp$[rsp+12], xmm1
  00053	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0005b	f3 0f 11 4c 24
	4c		 movss	 DWORD PTR vp$[rsp+20], xmm1
  00061	f3 0f 11 44 24
	40		 movss	 DWORD PTR vp$[rsp+8], xmm0
  00067	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR vp$[rsp+16], 0
  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR vp$[rsp], 0
  00078	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 92   : 
; 93   :     // Setup shader and vertex buffers
; 94   :     unsigned int stride = sizeof(ImDrawVert);
; 95   :     unsigned int offset = 0;
; 96   :     ctx->IASetInputLayout(bd->pInputLayout);

  0007e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00081	48 8b cf	 mov	 rcx, rdi
  00084	c7 44 24 34 14
	00 00 00	 mov	 DWORD PTR stride$[rsp], 20
  0008c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR offset$[rsp], 0
  00094	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  00098	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 97   :     ctx->IASetVertexBuffers(0, 1, &bd->pVB, &stride, &offset);

  0009e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000a1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR offset$[rsp]
  000a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ab	4c 8d 4b 18	 lea	 r9, QWORD PTR [rbx+24]
  000af	33 d2		 xor	 edx, edx
  000b1	48 8d 4c 24 34	 lea	 rcx, QWORD PTR stride$[rsp]
  000b6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000bb	48 8b cf	 mov	 rcx, rdi
  000be	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  000c2	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]

; 98   :     ctx->IASetIndexBuffer(bd->pIB, sizeof(ImDrawIdx) == 2 ? DXGI_FORMAT_R16_UINT : DXGI_FORMAT_R32_UINT, 0);

  000c8	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000cb	45 33 c9	 xor	 r9d, r9d
  000ce	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  000d2	48 8b cf	 mov	 rcx, rdi
  000d5	45 8d 41 39	 lea	 r8d, QWORD PTR [r9+57]
  000d9	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]

; 99   :     ctx->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

  000df	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000e2	ba 04 00 00 00	 mov	 edx, 4
  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 100  :     ctx->VSSetShader(bd->pVertexShader, NULL, 0);

  000f0	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000f3	45 33 c9	 xor	 r9d, r9d
  000f6	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  000fa	45 33 c0	 xor	 r8d, r8d
  000fd	48 8b cf	 mov	 rcx, rdi
  00100	ff 50 58	 call	 QWORD PTR [rax+88]

; 101  :     ctx->VSSetConstantBuffers(0, 1, &bd->pVertexConstantBuffer);

  00103	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00106	4c 8d 4b 38	 lea	 r9, QWORD PTR [rbx+56]
  0010a	33 d2		 xor	 edx, edx
  0010c	48 8b cf	 mov	 rcx, rdi
  0010f	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00113	ff 50 38	 call	 QWORD PTR [rax+56]

; 102  :     ctx->PSSetShader(bd->pPixelShader, NULL, 0);

  00116	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00119	45 33 c9	 xor	 r9d, r9d
  0011c	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  00120	45 33 c0	 xor	 r8d, r8d
  00123	48 8b cf	 mov	 rcx, rdi
  00126	ff 50 48	 call	 QWORD PTR [rax+72]

; 103  :     ctx->PSSetSamplers(0, 1, &bd->pFontSampler);

  00129	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0012c	4c 8d 4b 48	 lea	 r9, QWORD PTR [rbx+72]
  00130	33 d2		 xor	 edx, edx
  00132	48 8b cf	 mov	 rcx, rdi
  00135	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00139	ff 50 50	 call	 QWORD PTR [rax+80]

; 104  :     ctx->GSSetShader(NULL, NULL, 0);

  0013c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0013f	45 33 c9	 xor	 r9d, r9d
  00142	45 33 c0	 xor	 r8d, r8d
  00145	33 d2		 xor	 edx, edx
  00147	48 8b cf	 mov	 rcx, rdi
  0014a	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 105  :     ctx->HSSetShader(NULL, NULL, 0); // In theory we should backup and restore this as well.. very infrequently used..

  00150	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00153	45 33 c9	 xor	 r9d, r9d
  00156	45 33 c0	 xor	 r8d, r8d
  00159	33 d2		 xor	 edx, edx
  0015b	48 8b cf	 mov	 rcx, rdi
  0015e	ff 90 e0 01 00
	00		 call	 QWORD PTR [rax+480]

; 106  :     ctx->DSSetShader(NULL, NULL, 0); // In theory we should backup and restore this as well.. very infrequently used..

  00164	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00167	45 33 c9	 xor	 r9d, r9d
  0016a	45 33 c0	 xor	 r8d, r8d
  0016d	33 d2		 xor	 edx, edx
  0016f	48 8b cf	 mov	 rcx, rdi
  00172	ff 90 00 02 00
	00		 call	 QWORD PTR [rax+512]

; 107  :     ctx->CSSetShader(NULL, NULL, 0); // In theory we should backup and restore this as well.. very infrequently used..

  00178	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0017b	45 33 c9	 xor	 r9d, r9d
  0017e	45 33 c0	 xor	 r8d, r8d
  00181	33 d2		 xor	 edx, edx
  00183	48 8b cf	 mov	 rcx, rdi
  00186	ff 90 28 02 00
	00		 call	 QWORD PTR [rax+552]

; 108  : 
; 109  :     // Setup blend state
; 110  :     const float blend_factor[4] = { 0.f, 0.f, 0.f, 0.f };
; 111  :     ctx->OMSetBlendState(bd->pBlendState, blend_factor, 0xffffffff);

  0018c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0018f	4c 8d 44 24 50	 lea	 r8, QWORD PTR blend_factor$[rsp]
  00194	0f 57 c0	 xorps	 xmm0, xmm0
  00197	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  0019d	0f 11 44 24 50	 movups	 XMMWORD PTR blend_factor$[rsp], xmm0
  001a2	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  001a6	48 8b cf	 mov	 rcx, rdi
  001a9	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 112  :     ctx->OMSetDepthStencilState(bd->pDepthStencilState, 0);

  001af	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001b2	45 33 c0	 xor	 r8d, r8d
  001b5	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  001b9	48 8b cf	 mov	 rcx, rdi
  001bc	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 113  :     ctx->RSSetState(bd->pRasterizerState);

  001c2	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001c5	48 8b cf	 mov	 rcx, rdi
  001c8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001cc	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 114  : }

  001d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d7	48 33 cc	 xor	 rcx, rsp
  001da	e8 00 00 00 00	 call	 __security_check_cookie
  001df	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  001e7	48 83 c4 70	 add	 rsp, 112		; 00000070H
  001eb	5f		 pop	 rdi
  001ec	c3		 ret	 0
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ENDP ; ImGui_ImplDX11_SetupRenderState
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
n$1$ = 48
texture_srv$1 = 56
mapped_resource$2 = 56
global_idx_offset$1$ = 72
global_vtx_offset$1$ = 76
ctx$1$ = 80
tv1751 = 80
draw_data$GSCopy$1$ = 88
vtx_resource$ = 96
idx_resource$ = 112
old$ = 128
r$3 = 7088
desc$4 = 7088
desc$5 = 7088
__$ArrayPad$ = 7112
draw_data$ = 7200
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z PROC ; ImGui_ImplDX11_RenderDrawData

; 118  : {

$LN104:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	48 8d ac 24 f8
	e4 ff ff	 lea	 rbp, QWORD PTR [rsp-6920]
  0000b	b8 08 1c 00 00	 mov	 eax, 7176		; 00001c08H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 85 c8 1a
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  00029	0f 57 c0	 xorps	 xmm0, xmm0
  0002c	48 89 4c 24 58	 mov	 QWORD PTR draw_data$GSCopy$1$[rsp], rcx

; 119  :     // Avoid rendering when minimized
; 120  :     if (draw_data->DisplaySize.x <= 0.0f || draw_data->DisplaySize.y <= 0.0f)

  00031	0f 2f 41 20	 comiss	 xmm0, DWORD PTR [rcx+32]
  00035	48 8b f1	 mov	 rsi, rcx
  00038	0f 83 33 0a 00
	00		 jae	 $LN18@ImGui_Impl
  0003e	0f 2f 41 24	 comiss	 xmm0, DWORD PTR [rcx+36]
  00042	0f 83 29 0a 00
	00		 jae	 $LN18@ImGui_Impl

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00048	48 89 bc 24 30
	1c 00 00	 mov	 QWORD PTR [rsp+7216], rdi
  00050	4c 89 ac 24 00
	1c 00 00	 mov	 QWORD PTR [rsp+7168], r13
  00058	45 33 ed	 xor	 r13d, r13d
  0005b	4c 89 b4 24 f8
	1b 00 00	 mov	 QWORD PTR [rsp+7160], r14
  00063	4c 8b 35 00 00
	00 00		 mov	 r14, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  0006a	4c 89 bc 24 f0
	1b 00 00	 mov	 QWORD PTR [rsp+7152], r15
  00072	4d 85 f6	 test	 r14, r14
  00075	74 09		 je	 SHORT $LN53@ImGui_Impl
  00077	4d 8b b6 98 00
	00 00		 mov	 r14, QWORD PTR [r14+152]
  0007e	eb 03		 jmp	 SHORT $LN54@ImGui_Impl
$LN53@ImGui_Impl:
  00080	4d 8b f5	 mov	 r14, r13
$LN54@ImGui_Impl:

; 121  :         return;
; 122  : 
; 123  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 124  :     ID3D11DeviceContext* ctx = bd->pd3dDeviceContext;
; 125  : 
; 126  :     // Create and grow vertex/index buffers if needed
; 127  :     if (!bd->pVB || bd->VertexBufferSize < draw_data->TotalVtxCount)

  00083	49 8b 4e 18	 mov	 rcx, QWORD PTR [r14+24]
  00087	49 8b 7e 08	 mov	 rdi, QWORD PTR [r14+8]
  0008b	48 89 7c 24 50	 mov	 QWORD PTR ctx$1$[rsp], rdi
  00090	48 85 c9	 test	 rcx, rcx
  00093	74 18		 je	 SHORT $LN93@ImGui_Impl
  00095	8b 46 0c	 mov	 eax, DWORD PTR [rsi+12]
  00098	41 39 46 70	 cmp	 DWORD PTR [r14+112], eax
  0009c	7d 6b		 jge	 SHORT $LN22@ImGui_Impl

; 128  :     {
; 129  :         if (bd->pVB) { bd->pVB->Release(); bd->pVB = NULL; }

  0009e	48 85 c9	 test	 rcx, rcx
  000a1	74 0a		 je	 SHORT $LN93@ImGui_Impl
  000a3	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000a6	ff 50 10	 call	 QWORD PTR [rax+16]
  000a9	4d 89 6e 18	 mov	 QWORD PTR [r14+24], r13
$LN93@ImGui_Impl:

; 130  :         bd->VertexBufferSize = draw_data->TotalVtxCount + 5000;

  000ad	8b 46 0c	 mov	 eax, DWORD PTR [rsi+12]

; 131  :         D3D11_BUFFER_DESC desc;
; 132  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));
; 133  :         desc.Usage = D3D11_USAGE_DYNAMIC;
; 134  :         desc.ByteWidth = bd->VertexBufferSize * sizeof(ImDrawVert);
; 135  :         desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
; 136  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
; 137  :         desc.MiscFlags = 0;
; 138  :         if (bd->pd3dDevice->CreateBuffer(&desc, NULL, &bd->pVB) < 0)

  000b0	4d 8d 4e 18	 lea	 r9, QWORD PTR [r14+24]
  000b4	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  000b7	48 8d 95 b0 1a
	00 00		 lea	 rdx, QWORD PTR desc$5[rbp-256]
  000be	05 88 13 00 00	 add	 eax, 5000		; 00001388H
  000c3	4c 89 ad c0 1a
	00 00		 mov	 QWORD PTR desc$5[rbp-240], r13
  000ca	41 89 46 70	 mov	 DWORD PTR [r14+112], eax
  000ce	45 33 c0	 xor	 r8d, r8d
  000d1	c7 85 b4 1a 00
	00 02 00 00 00	 mov	 DWORD PTR desc$5[rbp-252], 2
  000db	c7 85 b8 1a 00
	00 01 00 00 00	 mov	 DWORD PTR desc$5[rbp-248], 1
  000e5	8d 04 80	 lea	 eax, DWORD PTR [rax+rax*4]
  000e8	c7 85 bc 1a 00
	00 00 00 01 00	 mov	 DWORD PTR desc$5[rbp-244], 65536 ; 00010000H
  000f2	c1 e0 02	 shl	 eax, 2
  000f5	89 85 b0 1a 00
	00		 mov	 DWORD PTR desc$5[rbp-256], eax
  000fb	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000fe	ff 50 18	 call	 QWORD PTR [rax+24]
  00101	85 c0		 test	 eax, eax
  00103	0f 88 48 09 00
	00		 js	 $LN98@ImGui_Impl
$LN22@ImGui_Impl:

; 139  :             return;
; 140  :     }
; 141  :     if (!bd->pIB || bd->IndexBufferSize < draw_data->TotalIdxCount)

  00109	49 8b 4e 20	 mov	 rcx, QWORD PTR [r14+32]
  0010d	48 89 9c 24 28
	1c 00 00	 mov	 QWORD PTR [rsp+7208], rbx
  00115	49 8d 5e 20	 lea	 rbx, QWORD PTR [r14+32]
  00119	48 85 c9	 test	 rcx, rcx
  0011c	74 17		 je	 SHORT $LN25@ImGui_Impl
  0011e	8b 46 08	 mov	 eax, DWORD PTR [rsi+8]
  00121	41 39 46 74	 cmp	 DWORD PTR [r14+116], eax
  00125	7d 65		 jge	 SHORT $LN26@ImGui_Impl

; 142  :     {
; 143  :         if (bd->pIB) { bd->pIB->Release(); bd->pIB = NULL; }

  00127	48 85 c9	 test	 rcx, rcx
  0012a	74 09		 je	 SHORT $LN25@ImGui_Impl
  0012c	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0012f	ff 50 10	 call	 QWORD PTR [rax+16]
  00132	4c 89 2b	 mov	 QWORD PTR [rbx], r13
$LN25@ImGui_Impl:

; 144  :         bd->IndexBufferSize = draw_data->TotalIdxCount + 10000;

  00135	8b 46 08	 mov	 eax, DWORD PTR [rsi+8]

; 145  :         D3D11_BUFFER_DESC desc;
; 146  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));
; 147  :         desc.Usage = D3D11_USAGE_DYNAMIC;
; 148  :         desc.ByteWidth = bd->IndexBufferSize * sizeof(ImDrawIdx);
; 149  :         desc.BindFlags = D3D11_BIND_INDEX_BUFFER;
; 150  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
; 151  :         if (bd->pd3dDevice->CreateBuffer(&desc, NULL, &bd->pIB) < 0)

  00138	48 8d 95 b0 1a
	00 00		 lea	 rdx, QWORD PTR desc$4[rbp-256]
  0013f	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00142	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  00147	41 89 46 74	 mov	 DWORD PTR [r14+116], eax
  0014b	4c 8b cb	 mov	 r9, rbx
  0014e	03 c0		 add	 eax, eax
  00150	4c 89 ad c0 1a
	00 00		 mov	 QWORD PTR desc$4[rbp-240], r13
  00157	89 85 b0 1a 00
	00		 mov	 DWORD PTR desc$4[rbp-256], eax
  0015d	45 33 c0	 xor	 r8d, r8d
  00160	c7 85 b4 1a 00
	00 02 00 00 00	 mov	 DWORD PTR desc$4[rbp-252], 2
  0016a	c7 85 b8 1a 00
	00 02 00 00 00	 mov	 DWORD PTR desc$4[rbp-248], 2
  00174	c7 85 bc 1a 00
	00 00 00 01 00	 mov	 DWORD PTR desc$4[rbp-244], 65536 ; 00010000H
  0017e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00181	ff 50 18	 call	 QWORD PTR [rax+24]
  00184	85 c0		 test	 eax, eax
  00186	0f 88 bd 08 00
	00		 js	 $LN99@ImGui_Impl
$LN26@ImGui_Impl:

; 152  :             return;
; 153  :     }
; 154  : 
; 155  :     // Upload vertex/index data into a single contiguous GPU buffer
; 156  :     D3D11_MAPPED_SUBRESOURCE vtx_resource, idx_resource;
; 157  :     if (ctx->Map(bd->pVB, 0, D3D11_MAP_WRITE_DISCARD, 0, &vtx_resource) != S_OK)

  0018c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0018f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR vtx_resource$[rsp]
  00194	49 8b 56 18	 mov	 rdx, QWORD PTR [r14+24]
  00198	41 b9 04 00 00
	00		 mov	 r9d, 4
  0019e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a3	45 33 c0	 xor	 r8d, r8d
  001a6	48 8b cf	 mov	 rcx, rdi
  001a9	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  001ae	ff 50 70	 call	 QWORD PTR [rax+112]
  001b1	85 c0		 test	 eax, eax
  001b3	0f 85 90 08 00
	00		 jne	 $LN99@ImGui_Impl

; 158  :         return;
; 159  :     if (ctx->Map(bd->pIB, 0, D3D11_MAP_WRITE_DISCARD, 0, &idx_resource) != S_OK)

  001b9	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001bc	48 8d 4c 24 70	 lea	 rcx, QWORD PTR idx_resource$[rsp]
  001c1	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  001c4	41 b9 04 00 00
	00		 mov	 r9d, 4
  001ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cf	45 33 c0	 xor	 r8d, r8d
  001d2	48 8b cf	 mov	 rcx, rdi
  001d5	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  001da	ff 50 70	 call	 QWORD PTR [rax+112]
  001dd	85 c0		 test	 eax, eax
  001df	0f 85 64 08 00
	00		 jne	 $LN99@ImGui_Impl

; 160  :         return;
; 161  :     ImDrawVert* vtx_dst = (ImDrawVert*)vtx_resource.pData;

  001e5	4c 8b 7c 24 60	 mov	 r15, QWORD PTR vtx_resource$[rsp]
  001ea	4c 89 a4 24 38
	1c 00 00	 mov	 QWORD PTR [rsp+7224], r12

; 162  :     ImDrawIdx* idx_dst = (ImDrawIdx*)idx_resource.pData;

  001f2	4c 8b 64 24 70	 mov	 r12, QWORD PTR idx_resource$[rsp]

; 163  :     for (int n = 0; n < draw_data->CmdListsCount; n++)

  001f7	44 39 6e 04	 cmp	 DWORD PTR [rsi+4], r13d
  001fb	7e 63		 jle	 SHORT $LN3@ImGui_Impl

; 145  :         D3D11_BUFFER_DESC desc;
; 146  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));
; 147  :         desc.Usage = D3D11_USAGE_DYNAMIC;
; 148  :         desc.ByteWidth = bd->IndexBufferSize * sizeof(ImDrawIdx);
; 149  :         desc.BindFlags = D3D11_BIND_INDEX_BUFFER;
; 150  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
; 151  :         if (bd->pd3dDevice->CreateBuffer(&desc, NULL, &bd->pIB) < 0)

  001fd	49 8b fd	 mov	 rdi, r13
$LL4@ImGui_Impl:

; 164  :     {
; 165  :         const ImDrawList* cmd_list = draw_data->CmdLists[n];

  00200	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]

; 166  :         memcpy(vtx_dst, cmd_list->VtxBuffer.Data, cmd_list->VtxBuffer.Size * sizeof(ImDrawVert));

  00204	49 8b cf	 mov	 rcx, r15
  00207	48 8b 1c 07	 mov	 rbx, QWORD PTR [rdi+rax]
  0020b	48 63 43 20	 movsxd	 rax, DWORD PTR [rbx+32]
  0020f	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00213	4c 8d 04 80	 lea	 r8, QWORD PTR [rax+rax*4]
  00217	49 c1 e0 02	 shl	 r8, 2
  0021b	e8 00 00 00 00	 call	 memcpy

; 167  :         memcpy(idx_dst, cmd_list->IdxBuffer.Data, cmd_list->IdxBuffer.Size * sizeof(ImDrawIdx));

  00220	4c 63 43 10	 movsxd	 r8, DWORD PTR [rbx+16]
  00224	49 8b cc	 mov	 rcx, r12
  00227	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  0022b	4d 03 c0	 add	 r8, r8
  0022e	e8 00 00 00 00	 call	 memcpy

; 168  :         vtx_dst += cmd_list->VtxBuffer.Size;

  00233	48 63 43 20	 movsxd	 rax, DWORD PTR [rbx+32]
  00237	48 8d 7f 08	 lea	 rdi, QWORD PTR [rdi+8]
  0023b	41 ff c5	 inc	 r13d
  0023e	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]

; 169  :         idx_dst += cmd_list->IdxBuffer.Size;

  00242	48 63 43 10	 movsxd	 rax, DWORD PTR [rbx+16]
  00246	4d 8d 3c 8f	 lea	 r15, QWORD PTR [r15+rcx*4]
  0024a	4d 8d 24 44	 lea	 r12, QWORD PTR [r12+rax*2]
  0024e	44 3b 6e 04	 cmp	 r13d, DWORD PTR [rsi+4]
  00252	7c ac		 jl	 SHORT $LL4@ImGui_Impl
  00254	48 8b 7c 24 50	 mov	 rdi, QWORD PTR ctx$1$[rsp]
  00259	49 8d 5e 20	 lea	 rbx, QWORD PTR [r14+32]
  0025d	45 33 ed	 xor	 r13d, r13d
$LN3@ImGui_Impl:

; 170  :     }
; 171  :     ctx->Unmap(bd->pVB, 0);

  00260	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00263	45 33 c0	 xor	 r8d, r8d
  00266	49 8b 56 18	 mov	 rdx, QWORD PTR [r14+24]
  0026a	48 8b cf	 mov	 rcx, rdi
  0026d	ff 50 78	 call	 QWORD PTR [rax+120]

; 172  :     ctx->Unmap(bd->pIB, 0);

  00270	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00273	45 33 c0	 xor	 r8d, r8d
  00276	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00279	48 8b cf	 mov	 rcx, rdi
  0027c	ff 50 78	 call	 QWORD PTR [rax+120]

; 173  : 
; 174  :     // Setup orthographic projection matrix into our constant buffer
; 175  :     // Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
; 176  :     {
; 177  :         D3D11_MAPPED_SUBRESOURCE mapped_resource;
; 178  :         if (ctx->Map(bd->pVertexConstantBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mapped_resource) != S_OK)

  0027f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00282	48 8d 4c 24 38	 lea	 rcx, QWORD PTR mapped_resource$2[rsp]
  00287	49 8b 56 38	 mov	 rdx, QWORD PTR [r14+56]
  0028b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00291	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00296	45 33 c0	 xor	 r8d, r8d
  00299	48 8b cf	 mov	 rcx, rdi
  0029c	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  002a1	ff 50 70	 call	 QWORD PTR [rax+112]
  002a4	85 c0		 test	 eax, eax
  002a6	0f 85 95 07 00
	00		 jne	 $LN100@ImGui_Impl

; 179  :             return;
; 180  :         VERTEX_CONSTANT_BUFFER* constant_buffer = (VERTEX_CONSTANT_BUFFER*)mapped_resource.pData;
; 181  :         float L = draw_data->DisplayPos.x;
; 182  :         float R = draw_data->DisplayPos.x + draw_data->DisplaySize.x;
; 183  :         float T = draw_data->DisplayPos.y;

  002ac	f3 0f 10 4e 1c	 movss	 xmm1, DWORD PTR [rsi+28]

; 184  :         float B = draw_data->DisplayPos.y + draw_data->DisplaySize.y;
; 185  :         float mvp[4][4] =
; 186  :         {
; 187  :             { 2.0f / (R - L),   0.0f,           0.0f,       0.0f },
; 188  :             { 0.0f,         2.0f / (T - B),     0.0f,       0.0f },
; 189  :             { 0.0f,         0.0f,           0.5f,       0.0f },
; 190  :             { (R + L) / (L - R),  (T + B) / (B - T),    0.5f,       1.0f },
; 191  :         };
; 192  :         memcpy(&constant_buffer->mvp, mvp, sizeof(mvp));
; 193  :         ctx->Unmap(bd->pVertexConstantBuffer, 0);

  002b1	45 33 c0	 xor	 r8d, r8d
  002b4	f3 0f 10 66 18	 movss	 xmm4, DWORD PTR [rsi+24]
  002b9	0f 28 d1	 movaps	 xmm2, xmm1
  002bc	f3 0f 58 56 24	 addss	 xmm2, DWORD PTR [rsi+36]
  002c1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40000000
  002c9	0f 28 c1	 movaps	 xmm0, xmm1
  002cc	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  002d1	0f 28 ec	 movaps	 xmm5, xmm4
  002d4	f3 0f 58 6e 20	 addss	 xmm5, DWORD PTR [rsi+32]
  002d9	0f 29 b4 24 e0
	1b 00 00	 movaps	 XMMWORD PTR [rsp+7136], xmm6
  002e1	48 8b cf	 mov	 rcx, rdi
  002e4	0f 29 bc 24 d0
	1b 00 00	 movaps	 XMMWORD PTR [rsp+7120], xmm7
  002ec	f3 0f 5c c2	 subss	 xmm0, xmm2
  002f0	0f 28 f3	 movaps	 xmm6, xmm3
  002f3	0f 28 fd	 movaps	 xmm7, xmm5
  002f6	f3 0f 58 fc	 addss	 xmm7, xmm4
  002fa	f3 0f 5e f0	 divss	 xmm6, xmm0
  002fe	0f 28 c4	 movaps	 xmm0, xmm4
  00301	f3 0f 5c c5	 subss	 xmm0, xmm5
  00305	f3 0f 5c ec	 subss	 xmm5, xmm4
  00309	f3 0f 5e f8	 divss	 xmm7, xmm0
  0030d	f3 0f 5e dd	 divss	 xmm3, xmm5
  00311	0f 28 c2	 movaps	 xmm0, xmm2
  00314	f3 0f 5c d1	 subss	 xmm2, xmm1
  00318	f3 0f 11 18	 movss	 DWORD PTR [rax], xmm3
  0031c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00320	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00325	44 89 68 04	 mov	 DWORD PTR [rax+4], r13d
  00329	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  0032e	f3 0f 5e c2	 divss	 xmm0, xmm2
  00332	44 89 68 08	 mov	 DWORD PTR [rax+8], r13d
  00336	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  0033b	44 89 68 0c	 mov	 DWORD PTR [rax+12], r13d
  0033f	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00344	44 89 68 10	 mov	 DWORD PTR [rax+16], r13d
  00348	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  0034d	f3 0f 11 70 14	 movss	 DWORD PTR [rax+20], xmm6
  00352	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00357	44 89 68 18	 mov	 DWORD PTR [rax+24], r13d
  0035b	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00360	44 89 68 1c	 mov	 DWORD PTR [rax+28], r13d
  00364	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00369	44 89 68 20	 mov	 DWORD PTR [rax+32], r13d
  0036d	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00372	44 89 68 24	 mov	 DWORD PTR [rax+36], r13d
  00376	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  0037b	c7 40 28 00 00
	00 3f		 mov	 DWORD PTR [rax+40], 1056964608 ; 3f000000H
  00382	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00387	44 89 68 2c	 mov	 DWORD PTR [rax+44], r13d
  0038b	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  00390	f3 0f 11 78 30	 movss	 DWORD PTR [rax+48], xmm7
  00395	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  0039a	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0
  0039f	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  003a4	c7 40 38 00 00
	00 3f		 mov	 DWORD PTR [rax+56], 1056964608 ; 3f000000H
  003ab	48 8b 44 24 38	 mov	 rax, QWORD PTR mapped_resource$2[rsp]
  003b0	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [rax+60], 1065353216 ; 3f800000H
  003b7	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003ba	49 8b 56 38	 mov	 rdx, QWORD PTR [r14+56]
  003be	ff 50 78	 call	 QWORD PTR [rax+120]

; 194  :     }
; 195  : 
; 196  :     // Backup DX state that will be modified to restore it afterwards (unfortunately this is very ugly looking and verbose. Close your eyes!)
; 197  :     struct BACKUP_DX11_STATE
; 198  :     {
; 199  :         UINT                        ScissorRectsCount, ViewportsCount;
; 200  :         D3D11_RECT                  ScissorRects[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE];
; 201  :         D3D11_VIEWPORT              Viewports[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE];
; 202  :         ID3D11RasterizerState* RS;
; 203  :         ID3D11BlendState* BlendState;
; 204  :         FLOAT                       BlendFactor[4];
; 205  :         UINT                        SampleMask;
; 206  :         UINT                        StencilRef;
; 207  :         ID3D11DepthStencilState* DepthStencilState;
; 208  :         ID3D11ShaderResourceView* PSShaderResource;
; 209  :         ID3D11SamplerState* PSSampler;
; 210  :         ID3D11PixelShader* PS;
; 211  :         ID3D11VertexShader* VS;
; 212  :         ID3D11GeometryShader* GS;
; 213  :         UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;
; 214  :         ID3D11ClassInstance* PSInstances[256], * VSInstances[256], * GSInstances[256];   // 256 is max according to PSSetShader documentation
; 215  :         D3D11_PRIMITIVE_TOPOLOGY    PrimitiveTopology;
; 216  :         ID3D11Buffer* IndexBuffer, * VertexBuffer, * VSConstantBuffer;
; 217  :         UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;
; 218  :         DXGI_FORMAT                 IndexBufferFormat;
; 219  :         ID3D11InputLayout* InputLayout;
; 220  :     };
; 221  :     BACKUP_DX11_STATE old = {};

  003c1	33 d2		 xor	 edx, edx
  003c3	48 8d 4d 88	 lea	 rcx, QWORD PTR old$[rbp-248]
  003c7	41 b8 20 1b 00
	00		 mov	 r8d, 6944		; 00001b20H
  003cd	e8 00 00 00 00	 call	 memset

; 222  :     old.ScissorRectsCount = old.ViewportsCount = D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE;

  003d2	c7 45 84 10 00
	00 00		 mov	 DWORD PTR old$[rbp-252], 16

; 223  :     ctx->RSGetScissorRects(&old.ScissorRectsCount, old.ScissorRects);

  003d9	4c 8d 45 88	 lea	 r8, QWORD PTR old$[rbp-248]
  003dd	c7 45 80 10 00
	00 00		 mov	 DWORD PTR old$[rbp-256], 16
  003e4	48 8d 55 80	 lea	 rdx, QWORD PTR old$[rbp-256]
  003e8	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003eb	48 8b cf	 mov	 rcx, rdi
  003ee	ff 90 00 03 00
	00		 call	 QWORD PTR [rax+768]

; 224  :     ctx->RSGetViewports(&old.ViewportsCount, old.Viewports);

  003f4	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003f7	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR old$[rbp+8]
  003fe	48 8d 55 84	 lea	 rdx, QWORD PTR old$[rbp-252]
  00402	48 8b cf	 mov	 rcx, rdi
  00405	ff 90 f8 02 00
	00		 call	 QWORD PTR [rax+760]

; 225  :     ctx->RSGetState(&old.RS);

  0040b	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0040e	48 8d 95 08 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+392]
  00415	48 8b cf	 mov	 rcx, rdi
  00418	ff 90 f0 02 00
	00		 call	 QWORD PTR [rax+752]

; 226  :     ctx->OMGetBlendState(&old.BlendState, old.BlendFactor, &old.SampleMask);

  0041e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00421	4c 8d 8d 28 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+424]
  00428	4c 8d 85 18 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+408]
  0042f	48 8b cf	 mov	 rcx, rdi
  00432	48 8d 95 10 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+400]
  00439	ff 90 d8 02 00
	00		 call	 QWORD PTR [rax+728]

; 227  :     ctx->OMGetDepthStencilState(&old.DepthStencilState, &old.StencilRef);

  0043f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00442	4c 8d 85 2c 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+428]
  00449	48 8d 95 30 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+432]
  00450	48 8b cf	 mov	 rcx, rdi
  00453	ff 90 e0 02 00
	00		 call	 QWORD PTR [rax+736]

; 228  :     ctx->PSGetShaderResources(0, 1, &old.PSShaderResource);

  00459	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0045c	4c 8d 8d 38 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+440]
  00463	33 d2		 xor	 edx, edx
  00465	48 8b cf	 mov	 rcx, rdi
  00468	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  0046c	ff 90 48 02 00
	00		 call	 QWORD PTR [rax+584]

; 229  :     ctx->PSGetSamplers(0, 1, &old.PSSampler);

  00472	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00475	4c 8d 8d 40 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+448]
  0047c	33 d2		 xor	 edx, edx
  0047e	48 8b cf	 mov	 rcx, rdi
  00481	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00485	ff 90 58 02 00
	00		 call	 QWORD PTR [rax+600]

; 230  :     old.PSInstancesCount = old.VSInstancesCount = old.GSInstancesCount = 256;

  0048b	c7 85 68 02 00
	00 00 01 00 00	 mov	 DWORD PTR old$[rbp+488], 256 ; 00000100H

; 231  :     ctx->PSGetShader(&old.PS, old.PSInstances, &old.PSInstancesCount);

  00495	4c 8d 8d 60 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+480]
  0049c	c7 85 64 02 00
	00 00 01 00 00	 mov	 DWORD PTR old$[rbp+484], 256 ; 00000100H
  004a6	4c 8d 85 70 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+496]
  004ad	c7 85 60 02 00
	00 00 01 00 00	 mov	 DWORD PTR old$[rbp+480], 256 ; 00000100H
  004b7	48 8d 95 48 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+456]
  004be	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  004c1	48 8b cf	 mov	 rcx, rdi
  004c4	ff 90 50 02 00
	00		 call	 QWORD PTR [rax+592]

; 232  :     ctx->VSGetShader(&old.VS, old.VSInstances, &old.VSInstancesCount);

  004ca	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  004cd	4c 8d 8d 64 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+484]
  004d4	4c 8d 85 70 0a
	00 00		 lea	 r8, QWORD PTR old$[rbp+2544]
  004db	48 8b cf	 mov	 rcx, rdi
  004de	48 8d 95 50 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+464]
  004e5	ff 90 60 02 00
	00		 call	 QWORD PTR [rax+608]

; 233  :     ctx->VSGetConstantBuffers(0, 1, &old.VSConstantBuffer);

  004eb	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  004ee	4c 8d 8d 88 1a
	00 00		 lea	 r9, QWORD PTR old$[rbp+6664]
  004f5	33 d2		 xor	 edx, edx
  004f7	48 8b cf	 mov	 rcx, rdi
  004fa	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  004fe	ff 90 40 02 00
	00		 call	 QWORD PTR [rax+576]

; 234  :     ctx->GSGetShader(&old.GS, old.GSInstances, &old.GSInstancesCount);

  00504	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00507	4c 8d 8d 68 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+488]
  0050e	4c 8d 85 70 12
	00 00		 lea	 r8, QWORD PTR old$[rbp+4592]
  00515	48 8b cf	 mov	 rcx, rdi
  00518	48 8d 95 58 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+472]
  0051f	ff 90 90 02 00
	00		 call	 QWORD PTR [rax+656]

; 235  : 
; 236  :     ctx->IAGetPrimitiveTopology(&old.PrimitiveTopology);

  00525	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00528	48 8d 95 70 1a
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6640]
  0052f	48 8b cf	 mov	 rcx, rdi
  00532	ff 90 98 02 00
	00		 call	 QWORD PTR [rax+664]

; 237  :     ctx->IAGetIndexBuffer(&old.IndexBuffer, &old.IndexBufferFormat, &old.IndexBufferOffset);

  00538	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0053b	4c 8d 8d 90 1a
	00 00		 lea	 r9, QWORD PTR old$[rbp+6672]
  00542	4c 8d 85 9c 1a
	00 00		 lea	 r8, QWORD PTR old$[rbp+6684]
  00549	48 8b cf	 mov	 rcx, rdi
  0054c	48 8d 95 78 1a
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6648]
  00553	ff 90 80 02 00
	00		 call	 QWORD PTR [rax+640]

; 238  :     ctx->IAGetVertexBuffers(0, 1, &old.VertexBuffer, &old.VertexBufferStride, &old.VertexBufferOffset);

  00559	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0055c	48 8d 8d 98 1a
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6680]
  00563	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00568	4c 8d 8d 80 1a
	00 00		 lea	 r9, QWORD PTR old$[rbp+6656]
  0056f	33 d2		 xor	 edx, edx
  00571	48 8d 8d 94 1a
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6676]
  00578	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0057d	48 8b cf	 mov	 rcx, rdi
  00580	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00584	ff 90 78 02 00
	00		 call	 QWORD PTR [rax+632]

; 239  :     ctx->IAGetInputLayout(&old.InputLayout);

  0058a	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0058d	48 8d 95 a0 1a
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6688]
  00594	48 8b cf	 mov	 rcx, rdi
  00597	ff 90 70 02 00
	00		 call	 QWORD PTR [rax+624]

; 240  : 
; 241  :     // Setup desired DX state
; 242  :     ImGui_ImplDX11_SetupRenderState(draw_data, ctx);

  0059d	48 8b d7	 mov	 rdx, rdi
  005a0	48 8b ce	 mov	 rcx, rsi
  005a3	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_SetupRenderState

; 243  : 
; 244  :     // Render command lists
; 245  :     // (Because we merged all buffers into a single one, we maintain our own offset into them)
; 246  :     int global_idx_offset = 0;

  005a8	41 8b cd	 mov	 ecx, r13d

; 247  :     int global_vtx_offset = 0;

  005ab	41 8b d5	 mov	 edx, r13d
  005ae	89 4c 24 48	 mov	 DWORD PTR global_idx_offset$1$[rsp], ecx
  005b2	89 54 24 4c	 mov	 DWORD PTR global_vtx_offset$1$[rsp], edx

; 248  :     ImVec2 clip_off = draw_data->DisplayPos;
; 249  :     for (int n = 0; n < draw_data->CmdListsCount; n++)

  005b6	83 7e 04 00	 cmp	 DWORD PTR [rsi+4], 0
  005ba	45 8b cd	 mov	 r9d, r13d
  005bd	f3 0f 10 76 18	 movss	 xmm6, DWORD PTR [rsi+24]
  005c2	f3 0f 10 7e 1c	 movss	 xmm7, DWORD PTR [rsi+28]
  005c7	44 89 6c 24 30	 mov	 DWORD PTR n$1$[rsp], r13d
  005cc	0f 8e 8b 01 00
	00		 jle	 $LN6@ImGui_Impl

; 145  :         D3D11_BUFFER_DESC desc;
; 146  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));
; 147  :         desc.Usage = D3D11_USAGE_DYNAMIC;
; 148  :         desc.ByteWidth = bd->IndexBufferSize * sizeof(ImDrawIdx);
; 149  :         desc.BindFlags = D3D11_BIND_INDEX_BUFFER;
; 150  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
; 151  :         if (bd->pd3dDevice->CreateBuffer(&desc, NULL, &bd->pIB) < 0)

  005d2	4d 8b c5	 mov	 r8, r13
  005d5	4c 89 6c 24 50	 mov	 QWORD PTR tv1751[rsp], r13
  005da	66 0f 1f 44 00
	00		 npad	 6
$LL7@ImGui_Impl:

; 250  :     {
; 251  :         const ImDrawList* cmd_list = draw_data->CmdLists[n];

  005e0	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]

; 252  :         for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)

  005e4	4d 8b fd	 mov	 r15, r13
  005e7	41 8b f5	 mov	 esi, r13d
  005ea	4d 8b 34 00	 mov	 r14, QWORD PTR [r8+rax]
  005ee	41 8b 06	 mov	 eax, DWORD PTR [r14]
  005f1	85 c0		 test	 eax, eax
  005f3	0f 8e 34 01 00
	00		 jle	 $LN94@ImGui_Impl

; 253  :         {
; 254  :             const ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];

  005f9	4d 8b e5	 mov	 r12, r13
  005fc	4c 8b 6c 24 58	 mov	 r13, QWORD PTR draw_data$GSCopy$1$[rsp]
$LL10@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h

; 1795 :     inline const T& operator[](int i) const { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

  00601	4d 85 ff	 test	 r15, r15
  00604	78 04		 js	 SHORT $LN61@ImGui_Impl
  00606	3b f0		 cmp	 esi, eax
  00608	7c 1a		 jl	 SHORT $LN62@ImGui_Impl
$LN61@ImGui_Impl:
  0060a	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  00610	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KC@GNKKHKIA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00617	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
  0061e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
$LN62@ImGui_Impl:
  00624	49 8b 5e 08	 mov	 rbx, QWORD PTR [r14+8]
  00628	49 03 dc	 add	 rbx, r12
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 255  :             if (pcmd->UserCallback != NULL)

  0062b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0062f	48 85 c0	 test	 rax, rax
  00632	74 23		 je	 SHORT $LN30@ImGui_Impl

; 256  :             {
; 257  :                 // User callback, registered via ImDrawList::AddCallback()
; 258  :                 // (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
; 259  :                 if (pcmd->UserCallback == ImDrawCallback_ResetRenderState)

  00634	48 83 f8 ff	 cmp	 rax, -1
  00638	75 10		 jne	 SHORT $LN32@ImGui_Impl

; 260  :                     ImGui_ImplDX11_SetupRenderState(draw_data, ctx);

  0063a	48 8b d7	 mov	 rdx, rdi
  0063d	49 8b cd	 mov	 rcx, r13
  00640	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_SetupRenderState
  00645	e9 ba 00 00 00	 jmp	 $LN8@ImGui_Impl
$LN32@ImGui_Impl:

; 261  :                 else
; 262  :                     pcmd->UserCallback(cmd_list, pcmd);

  0064a	48 8b d3	 mov	 rdx, rbx
  0064d	49 8b ce	 mov	 rcx, r14
  00650	ff d0		 call	 rax

; 263  :             }

  00652	e9 ad 00 00 00	 jmp	 $LN8@ImGui_Impl
$LN30@ImGui_Impl:

; 264  :             else
; 265  :             {
; 266  :                 // Project scissor/clipping rectangles into framebuffer space
; 267  :                 ImVec2 clip_min(pcmd->ClipRect.x - clip_off.x, pcmd->ClipRect.y - clip_off.y);

  00657	f3 0f 10 13	 movss	 xmm2, DWORD PTR [rbx]

; 268  :                 ImVec2 clip_max(pcmd->ClipRect.z - clip_off.x, pcmd->ClipRect.w - clip_off.y);

  0065b	f3 0f 10 5b 08	 movss	 xmm3, DWORD PTR [rbx+8]
  00660	f3 0f 5c d6	 subss	 xmm2, xmm6
  00664	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [rbx+4]
  00669	f3 0f 5c de	 subss	 xmm3, xmm6
  0066d	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR [rbx+12]
  00672	f3 0f 5c c7	 subss	 xmm0, xmm7
  00676	f3 0f 5c cf	 subss	 xmm1, xmm7
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h

; 253  :     ImVec2(float _x, float _y) { x = _x; y = _y; }

  0067a	0f 2f d3	 comiss	 xmm2, xmm3
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 269  :                 if (clip_max.x <= clip_min.x || clip_max.y <= clip_min.y)

  0067d	0f 83 81 00 00
	00		 jae	 $LN8@ImGui_Impl
  00683	0f 2f c1	 comiss	 xmm0, xmm1
  00686	73 7c		 jae	 SHORT $LN8@ImGui_Impl

; 270  :                     continue;
; 271  : 
; 272  :                 // Apply scissor/clipping rectangle
; 273  :                 const D3D11_RECT r = { (LONG)clip_min.x, (LONG)clip_min.y, (LONG)clip_max.x, (LONG)clip_max.y };

  00688	f3 0f 2c c2	 cvttss2si eax, xmm2

; 274  :                 ctx->RSSetScissorRects(1, &r);

  0068c	4c 8d 85 b0 1a
	00 00		 lea	 r8, QWORD PTR r$3[rbp-256]
  00693	ba 01 00 00 00	 mov	 edx, 1
  00698	48 8b cf	 mov	 rcx, rdi
  0069b	89 85 b0 1a 00
	00		 mov	 DWORD PTR r$3[rbp-256], eax
  006a1	f3 0f 2c c0	 cvttss2si eax, xmm0
  006a5	89 85 b4 1a 00
	00		 mov	 DWORD PTR r$3[rbp-252], eax
  006ab	f3 0f 2c c3	 cvttss2si eax, xmm3
  006af	89 85 b8 1a 00
	00		 mov	 DWORD PTR r$3[rbp-248], eax
  006b5	f3 0f 2c c1	 cvttss2si eax, xmm1
  006b9	89 85 bc 1a 00
	00		 mov	 DWORD PTR r$3[rbp-244], eax
  006bf	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  006c2	ff 90 68 01 00
	00		 call	 QWORD PTR [rax+360]

; 275  : 
; 276  :                 // Bind texture, Draw
; 277  :                 ID3D11ShaderResourceView* texture_srv = (ID3D11ShaderResourceView*)pcmd->GetTexID();

  006c8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 278  :                 ctx->PSSetShaderResources(0, 1, &texture_srv);

  006cc	4c 8d 4c 24 38	 lea	 r9, QWORD PTR texture_srv$1[rsp]
  006d1	33 d2		 xor	 edx, edx
  006d3	48 89 44 24 38	 mov	 QWORD PTR texture_srv$1[rsp], rax
  006d8	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  006db	48 8b cf	 mov	 rcx, rdi
  006de	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  006e2	ff 50 40	 call	 QWORD PTR [rax+64]

; 279  :                 ctx->DrawIndexed(pcmd->ElemCount, pcmd->IdxOffset + global_idx_offset, pcmd->VtxOffset + global_vtx_offset);

  006e5	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR global_vtx_offset$1$[rsp]
  006ea	48 8b cf	 mov	 rcx, rdi
  006ed	44 8b 44 24 48	 mov	 r8d, DWORD PTR global_idx_offset$1$[rsp]
  006f2	4c 8b 17	 mov	 r10, QWORD PTR [rdi]
  006f5	44 03 4b 18	 add	 r9d, DWORD PTR [rbx+24]
  006f9	44 03 43 1c	 add	 r8d, DWORD PTR [rbx+28]
  006fd	8b 53 20	 mov	 edx, DWORD PTR [rbx+32]
  00700	41 ff 52 60	 call	 QWORD PTR [r10+96]
$LN8@ImGui_Impl:

; 252  :         for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)

  00704	41 8b 06	 mov	 eax, DWORD PTR [r14]
  00707	ff c6		 inc	 esi
  00709	49 ff c7	 inc	 r15
  0070c	49 83 c4 38	 add	 r12, 56			; 00000038H
  00710	3b f0		 cmp	 esi, eax
  00712	0f 8c e9 fe ff
	ff		 jl	 $LL10@ImGui_Impl
  00718	8b 4c 24 48	 mov	 ecx, DWORD PTR global_idx_offset$1$[rsp]
  0071c	45 33 ed	 xor	 r13d, r13d
  0071f	8b 54 24 4c	 mov	 edx, DWORD PTR global_vtx_offset$1$[rsp]
  00723	4c 8b 44 24 50	 mov	 r8, QWORD PTR tv1751[rsp]
  00728	44 8b 4c 24 30	 mov	 r9d, DWORD PTR n$1$[rsp]
$LN94@ImGui_Impl:

; 280  :             }
; 281  :         }
; 282  :         global_idx_offset += cmd_list->IdxBuffer.Size;

  0072d	41 03 4e 10	 add	 ecx, DWORD PTR [r14+16]
  00731	41 ff c1	 inc	 r9d

; 283  :         global_vtx_offset += cmd_list->VtxBuffer.Size;

  00734	41 03 56 20	 add	 edx, DWORD PTR [r14+32]
  00738	49 83 c0 08	 add	 r8, 8
  0073c	48 8b 74 24 58	 mov	 rsi, QWORD PTR draw_data$GSCopy$1$[rsp]
  00741	89 4c 24 48	 mov	 DWORD PTR global_idx_offset$1$[rsp], ecx
  00745	89 54 24 4c	 mov	 DWORD PTR global_vtx_offset$1$[rsp], edx
  00749	44 89 4c 24 30	 mov	 DWORD PTR n$1$[rsp], r9d
  0074e	4c 89 44 24 50	 mov	 QWORD PTR tv1751[rsp], r8
  00753	44 3b 4e 04	 cmp	 r9d, DWORD PTR [rsi+4]
  00757	0f 8c 83 fe ff
	ff		 jl	 $LL7@ImGui_Impl
$LN6@ImGui_Impl:

; 284  :     }
; 285  : 
; 286  :     // Restore modified DX state
; 287  :     ctx->RSSetScissorRects(old.ScissorRectsCount, old.ScissorRects);

  0075d	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00760	4c 8d 45 88	 lea	 r8, QWORD PTR old$[rbp-248]
  00764	8b 55 80	 mov	 edx, DWORD PTR old$[rbp-256]
  00767	48 8b cf	 mov	 rcx, rdi
  0076a	ff 90 68 01 00
	00		 call	 QWORD PTR [rax+360]

; 288  :     ctx->RSSetViewports(old.ViewportsCount, old.Viewports);

  00770	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00773	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR old$[rbp+8]
  0077a	8b 55 84	 mov	 edx, DWORD PTR old$[rbp-252]
  0077d	48 8b cf	 mov	 rcx, rdi
  00780	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 289  :     ctx->RSSetState(old.RS); if (old.RS) old.RS->Release();

  00786	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00789	48 8b cf	 mov	 rcx, rdi
  0078c	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+392]
  00793	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]
  00799	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+392]
  007a0	0f 28 bc 24 d0
	1b 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+7120]
  007a8	0f 28 b4 24 e0
	1b 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+7136]
  007b0	48 85 c9	 test	 rcx, rcx
  007b3	74 06		 je	 SHORT $LN36@ImGui_Impl
  007b5	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  007b8	ff 50 10	 call	 QWORD PTR [rax+16]
$LN36@ImGui_Impl:

; 290  :     ctx->OMSetBlendState(old.BlendState, old.BlendFactor, old.SampleMask); if (old.BlendState) old.BlendState->Release();

  007bb	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  007be	4c 8d 85 18 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+408]
  007c5	44 8b 8d 28 02
	00 00		 mov	 r9d, DWORD PTR old$[rbp+424]
  007cc	48 8b cf	 mov	 rcx, rdi
  007cf	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+400]
  007d6	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]
  007dc	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+400]
  007e3	48 85 c9	 test	 rcx, rcx
  007e6	74 06		 je	 SHORT $LN37@ImGui_Impl
  007e8	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  007eb	ff 50 10	 call	 QWORD PTR [rax+16]
$LN37@ImGui_Impl:

; 291  :     ctx->OMSetDepthStencilState(old.DepthStencilState, old.StencilRef); if (old.DepthStencilState) old.DepthStencilState->Release();

  007ee	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  007f1	48 8b cf	 mov	 rcx, rdi
  007f4	44 8b 85 2c 02
	00 00		 mov	 r8d, DWORD PTR old$[rbp+428]
  007fb	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+432]
  00802	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]
  00808	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+432]
  0080f	48 85 c9	 test	 rcx, rcx
  00812	74 06		 je	 SHORT $LN38@ImGui_Impl
  00814	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00817	ff 50 10	 call	 QWORD PTR [rax+16]
$LN38@ImGui_Impl:

; 292  :     ctx->PSSetShaderResources(0, 1, &old.PSShaderResource); if (old.PSShaderResource) old.PSShaderResource->Release();

  0081a	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0081d	4c 8d 8d 38 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+440]
  00824	33 d2		 xor	 edx, edx
  00826	48 8b cf	 mov	 rcx, rdi
  00829	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  0082d	ff 50 40	 call	 QWORD PTR [rax+64]
  00830	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+440]
  00837	48 85 c9	 test	 rcx, rcx
  0083a	74 06		 je	 SHORT $LN39@ImGui_Impl
  0083c	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0083f	ff 50 10	 call	 QWORD PTR [rax+16]
$LN39@ImGui_Impl:

; 293  :     ctx->PSSetSamplers(0, 1, &old.PSSampler); if (old.PSSampler) old.PSSampler->Release();

  00842	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00845	4c 8d 8d 40 02
	00 00		 lea	 r9, QWORD PTR old$[rbp+448]
  0084c	33 d2		 xor	 edx, edx
  0084e	48 8b cf	 mov	 rcx, rdi
  00851	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00855	ff 50 50	 call	 QWORD PTR [rax+80]
  00858	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+448]
  0085f	48 85 c9	 test	 rcx, rcx
  00862	74 06		 je	 SHORT $LN40@ImGui_Impl
  00864	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00867	ff 50 10	 call	 QWORD PTR [rax+16]
$LN40@ImGui_Impl:

; 294  :     ctx->PSSetShader(old.PS, old.PSInstances, old.PSInstancesCount); if (old.PS) old.PS->Release();

  0086a	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0086d	4c 8d 85 70 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+496]
  00874	44 8b 8d 60 02
	00 00		 mov	 r9d, DWORD PTR old$[rbp+480]
  0087b	48 8b cf	 mov	 rcx, rdi
  0087e	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+456]
  00885	ff 50 48	 call	 QWORD PTR [rax+72]
  00888	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+456]
  0088f	48 85 c9	 test	 rcx, rcx
  00892	74 06		 je	 SHORT $LN41@ImGui_Impl
  00894	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00897	ff 50 10	 call	 QWORD PTR [rax+16]
$LN41@ImGui_Impl:

; 295  :     for (UINT i = 0; i < old.PSInstancesCount; i++) if (old.PSInstances[i]) old.PSInstances[i]->Release();

  0089a	8b 95 60 02 00
	00		 mov	 edx, DWORD PTR old$[rbp+480]
  008a0	41 8b dd	 mov	 ebx, r13d
  008a3	85 d2		 test	 edx, edx
  008a5	74 2a		 je	 SHORT $LN12@ImGui_Impl
  008a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@ImGui_Impl:
  008b0	8b c3		 mov	 eax, ebx
  008b2	48 8b 8c c5 70
	02 00 00	 mov	 rcx, QWORD PTR old$[rbp+rax*8+496]
  008ba	48 85 c9	 test	 rcx, rcx
  008bd	74 0c		 je	 SHORT $LN11@ImGui_Impl
  008bf	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  008c2	ff 50 10	 call	 QWORD PTR [rax+16]
  008c5	8b 95 60 02 00
	00		 mov	 edx, DWORD PTR old$[rbp+480]
$LN11@ImGui_Impl:
  008cb	ff c3		 inc	 ebx
  008cd	3b da		 cmp	 ebx, edx
  008cf	72 df		 jb	 SHORT $LL13@ImGui_Impl
$LN12@ImGui_Impl:

; 296  :     ctx->VSSetShader(old.VS, old.VSInstances, old.VSInstancesCount); if (old.VS) old.VS->Release();

  008d1	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  008d4	4c 8d 85 70 0a
	00 00		 lea	 r8, QWORD PTR old$[rbp+2544]
  008db	44 8b 8d 64 02
	00 00		 mov	 r9d, DWORD PTR old$[rbp+484]
  008e2	48 8b cf	 mov	 rcx, rdi
  008e5	48 8b 95 50 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+464]
  008ec	ff 50 58	 call	 QWORD PTR [rax+88]
  008ef	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+464]
  008f6	48 85 c9	 test	 rcx, rcx
  008f9	74 06		 je	 SHORT $LN43@ImGui_Impl
  008fb	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  008fe	ff 50 10	 call	 QWORD PTR [rax+16]
$LN43@ImGui_Impl:

; 297  :     ctx->VSSetConstantBuffers(0, 1, &old.VSConstantBuffer); if (old.VSConstantBuffer) old.VSConstantBuffer->Release();

  00901	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00904	4c 8d 8d 88 1a
	00 00		 lea	 r9, QWORD PTR old$[rbp+6664]
  0090b	33 d2		 xor	 edx, edx
  0090d	48 8b cf	 mov	 rcx, rdi
  00910	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00914	ff 50 38	 call	 QWORD PTR [rax+56]
  00917	48 8b 8d 88 1a
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6664]
  0091e	48 85 c9	 test	 rcx, rcx
  00921	74 06		 je	 SHORT $LN44@ImGui_Impl
  00923	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00926	ff 50 10	 call	 QWORD PTR [rax+16]
$LN44@ImGui_Impl:

; 298  :     ctx->GSSetShader(old.GS, old.GSInstances, old.GSInstancesCount); if (old.GS) old.GS->Release();

  00929	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0092c	4c 8d 85 70 12
	00 00		 lea	 r8, QWORD PTR old$[rbp+4592]
  00933	44 8b 8d 68 02
	00 00		 mov	 r9d, DWORD PTR old$[rbp+488]
  0093a	48 8b cf	 mov	 rcx, rdi
  0093d	48 8b 95 58 02
	00 00		 mov	 rdx, QWORD PTR old$[rbp+472]
  00944	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]
  0094a	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR old$[rbp+472]
  00951	48 85 c9	 test	 rcx, rcx
  00954	74 06		 je	 SHORT $LN45@ImGui_Impl
  00956	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00959	ff 50 10	 call	 QWORD PTR [rax+16]
$LN45@ImGui_Impl:

; 299  :     for (UINT i = 0; i < old.VSInstancesCount; i++) if (old.VSInstances[i]) old.VSInstances[i]->Release();

  0095c	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR old$[rbp+484]
  00962	85 d2		 test	 edx, edx
  00964	74 2e		 je	 SHORT $LN15@ImGui_Impl
  00966	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL16@ImGui_Impl:
  00970	41 8b c5	 mov	 eax, r13d
  00973	48 8b 8c c5 70
	0a 00 00	 mov	 rcx, QWORD PTR old$[rbp+rax*8+2544]
  0097b	48 85 c9	 test	 rcx, rcx
  0097e	74 0c		 je	 SHORT $LN14@ImGui_Impl
  00980	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00983	ff 50 10	 call	 QWORD PTR [rax+16]
  00986	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR old$[rbp+484]
$LN14@ImGui_Impl:
  0098c	41 ff c5	 inc	 r13d
  0098f	44 3b ea	 cmp	 r13d, edx
  00992	72 dc		 jb	 SHORT $LL16@ImGui_Impl
$LN15@ImGui_Impl:

; 300  :     ctx->IASetPrimitiveTopology(old.PrimitiveTopology);

  00994	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00997	48 8b cf	 mov	 rcx, rdi
  0099a	8b 95 70 1a 00
	00		 mov	 edx, DWORD PTR old$[rbp+6640]
  009a0	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 301  :     ctx->IASetIndexBuffer(old.IndexBuffer, old.IndexBufferFormat, old.IndexBufferOffset); if (old.IndexBuffer) old.IndexBuffer->Release();

  009a6	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  009a9	48 8b cf	 mov	 rcx, rdi
  009ac	44 8b 8d 90 1a
	00 00		 mov	 r9d, DWORD PTR old$[rbp+6672]
  009b3	44 8b 85 9c 1a
	00 00		 mov	 r8d, DWORD PTR old$[rbp+6684]
  009ba	48 8b 95 78 1a
	00 00		 mov	 rdx, QWORD PTR old$[rbp+6648]
  009c1	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  009c7	48 8b 8d 78 1a
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6648]
  009ce	48 85 c9	 test	 rcx, rcx
  009d1	74 06		 je	 SHORT $LN47@ImGui_Impl
  009d3	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  009d6	ff 50 10	 call	 QWORD PTR [rax+16]
$LN47@ImGui_Impl:

; 302  :     ctx->IASetVertexBuffers(0, 1, &old.VertexBuffer, &old.VertexBufferStride, &old.VertexBufferOffset); if (old.VertexBuffer) old.VertexBuffer->Release();

  009d9	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  009dc	48 8d 8d 98 1a
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6680]
  009e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009e8	4c 8d 8d 80 1a
	00 00		 lea	 r9, QWORD PTR old$[rbp+6656]
  009ef	33 d2		 xor	 edx, edx
  009f1	48 8d 8d 94 1a
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6676]
  009f8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  009fd	48 8b cf	 mov	 rcx, rdi
  00a00	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00a04	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  00a0a	48 8b 8d 80 1a
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6656]
  00a11	48 85 c9	 test	 rcx, rcx
  00a14	74 06		 je	 SHORT $LN48@ImGui_Impl
  00a16	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00a19	ff 50 10	 call	 QWORD PTR [rax+16]
$LN48@ImGui_Impl:

; 303  :     ctx->IASetInputLayout(old.InputLayout); if (old.InputLayout) old.InputLayout->Release();

  00a1c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00a1f	48 8b cf	 mov	 rcx, rdi
  00a22	48 8b 95 a0 1a
	00 00		 mov	 rdx, QWORD PTR old$[rbp+6688]
  00a29	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00a2f	48 8b 8d a0 1a
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6688]
  00a36	48 85 c9	 test	 rcx, rcx
  00a39	74 06		 je	 SHORT $LN100@ImGui_Impl
  00a3b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00a3e	ff 50 10	 call	 QWORD PTR [rax+16]
$LN100@ImGui_Impl:
  00a41	4c 8b a4 24 38
	1c 00 00	 mov	 r12, QWORD PTR [rsp+7224]
$LN99@ImGui_Impl:
  00a49	48 8b 9c 24 28
	1c 00 00	 mov	 rbx, QWORD PTR [rsp+7208]
$LN98@ImGui_Impl:
  00a51	4c 8b ac 24 00
	1c 00 00	 mov	 r13, QWORD PTR [rsp+7168]
  00a59	48 8b bc 24 30
	1c 00 00	 mov	 rdi, QWORD PTR [rsp+7216]
  00a61	4c 8b b4 24 f8
	1b 00 00	 mov	 r14, QWORD PTR [rsp+7160]
  00a69	4c 8b bc 24 f0
	1b 00 00	 mov	 r15, QWORD PTR [rsp+7152]
$LN18@ImGui_Impl:

; 304  : }

  00a71	48 8b 8d c8 1a
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00a78	48 33 cc	 xor	 rcx, rsp
  00a7b	e8 00 00 00 00	 call	 __security_check_cookie
  00a80	48 81 c4 08 1c
	00 00		 add	 rsp, 7176		; 00001c08H
  00a87	5e		 pop	 rsi
  00a88	5d		 pop	 rbp
  00a89	c3		 ret	 0
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z ENDP ; ImGui_ImplDX11_RenderDrawData
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
pTexture$1 = 48
height$ = 48
width$ = 56
subResource$2 = 64
pixels$ = 64
srvDesc$3 = 80
desc$4 = 104
desc$5 = 104
__$ArrayPad$ = 160
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ PROC		; ImGui_ImplDX11_CreateFontsTexture

; 307  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	55		 push	 rbp
  00015	48 8d 6c 24 a9	 lea	 rbp, QWORD PTR [rsp-87]
  0001a	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c4	 xor	 rax, rsp
  0002b	48 89 45 47	 mov	 QWORD PTR __$ArrayPad$[rbp-89], rax
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  0002f	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00036	48 85 ff	 test	 rdi, rdi
  00039	75 21		 jne	 SHORT $LN7@ImGui_Impl
  0003b	41 b8 83 0e 00
	00		 mov	 r8d, 3715		; 00000e83H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KG@OOKDKDDA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NE@MGLAEJCB@?$AAG?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00055	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN7@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  0005c	45 33 f6	 xor	 r14d, r14d
  0005f	48 85 ff	 test	 rdi, rdi
  00062	74 09		 je	 SHORT $LN10@ImGui_Impl
  00064	48 8b b7 98 00
	00 00		 mov	 rsi, QWORD PTR [rdi+152]
  0006b	eb 03		 jmp	 SHORT $LN11@ImGui_Impl
$LN10@ImGui_Impl:
  0006d	49 8b f6	 mov	 rsi, r14
$LN11@ImGui_Impl:

; 308  :     // Build texture atlas
; 309  :     ImGuiIO& io = ImGui::GetIO();
; 310  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 311  :     unsigned char* pixels;
; 312  :     int width, height;
; 313  :     io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

  00070	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]
  00074	4c 8d 4d d7	 lea	 r9, QWORD PTR height$[rbp-89]
  00078	4c 8d 45 df	 lea	 r8, QWORD PTR width$[rbp-89]
  0007c	48 8d 55 e7	 lea	 rdx, QWORD PTR pixels$[rbp-89]
  00080	e8 00 00 00 00	 call	 ?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsRGBA32

; 314  : 
; 315  :     // Upload texture to graphics system
; 316  :     {
; 317  :         D3D11_TEXTURE2D_DESC desc;
; 318  :         ZeroMemory(&desc, sizeof(desc));
; 319  :         desc.Width = width;
; 320  :         desc.Height = height;

  00085	8b 45 d7	 mov	 eax, DWORD PTR height$[rbp-89]

; 321  :         desc.MipLevels = 1;
; 322  :         desc.ArraySize = 1;
; 323  :         desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
; 324  :         desc.SampleDesc.Count = 1;
; 325  :         desc.Usage = D3D11_USAGE_DEFAULT;
; 326  :         desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
; 327  :         desc.CPUAccessFlags = 0;
; 328  : 
; 329  :         ID3D11Texture2D* pTexture = NULL;
; 330  :         D3D11_SUBRESOURCE_DATA subResource;
; 331  :         subResource.pSysMem = pixels;
; 332  :         subResource.SysMemPitch = desc.Width * 4;
; 333  :         subResource.SysMemSlicePitch = 0;
; 334  :         bd->pd3dDevice->CreateTexture2D(&desc, &subResource, &pTexture);

  00088	4c 8d 4d d7	 lea	 r9, QWORD PTR pTexture$1[rbp-89]
  0008c	8b 4d df	 mov	 ecx, DWORD PTR width$[rbp-89]
  0008f	4c 8d 45 e7	 lea	 r8, QWORD PTR subResource$2[rbp-89]
  00093	89 45 13	 mov	 DWORD PTR desc$5[rbp-85], eax
  00096	48 8d 55 0f	 lea	 rdx, QWORD PTR desc$5[rbp-89]
  0009a	48 8b 45 e7	 mov	 rax, QWORD PTR pixels$[rbp-89]
  0009e	48 89 45 e7	 mov	 QWORD PTR subResource$2[rbp-89], rax
  000a2	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [rcx*4]
  000a9	89 4d 0f	 mov	 DWORD PTR desc$5[rbp-89], ecx
  000ac	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000af	48 c7 45 23 01
	00 00 00	 mov	 QWORD PTR desc$5[rbp-69], 1
  000b7	4c 89 75 33	 mov	 QWORD PTR desc$5[rbp-53], r14
  000bb	c7 45 17 01 00
	00 00		 mov	 DWORD PTR desc$5[rbp-81], 1
  000c2	c7 45 1b 01 00
	00 00		 mov	 DWORD PTR desc$5[rbp-77], 1
  000c9	c7 45 1f 1c 00
	00 00		 mov	 DWORD PTR desc$5[rbp-73], 28
  000d0	44 89 75 2b	 mov	 DWORD PTR desc$5[rbp-61], r14d
  000d4	c7 45 2f 08 00
	00 00		 mov	 DWORD PTR desc$5[rbp-57], 8
  000db	4c 89 75 d7	 mov	 QWORD PTR pTexture$1[rbp-89], r14
  000df	89 45 ef	 mov	 DWORD PTR subResource$2[rbp-81], eax
  000e2	44 89 75 f3	 mov	 DWORD PTR subResource$2[rbp-77], r14d
  000e6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000e9	ff 50 28	 call	 QWORD PTR [rax+40]

; 335  :         IM_ASSERT(pTexture != NULL);

  000ec	48 8b 55 d7	 mov	 rdx, QWORD PTR pTexture$1[rbp-89]
  000f0	48 85 d2	 test	 rdx, rdx
  000f3	75 1e		 jne	 SHORT $LN3@ImGui_Impl
  000f5	41 b8 4f 01 00
	00		 mov	 r8d, 335		; 0000014fH
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@LEKEAPIM@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010f	48 8b 55 d7	 mov	 rdx, QWORD PTR pTexture$1[rbp-89]
$LN3@ImGui_Impl:

; 336  : 
; 337  :         // Create texture view
; 338  :         D3D11_SHADER_RESOURCE_VIEW_DESC srvDesc;
; 339  :         ZeroMemory(&srvDesc, sizeof(srvDesc));
; 340  :         srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
; 341  :         srvDesc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2D;
; 342  :         srvDesc.Texture2D.MipLevels = desc.MipLevels;

  00113	8b 45 17	 mov	 eax, DWORD PTR desc$5[rbp-81]

; 343  :         srvDesc.Texture2D.MostDetailedMip = 0;
; 344  :         bd->pd3dDevice->CreateShaderResourceView(pTexture, &srvDesc, &bd->pFontTextureView);

  00116	4c 8d 4e 50	 lea	 r9, QWORD PTR [rsi+80]
  0011a	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0011d	4c 8d 45 f7	 lea	 r8, QWORD PTR srvDesc$3[rbp-89]
  00121	4c 89 75 07	 mov	 QWORD PTR srvDesc$3[rbp-73], r14
  00125	c7 45 f7 1c 00
	00 00		 mov	 DWORD PTR srvDesc$3[rbp-89], 28
  0012c	48 c7 45 fb 04
	00 00 00	 mov	 QWORD PTR srvDesc$3[rbp-85], 4
  00134	89 45 03	 mov	 DWORD PTR srvDesc$3[rbp-77], eax
  00137	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0013a	ff 50 38	 call	 QWORD PTR [rax+56]

; 345  :         pTexture->Release();

  0013d	48 8b 4d d7	 mov	 rcx, QWORD PTR pTexture$1[rbp-89]
  00141	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00144	ff 50 10	 call	 QWORD PTR [rax+16]

; 346  :     }
; 347  : 
; 348  :     // Store our identifier
; 349  :     io.Fonts->SetTexID((ImTextureID)bd->pFontTextureView);

  00147	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]

; 350  : 
; 351  :     // Create texture sampler
; 352  :     {
; 353  :         D3D11_SAMPLER_DESC desc;
; 354  :         ZeroMemory(&desc, sizeof(desc));
; 355  :         desc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
; 356  :         desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
; 357  :         desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
; 358  :         desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
; 359  :         desc.MipLODBias = 0.f;
; 360  :         desc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;
; 361  :         desc.MinLOD = 0.f;
; 362  :         desc.MaxLOD = 0.f;
; 363  :         bd->pd3dDevice->CreateSamplerState(&desc, &bd->pFontSampler);

  0014b	4c 8d 46 48	 lea	 r8, QWORD PTR [rsi+72]
  0014f	48 8b 46 50	 mov	 rax, QWORD PTR [rsi+80]
  00153	48 8d 55 0f	 lea	 rdx, QWORD PTR desc$4[rbp-89]
  00157	66 0f 6f 0d 00
	00 00 00	 movdqa	 xmm1, XMMWORD PTR __xmm@00000001000000010000000100000015
  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	4c 89 75 1f	 mov	 QWORD PTR desc$4[rbp-73], r14
  00166	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0016a	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0016d	f3 0f 7f 45 2b	 movdqu	 XMMWORD PTR desc$4[rbp-61], xmm0
  00172	c7 45 27 08 00
	00 00		 mov	 DWORD PTR desc$4[rbp-65], 8
  00179	f3 0f 7f 4d 0f	 movdqu	 XMMWORD PTR desc$4[rbp-89], xmm1
  0017e	4c 89 75 3b	 mov	 QWORD PTR desc$4[rbp-45], r14
  00182	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00185	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 364  :     }
; 365  : }

  0018b	48 8b 4d 47	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-89]
  0018f	48 33 cc	 xor	 rcx, rsp
  00192	e8 00 00 00 00	 call	 __security_check_cookie
  00197	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  0019f	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  001a3	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  001a7	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  001ab	4d 8b 73 28	 mov	 r14, QWORD PTR [r11+40]
  001af	49 8b e3	 mov	 rsp, r11
  001b2	5d		 pop	 rbp
  001b3	c3		 ret	 0
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ ENDP		; ImGui_ImplDX11_CreateFontsTexture
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
pTexture$1 = 96
height$2 = 96
pixelShaderBlob$3 = 96
vertexShaderBlob$4 = 96
width$5 = 104
subResource$6 = 112
pixels$7 = 112
desc$8 = 112
srvDesc$9 = 136
desc$10 = 136
desc$11 = 176
desc$12 = 224
desc$13 = 496
desc$14 = 496
local_layout$15 = 496
__$ArrayPad$ = 592
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ PROC	; ImGui_ImplDX11_CreateDeviceObjects

; 368  : {

$LN40:
  00000	40 55		 push	 rbp
  00002	41 56		 push	 r14
  00004	41 57		 push	 r15
  00006	48 8d ac 24 a0
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-352]
  0000e	48 81 ec 60 02
	00 00		 sub	 rsp, 608		; 00000260H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 85 50 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00026	4c 8b 35 00 00
	00 00		 mov	 r14, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  0002d	45 33 ff	 xor	 r15d, r15d
  00030	4d 85 f6	 test	 r14, r14
  00033	74 09		 je	 SHORT $LN12@ImGui_Impl
  00035	4d 8b b6 98 00
	00 00		 mov	 r14, QWORD PTR [r14+152]
  0003c	eb 03		 jmp	 SHORT $LN13@ImGui_Impl
$LN12@ImGui_Impl:
  0003e	4d 8b f7	 mov	 r14, r15
$LN13@ImGui_Impl:
  00041	48 89 9c 24 80
	02 00 00	 mov	 QWORD PTR [rsp+640], rbx
  00049	48 89 b4 24 88
	02 00 00	 mov	 QWORD PTR [rsp+648], rsi
  00051	48 89 bc 24 90
	02 00 00	 mov	 QWORD PTR [rsp+656], rdi
  00059	4c 89 a4 24 98
	02 00 00	 mov	 QWORD PTR [rsp+664], r12

; 369  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 370  :     if (!bd->pd3dDevice)

  00061	4d 39 3e	 cmp	 QWORD PTR [r14], r15
  00064	0f 84 a6 00 00
	00		 je	 $LN35@ImGui_Impl

; 371  :         return false;
; 372  :     if (bd->pFontSampler)

  0006a	4d 39 7e 48	 cmp	 QWORD PTR [r14+72], r15
  0006e	74 05		 je	 SHORT $LN3@ImGui_Impl

; 373  :         ImGui_ImplDX11_InvalidateDeviceObjects();

  00070	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ; ImGui_ImplDX11_InvalidateDeviceObjects
$LN3@ImGui_Impl:

; 374  : 
; 375  :     // By using D3DCompile() from <d3dcompiler.h> / d3dcompiler.lib, we introduce a dependency to a given version of d3dcompiler_XX.dll (see D3DCOMPILER_DLL_A)
; 376  :     // If you would like to use this DX11 sample code but remove this dependency you can:
; 377  :     //  1) compile once, save the compiled shader blobs into a file or source code and pass them to CreateVertexShader()/CreatePixelShader() [preferred solution]
; 378  :     //  2) use code to detect any version of the DLL and grab a pointer to D3DCompile from the DLL.
; 379  :     // See https://github.com/ocornut/imgui/pull/638 for sources and details.
; 380  : 
; 381  :     // Create the vertex shader
; 382  :     {
; 383  :         static const char* vertexShader =
; 384  :             "cbuffer vertexBuffer : register(b0) \
; 385  :             {\
; 386  :               float4x4 ProjectionMatrix; \
; 387  :             };\
; 388  :             struct VS_INPUT\
; 389  :             {\
; 390  :               float2 pos : POSITION;\
; 391  :               float4 col : COLOR0;\
; 392  :               float2 uv  : TEXCOORD0;\
; 393  :             };\
; 394  :             \
; 395  :             struct PS_INPUT\
; 396  :             {\
; 397  :               float4 pos : SV_POSITION;\
; 398  :               float4 col : COLOR0;\
; 399  :               float2 uv  : TEXCOORD0;\
; 400  :             };\
; 401  :             \
; 402  :             PS_INPUT main(VS_INPUT input)\
; 403  :             {\
; 404  :               PS_INPUT output;\
; 405  :               output.pos = mul( ProjectionMatrix, float4(input.pos.xy, 0.f, 1.f));\
; 406  :               output.col = input.col;\
; 407  :               output.uv  = input.uv;\
; 408  :               return output;\
; 409  :             }";
; 410  : 
; 411  :         ID3DBlob* vertexShaderBlob;
; 412  :         if (FAILED(D3DCompile(vertexShader, strlen(vertexShader), NULL, NULL, NULL, "main", "vs_4_0", 0, 0, &vertexShaderBlob, NULL)))

  00075	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  0007a	48 8d 44 24 60	 lea	 rax, QWORD PTR vertexShaderBlob$4[rsp]
  0007f	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00084	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_04GHJNJNPO@main@
  0008b	44 89 7c 24 40	 mov	 DWORD PTR [rsp+64], r15d
  00090	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06BNDBNCGN@vs_4_0@
  00097	44 89 7c 24 38	 mov	 DWORD PTR [rsp+56], r15d
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register@
  000a3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  000b0	45 33 c0	 xor	 r8d, r8d
  000b3	ba dd 02 00 00	 mov	 edx, 733		; 000002ddH
  000b8	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_D3DCompile
  000c3	85 c0		 test	 eax, eax
  000c5	78 49		 js	 SHORT $LN35@ImGui_Impl

; 413  :             return false; // NB: Pass ID3DBlob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
; 414  :         if (bd->pd3dDevice->CreateVertexShader(vertexShaderBlob->GetBufferPointer(), vertexShaderBlob->GetBufferSize(), NULL, &bd->pVertexShader) != S_OK)

  000c7	49 8b 36	 mov	 rsi, QWORD PTR [r14]
  000ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR vertexShaderBlob$4[rsp]
  000cf	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000d2	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]
  000d6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000d9	ff 50 20	 call	 QWORD PTR [rax+32]
  000dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR vertexShaderBlob$4[rsp]
  000e1	48 8b d8	 mov	 rbx, rax
  000e4	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000e7	ff 52 18	 call	 QWORD PTR [rdx+24]
  000ea	49 8d 56 28	 lea	 rdx, QWORD PTR [r14+40]
  000ee	45 33 c9	 xor	 r9d, r9d
  000f1	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000f6	4c 8b c3	 mov	 r8, rbx
  000f9	48 8b d0	 mov	 rdx, rax
  000fc	48 8b ce	 mov	 rcx, rsi
  000ff	ff d7		 call	 rdi
  00101	48 8b 4c 24 60	 mov	 rcx, QWORD PTR vertexShaderBlob$4[rsp]
  00106	85 c0		 test	 eax, eax
  00108	74 44		 je	 SHORT $LN5@ImGui_Impl

; 415  :         {
; 416  :             vertexShaderBlob->Release();

  0010a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
$LN38@ImGui_Impl:

; 519  : }

  0010d	ff 50 10	 call	 QWORD PTR [rax+16]
$LN35@ImGui_Impl:
  00110	32 c0		 xor	 al, al
$LN1@ImGui_Impl:
  00112	4c 8b a4 24 98
	02 00 00	 mov	 r12, QWORD PTR [rsp+664]
  0011a	48 8b bc 24 90
	02 00 00	 mov	 rdi, QWORD PTR [rsp+656]
  00122	48 8b b4 24 88
	02 00 00	 mov	 rsi, QWORD PTR [rsp+648]
  0012a	48 8b 9c 24 80
	02 00 00	 mov	 rbx, QWORD PTR [rsp+640]
  00132	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00139	48 33 cc	 xor	 rcx, rsp
  0013c	e8 00 00 00 00	 call	 __security_check_cookie
  00141	48 81 c4 60 02
	00 00		 add	 rsp, 608		; 00000260H
  00148	41 5f		 pop	 r15
  0014a	41 5e		 pop	 r14
  0014c	5d		 pop	 rbp
  0014d	c3		 ret	 0
$LN5@ImGui_Impl:

; 417  :             return false;
; 418  :         }
; 419  : 
; 420  :         // Create the input layout
; 421  :         D3D11_INPUT_ELEMENT_DESC local_layout[] =
; 422  :         {
; 423  :             { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT,   0, (UINT)IM_OFFSETOF(ImDrawVert, pos), D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 424  :             { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,   0, (UINT)IM_OFFSETOF(ImDrawVert, uv),  D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 425  :             { "COLOR",    0, DXGI_FORMAT_R8G8B8A8_UNORM, 0, (UINT)IM_OFFSETOF(ImDrawVert, col), D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 426  :         };
; 427  :         if (bd->pd3dDevice->CreateInputLayout(local_layout, 3, vertexShaderBlob->GetBufferPointer(), vertexShaderBlob->GetBufferSize(), &bd->pInputLayout) != S_OK)

  0014e	49 8b 36	 mov	 rsi, QWORD PTR [r14]
  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08JPMAAECC@POSITION@
  00158	48 89 85 f0 00
	00 00		 mov	 QWORD PTR local_layout$15[rbp-256], rax
  0015f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08CMDKBPJM@TEXCOORD@
  00166	48 89 85 10 01
	00 00		 mov	 QWORD PTR local_layout$15[rbp-224], rax
  0016d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DPNLPLKI@COLOR@
  00174	48 89 85 30 01
	00 00		 mov	 QWORD PTR local_layout$15[rbp-192], rax
  0017b	44 89 bd f8 00
	00 00		 mov	 DWORD PTR local_layout$15[rbp-248], r15d
  00182	48 c7 85 fc 00
	00 00 10 00 00
	00		 mov	 QWORD PTR local_layout$15[rbp-244], 16
  0018d	4c 89 bd 04 01
	00 00		 mov	 QWORD PTR local_layout$15[rbp-236], r15
  00194	44 89 bd 0c 01
	00 00		 mov	 DWORD PTR local_layout$15[rbp-228], r15d
  0019b	44 89 bd 18 01
	00 00		 mov	 DWORD PTR local_layout$15[rbp-216], r15d
  001a2	48 c7 85 1c 01
	00 00 10 00 00
	00		 mov	 QWORD PTR local_layout$15[rbp-212], 16
  001ad	48 c7 85 24 01
	00 00 08 00 00
	00		 mov	 QWORD PTR local_layout$15[rbp-204], 8
  001b8	44 89 bd 2c 01
	00 00		 mov	 DWORD PTR local_layout$15[rbp-196], r15d
  001bf	44 89 bd 38 01
	00 00		 mov	 DWORD PTR local_layout$15[rbp-184], r15d
  001c6	48 c7 85 3c 01
	00 00 1c 00 00
	00		 mov	 QWORD PTR local_layout$15[rbp-180], 28
  001d1	48 c7 85 44 01
	00 00 10 00 00
	00		 mov	 QWORD PTR local_layout$15[rbp-172], 16
  001dc	44 89 bd 4c 01
	00 00		 mov	 DWORD PTR local_layout$15[rbp-164], r15d
  001e3	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  001e6	48 8b 78 58	 mov	 rdi, QWORD PTR [rax+88]
  001ea	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  001ed	ff 50 20	 call	 QWORD PTR [rax+32]
  001f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR vertexShaderBlob$4[rsp]
  001f5	48 8b d8	 mov	 rbx, rax
  001f8	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001fb	ff 52 18	 call	 QWORD PTR [rdx+24]
  001fe	49 8d 56 30	 lea	 rdx, QWORD PTR [r14+48]
  00202	41 b8 03 00 00
	00		 mov	 r8d, 3
  00208	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0020d	4c 8b c8	 mov	 r9, rax
  00210	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR local_layout$15[rbp-256]
  00217	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0021c	48 8b ce	 mov	 rcx, rsi
  0021f	ff d7		 call	 rdi
  00221	48 8b 4c 24 60	 mov	 rcx, QWORD PTR vertexShaderBlob$4[rsp]
  00226	85 c0		 test	 eax, eax
  00228	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0022b	0f 85 dc fe ff
	ff		 jne	 $LN38@ImGui_Impl

; 428  :         {
; 429  :             vertexShaderBlob->Release();
; 430  :             return false;
; 431  :         }
; 432  :         vertexShaderBlob->Release();

  00231	ff 50 10	 call	 QWORD PTR [rax+16]

; 433  : 
; 434  :         // Create the constant buffer
; 435  :         {
; 436  :             D3D11_BUFFER_DESC desc;
; 437  :             desc.ByteWidth = sizeof(VERTEX_CONSTANT_BUFFER);
; 438  :             desc.Usage = D3D11_USAGE_DYNAMIC;
; 439  :             desc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
; 440  :             desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
; 441  :             desc.MiscFlags = 0;
; 442  :             bd->pd3dDevice->CreateBuffer(&desc, NULL, &bd->pVertexConstantBuffer);

  00234	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00237	4d 8d 4e 38	 lea	 r9, QWORD PTR [r14+56]
  0023b	c7 44 24 70 40
	00 00 00	 mov	 DWORD PTR desc$8[rsp], 64 ; 00000040H
  00243	48 8d 54 24 70	 lea	 rdx, QWORD PTR desc$8[rsp]
  00248	c7 44 24 74 02
	00 00 00	 mov	 DWORD PTR desc$8[rsp+4], 2
  00250	45 33 c0	 xor	 r8d, r8d
  00253	c7 44 24 78 04
	00 00 00	 mov	 DWORD PTR desc$8[rsp+8], 4
  0025b	48 c7 44 24 7c
	00 00 01 00	 mov	 QWORD PTR desc$8[rsp+12], 65536 ; 00010000H
  00264	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00267	ff 50 18	 call	 QWORD PTR [rax+24]

; 443  :         }
; 444  :     }
; 445  : 
; 446  :     // Create the pixel shader
; 447  :     {
; 448  :         static const char* pixelShader =
; 449  :             "struct PS_INPUT\
; 450  :             {\
; 451  :             float4 pos : SV_POSITION;\
; 452  :             float4 col : COLOR0;\
; 453  :             float2 uv  : TEXCOORD0;\
; 454  :             };\
; 455  :             sampler sampler0;\
; 456  :             Texture2D texture0;\
; 457  :             \
; 458  :             float4 main(PS_INPUT input) : SV_Target\
; 459  :             {\
; 460  :             float4 out_col = input.col * texture0.Sample(sampler0, input.uv); \
; 461  :             return out_col; \
; 462  :             }";
; 463  : 
; 464  :         ID3DBlob* pixelShaderBlob;
; 465  :         if (FAILED(D3DCompile(pixelShader, strlen(pixelShader), NULL, NULL, NULL, "main", "ps_4_0", 0, 0, &pixelShaderBlob, NULL)))

  0026a	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  0026f	48 8d 44 24 60	 lea	 rax, QWORD PTR pixelShaderBlob$3[rsp]
  00274	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5@
  00280	44 89 7c 24 40	 mov	 DWORD PTR [rsp+64], r15d
  00285	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06HOOBOHFH@ps_4_0@
  0028c	44 89 7c 24 38	 mov	 DWORD PTR [rsp+56], r15d
  00291	45 33 c9	 xor	 r9d, r9d
  00294	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00299	45 33 c0	 xor	 r8d, r8d
  0029c	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  002a1	ba 91 01 00 00	 mov	 edx, 401		; 00000191H
  002a6	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_D3DCompile
  002b1	85 c0		 test	 eax, eax
  002b3	0f 88 57 fe ff
	ff		 js	 $LN35@ImGui_Impl

; 466  :             return false; // NB: Pass ID3DBlob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
; 467  :         if (bd->pd3dDevice->CreatePixelShader(pixelShaderBlob->GetBufferPointer(), pixelShaderBlob->GetBufferSize(), NULL, &bd->pPixelShader) != S_OK)

  002b9	49 8b 36	 mov	 rsi, QWORD PTR [r14]
  002bc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixelShaderBlob$3[rsp]
  002c1	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  002c4	48 8b 78 78	 mov	 rdi, QWORD PTR [rax+120]
  002c8	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  002cb	ff 50 20	 call	 QWORD PTR [rax+32]
  002ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixelShaderBlob$3[rsp]
  002d3	48 8b d8	 mov	 rbx, rax
  002d6	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  002d9	ff 52 18	 call	 QWORD PTR [rdx+24]
  002dc	49 8d 56 40	 lea	 rdx, QWORD PTR [r14+64]
  002e0	45 33 c9	 xor	 r9d, r9d
  002e3	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  002e8	4c 8b c3	 mov	 r8, rbx
  002eb	48 8b d0	 mov	 rdx, rax
  002ee	48 8b ce	 mov	 rcx, rsi
  002f1	ff d7		 call	 rdi
  002f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixelShaderBlob$3[rsp]
  002f8	85 c0		 test	 eax, eax
  002fa	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  002fd	0f 85 0a fe ff
	ff		 jne	 $LN38@ImGui_Impl

; 468  :         {
; 469  :             pixelShaderBlob->Release();
; 470  :             return false;
; 471  :         }
; 472  :         pixelShaderBlob->Release();

  00303	ff 50 10	 call	 QWORD PTR [rax+16]

; 473  :     }
; 474  : 
; 475  :     // Create the blending setup
; 476  :     {
; 477  :         D3D11_BLEND_DESC desc;
; 478  :         ZeroMemory(&desc, sizeof(desc));

  00306	33 c0		 xor	 eax, eax
  00308	48 8d 4d 05	 lea	 rcx, QWORD PTR desc$12[rbp-219]
  0030c	33 d2		 xor	 edx, edx
  0030e	89 45 e4	 mov	 DWORD PTR desc$12[rbp-252], eax
  00311	41 b8 e3 00 00
	00		 mov	 r8d, 227		; 000000e3H
  00317	e8 00 00 00 00	 call	 memset

; 479  :         desc.AlphaToCoverageEnable = false;
; 480  :         desc.RenderTarget[0].BlendEnable = true;
; 481  :         desc.RenderTarget[0].SrcBlend = D3D11_BLEND_SRC_ALPHA;
; 482  :         desc.RenderTarget[0].DestBlend = D3D11_BLEND_INV_SRC_ALPHA;
; 483  :         desc.RenderTarget[0].BlendOp = D3D11_BLEND_OP_ADD;
; 484  :         desc.RenderTarget[0].SrcBlendAlpha = D3D11_BLEND_ONE;
; 485  :         desc.RenderTarget[0].DestBlendAlpha = D3D11_BLEND_INV_SRC_ALPHA;
; 486  :         desc.RenderTarget[0].BlendOpAlpha = D3D11_BLEND_OP_ADD;
; 487  :         desc.RenderTarget[0].RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL;
; 488  :         bd->pd3dDevice->CreateBlendState(&desc, &bd->pBlendState);

  0031c	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  0031f	4d 8d 46 60	 lea	 r8, QWORD PTR [r14+96]
  00323	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00000006000000020000000100000006
  0032b	48 8d 55 e0	 lea	 rdx, QWORD PTR desc$12[rbp-256]
  0032f	44 89 7d e0	 mov	 DWORD PTR desc$12[rbp-256], r15d
  00333	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR desc$12[rbp-248], 1
  0033a	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR desc$12[rbp-244], 5
  00341	66 0f 7f 45 f0	 movdqa	 XMMWORD PTR desc$12[rbp-240], xmm0
  00346	c7 45 00 01 00
	00 00		 mov	 DWORD PTR desc$12[rbp-224], 1
  0034d	c6 45 04 0f	 mov	 BYTE PTR desc$12[rbp-220], 15
  00351	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00354	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]

; 489  :     }
; 490  : 
; 491  :     // Create the rasterizer state
; 492  :     {
; 493  :         D3D11_RASTERIZER_DESC desc;
; 494  :         ZeroMemory(&desc, sizeof(desc));
; 495  :         desc.FillMode = D3D11_FILL_SOLID;
; 496  :         desc.CullMode = D3D11_CULL_NONE;
; 497  :         desc.ScissorEnable = true;
; 498  :         desc.DepthClipEnable = true;
; 499  :         bd->pd3dDevice->CreateRasterizerState(&desc, &bd->pRasterizerState);

  0035a	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  0035d	4d 8d 46 58	 lea	 r8, QWORD PTR [r14+88]
  00361	0f 57 c0	 xorps	 xmm0, xmm0
  00364	4c 89 7d a8	 mov	 QWORD PTR desc$10[rbp-224], r15
  00368	f3 0f 7f 45 90	 movdqu	 XMMWORD PTR desc$10[rbp-248], xmm0
  0036d	c7 45 88 03 00
	00 00		 mov	 DWORD PTR desc$10[rbp-256], 3
  00374	48 8d 55 88	 lea	 rdx, QWORD PTR desc$10[rbp-256]
  00378	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR desc$10[rbp-252], 1
  0037f	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR desc$10[rbp-228], 1
  00386	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR desc$10[rbp-232], 1
  0038d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00390	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]

; 500  :     }
; 501  : 
; 502  :     // Create depth-stencil State
; 503  :     {
; 504  :         D3D11_DEPTH_STENCIL_DESC desc;
; 505  :         ZeroMemory(&desc, sizeof(desc));
; 506  :         desc.DepthEnable = false;

  00396	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00000000000000080000000100000000

; 507  :         desc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
; 508  :         desc.DepthFunc = D3D11_COMPARISON_ALWAYS;
; 509  :         desc.StencilEnable = false;
; 510  :         desc.FrontFace.StencilFailOp = desc.FrontFace.StencilDepthFailOp = desc.FrontFace.StencilPassOp = D3D11_STENCIL_OP_KEEP;
; 511  :         desc.FrontFace.StencilFunc = D3D11_COMPARISON_ALWAYS;
; 512  :         desc.BackFace = desc.FrontFace;
; 513  :         bd->pd3dDevice->CreateDepthStencilState(&desc, &bd->pDepthStencilState);

  0039e	4d 8d 46 68	 lea	 r8, QWORD PTR [r14+104]
  003a2	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  003a5	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR desc$14[rbp-256]
  003ac	f3 0f 7f 85 f0
	00 00 00	 movdqu	 XMMWORD PTR desc$14[rbp-256], xmm0
  003b4	c7 85 0c 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$14[rbp-228], 1
  003be	c7 85 08 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$14[rbp-232], 1
  003c8	c7 85 04 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$14[rbp-236], 1
  003d2	c7 85 10 01 00
	00 08 00 00 00	 mov	 DWORD PTR desc$14[rbp-224], 8
  003dc	0f 10 85 04 01
	00 00		 movups	 xmm0, XMMWORD PTR desc$14[rbp-236]
  003e3	44 89 bd 00 01
	00 00		 mov	 DWORD PTR desc$14[rbp-240], r15d
  003ea	0f 11 85 14 01
	00 00		 movups	 XMMWORD PTR desc$14[rbp-220], xmm0
  003f1	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  003f4	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  003fa	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00401	48 85 ff	 test	 rdi, rdi
  00404	75 26		 jne	 SHORT $LN37@ImGui_Impl
  00406	41 b8 83 0e 00
	00		 mov	 r8d, 3715		; 00000e83H
  0040c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KG@OOKDKDDA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00413	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NE@MGLAEJCB@?$AAG?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  0041a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00420	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00427	48 85 ff	 test	 rdi, rdi
  0042a	74 09		 je	 SHORT $LN27@ImGui_Impl
$LN37@ImGui_Impl:
  0042c	48 8b b7 98 00
	00 00		 mov	 rsi, QWORD PTR [rdi+152]
  00433	eb 03		 jmp	 SHORT $LN28@ImGui_Impl
$LN27@ImGui_Impl:
  00435	49 8b f7	 mov	 rsi, r15
$LN28@ImGui_Impl:

; 313  :     io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

  00438	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]
  0043c	4c 8d 4c 24 60	 lea	 r9, QWORD PTR height$2[rsp]
  00441	4c 8d 44 24 68	 lea	 r8, QWORD PTR width$5[rsp]
  00446	48 8d 54 24 70	 lea	 rdx, QWORD PTR pixels$7[rsp]
  0044b	e8 00 00 00 00	 call	 ?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsRGBA32

; 314  : 
; 315  :     // Upload texture to graphics system
; 316  :     {
; 317  :         D3D11_TEXTURE2D_DESC desc;
; 318  :         ZeroMemory(&desc, sizeof(desc));
; 319  :         desc.Width = width;
; 320  :         desc.Height = height;

  00450	8b 44 24 60	 mov	 eax, DWORD PTR height$2[rsp]

; 321  :         desc.MipLevels = 1;
; 322  :         desc.ArraySize = 1;
; 323  :         desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
; 324  :         desc.SampleDesc.Count = 1;
; 325  :         desc.Usage = D3D11_USAGE_DEFAULT;
; 326  :         desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
; 327  :         desc.CPUAccessFlags = 0;
; 328  : 
; 329  :         ID3D11Texture2D* pTexture = NULL;
; 330  :         D3D11_SUBRESOURCE_DATA subResource;
; 331  :         subResource.pSysMem = pixels;
; 332  :         subResource.SysMemPitch = desc.Width * 4;
; 333  :         subResource.SysMemSlicePitch = 0;
; 334  :         bd->pd3dDevice->CreateTexture2D(&desc, &subResource, &pTexture);

  00454	4c 8d 4c 24 60	 lea	 r9, QWORD PTR pTexture$1[rsp]
  00459	8b 4c 24 68	 mov	 ecx, DWORD PTR width$5[rsp]
  0045d	4c 8d 44 24 70	 lea	 r8, QWORD PTR subResource$6[rsp]
  00462	89 45 b4	 mov	 DWORD PTR desc$11[rbp-252], eax
  00465	48 8d 55 b0	 lea	 rdx, QWORD PTR desc$11[rbp-256]
  00469	48 8b 44 24 70	 mov	 rax, QWORD PTR pixels$7[rsp]
  0046e	48 89 44 24 70	 mov	 QWORD PTR subResource$6[rsp], rax
  00473	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [rcx*4]
  0047a	89 4d b0	 mov	 DWORD PTR desc$11[rbp-256], ecx
  0047d	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00480	48 c7 45 c4 01
	00 00 00	 mov	 QWORD PTR desc$11[rbp-236], 1
  00488	4c 89 7d d4	 mov	 QWORD PTR desc$11[rbp-220], r15
  0048c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR desc$11[rbp-248], 1
  00493	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR desc$11[rbp-244], 1
  0049a	c7 45 c0 1c 00
	00 00		 mov	 DWORD PTR desc$11[rbp-240], 28
  004a1	44 89 7d cc	 mov	 DWORD PTR desc$11[rbp-228], r15d
  004a5	c7 45 d0 08 00
	00 00		 mov	 DWORD PTR desc$11[rbp-224], 8
  004ac	4c 89 7c 24 60	 mov	 QWORD PTR pTexture$1[rsp], r15
  004b1	89 44 24 78	 mov	 DWORD PTR subResource$6[rsp+8], eax
  004b5	44 89 7c 24 7c	 mov	 DWORD PTR subResource$6[rsp+12], r15d
  004ba	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  004bd	ff 50 28	 call	 QWORD PTR [rax+40]

; 335  :         IM_ASSERT(pTexture != NULL);

  004c0	48 8b 54 24 60	 mov	 rdx, QWORD PTR pTexture$1[rsp]
  004c5	48 85 d2	 test	 rdx, rdx
  004c8	75 1f		 jne	 SHORT $LN20@ImGui_Impl
  004ca	41 b8 4f 01 00
	00		 mov	 r8d, 335		; 0000014fH
  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@LEKEAPIM@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  004de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e4	48 8b 54 24 60	 mov	 rdx, QWORD PTR pTexture$1[rsp]
$LN20@ImGui_Impl:

; 336  : 
; 337  :         // Create texture view
; 338  :         D3D11_SHADER_RESOURCE_VIEW_DESC srvDesc;
; 339  :         ZeroMemory(&srvDesc, sizeof(srvDesc));
; 340  :         srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
; 341  :         srvDesc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2D;
; 342  :         srvDesc.Texture2D.MipLevels = desc.MipLevels;

  004e9	8b 45 b8	 mov	 eax, DWORD PTR desc$11[rbp-248]

; 343  :         srvDesc.Texture2D.MostDetailedMip = 0;
; 344  :         bd->pd3dDevice->CreateShaderResourceView(pTexture, &srvDesc, &bd->pFontTextureView);

  004ec	4c 8d 4e 50	 lea	 r9, QWORD PTR [rsi+80]
  004f0	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  004f3	4c 8d 45 88	 lea	 r8, QWORD PTR srvDesc$9[rbp-256]
  004f7	4c 89 7d 98	 mov	 QWORD PTR srvDesc$9[rbp-240], r15
  004fb	c7 45 88 1c 00
	00 00		 mov	 DWORD PTR srvDesc$9[rbp-256], 28
  00502	48 c7 45 8c 04
	00 00 00	 mov	 QWORD PTR srvDesc$9[rbp-252], 4
  0050a	89 45 94	 mov	 DWORD PTR srvDesc$9[rbp-244], eax
  0050d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00510	ff 50 38	 call	 QWORD PTR [rax+56]

; 345  :         pTexture->Release();

  00513	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTexture$1[rsp]
  00518	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0051b	ff 50 10	 call	 QWORD PTR [rax+16]

; 346  :     }
; 347  : 
; 348  :     // Store our identifier
; 349  :     io.Fonts->SetTexID((ImTextureID)bd->pFontTextureView);

  0051e	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]

; 360  :         desc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;
; 361  :         desc.MinLOD = 0.f;
; 362  :         desc.MaxLOD = 0.f;
; 363  :         bd->pd3dDevice->CreateSamplerState(&desc, &bd->pFontSampler);

  00522	4c 8d 46 48	 lea	 r8, QWORD PTR [rsi+72]
  00526	48 8b 46 50	 mov	 rax, QWORD PTR [rsi+80]
  0052a	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR desc$13[rbp-256]
  00531	66 0f 6f 0d 00
	00 00 00	 movdqa	 xmm1, XMMWORD PTR __xmm@00000001000000010000000100000015
  00539	0f 57 c0	 xorps	 xmm0, xmm0

; 350  : 
; 351  :     // Create texture sampler
; 352  :     {
; 353  :         D3D11_SAMPLER_DESC desc;
; 354  :         ZeroMemory(&desc, sizeof(desc));
; 355  :         desc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
; 356  :         desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
; 357  :         desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
; 358  :         desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
; 359  :         desc.MipLODBias = 0.f;

  0053c	4c 89 bd 00 01
	00 00		 mov	 QWORD PTR desc$13[rbp-240], r15
  00543	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 360  :         desc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;
; 361  :         desc.MinLOD = 0.f;
; 362  :         desc.MaxLOD = 0.f;
; 363  :         bd->pd3dDevice->CreateSamplerState(&desc, &bd->pFontSampler);

  00547	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0054a	f3 0f 7f 85 0c
	01 00 00	 movdqu	 XMMWORD PTR desc$13[rbp-228], xmm0
  00552	c7 85 08 01 00
	00 08 00 00 00	 mov	 DWORD PTR desc$13[rbp-232], 8
  0055c	f3 0f 7f 8d f0
	00 00 00	 movdqu	 XMMWORD PTR desc$13[rbp-256], xmm1
  00564	4c 89 bd 1c 01
	00 00		 mov	 QWORD PTR desc$13[rbp-212], r15
  0056b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0056e	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 514  :     }
; 515  : 
; 516  :     ImGui_ImplDX11_CreateFontsTexture();
; 517  : 
; 518  :     return true;

  00574	b0 01		 mov	 al, 1
  00576	e9 97 fb ff ff	 jmp	 $LN1@ImGui_Impl
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ ENDP	; ImGui_ImplDX11_CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ PROC	; ImGui_ImplDX11_InvalidateDeviceObjects

; 522  : {

$LN29:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  0000a	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00011	33 ff		 xor	 edi, edi
  00013	48 85 db	 test	 rbx, rbx
  00016	74 09		 je	 SHORT $LN17@ImGui_Impl
  00018	48 8b 9b 98 00
	00 00		 mov	 rbx, QWORD PTR [rbx+152]
  0001f	eb 03		 jmp	 SHORT $LN18@ImGui_Impl
$LN17@ImGui_Impl:
  00021	48 8b df	 mov	 rbx, rdi
$LN18@ImGui_Impl:

; 523  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 524  :     if (!bd->pd3dDevice)

  00024	48 39 3b	 cmp	 QWORD PTR [rbx], rdi
  00027	0f 84 06 01 00
	00		 je	 $LN13@ImGui_Impl

; 525  :         return;
; 526  : 
; 527  :     if (bd->pFontSampler) { bd->pFontSampler->Release(); bd->pFontSampler = NULL; }

  0002d	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  00031	48 85 c9	 test	 rcx, rcx
  00034	74 0a		 je	 SHORT $LN3@ImGui_Impl
  00036	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00039	ff 50 10	 call	 QWORD PTR [rax+16]
  0003c	48 89 7b 48	 mov	 QWORD PTR [rbx+72], rdi
$LN3@ImGui_Impl:

; 528  :     if (bd->pFontTextureView) { bd->pFontTextureView->Release(); bd->pFontTextureView = NULL; ImGui::GetIO().Fonts->SetTexID(NULL); } // We copied data->pFontTextureView to io.Fonts->TexID so let's clear that as well.

  00040	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00044	48 85 c9	 test	 rcx, rcx
  00047	74 3f		 je	 SHORT $LN4@ImGui_Impl
  00049	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0004c	ff 50 10	 call	 QWORD PTR [rax+16]
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 528  :     if (bd->pFontTextureView) { bd->pFontTextureView->Release(); bd->pFontTextureView = NULL; ImGui::GetIO().Fonts->SetTexID(NULL); } // We copied data->pFontTextureView to io.Fonts->TexID so let's clear that as well.

  00056	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  0005a	48 85 c0	 test	 rax, rax
  0005d	75 21		 jne	 SHORT $LN26@ImGui_Impl
  0005f	41 b8 83 0e 00
	00		 mov	 r8d, 3715		; 00000e83H
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KG@OOKDKDDA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NE@MGLAEJCB@?$AAG?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN26@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 528  :     if (bd->pFontTextureView) { bd->pFontTextureView->Release(); bd->pFontTextureView = NULL; ImGui::GetIO().Fonts->SetTexID(NULL); } // We copied data->pFontTextureView to io.Fonts->TexID so let's clear that as well.

  00080	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00084	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN4@ImGui_Impl:

; 529  :     if (bd->pIB) { bd->pIB->Release(); bd->pIB = NULL; }

  00088	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0008c	48 85 c9	 test	 rcx, rcx
  0008f	74 0a		 je	 SHORT $LN5@ImGui_Impl
  00091	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00094	ff 50 10	 call	 QWORD PTR [rax+16]
  00097	48 89 7b 20	 mov	 QWORD PTR [rbx+32], rdi
$LN5@ImGui_Impl:

; 530  :     if (bd->pVB) { bd->pVB->Release(); bd->pVB = NULL; }

  0009b	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0009f	48 85 c9	 test	 rcx, rcx
  000a2	74 0a		 je	 SHORT $LN6@ImGui_Impl
  000a4	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000a7	ff 50 10	 call	 QWORD PTR [rax+16]
  000aa	48 89 7b 18	 mov	 QWORD PTR [rbx+24], rdi
$LN6@ImGui_Impl:

; 531  :     if (bd->pBlendState) { bd->pBlendState->Release(); bd->pBlendState = NULL; }

  000ae	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000b2	48 85 c9	 test	 rcx, rcx
  000b5	74 0a		 je	 SHORT $LN7@ImGui_Impl
  000b7	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000ba	ff 50 10	 call	 QWORD PTR [rax+16]
  000bd	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
$LN7@ImGui_Impl:

; 532  :     if (bd->pDepthStencilState) { bd->pDepthStencilState->Release(); bd->pDepthStencilState = NULL; }

  000c1	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000c5	48 85 c9	 test	 rcx, rcx
  000c8	74 0a		 je	 SHORT $LN8@ImGui_Impl
  000ca	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000cd	ff 50 10	 call	 QWORD PTR [rax+16]
  000d0	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
$LN8@ImGui_Impl:

; 533  :     if (bd->pRasterizerState) { bd->pRasterizerState->Release(); bd->pRasterizerState = NULL; }

  000d4	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  000d8	48 85 c9	 test	 rcx, rcx
  000db	74 0a		 je	 SHORT $LN9@ImGui_Impl
  000dd	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000e0	ff 50 10	 call	 QWORD PTR [rax+16]
  000e3	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
$LN9@ImGui_Impl:

; 534  :     if (bd->pPixelShader) { bd->pPixelShader->Release(); bd->pPixelShader = NULL; }

  000e7	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000eb	48 85 c9	 test	 rcx, rcx
  000ee	74 0a		 je	 SHORT $LN10@ImGui_Impl
  000f0	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000f3	ff 50 10	 call	 QWORD PTR [rax+16]
  000f6	48 89 7b 40	 mov	 QWORD PTR [rbx+64], rdi
$LN10@ImGui_Impl:

; 535  :     if (bd->pVertexConstantBuffer) { bd->pVertexConstantBuffer->Release(); bd->pVertexConstantBuffer = NULL; }

  000fa	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000fe	48 85 c9	 test	 rcx, rcx
  00101	74 0a		 je	 SHORT $LN11@ImGui_Impl
  00103	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00106	ff 50 10	 call	 QWORD PTR [rax+16]
  00109	48 89 7b 38	 mov	 QWORD PTR [rbx+56], rdi
$LN11@ImGui_Impl:

; 536  :     if (bd->pInputLayout) { bd->pInputLayout->Release(); bd->pInputLayout = NULL; }

  0010d	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00111	48 85 c9	 test	 rcx, rcx
  00114	74 0a		 je	 SHORT $LN12@ImGui_Impl
  00116	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00119	ff 50 10	 call	 QWORD PTR [rax+16]
  0011c	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
$LN12@ImGui_Impl:

; 537  :     if (bd->pVertexShader) { bd->pVertexShader->Release(); bd->pVertexShader = NULL; }

  00120	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  00124	48 85 c9	 test	 rcx, rcx
  00127	74 0a		 je	 SHORT $LN13@ImGui_Impl
  00129	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0012c	ff 50 10	 call	 QWORD PTR [rax+16]
  0012f	48 89 7b 28	 mov	 QWORD PTR [rbx+40], rdi
$LN13@ImGui_Impl:

; 538  : }

  00133	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00138	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ENDP	; ImGui_ImplDX11_InvalidateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
device$dead$ = 80
pDXGIDevice$ = 80
device_context$dead$ = 88
pDXGIAdapter$ = 96
pFactory$ = 104
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z PROC ; ImGui_ImplDX11_Init

; 541  : {

$LN28:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00014	48 8b 2d 00 00
	00 00		 mov	 rbp, QWORD PTR ?g_pd3dDeviceContext@@3PEAUID3D11DeviceContext@@EA ; g_pd3dDeviceContext
  0001b	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR ?g_pd3dDevice@@3PEAUID3D11Device@@EA ; g_pd3dDevice
  00022	48 85 c0	 test	 rax, rax
  00025	75 21		 jne	 SHORT $LN16@ImGui_Impl
  00027	41 b8 83 0e 00
	00		 mov	 r8d, 3715		; 00000e83H
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KG@OOKDKDDA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NE@MGLAEJCB@?$AAG?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN16@ImGui_Impl:

; 3716 :     return GImGui->IO;

  00048	48 8d 78 08	 lea	 rdi, QWORD PTR [rax+8]
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 543  :     IM_ASSERT(io.BackendRendererUserData == NULL && "Already initialized a renderer backend!");

  0004c	48 83 bf 90 00
	00 00 00	 cmp	 QWORD PTR [rdi+144], 0
  00054	74 21		 je	 SHORT $LN9@ImGui_Impl
  00056	41 b8 1f 02 00
	00		 mov	 r8d, 543		; 0000021fH
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JK@LNFGNECA@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe@
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN9@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3601 :     if (ImGuiContext* ctx = GImGui)

  00077	48 85 c0	 test	 rax, rax
  0007a	74 06		 je	 SHORT $LN18@ImGui_Impl

; 3602 :         ctx->IO.MetricsActiveAllocations++;

  0007c	ff 80 ec 00 00
	00		 inc	 DWORD PTR [rax+236]
$LN18@ImGui_Impl:

; 1019 : static void* MallocWrapper(size_t size, void* user_data) { IM_UNUSED(user_data); return malloc(size); }

  00082	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 546  :     ImGui_ImplDX11_Data* bd = IM_NEW(ImGui_ImplDX11_Data)();

  0008d	33 c9		 xor	 ecx, ecx
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 1019 : static void* MallocWrapper(size_t size, void* user_data) { IM_UNUSED(user_data); return malloc(size); }

  0008f	48 8b d8	 mov	 rbx, rax
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 546  :     ImGui_ImplDX11_Data* bd = IM_NEW(ImGui_ImplDX11_Data)();

  00092	48 85 c0	 test	 rax, rax
  00095	74 2e		 je	 SHORT $LN10@ImGui_Impl
  00097	0f 57 c0	 xorps	 xmm0, xmm0

; 63   :     ImGui_ImplDX11_Data() { memset(this, 0, sizeof(*this)); VertexBufferSize = 5000; IndexBufferSize = 10000; }

  0009a	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  0009d	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  000a1	0f 11 40 20	 movups	 XMMWORD PTR [rax+32], xmm0
  000a5	0f 11 40 30	 movups	 XMMWORD PTR [rax+48], xmm0
  000a9	0f 11 40 40	 movups	 XMMWORD PTR [rax+64], xmm0
  000ad	0f 11 40 50	 movups	 XMMWORD PTR [rax+80], xmm0
  000b1	0f 11 40 60	 movups	 XMMWORD PTR [rax+96], xmm0
  000b5	c7 40 70 88 13
	00 00		 mov	 DWORD PTR [rax+112], 5000 ; 00001388H
  000bc	c7 40 74 10 27
	00 00		 mov	 DWORD PTR [rax+116], 10000 ; 00002710H

; 546  :     ImGui_ImplDX11_Data* bd = IM_NEW(ImGui_ImplDX11_Data)();

  000c3	eb 03		 jmp	 SHORT $LN11@ImGui_Impl
$LN10@ImGui_Impl:
  000c5	48 8b d9	 mov	 rbx, rcx
$LN11@ImGui_Impl:

; 547  :     io.BackendRendererUserData = (void*)bd;
; 548  :     io.BackendRendererName = "imgui_impl_dx11";
; 549  :     io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset;  // We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.

  000c8	83 4f 04 08	 or	 DWORD PTR [rdi+4], 8
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@OFLFAAJI@imgui_impl_dx11@
  000d3	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax

; 550  : 
; 551  :     // Get factory from device
; 552  :     IDXGIDevice* pDXGIDevice = NULL;
; 553  :     IDXGIAdapter* pDXGIAdapter = NULL;
; 554  :     IDXGIFactory* pFactory = NULL;
; 555  : 
; 556  :     if (device->QueryInterface(IID_PPV_ARGS(&pDXGIDevice)) == S_OK)

  000da	4c 8d 44 24 50	 lea	 r8, QWORD PTR pDXGIDevice$[rsp]
  000df	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
  000ed	48 89 4c 24 50	 mov	 QWORD PTR pDXGIDevice$[rsp], rcx
  000f2	48 89 4c 24 60	 mov	 QWORD PTR pDXGIAdapter$[rsp], rcx
  000f7	48 89 4c 24 68	 mov	 QWORD PTR pFactory$[rsp], rcx
  000fc	48 8b ce	 mov	 rcx, rsi
  000ff	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00102	ff 10		 call	 QWORD PTR [rax]
  00104	85 c0		 test	 eax, eax
  00106	75 46		 jne	 SHORT $LN4@ImGui_Impl

; 557  :         if (pDXGIDevice->GetParent(IID_PPV_ARGS(&pDXGIAdapter)) == S_OK)

  00108	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDXGIDevice$[rsp]
  0010d	4c 8d 44 24 60	 lea	 r8, QWORD PTR pDXGIAdapter$[rsp]
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
  00119	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0011c	ff 50 30	 call	 QWORD PTR [rax+48]
  0011f	85 c0		 test	 eax, eax
  00121	75 2b		 jne	 SHORT $LN4@ImGui_Impl

; 558  :             if (pDXGIAdapter->GetParent(IID_PPV_ARGS(&pFactory)) == S_OK)

  00123	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pDXGIAdapter$[rsp]
  00128	4c 8d 44 24 68	 lea	 r8, QWORD PTR pFactory$[rsp]
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
  00134	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00137	ff 50 30	 call	 QWORD PTR [rax+48]
  0013a	85 c0		 test	 eax, eax
  0013c	75 10		 jne	 SHORT $LN4@ImGui_Impl

; 559  :             {
; 560  :                 bd->pd3dDevice = device;

  0013e	48 89 33	 mov	 QWORD PTR [rbx], rsi

; 561  :                 bd->pd3dDeviceContext = device_context;

  00141	48 89 6b 08	 mov	 QWORD PTR [rbx+8], rbp

; 562  :                 bd->pFactory = pFactory;

  00145	48 8b 44 24 68	 mov	 rax, QWORD PTR pFactory$[rsp]
  0014a	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN4@ImGui_Impl:

; 563  :             }
; 564  :     if (pDXGIDevice) pDXGIDevice->Release();

  0014e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDXGIDevice$[rsp]
  00153	48 85 c9	 test	 rcx, rcx
  00156	74 06		 je	 SHORT $LN5@ImGui_Impl
  00158	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0015b	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@ImGui_Impl:

; 565  :     if (pDXGIAdapter) pDXGIAdapter->Release();

  0015e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pDXGIAdapter$[rsp]
  00163	48 85 c9	 test	 rcx, rcx
  00166	74 06		 je	 SHORT $LN6@ImGui_Impl
  00168	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0016b	ff 50 10	 call	 QWORD PTR [rax+16]
$LN6@ImGui_Impl:

; 566  :     bd->pd3dDevice->AddRef();

  0016e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00171	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00174	ff 50 08	 call	 QWORD PTR [rax+8]

; 567  :     bd->pd3dDeviceContext->AddRef();

  00177	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0017b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0017e	ff 50 08	 call	 QWORD PTR [rax+8]

; 568  : 
; 569  :     return true;

  00181	b0 01		 mov	 al, 1

; 570  : }

  00183	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00187	5f		 pop	 rdi
  00188	5e		 pop	 rsi
  00189	5d		 pop	 rbp
  0018a	5b		 pop	 rbx
  0018b	c3		 ret	 0
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ENDP ; ImGui_ImplDX11_Init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
?ImGui_ImplDX11_Shutdown@@YAXXZ PROC			; ImGui_ImplDX11_Shutdown

; 573  : {

$LN33:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  0000a	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  00011	48 85 db	 test	 rbx, rbx
  00014	74 0e		 je	 SHORT $LN10@ImGui_Impl
  00016	48 8b bb 98 00
	00 00		 mov	 rdi, QWORD PTR [rbx+152]

; 574  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 575  :     IM_ASSERT(bd != NULL && "No renderer backend to shutdown, or already shutdown?");

  0001d	48 85 ff	 test	 rdi, rdi
  00020	75 25		 jne	 SHORT $LN7@ImGui_Impl
  00022	eb 02		 jmp	 SHORT $LN6@ImGui_Impl
$LN10@ImGui_Impl:

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00024	33 ff		 xor	 edi, edi
$LN6@ImGui_Impl:

; 574  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 575  :     IM_ASSERT(bd != NULL && "No renderer backend to shutdown, or already shutdown?");

  00026	41 b8 3f 02 00
	00		 mov	 r8d, 575		; 0000023fH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IG@KNKGIPNF@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN7@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3715 :     IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?");

  00047	48 85 db	 test	 rbx, rbx
  0004a	75 21		 jne	 SHORT $LN19@ImGui_Impl
  0004c	41 b8 83 0e 00
	00		 mov	 r8d, 3715		; 00000e83H
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KG@OOKDKDDA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NE@MGLAEJCB@?$AAG?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
$LN19@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 578  :     ImGui_ImplDX11_InvalidateDeviceObjects();

  0006d	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ; ImGui_ImplDX11_InvalidateDeviceObjects

; 579  :     if (bd->pFactory) { bd->pFactory->Release(); }

  00072	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00076	48 85 c9	 test	 rcx, rcx
  00079	74 06		 je	 SHORT $LN2@ImGui_Impl
  0007b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0007e	ff 50 10	 call	 QWORD PTR [rax+16]
$LN2@ImGui_Impl:

; 580  :     if (bd->pd3dDevice) { bd->pd3dDevice->Release(); }

  00081	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00084	48 85 c9	 test	 rcx, rcx
  00087	74 06		 je	 SHORT $LN3@ImGui_Impl
  00089	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0008c	ff 50 10	 call	 QWORD PTR [rax+16]
$LN3@ImGui_Impl:

; 581  :     if (bd->pd3dDeviceContext) { bd->pd3dDeviceContext->Release(); }

  0008f	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00093	48 85 c9	 test	 rcx, rcx
  00096	74 06		 je	 SHORT $LN4@ImGui_Impl
  00098	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0009b	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@ImGui_Impl:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3610 :         if (ImGuiContext* ctx = GImGui)

  0009e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 582  :     io.BackendRendererName = NULL;

  000a5	48 c7 83 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+136], 0

; 583  :     io.BackendRendererUserData = NULL;

  000b0	48 c7 83 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+152], 0
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3610 :         if (ImGuiContext* ctx = GImGui)

  000bb	48 85 c0	 test	 rax, rax
  000be	74 06		 je	 SHORT $LN25@ImGui_Impl

; 3611 :             ctx->IO.MetricsActiveAllocations--;

  000c0	ff 88 ec 00 00
	00		 dec	 DWORD PTR [rax+236]
$LN25@ImGui_Impl:

; 1020 : static void    FreeWrapper(void* ptr, void* user_data) { IM_UNUSED(user_data); free(ptr); }

  000c6	48 8b cf	 mov	 rcx, rdi
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp

; 585  : }

  000c9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ce	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d2	5f		 pop	 rdi
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 1020 : static void    FreeWrapper(void* ptr, void* user_data) { IM_UNUSED(user_data); free(ptr); }

  000d3	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
?ImGui_ImplDX11_Shutdown@@YAXXZ ENDP			; ImGui_ImplDX11_Shutdown
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui_impl_dx11.cpp
_TEXT	SEGMENT
?ImGui_ImplDX11_NewFrame@@YAXXZ PROC			; ImGui_ImplDX11_NewFrame

; 588  : {

$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 75   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : NULL;

  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  0000d	48 85 db	 test	 rbx, rbx
  00010	74 0c		 je	 SHORT $LN4@ImGui_Impl
  00012	48 8b 9b 98 00
	00 00		 mov	 rbx, QWORD PTR [rbx+152]

; 589  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();
; 590  :     IM_ASSERT(bd != NULL && "Did you call ImGui_ImplDX11_Init()?");

  00019	48 85 db	 test	 rbx, rbx
  0001c	75 1a		 jne	 SHORT $LN5@ImGui_Impl
$LN4@ImGui_Impl:
  0001e	41 b8 4e 02 00
	00		 mov	 r8d, 590		; 0000024eH
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LK@GFIAJLKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@GNNOEIGA@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd@
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
$LN5@ImGui_Impl:

; 591  : 
; 592  :     if (!bd->pFontSampler)

  00038	48 83 7b 48 00	 cmp	 QWORD PTR [rbx+72], 0
  0003d	75 0a		 jne	 SHORT $LN2@ImGui_Impl

; 594  : }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx

; 593  :         ImGui_ImplDX11_CreateDeviceObjects();

  00044	e9 00 00 00 00	 jmp	 ?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ ; ImGui_ImplDX11_CreateDeviceObjects
$LN2@ImGui_Impl:

; 594  : }

  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
?ImGui_ImplDX11_NewFrame@@YAXXZ ENDP			; ImGui_ImplDX11_NewFrame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT

; 1795 :     inline const T& operator[](int i) const { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 63 da	 movsxd	 rbx, edx
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	85 d2		 test	 edx, edx
  00012	78 04		 js	 SHORT $LN3@operator
  00014	3b 19		 cmp	 ebx, DWORD PTR [rcx]
  00016	7c 1a		 jl	 SHORT $LN4@operator
$LN3@operator:
  00018	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KC@GNKKHKIA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAv?$AAi?$AAn?$AA?2?$AAD?$AAo@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
$LN4@operator:
  00032	48 6b c3 38	 imul	 rax, rbx, 56		; 00000038H
  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003b	48 03 47 08	 add	 rax, QWORD PTR [rdi+8]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z
_TEXT	SEGMENT
pp$ = 8
??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIDevice>, COMDAT

; 354  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 355  :         (void)static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 356  :         return reinterpret_cast<void**>(pp);

  00000	48 8b c1	 mov	 rax, rcx

; 357  :     }

  00003	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIDevice>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z
_TEXT	SEGMENT
pp$ = 8
??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIAdapter>, COMDAT

; 354  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 355  :         (void)static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 356  :         return reinterpret_cast<void**>(pp);

  00000	48 8b c1	 mov	 rax, rcx

; 357  :     }

  00003	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIAdapter>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z
_TEXT	SEGMENT
pp$ = 8
??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIFactory>, COMDAT

; 354  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 355  :         (void)static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 356  :         return reinterpret_cast<void**>(pp);

  00000	48 8b c1	 mov	 rax, rcx

; 357  :     }

  00003	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIFactory>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h
;	COMDAT ??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z
_TEXT	SEGMENT
p$ = 8
??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z PROC ; IM_DELETE<ImGui_ImplDX11_Data>, COMDAT

; 1753 : template<typename T> void IM_DELETE(T* p) { if (p) { p->~T(); ImGui::MemFree(p); } }

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 19		 je	 SHORT $LN8@IM_DELETE
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.cpp

; 3610 :         if (ImGuiContext* ctx = GImGui)

  00005	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
  0000c	48 85 c0	 test	 rax, rax
  0000f	74 06		 je	 SHORT $LN6@IM_DELETE

; 3611 :             ctx->IO.MetricsActiveAllocations--;

  00011	ff 88 ec 00 00
	00		 dec	 DWORD PTR [rax+236]
$LN6@IM_DELETE:

; 1020 : static void    FreeWrapper(void* ptr, void* user_data) { IM_UNUSED(user_data); free(ptr); }

  00017	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
$LN8@IM_DELETE:
; File C:\Users\vin\Downloads\ApexIsAssWithEAC-main\ApexIsAssWithEAC-main\Imgui\imgui.h

; 1753 : template<typename T> void IM_DELETE(T* p) { if (p) { p->~T(); ImGui::MemFree(p); } }

  0001e	c3		 ret	 0
??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z ENDP ; IM_DELETE<ImGui_ImplDX11_Data>
_TEXT	ENDS
END
